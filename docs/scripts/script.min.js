var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/// <reference path="../declarations/DataStore/BadgeCase.d.ts" />
/// <reference path="../declarations/party/Category.d.ts"/>
class App {
    static start() {
        if (!App.debug) {
            Object.freeze(GameConstants);
        }
        Preload.load(App.debug).then(() => {
            ko.options.deferUpdates = true;
            console.log(`[${GameConstants.formatDate(new Date())}] %cLoading Game Data..`, 'color:#8e44ad;font-weight:900;');
            // Needs to be loaded first so save data can be updated (specifically "player" data)
            const update = new Update();
            const multiplier = new Multiplier();
            player = Save.load();
            App.game = new Game(update, new Profile(), new Breeding(multiplier), new Pokeballs(), new Wallet(multiplier), new KeyItems(), new BadgeCase(), new OakItems([20, 50, 100], multiplier), new OakItemLoadouts(), new PokemonCategories(), new Party(multiplier), new Gems(), new Underground(), new Farming(multiplier), new LogBook(), new RedeemableCodes(), new Statistics(), new Quests(), new SpecialEvents(), new Discord(), new AchievementTracker(), new Challenges(), new BattleFrontier(), multiplier);
            console.log(`[${GameConstants.formatDate(new Date())}] %cGame loaded`, 'color:#2ecc71;font-weight:900;');
            Notifier.notify({ message: 'Game loaded', type: NotificationConstants.NotificationOption.info });
            console.log(`[${GameConstants.formatDate(new Date())}] %cStarting game..`, 'color:#8e44ad;font-weight:900;');
            GameController.bindToolTips();
            GameController.addKeyListeners();
            PokedexHelper.populateFilters();
            PokedexHelper.updateList();
            App.game.initialize();
            // Fixes custom theme css if Default theme was different from save theme (must be done before bindings)
            document.body.className = 'no-select';
            ko.applyBindings(App.game);
            GameController.applyRouteBindings();
            Preload.hideSplashScreen();
            App.game.start();
        });
    }
}
App.debug = false;
///<reference path="../../../declarations/enums/EvolutionType.d.ts"/>
class Evolution {
    constructor(basePokemon) {
        this.basePokemon = basePokemon;
        this.type = [];
    }
    isSatisfied() {
        // Check that evolution is within reached regions
        return PokemonHelper.calcNativeRegion(this.getEvolvedPokemon()) <= player.highestRegion();
    }
    evolve(notification = false) {
        const evolvedPokemon = this.getEvolvedPokemon();
        // This Pokemon is from a region we haven't reached yet
        if (PokemonHelper.calcNativeRegion(evolvedPokemon) > player.highestRegion()) {
            return false;
        }
        // Notify the player if they haven't already caught the evolution, or notifications are forced
        if (!App.game.party.alreadyCaughtPokemonByName(evolvedPokemon) || notification) {
            Notifier.notify({
                message: `Your ${this.basePokemon} evolved into a ${evolvedPokemon}`,
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.General.new_catch,
                setting: NotificationConstants.NotificationSetting.General.new_catch,
            });
        }
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_STONE);
        App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(evolvedPokemon).id, shiny, true);
        return shiny;
    }
}
function restrictEvoWith(restrictionTest, type = null) {
    return function (Base) {
        return class extends Base {
            constructor(...args) {
                super(...args);
                if (type !== null) {
                    this.type.push(type);
                }
            }
            isSatisfied() {
                return restrictionTest() && super.isSatisfied();
            }
        };
    };
}
///<reference path="Evolution.ts"/>
class StoneEvolution extends Evolution {
    constructor(basePokemon, evolvedPokemon, stone) {
        super(basePokemon);
        this.evolvedPokemon = evolvedPokemon;
        this.stone = stone;
        this.type.push(EvolutionType.Stone);
    }
    getEvolvedPokemon() {
        return this.evolvedPokemon;
    }
}
///<reference path="Evolution.ts"/>
class LevelEvolution extends Evolution {
    constructor(basePokemon, evolvedPokemon, level) {
        super(basePokemon);
        this.evolvedPokemon = evolvedPokemon;
        this.level = level;
        this.type.push(EvolutionType.Level);
    }
    getEvolvedPokemon() {
        return this.evolvedPokemon;
    }
    isSatisfied() {
        return super.isSatisfied()
            // Check high enough level
            && App.game.party.getPokemon(PokemonHelper.getPokemonByName(this.basePokemon).id).level >= this.level;
    }
    evolve() {
        if (this.triggered) {
            return false;
        }
        this.triggered = true;
        // We have already obtained the evolution
        if (App.game.party.alreadyCaughtPokemonByName(this.getEvolvedPokemon())) {
            return false;
        }
        return super.evolve(true);
    }
}
function LocationRestricted(Base) {
    return class extends Base {
        constructor(...args) {
            super(...args);
            this.type.push(EvolutionType.Location);
        }
        isSatisfied() {
            return this.atLocation()
                && super.isSatisfied();
        }
    };
}
/// <reference path="./LocationRestriction.ts" />
function ByDungeon(Base) {
    return class extends Base {
        constructor(...args) {
            const [dungeon, ...rest] = args;
            super(...rest);
            this.dungeon = dungeon;
        }
        atLocation() {
            return App.game.gameState == GameConstants.GameState.dungeon
                && DungeonRunner.dungeon.name == this.dungeon;
        }
    };
}
function DungeonRestricted(Base) {
    return LocationRestricted(ByDungeon(Base));
}
const AnyDungeonRestricted = restrictEvoWith(() => App.game.gameState == GameConstants.GameState.dungeon, EvolutionType.Location);
/// <reference path="./LocationRestriction.ts" />
function ByGym(Base) {
    return class extends Base {
        constructor(...args) {
            const [town, ...rest] = args;
            super(...rest);
            this.town = town;
        }
        atLocation() {
            return App.game.gameState == GameConstants.GameState.gym
                && GymRunner.gymObservable().town == this.town;
        }
    };
}
function GymRestricted(Base) {
    return LocationRestricted(ByGym(Base));
}
const AnyGymRestricted = restrictEvoWith(() => App.game.gameState == GameConstants.GameState.gym, EvolutionType.Location);
function TimeRestricted(start, end, Base) {
    return class extends Base {
        constructor(...args) {
            super(...args);
            this.startHour = start;
            this.endHour = end;
            this.type.push(EvolutionType.Timed);
        }
        isWithinTime() {
            const currentHour = new Date().getHours();
            return this.startHour < this.endHour ?
                // If the start time is before the end time, both need to be true
                currentHour >= this.startHour && currentHour < this.endHour :
                // If the start time is after the end time, only 1 needs to be true
                currentHour >= this.startHour || currentHour < this.endHour;
        }
        isSatisfied() {
            // Check current time within evolution hours
            return this.isWithinTime()
                && super.isSatisfied();
        }
    };
}
function DayTimeRestricted(Base) {
    return TimeRestricted(6, 18, Base);
}
function NightTimeRestricted(Base) {
    return TimeRestricted(18, 6, Base);
}
/// <reference path="../../GameConstants.d.ts" />
function EnvironmentRestricted(Base) {
    const Mixin = class extends Base {
        constructor(...args) {
            const [env, ...rest] = args;
            super(...rest);
            this.environment = env;
            this.type.push(EvolutionType.Environment);
        }
        isSatisfied() {
            return MapHelper.getCurrentEnvironment() == this.environment
                && super.isSatisfied();
        }
    };
    return Mixin;
}
/// <reference path="./StoneEvolution.ts" />
/// <reference path="./LevelEvolution.ts" />
/// <reference path="./DungeonRestriction.ts" />
/// <reference path="./GymRestriction.ts" />
/// <reference path="./TimedRestriction.ts" />
/// <reference path="./EnvironmentRestriction.ts" />
// Used for custom time ranges
function TimeRestrictedBase(Base) {
    return function (start, end, ...rest) {
        const tmpClass = TimeRestricted(start, end, Base);
        return new tmpClass(...rest);
    };
}
// new TimeRestrictedLevelEvolution(start: number, end: number, basePokemon: string, evolvedPokemon: string, level: number)
const TimeRestrictedLevelEvolution = TimeRestrictedBase(LevelEvolution);
// new DayTimedLevelEvolution(basePokemon: string, evolvedPokemon: string, level: number)
const DayTimedLevelEvolution = DayTimeRestricted(LevelEvolution);
// new NightTimedLevelEvolution(basePokemon: string, evolvedPokemon: string, level: number)
const NightTimedLevelEvolution = NightTimeRestricted(LevelEvolution);
// new DayTimedStoneEvolution(basePokemon: string, evolvedPokemon: string, stone: GameConstants.StoneType)
const DayTimedStoneEvolution = DayTimeRestricted(StoneEvolution);
// NightTimedStoneEvolution(basePokemon: string, evolvedPokemon: string, stone: GameConstants.StoneType)
const NightTimedStoneEvolution = NightTimeRestricted(StoneEvolution);
// new DungeonRestrictedLevelEvolution(dungeon: string, basePokemon: string, evolvedPokemon: string, level: number)
const DungeonRestrictedLevelEvolution = DungeonRestricted(LevelEvolution);
// new AnyDungeonLevelEvolution(basePokemon: string, evolvedPokemon: string, level: number)
const AnyDungeonLevelEvolution = AnyDungeonRestricted(LevelEvolution);
// new AnyGymLevelEvolution(basePokemon: string, evolvedPokemon: string, level: number)
const AnyGymLevelEvolution = AnyGymRestricted(LevelEvolution);
// new EnvironmentRestrictedLevelEvolution(environment: Environment, basePokemon: string, evolvedPokemon: string, level: number)
// an Environment is any key of GameConstants.Environments, eg 'Cave' or 'PowerPlant'
const EnvironmentRestrictedLevelEvolution = EnvironmentRestricted(LevelEvolution);
// new EnvironmentDungeonLevelEvolution(environment: Environment, basePokemon: string, evolvedPokemon: string, level: number)
const EnvironmentDungeonLevelEvolution = EnvironmentRestricted(AnyDungeonLevelEvolution);
// new EnvironmentGymLevelEvolution(environment: Environment, basePokemon: string, evolvedPokemon: string, level: number)
const EnvironmentGymLevelEvolution = EnvironmentRestricted(AnyGymLevelEvolution);
// RegionStoneEvolution(region: GameConstants.Region, basePokemon: string, evolvedPokemon: string, stone: GameConstants.StoneType)
const RegionStoneEvolution = RegionRestricted(StoneEvolution);
// new RegionLevelEvolution(region: GameConstants.Region, basePokemon: string, evolvedPokemon: string, level: number)
const RegionLevelEvolution = RegionRestricted(LevelEvolution);
class WeatherRestrictedLevelEvolution extends LevelEvolution {
    constructor(basePokemon, evolvedPokemon, level, weather) {
        super(basePokemon, evolvedPokemon, level);
        this.weather = weather;
        this.type.push(EvolutionType.Other);
    }
    isSatisfied() {
        return super.isSatisfied()
            // Check Weather conditions
            && this.weather.includes(Weather.currentWeather());
    }
}
/// <reference path="../party/evolutions/EvolutionMethods.ts" />
/// <reference path="../party/evolutions/WeatherRestrictedLevelEvolution.ts" />
/// <reference path="../GameConstants.d.ts" />
/// <reference path="../../declarations/weather/WeatherType.d.ts" />
/// <reference path="../../declarations/enums/PokemonType.d.ts" />
/// <reference path="../../declarations/interfaces/BagItem.d.ts" />
/// <reference path="../../declarations/utilities/Rand.d.ts" />
/// <reference path="../../declarations/enums/BerryType.d.ts"/>
const pokemonBabyPrevolutionMap = {};
function createPokemonArray(...args) {
    return args;
}
const pokemonList = createPokemonArray({
    'id': 0,
    'name': 'Ohakadamon',
    'nativeRegion': GameConstants.Region.none,
    'catchRate': 1,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 1,
    'eggCycles': 100,
    'base': {
        'hitpoints': 10,
        'magic': 10,
        'attack': 10,
        'defense': 10,
        'intellect': 10,
        'speed': 10,
    },
}, {
    'id': 1,
    'name': 'Botamon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 16,
    'eggCycles': 5,
    'base': {
        'hitpoints': 20,
        'magic': 19,
        'attack': 24,
        'defense': 32,
        'intellect': 23,
        'speed': 22,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 2,
    'name': 'Punimon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 27,
    'eggCycles': 5,
    'base': {
        'hitpoints': 29,
        'magic': 11,
        'attack': 34,
        'defense': 29,
        'intellect': 11,
        'speed': 26,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 3,
    'name': 'Koromon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 43,
    'eggCycles': 10,
    'base': {
        'hitpoints': 36,
        'magic': 13,
        'attack': 46,
        'defense': 35,
        'intellect': 13,
        'speed': 27,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 4,
    'name': 'Tunomon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.mediumslow,
    'exp': 44,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'magic': 15,
        'attack': 44,
        'defense': 34,
        'intellect': 15,
        'speed': 27,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 5,
    'name': 'Agumon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 80,
    'eggCycles': 15,
    'base': {
        'hitpoints': 45,
        'magic': 20,
        'attack': 68,
        'defense': 45,
        'intellect': 15,
        'speed': 37,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 6,
    'name': 'Betamon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 105,
    'eggCycles': 15,
    'base': {
        'hitpoints': 34,
        'magic': 43,
        'attack': 32,
        'defense': 27,
        'intellect': 48,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 7,
    'name': 'Damemon Cmon',
    'catchRate': 35,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 102,
    'eggCycles': 15,
    'base': {
        'hitpoints': 25,
        'magic': 25,
        'attack': 52,
        'defense': 31,
        'intellect': 49,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 8,
    'name': 'Elecmon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 113,
    'eggCycles': 15,
    'base': {
        'hitpoints': 40,
        'magic': 41,
        'attack': 33,
        'defense': 30,
        'intellect': 30,
        'speed': 37,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 9,
    'name': 'Gabumon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 88,
    'eggCycles': 15,
    'base': {
        'hitpoints': 45,
        'magic': 35,
        'attack': 45,
        'defense': 32,
        'intellect': 30,
        'speed': 38,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 10,
    'name': 'Airdramon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 166,
    'eggCycles': 25,
    'base': {
        'hitpoints': 46,
        'magic': 38,
        'attack': 63,
        'defense': 42,
        'intellect': 47,
        'speed': 69,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 11,
    'name': 'Angemon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 162,
    'eggCycles': 25,
    'base': {
        'hitpoints': 45,
        'magic': 45,
        'attack': 70,
        'defense': 45,
        'intellect': 71,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 12,
    'name': 'Birdramon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 182,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'magic': 60,
        'attack': 45,
        'defense': 35,
        'intellect': 60,
        'speed': 65,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 13,
    'name': 'Devimon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 181,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'magic': 45,
        'attack': 75,
        'defense': 40,
        'intellect': 67,
        'speed': 48,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 14,
    'name': 'Garurumon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 179,
    'eggCycles': 25,
    'base': {
        'hitpoints': 45,
        'magic': 55,
        'attack': 50,
        'defense': 45,
        'intellect': 45,
        'speed': 75,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 15,
    'name': 'Greymon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 164,
    'eggCycles': 25,
    'base': {
        'hitpoints': 65,
        'magic': 35,
        'attack': 85,
        'defense': 60,
        'intellect': 25,
        'speed': 55,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 16,
    'name': 'Kabuterimon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 195,
    'eggCycles': 25,
    'base': {
        'hitpoints': 40,
        'magic': 40,
        'attack': 55,
        'defense': 65,
        'intellect': 63,
        'speed': 42,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 17,
    'name': 'Meramon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 181,
    'eggCycles': 25,
    'base': {
        'hitpoints': 55,
        'magic': 30,
        'attack': 75,
        'defense': 55,
        'intellect': 40,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 18,
    'name': 'Numemon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 174,
    'eggCycles': 25,
    'base': {
        'hitpoints': 75,
        'magic': 46,
        'attack': 40,
        'defense': 75,
        'intellect': 25,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 19,
    'name': 'Seadramon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 165,
    'eggCycles': 25,
    'base': {
        'hitpoints': 55,
        'magic': 60,
        'attack': 25,
        'defense': 50,
        'intellect': 71,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 20,
    'name': 'Tyranomon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 173,
    'eggCycles': 25,
    'base': {
        'hitpoints': 65,
        'magic': 20,
        'attack': 85,
        'defense': 67,
        'intellect': 20,
        'speed': 48,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 21,
    'name': 'Vegimon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 164,
    'eggCycles': 25,
    'base': {
        'hitpoints': 75,
        'magic': 35,
        'attack': 60,
        'defense': 53,
        'intellect': 38,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 22,
    'name': 'Whamon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 172,
    'eggCycles': 25,
    'base': {
        'hitpoints': 105,
        'magic': 49,
        'attack': 70,
        'defense': 70,
        'intellect': 75,
        'speed': 56,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 23,
    'name': 'Yukidarumon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 167,
    'eggCycles': 25,
    'base': {
        'hitpoints': 75,
        'magic': 39,
        'attack': 50,
        'defense': 45,
        'intellect': 50,
        'speed': 46,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 24,
    'name': 'Mamemon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 242,
    'eggCycles': 40,
    'base': {
        'hitpoints': 85,
        'magic': 60,
        'attack': 67,
        'defense': 90,
        'intellect': 40,
        'speed': 58,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 25,
    'name': 'Metal Greymon Virus',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 205,
    'eggCycles': 40,
    'base': {
        'hitpoints': 109,
        'magic': 45,
        'attack': 110,
        'defense': 85,
        'intellect': 30,
        'speed': 61,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 26,
    'name': 'Metal Mamemon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 226,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 50,
        'attack': 70,
        'defense': 90,
        'intellect': 75,
        'speed': 64,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 27,
    'name': 'Monzaemon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 204,
    'eggCycles': 40,
    'base': {
        'hitpoints': 95,
        'magic': 49,
        'attack': 75,
        'defense': 65,
        'intellect': 70,
        'speed': 56,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 28,
    'name': 'Skull Greymon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 236,
    'eggCycles': 40,
    'base': {
        'hitpoints': 65,
        'magic': 40,
        'attack': 140,
        'defense': 95,
        'intellect': 30,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 29,
    'name': 'Vademon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 226,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 107,
        'attack': 25,
        'defense': 45,
        'intellect': 110,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 30,
    'name': 'Deathmon Cmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fast,
    'exp': 152,
    'eggCycles': 20,
    'base': {
        'hitpoints': 50,
        'magic': 100,
        'attack': 50,
        'defense': 50,
        'intellect': 50,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 31,
    'name': 'Bubbmon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 30,
    'eggCycles': 5,
    'base': {
        'hitpoints': 32,
        'magic': 18,
        'attack': 23,
        'defense': 23,
        'intellect': 20,
        'speed': 24,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 32,
    'name': 'Pitchmon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 24,
    'eggCycles': 5,
    'base': {
        'hitpoints': 21,
        'magic': 27,
        'attack': 15,
        'defense': 22,
        'intellect': 34,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 33,
    'name': 'Poyomon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 12,
    'eggCycles': 5,
    'base': {
        'hitpoints': 15,
        'magic': 35,
        'attack': 15,
        'defense': 15,
        'intellect': 32,
        'speed': 28,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 34,
    'name': 'Yuramon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 12,
    'eggCycles': 5,
    'base': {
        'hitpoints': 30,
        'magic': 20,
        'attack': 29,
        'defense': 25,
        'intellect': 25,
        'speed': 11,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 35,
    'name': 'Zurumon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 12,
    'eggCycles': 5,
    'base': {
        'hitpoints': 25,
        'magic': 37,
        'attack': 12,
        'defense': 32,
        'intellect': 22,
        'speed': 11,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 36,
    'name': 'Mochimon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumslow,
    'exp': 61,
    'eggCycles': 10,
    'base': {
        'hitpoints': 40,
        'magic': 19,
        'attack': 29,
        'defense': 28,
        'intellect': 29,
        'speed': 25,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 37,
    'name': 'Pagumon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.mediumslow,
    'exp': 46,
    'eggCycles': 10,
    'base': {
        'hitpoints': 16,
        'magic': 40,
        'attack': 21,
        'defense': 19,
        'intellect': 39,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 38,
    'name': 'Pukamon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 51,
    'eggCycles': 10,
    'base': {
        'hitpoints': 30,
        'magic': 35,
        'attack': 15,
        'defense': 25,
        'intellect': 40,
        'speed': 25,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 39,
    'name': 'Tanemon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 10,
    'base': {
        'hitpoints': 40,
        'magic': 20,
        'attack': 32,
        'defense': 29,
        'intellect': 24,
        'speed': 25,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 40,
    'name': 'Tokomon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumslow,
    'exp': 49,
    'eggCycles': 10,
    'base': {
        'hitpoints': 20,
        'magic': 33,
        'attack': 27,
        'defense': 25,
        'intellect': 25,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 41,
    'name': 'Ganimon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 115,
    'eggCycles': 15,
    'base': {
        'hitpoints': 16,
        'magic': 49,
        'attack': 19,
        'defense': 56,
        'intellect': 32,
        'speed': 42,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 42,
    'name': 'Gazimon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 108,
    'eggCycles': 15,
    'base': {
        'hitpoints': 39,
        'magic': 27,
        'attack': 60,
        'defense': 20,
        'intellect': 20,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 43,
    'name': 'Gizamon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 106,
    'eggCycles': 15,
    'base': {
        'hitpoints': 57,
        'magic': 25,
        'attack': 34,
        'defense': 46,
        'intellect': 19,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 44,
    'name': 'Gomamon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 87,
    'eggCycles': 15,
    'base': {
        'hitpoints': 53,
        'magic': 25,
        'attack': 40,
        'defense': 40,
        'intellect': 32,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 45,
    'name': 'Gottsumon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 103,
    'eggCycles': 15,
    'base': {
        'hitpoints': 30,
        'magic': 30,
        'attack': 40,
        'defense': 55,
        'intellect': 37,
        'speed': 33,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 46,
    'name': 'Kunemon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 89,
    'eggCycles': 15,
    'base': {
        'hitpoints': 28,
        'magic': 49,
        'attack': 25,
        'defense': 37,
        'intellect': 26,
        'speed': 52,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 47,
    'name': 'Otamamon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 88,
    'eggCycles': 15,
    'base': {
        'hitpoints': 40,
        'magic': 47,
        'attack': 13,
        'defense': 26,
        'intellect': 50,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 48,
    'name': 'Palmon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 100,
    'eggCycles': 15,
    'base': {
        'hitpoints': 51,
        'magic': 21,
        'attack': 50,
        'defense': 31,
        'intellect': 37,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 49,
    'name': 'Patamon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 97,
    'eggCycles': 15,
    'evolutions': [
        new StoneEvolution('Patamon', 'Baromon', GameConstants.StoneType.Courage_Digimental),
        new StoneEvolution('Patamon', 'Stegomon', GameConstants.StoneType.Friendship_Digimental),
        new StoneEvolution('Patamon', 'Pipismon', GameConstants.StoneType.Love_Digimental),
        new StoneEvolution('Patamon', 'Ponchomon', GameConstants.StoneType.Purity_Digimental),
        new StoneEvolution('Patamon', 'Mothmon', GameConstants.StoneType.Knowledge_Digimental),
        new StoneEvolution('Patamon', 'Mantaraymon', GameConstants.StoneType.Sincerity_Digimental),
        new StoneEvolution('Patamon', 'Pegasmon', GameConstants.StoneType.Hope_Digimental),
        new StoneEvolution('Patamon', 'Manbomon', GameConstants.StoneType.Light_Digimental),
        new StoneEvolution('Patamon', 'Prairiemon', GameConstants.StoneType.Kindness_Digimental),
        new StoneEvolution('Patamon', 'Rhinomon', GameConstants.StoneType.Miracles_Digimental),
        new StoneEvolution('Patamon', 'Rhinomon X-Antibody', GameConstants.StoneType.Fate_Digimental),
    ],
    'base': {
        'hitpoints': 35,
        'magic': 40,
        'attack': 30,
        'defense': 43,
        'intellect': 25,
        'speed': 37,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 50,
    'name': 'Piyomon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 115,
    'eggCycles': 15,
    'base': {
        'hitpoints': 30,
        'magic': 40,
        'attack': 36,
        'defense': 30,
        'intellect': 36,
        'speed': 38,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 51,
    'name': 'Shakomon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 111,
    'eggCycles': 15,
    'base': {
        'hitpoints': 34,
        'magic': 42,
        'attack': 14,
        'defense': 37,
        'intellect': 49,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 52,
    'name': 'Tentomon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 96,
    'eggCycles': 15,
    'base': {
        'hitpoints': 26,
        'magic': 30,
        'attack': 33,
        'defense': 47,
        'intellect': 40,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 53,
    'name': 'Tyumon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 103,
    'eggCycles': 15,
    'base': {
        'hitpoints': 26,
        'magic': 38,
        'attack': 38,
        'defense': 24,
        'intellect': 36,
        'speed': 48,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 54,
    'name': 'Bakemon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 199,
    'eggCycles': 25,
    'base': {
        'hitpoints': 20,
        'magic': 85,
        'attack': 25,
        'defense': 30,
        'intellect': 75,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 55,
    'name': 'Centalmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 175,
    'eggCycles': 25,
    'base': {
        'hitpoints': 67,
        'magic': 41,
        'attack': 53,
        'defense': 25,
        'intellect': 85,
        'speed': 49,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 56,
    'name': 'Cockatrimon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 176,
    'eggCycles': 25,
    'base': {
        'hitpoints': 30,
        'magic': 59,
        'attack': 60,
        'defense': 63,
        'intellect': 40,
        'speed': 72,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 57,
    'name': 'Coelamon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 188,
    'eggCycles': 25,
    'base': {
        'hitpoints': 80,
        'magic': 30,
        'attack': 55,
        'defense': 61,
        'intellect': 32,
        'speed': 47,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 58,
    'name': 'Cyclomon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 173,
    'eggCycles': 25,
    'base': {
        'hitpoints': 45,
        'magic': 35,
        'attack': 78,
        'defense': 65,
        'intellect': 40,
        'speed': 42,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 59,
    'name': 'Dark Tyranomon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 173,
    'eggCycles': 25,
    'base': {
        'hitpoints': 20,
        'magic': 69,
        'attack': 30,
        'defense': 103,
        'intellect': 50,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 60,
    'name': 'Deltamon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 193,
    'eggCycles': 25,
    'base': {
        'hitpoints': 60,
        'magic': 30,
        'attack': 30,
        'defense': 79,
        'intellect': 78,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 61,
    'name': 'Devidramon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 179,
    'eggCycles': 25,
    'base': {
        'hitpoints': 41,
        'magic': 34,
        'attack': 27,
        'defense': 64,
        'intellect': 71,
        'speed': 75,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 62,
    'name': 'Drimogemon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 170,
    'eggCycles': 25,
    'base': {
        'hitpoints': 101,
        'magic': 26,
        'attack': 28,
        'defense': 47,
        'intellect': 79,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 63,
    'name': 'Ebidramon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 162,
    'eggCycles': 25,
    'base': {
        'hitpoints': 54,
        'magic': 50,
        'attack': 50,
        'defense': 94,
        'intellect': 28,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 64,
    'name': 'Evilmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 167,
    'eggCycles': 25,
    'base': {
        'hitpoints': 37,
        'magic': 71,
        'attack': 46,
        'defense': 38,
        'intellect': 58,
        'speed': 63,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 65,
    'name': 'Flymon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 170,
    'eggCycles': 25,
    'base': {
        'hitpoints': 40,
        'magic': 40,
        'attack': 40,
        'defense': 45,
        'intellect': 47,
        'speed': 93,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 66,
    'name': 'Gekomon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 180,
    'eggCycles': 25,
    'base': {
        'hitpoints': 60,
        'magic': 65,
        'attack': 29,
        'defense': 40,
        'intellect': 65,
        'speed': 46,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 67,
    'name': 'Gesomon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 161,
    'eggCycles': 25,
    'base': {
        'hitpoints': 71,
        'magic': 52,
        'attack': 55,
        'defense': 22,
        'intellect': 65,
        'speed': 57,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 68,
    'name': 'Gokimon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 190,
    'eggCycles': 25,
    'base': {
        'hitpoints': 44,
        'magic': 43,
        'attack': 40,
        'defense': 59,
        'intellect': 64,
        'speed': 71,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 69,
    'name': 'Gorimon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 188,
    'eggCycles': 25,
    'base': {
        'hitpoints': 35,
        'magic': 63,
        'attack': 52,
        'defense': 23,
        'intellect': 74,
        'speed': 72,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 70,
    'name': 'Ikkakumon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 186,
    'eggCycles': 25,
    'base': {
        'hitpoints': 70,
        'magic': 40,
        'attack': 65,
        'defense': 49,
        'intellect': 45,
        'speed': 46,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 71,
    'name': 'Kuwagamon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 176,
    'eggCycles': 25,
    'base': {
        'hitpoints': 60,
        'magic': 30,
        'attack': 90,
        'defense': 55,
        'intellect': 20,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 72,
    'name': 'Leomon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 191,
    'eggCycles': 25,
    'base': {
        'hitpoints': 60,
        'magic': 30,
        'attack': 80,
        'defense': 65,
        'intellect': 32,
        'speed': 48,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 73,
    'name': 'Mechanorimon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 187,
    'eggCycles': 25,
    'base': {
        'hitpoints': 55,
        'magic': 40,
        'attack': 35,
        'defense': 85,
        'intellect': 51,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 74,
    'name': 'Minotaurmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 180,
    'eggCycles': 25,
    'base': {
        'hitpoints': 66,
        'magic': 43,
        'attack': 66,
        'defense': 41,
        'intellect': 62,
        'speed': 36,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 75,
    'name': 'Mojyamon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 179,
    'eggCycles': 25,
    'base': {
        'hitpoints': 87,
        'magic': 56,
        'attack': 40,
        'defense': 32,
        'intellect': 49,
        'speed': 61,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 76,
    'name': 'Monochromon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 192,
    'eggCycles': 25,
    'base': {
        'hitpoints': 45,
        'magic': 37,
        'attack': 72,
        'defense': 70,
        'intellect': 38,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 77,
    'name': 'Nanimon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 169,
    'eggCycles': 25,
    'base': {
        'hitpoints': 58,
        'magic': 35,
        'attack': 55,
        'defense': 70,
        'intellect': 45,
        'speed': 42,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 78,
    'name': 'Octmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 185,
    'eggCycles': 25,
    'base': {
        'hitpoints': 34,
        'magic': 77,
        'attack': 29,
        'defense': 33,
        'intellect': 90,
        'speed': 47,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 79,
    'name': 'Orgemon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 191,
    'eggCycles': 25,
    'base': {
        'hitpoints': 65,
        'magic': 25,
        'attack': 92,
        'defense': 60,
        'intellect': 25,
        'speed': 48,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 80,
    'name': 'Raremon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 183,
    'eggCycles': 25,
    'base': {
        'hitpoints': 89,
        'magic': 30,
        'attack': 56,
        'defense': 51,
        'intellect': 39,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 81,
    'name': 'Rukamon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 193,
    'eggCycles': 25,
    'base': {
        'hitpoints': 40,
        'magic': 43,
        'attack': 53,
        'defense': 21,
        'intellect': 99,
        'speed': 66,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 82,
    'name': 'Scumon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 166,
    'eggCycles': 25,
    'base': {
        'hitpoints': 80,
        'magic': 45,
        'attack': 45,
        'defense': 70,
        'intellect': 25,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 83,
    'name': 'Shellmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 169,
    'eggCycles': 25,
    'base': {
        'hitpoints': 25,
        'magic': 53,
        'attack': 72,
        'defense': 80,
        'intellect': 34,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 84,
    'name': 'Starmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 171,
    'eggCycles': 25,
    'base': {
        'hitpoints': 55,
        'magic': 45,
        'attack': 55,
        'defense': 60,
        'intellect': 42,
        'speed': 48,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 85,
    'name': 'Tailmon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 187,
    'eggCycles': 25,
    'base': {
        'hitpoints': 25,
        'magic': 80,
        'attack': 30,
        'defense': 35,
        'intellect': 80,
        'speed': 65,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 86,
    'name': 'Tortamon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 177,
    'eggCycles': 25,
    'base': {
        'hitpoints': 70,
        'magic': 26,
        'attack': 41,
        'defense': 105,
        'intellect': 50,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 87,
    'name': 'Tuskmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 165,
    'eggCycles': 25,
    'base': {
        'hitpoints': 72,
        'magic': 30,
        'attack': 42,
        'defense': 39,
        'intellect': 56,
        'speed': 68,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 88,
    'name': 'Unimon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 196,
    'eggCycles': 25,
    'base': {
        'hitpoints': 40,
        'magic': 60,
        'attack': 45,
        'defense': 35,
        'intellect': 65,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 89,
    'name': 'V-dramon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 198,
    'eggCycles': 25,
    'base': {
        'hitpoints': 60,
        'magic': 45,
        'attack': 75,
        'defense': 55,
        'intellect': 25,
        'speed': 65,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 90,
    'name': 'Andromon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 210,
    'eggCycles': 40,
    'base': {
        'hitpoints': 55,
        'magic': 45,
        'attack': 80,
        'defense': 94,
        'intellect': 80,
        'speed': 56,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 91,
    'name': 'Angewomon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 218,
    'eggCycles': 40,
    'base': {
        'hitpoints': 50,
        'magic': 100,
        'attack': 30,
        'defense': 50,
        'intellect': 125,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 92,
    'name': 'Anomalocarimon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 204,
    'eggCycles': 40,
    'base': {
        'hitpoints': 104,
        'magic': 25,
        'attack': 99,
        'defense': 31,
        'intellect': 90,
        'speed': 78,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 93,
    'name': 'Atlur Kabuterimon Blue',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 223,
    'eggCycles': 40,
    'base': {
        'hitpoints': 135,
        'magic': 40,
        'attack': 51,
        'defense': 70,
        'intellect': 20,
        'speed': 87,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 94,
    'name': 'Dagomon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 250,
    'eggCycles': 40,
    'base': {
        'hitpoints': 70,
        'magic': 76,
        'attack': 63,
        'defense': 53,
        'intellect': 98,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 95,
    'name': 'Digitamamon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 251,
    'eggCycles': 40,
    'base': {
        'hitpoints': 75,
        'magic': 45,
        'attack': 75,
        'defense': 95,
        'intellect': 62,
        'speed': 58,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 96,
    'name': 'Etemon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 227,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 80,
        'attack': 55,
        'defense': 70,
        'intellect': 80,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 97,
    'name': 'Ex-Tyranomon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 238,
    'eggCycles': 40,
    'base': {
        'hitpoints': 78,
        'magic': 37,
        'attack': 120,
        'defense': 90,
        'intellect': 33,
        'speed': 75,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 98,
    'name': 'Giromon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 250,
    'eggCycles': 40,
    'base': {
        'hitpoints': 81,
        'magic': 61,
        'attack': 90,
        'defense': 40,
        'intellect': 36,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 99,
    'name': 'Holy Angemon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 231,
    'eggCycles': 40,
    'base': {
        'hitpoints': 65,
        'magic': 85,
        'attack': 59,
        'defense': 70,
        'intellect': 100,
        'speed': 61,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 100,
    'name': 'Jyagamon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 214,
    'eggCycles': 40,
    'base': {
        'hitpoints': 94,
        'magic': 55,
        'attack': 82,
        'defense': 100,
        'intellect': 50,
        'speed': 28,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 101,
    'name': 'Lady Devimon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 206,
    'eggCycles': 40,
    'base': {
        'hitpoints': 50,
        'magic': 100,
        'attack': 60,
        'defense': 50,
        'intellect': 95,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 102,
    'name': 'Mammon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 207,
    'eggCycles': 40,
    'base': {
        'hitpoints': 67,
        'magic': 29,
        'attack': 50,
        'defense': 119,
        'intellect': 115,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 103,
    'name': 'Marin Devimon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 250,
    'eggCycles': 40,
    'base': {
        'hitpoints': 77,
        'magic': 26,
        'attack': 74,
        'defense': 93,
        'intellect': 94,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 104,
    'name': 'Mega Seadramon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 253,
    'eggCycles': 40,
    'base': {
        'hitpoints': 80,
        'magic': 80,
        'attack': 47,
        'defense': 65,
        'intellect': 95,
        'speed': 58,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 105,
    'name': 'Megadramon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 226,
    'eggCycles': 40,
    'base': {
        'hitpoints': 85,
        'magic': 40,
        'attack': 95,
        'defense': 90,
        'intellect': 30,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 106,
    'name': 'Metal Tyranomon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 251,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 55,
        'attack': 77,
        'defense': 115,
        'intellect': 65,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 107,
    'name': 'Nanomon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 212,
    'eggCycles': 40,
    'base': {
        'hitpoints': 65,
        'magic': 75,
        'attack': 35,
        'defense': 65,
        'intellect': 112,
        'speed': 58,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 108,
    'name': 'Ookuwamon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 259,
    'eggCycles': 40,
    'base': {
        'hitpoints': 75,
        'magic': 35,
        'attack': 95,
        'defense': 100,
        'intellect': 35,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 109,
    'name': 'Piccolomon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 237,
    'eggCycles': 40,
    'base': {
        'hitpoints': 55,
        'magic': 70,
        'attack': 55,
        'defense': 55,
        'intellect': 85,
        'speed': 90,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 110,
    'name': 'Tonosama Gekomon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 211,
    'eggCycles': 40,
    'base': {
        'hitpoints': 135,
        'magic': 52,
        'attack': 60,
        'defense': 60,
        'intellect': 50,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 111,
    'name': 'Triceramon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 203,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 50,
        'attack': 85,
        'defense': 110,
        'intellect': 55,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 112,
    'name': 'Whamon Perfect',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 211,
    'eggCycles': 40,
    'base': {
        'hitpoints': 124,
        'magic': 39,
        'attack': 32,
        'defense': 107,
        'intellect': 80,
        'speed': 68,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 113,
    'name': 'Zudomon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 229,
    'eggCycles': 40,
    'base': {
        'hitpoints': 100,
        'magic': 40,
        'attack': 97,
        'defense': 75,
        'intellect': 55,
        'speed': 58,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 114,
    'name': 'Herakle Kabuterimon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 288,
    'eggCycles': 95,
    'base': {
        'hitpoints': 105,
        'magic': 75,
        'attack': 70,
        'defense': 105,
        'intellect': 80,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 115,
    'name': 'Holydramon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 299,
    'eggCycles': 95,
    'base': {
        'hitpoints': 135,
        'magic': 110,
        'attack': 50,
        'defense': 75,
        'intellect': 120,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 116,
    'name': 'Marin Angemon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 276,
    'eggCycles': 95,
    'base': {
        'hitpoints': 80,
        'magic': 135,
        'attack': 25,
        'defense': 45,
        'intellect': 140,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 117,
    'name': 'Metal Etemon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 267,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 75,
        'attack': 90,
        'defense': 125,
        'intellect': 45,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 118,
    'name': 'Metal Seadramon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 278,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 90,
        'attack': 60,
        'defense': 90,
        'intellect': 105,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 119,
    'name': 'Pukumon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 267,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 74,
        'attack': 111,
        'defense': 113,
        'intellect': 90,
        'speed': 112,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 120,
    'name': 'Saber Leomon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 299,
    'eggCycles': 95,
    'base': {
        'hitpoints': 110,
        'magic': 55,
        'attack': 165,
        'defense': 60,
        'intellect': 45,
        'speed': 105,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 121,
    'name': 'Holy Angemon Priest Mode',
    'catchRate': 20,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 141,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'magic': 85,
        'attack': 59,
        'defense': 90,
        'intellect': 100,
        'speed': 61,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 122,
    'name': 'Choromon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 11,
    'eggCycles': 5,
    'base': {
        'hitpoints': 17,
        'magic': 31,
        'attack': 12,
        'defense': 33,
        'intellect': 16,
        'speed': 31,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 123,
    'name': 'Mokumon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 34,
    'eggCycles': 5,
    'base': {
        'hitpoints': 27,
        'magic': 23,
        'attack': 33,
        'defense': 18,
        'intellect': 18,
        'speed': 21,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 124,
    'name': 'Nyokimon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 14,
    'eggCycles': 5,
    'base': {
        'hitpoints': 34,
        'magic': 15,
        'attack': 15,
        'defense': 30,
        'intellect': 16,
        'speed': 29,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 125,
    'name': 'Yukimi Botamon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 33,
    'eggCycles': 5,
    'base': {
        'hitpoints': 23,
        'magic': 28,
        'attack': 19,
        'defense': 25,
        'intellect': 23,
        'speed': 22,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 126,
    'name': 'Caprimon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.mediumslow,
    'exp': 73,
    'eggCycles': 10,
    'base': {
        'hitpoints': 24,
        'magic': 29,
        'attack': 29,
        'defense': 30,
        'intellect': 29,
        'speed': 29,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 127,
    'name': 'Nyaromon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.mediumslow,
    'exp': 74,
    'eggCycles': 10,
    'base': {
        'hitpoints': 15,
        'magic': 44,
        'attack': 15,
        'defense': 20,
        'intellect': 40,
        'speed': 36,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 128,
    'name': 'Peti Meramon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 10,
    'base': {
        'hitpoints': 17,
        'magic': 18,
        'attack': 37,
        'defense': 35,
        'intellect': 30,
        'speed': 33,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 129,
    'name': 'Pyocomon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 10,
    'base': {
        'hitpoints': 41,
        'magic': 20,
        'attack': 29,
        'defense': 29,
        'intellect': 26,
        'speed': 25,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 130,
    'name': 'Alraumon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 89,
    'eggCycles': 15,
    'base': {
        'hitpoints': 69,
        'magic': 16,
        'attack': 37,
        'defense': 48,
        'intellect': 20,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 131,
    'name': 'Bakumon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 83,
    'eggCycles': 15,
    'base': {
        'hitpoints': 19,
        'magic': 43,
        'attack': 22,
        'defense': 56,
        'intellect': 55,
        'speed': 23,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 132,
    'name': 'Candmon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 96,
    'eggCycles': 15,
    'base': {
        'hitpoints': 48,
        'magic': 65,
        'attack': 28,
        'defense': 16,
        'intellect': 24,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 133,
    'name': 'Clear Agumon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 111,
    'eggCycles': 15,
    'base': {
        'hitpoints': 30,
        'magic': 69,
        'attack': 20,
        'defense': 62,
        'intellect': 19,
        'speed': 22,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 134,
    'name': 'Dokunemon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 103,
    'eggCycles': 15,
    'base': {
        'hitpoints': 34,
        'magic': 41,
        'attack': 27,
        'defense': 60,
        'intellect': 21,
        'speed': 33,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 135,
    'name': 'Floramon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 83,
    'eggCycles': 15,
    'base': {
        'hitpoints': 20,
        'magic': 55,
        'attack': 23,
        'defense': 21,
        'intellect': 65,
        'speed': 45,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 136,
    'name': 'Goburimon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 99,
    'eggCycles': 15,
    'base': {
        'hitpoints': 47,
        'magic': 12,
        'attack': 52,
        'defense': 12,
        'intellect': 52,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 137,
    'name': 'Hagurumon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 101,
    'eggCycles': 15,
    'base': {
        'hitpoints': 46,
        'magic': 38,
        'attack': 22,
        'defense': 25,
        'intellect': 47,
        'speed': 32,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 138,
    'name': 'Kokuwamon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 114,
    'eggCycles': 15,
    'base': {
        'hitpoints': 55,
        'magic': 59,
        'attack': 29,
        'defense': 16,
        'intellect': 31,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 139,
    'name': 'Modoki Betamon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 92,
    'eggCycles': 15,
    'base': {
        'hitpoints': 32,
        'magic': 28,
        'attack': 40,
        'defense': 25,
        'intellect': 25,
        'speed': 69,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 140,
    'name': 'Muchomon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 88,
    'eggCycles': 15,
    'base': {
        'hitpoints': 68,
        'magic': 20,
        'attack': 21,
        'defense': 30,
        'intellect': 24,
        'speed': 49,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 141,
    'name': 'Mushmon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 109,
    'eggCycles': 15,
    'base': {
        'hitpoints': 48,
        'magic': 20,
        'attack': 43,
        'defense': 35,
        'intellect': 30,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 142,
    'name': 'Penmon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 90,
    'eggCycles': 15,
    'base': {
        'hitpoints': 24,
        'magic': 52,
        'attack': 24,
        'defense': 44,
        'intellect': 64,
        'speed': 22,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 143,
    'name': 'Pico Devimon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 84,
    'eggCycles': 15,
    'base': {
        'hitpoints': 21,
        'magic': 34,
        'attack': 40,
        'defense': 27,
        'intellect': 40,
        'speed': 48,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 144,
    'name': 'Plotmon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.mediumfast,
    'exp': 86,
    'eggCycles': 15,
    'evolutions': [
        new StoneEvolution('Plotmon', 'Lynxmon', GameConstants.StoneType.Courage_Digimental),
        new StoneEvolution('Plotmon', 'Bitmon', GameConstants.StoneType.Friendship_Digimental),
        new StoneEvolution('Plotmon', 'Swanmon', GameConstants.StoneType.Love_Digimental),
        new StoneEvolution('Plotmon', 'Kabukimon', GameConstants.StoneType.Purity_Digimental),
        new StoneEvolution('Plotmon', 'Butterflamon', GameConstants.StoneType.Knowledge_Digimental),
        new StoneEvolution('Plotmon', 'Tylomon', GameConstants.StoneType.Sincerity_Digimental),
        new StoneEvolution('Plotmon', 'Goatmon', GameConstants.StoneType.Hope_Digimental),
        new StoneEvolution('Plotmon', 'Nefertimon', GameConstants.StoneType.Light_Digimental),
        new StoneEvolution('Plotmon', 'Opossummon', GameConstants.StoneType.Kindness_Digimental),
        new StoneEvolution('Plotmon', 'Maildramon', GameConstants.StoneType.Miracles_Digimental),
    ],
    'base': {
        'hitpoints': 15,
        'magic': 55,
        'attack': 20,
        'defense': 25,
        'intellect': 56,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 145,
    'name': 'Psychemon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 96,
    'eggCycles': 15,
    'base': {
        'hitpoints': 34,
        'magic': 65,
        'attack': 51,
        'defense': 33,
        'intellect': 22,
        'speed': 22,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 146,
    'name': 'Shamamon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 89,
    'eggCycles': 15,
    'base': {
        'hitpoints': 17,
        'magic': 30,
        'attack': 30,
        'defense': 22,
        'intellect': 46,
        'speed': 66,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 147,
    'name': 'Snow Goburimon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 15,
    'base': {
        'hitpoints': 64,
        'magic': 53,
        'attack': 30,
        'defense': 21,
        'intellect': 45,
        'speed': 16,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 148,
    'name': 'Toy Agumon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 111,
    'eggCycles': 15,
    'base': {
        'hitpoints': 48,
        'magic': 34,
        'attack': 28,
        'defense': 49,
        'intellect': 19,
        'speed': 32,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 149,
    'name': 'Tukaimon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 85,
    'eggCycles': 15,
    'base': {
        'hitpoints': 20,
        'magic': 53,
        'attack': 34,
        'defense': 38,
        'intellect': 41,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 150,
    'name': 'Yuki Agumon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 120,
    'eggCycles': 15,
    'base': {
        'hitpoints': 59,
        'magic': 36,
        'attack': 19,
        'defense': 41,
        'intellect': 21,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 151,
    'name': 'Akatorimon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 189,
    'eggCycles': 25,
    'base': {
        'hitpoints': 68,
        'magic': 76,
        'attack': 29,
        'defense': 24,
        'intellect': 95,
        'speed': 24,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 152,
    'name': 'Clockmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 176,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'magic': 60,
        'attack': 25,
        'defense': 52,
        'intellect': 70,
        'speed': 48,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 153,
    'name': 'Dark Lizamon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 186,
    'eggCycles': 25,
    'base': {
        'hitpoints': 22,
        'magic': 94,
        'attack': 65,
        'defense': 38,
        'intellect': 22,
        'speed': 69,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 154,
    'name': 'Dokugumon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 186,
    'eggCycles': 25,
    'base': {
        'hitpoints': 49,
        'magic': 51,
        'attack': 38,
        'defense': 78,
        'intellect': 37,
        'speed': 56,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 155,
    'name': 'Flare Lizarmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 176,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'magic': 56,
        'attack': 90,
        'defense': 31,
        'intellect': 52,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 156,
    'name': 'Fugamon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 180,
    'eggCycles': 25,
    'base': {
        'hitpoints': 82,
        'magic': 41,
        'attack': 74,
        'defense': 22,
        'intellect': 23,
        'speed': 73,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 157,
    'name': 'Geremon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 195,
    'eggCycles': 25,
    'base': {
        'hitpoints': 75,
        'magic': 46,
        'attack': 60,
        'defense': 65,
        'intellect': 20,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 158,
    'name': 'Golemon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 198,
    'eggCycles': 25,
    'base': {
        'hitpoints': 85,
        'magic': 40,
        'attack': 58,
        'defense': 74,
        'intellect': 23,
        'speed': 25,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 159,
    'name': 'Golemon PS',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 160,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'magic': 24,
        'attack': 39,
        'defense': 102,
        'intellect': 49,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 160,
    'name': 'Guardromon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 182,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'magic': 35,
        'attack': 55,
        'defense': 75,
        'intellect': 50,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 161,
    'name': 'Gururumon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 187,
    'eggCycles': 25,
    'base': {
        'hitpoints': 22,
        'magic': 103,
        'attack': 82,
        'defense': 24,
        'intellect': 65,
        'speed': 27,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 162,
    'name': 'Hanumon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 198,
    'eggCycles': 25,
    'base': {
        'hitpoints': 35,
        'magic': 56,
        'attack': 47,
        'defense': 33,
        'intellect': 33,
        'speed': 104,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 163,
    'name': 'Hyougamon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 185,
    'eggCycles': 25,
    'base': {
        'hitpoints': 30,
        'magic': 93,
        'attack': 43,
        'defense': 25,
        'intellect': 62,
        'speed': 61,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 164,
    'name': 'Ice Devimon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 190,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'magic': 45,
        'attack': 82,
        'defense': 45,
        'intellect': 60,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 165,
    'name': 'Icemon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 164,
    'eggCycles': 25,
    'base': {
        'hitpoints': 45,
        'magic': 38,
        'attack': 55,
        'defense': 69,
        'intellect': 53,
        'speed': 45,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 166,
    'name': 'Igamon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 194,
    'eggCycles': 25,
    'base': {
        'hitpoints': 68,
        'magic': 33,
        'attack': 30,
        'defense': 38,
        'intellect': 45,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 167,
    'name': 'Jungle Mojyamon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 172,
    'eggCycles': 25,
    'base': {
        'hitpoints': 92,
        'magic': 89,
        'attack': 40,
        'defense': 22,
        'intellect': 36,
        'speed': 47,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 168,
    'name': 'Karatuki Numemon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 189,
    'eggCycles': 25,
    'base': {
        'hitpoints': 65,
        'magic': 50,
        'attack': 35,
        'defense': 85,
        'intellect': 30,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 169,
    'name': 'Kiwimon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 190,
    'eggCycles': 25,
    'base': {
        'hitpoints': 34,
        'magic': 62,
        'attack': 75,
        'defense': 40,
        'intellect': 25,
        'speed': 78,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 170,
    'name': 'Mori Shellmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 166,
    'eggCycles': 25,
    'base': {
        'hitpoints': 44,
        'magic': 24,
        'attack': 79,
        'defense': 92,
        'intellect': 49,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 171,
    'name': 'Musyamon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 199,
    'eggCycles': 25,
    'base': {
        'hitpoints': 51,
        'magic': 65,
        'attack': 90,
        'defense': 31,
        'intellect': 30,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 172,
    'name': 'Nise Drimogemon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 175,
    'eggCycles': 25,
    'base': {
        'hitpoints': 27,
        'magic': 101,
        'attack': 27,
        'defense': 24,
        'intellect': 44,
        'speed': 82,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 173,
    'name': 'Pidmon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 175,
    'eggCycles': 25,
    'base': {
        'hitpoints': 30,
        'magic': 75,
        'attack': 43,
        'defense': 52,
        'intellect': 76,
        'speed': 32,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 174,
    'name': 'Platinum Scumon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 164,
    'eggCycles': 25,
    'base': {
        'hitpoints': 75,
        'magic': 45,
        'attack': 35,
        'defense': 75,
        'intellect': 35,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 175,
    'name': 'Red Vegimon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 172,
    'eggCycles': 25,
    'base': {
        'hitpoints': 92,
        'magic': 40,
        'attack': 59,
        'defense': 21,
        'intellect': 24,
        'speed': 78,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 176,
    'name': 'Revolmon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 176,
    'eggCycles': 25,
    'base': {
        'hitpoints': 77,
        'magic': 28,
        'attack': 80,
        'defense': 40,
        'intellect': 28,
        'speed': 52,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 177,
    'name': 'Saberdramon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 186,
    'eggCycles': 25,
    'base': {
        'hitpoints': 35,
        'magic': 79,
        'attack': 66,
        'defense': 45,
        'intellect': 68,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 178,
    'name': 'Sand Yanmamon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 175,
    'eggCycles': 25,
    'base': {
        'hitpoints': 43,
        'magic': 54,
        'attack': 50,
        'defense': 25,
        'intellect': 64,
        'speed': 78,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 179,
    'name': 'Shima Unimon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 168,
    'eggCycles': 25,
    'base': {
        'hitpoints': 33,
        'magic': 102,
        'attack': 23,
        'defense': 89,
        'intellect': 40,
        'speed': 23,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 180,
    'name': 'Snimon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 185,
    'eggCycles': 25,
    'base': {
        'hitpoints': 53,
        'magic': 42,
        'attack': 46,
        'defense': 38,
        'intellect': 70,
        'speed': 74,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 181,
    'name': 'Soulmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 195,
    'eggCycles': 25,
    'base': {
        'hitpoints': 26,
        'magic': 91,
        'attack': 42,
        'defense': 74,
        'intellect': 56,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 182,
    'name': 'Tankmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 169,
    'eggCycles': 25,
    'base': {
        'hitpoints': 45,
        'magic': 35,
        'attack': 60,
        'defense': 78,
        'intellect': 45,
        'speed': 42,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 183,
    'name': 'Thunderballmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 182,
    'eggCycles': 25,
    'base': {
        'hitpoints': 20,
        'magic': 103,
        'attack': 28,
        'defense': 97,
        'intellect': 51,
        'speed': 24,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 184,
    'name': 'Togemon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 165,
    'eggCycles': 25,
    'base': {
        'hitpoints': 70,
        'magic': 40,
        'attack': 55,
        'defense': 60,
        'intellect': 44,
        'speed': 46,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 185,
    'name': 'Tuchidarumon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 160,
    'eggCycles': 25,
    'base': {
        'hitpoints': 66,
        'magic': 43,
        'attack': 52,
        'defense': 50,
        'intellect': 48,
        'speed': 46,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 186,
    'name': 'Wizarmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 169,
    'eggCycles': 25,
    'base': {
        'hitpoints': 30,
        'magic': 75,
        'attack': 35,
        'defense': 35,
        'intellect': 80,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 187,
    'name': 'Woodmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 187,
    'eggCycles': 25,
    'base': {
        'hitpoints': 85,
        'magic': 30,
        'attack': 56,
        'defense': 50,
        'intellect': 40,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 188,
    'name': 'Yanmamon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 167,
    'eggCycles': 25,
    'base': {
        'hitpoints': 44,
        'magic': 67,
        'attack': 24,
        'defense': 55,
        'intellect': 41,
        'speed': 77,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 189,
    'name': 'Zassoumon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 186,
    'eggCycles': 25,
    'base': {
        'hitpoints': 90,
        'magic': 45,
        'attack': 49,
        'defense': 40,
        'intellect': 40,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 190,
    'name': 'Aero V-dramon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 205,
    'eggCycles': 40,
    'base': {
        'hitpoints': 85,
        'magic': 50,
        'attack': 100,
        'defense': 55,
        'intellect': 55,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 191,
    'name': 'Asuramon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 250,
    'eggCycles': 40,
    'base': {
        'hitpoints': 34,
        'magic': 131,
        'attack': 103,
        'defense': 69,
        'intellect': 35,
        'speed': 65,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 192,
    'name': 'Atlur Kabuterimon Red',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 228,
    'eggCycles': 40,
    'base': {
        'hitpoints': 80,
        'magic': 62,
        'attack': 50,
        'defense': 100,
        'intellect': 65,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 193,
    'name': 'Big Mamemon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 243,
    'eggCycles': 40,
    'base': {
        'hitpoints': 139,
        'magic': 34,
        'attack': 44,
        'defense': 58,
        'intellect': 122,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 194,
    'name': 'Blikmon',
    'catchRate': 15,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 240,
    'eggCycles': 40,
    'base': {
        'hitpoints': 100,
        'magic': 58,
        'attack': 61,
        'defense': 54,
        'intellect': 60,
        'speed': 79,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 195,
    'name': 'Blossomon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 201,
    'eggCycles': 40,
    'base': {
        'hitpoints': 101,
        'magic': 33,
        'attack': 89,
        'defense': 28,
        'intellect': 97,
        'speed': 64,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 196,
    'name': 'Blue Meramon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 215,
    'eggCycles': 40,
    'base': {
        'hitpoints': 65,
        'magic': 60,
        'attack': 90,
        'defense': 50,
        'intellect': 75,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 197,
    'name': 'Brachimon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 259,
    'eggCycles': 40,
    'base': {
        'hitpoints': 92,
        'magic': 63,
        'attack': 67,
        'defense': 39,
        'intellect': 55,
        'speed': 86,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 198,
    'name': 'Chimairamon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 236,
    'eggCycles': 40,
    'base': {
        'hitpoints': 109,
        'magic': 55,
        'attack': 55,
        'defense': 78,
        'intellect': 71,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 199,
    'name': 'Death Meramon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 243,
    'eggCycles': 40,
    'base': {
        'hitpoints': 95,
        'magic': 40,
        'attack': 120,
        'defense': 75,
        'intellect': 31,
        'speed': 64,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 200,
    'name': 'Delumon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 244,
    'eggCycles': 40,
    'base': {
        'hitpoints': 99,
        'magic': 90,
        'attack': 57,
        'defense': 30,
        'intellect': 89,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 201,
    'name': 'Fantomon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 245,
    'eggCycles': 40,
    'base': {
        'hitpoints': 55,
        'magic': 60,
        'attack': 60,
        'defense': 55,
        'intellect': 100,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 202,
    'name': 'Garudamon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 237,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 70,
        'attack': 75,
        'defense': 60,
        'intellect': 80,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 203,
    'name': 'Gerbemon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 258,
    'eggCycles': 40,
    'base': {
        'hitpoints': 90,
        'magic': 79,
        'attack': 69,
        'defense': 50,
        'intellect': 57,
        'speed': 56,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 204,
    'name': 'Gigadramon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 216,
    'eggCycles': 40,
    'base': {
        'hitpoints': 75,
        'magic': 45,
        'attack': 84,
        'defense': 85,
        'intellect': 60,
        'speed': 61,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 205,
    'name': 'Great King Scumon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 215,
    'eggCycles': 40,
    'base': {
        'hitpoints': 117,
        'magic': 65,
        'attack': 47,
        'defense': 26,
        'intellect': 113,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 206,
    'name': 'Hangyomon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 259,
    'eggCycles': 40,
    'base': {
        'hitpoints': 78,
        'magic': 78,
        'attack': 56,
        'defense': 84,
        'intellect': 53,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 207,
    'name': 'Insekimon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 259,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 55,
        'attack': 70,
        'defense': 100,
        'intellect': 75,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 208,
    'name': 'Jijimon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 201,
    'eggCycles': 95,
    'base': {
        'hitpoints': 95,
        'magic': 52,
        'attack': 82,
        'defense': 28,
        'intellect': 116,
        'speed': 77,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 209,
    'name': 'Jyureimon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 235,
    'eggCycles': 40,
    'base': {
        'hitpoints': 100,
        'magic': 64,
        'attack': 60,
        'defense': 80,
        'intellect': 65,
        'speed': 56,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 210,
    'name': 'Knightmon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 258,
    'eggCycles': 40,
    'base': {
        'hitpoints': 65,
        'magic': 60,
        'attack': 82,
        'defense': 95,
        'intellect': 70,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 211,
    'name': 'Lilimon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 241,
    'eggCycles': 40,
    'base': {
        'hitpoints': 50,
        'magic': 90,
        'attack': 35,
        'defense': 50,
        'intellect': 100,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 212,
    'name': 'Master Tyranomon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 250,
    'eggCycles': 40,
    'base': {
        'hitpoints': 128,
        'magic': 30,
        'attack': 50,
        'defense': 76,
        'intellect': 110,
        'speed': 59,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 213,
    'name': 'Metal Greymon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 207,
    'eggCycles': 40,
    'base': {
        'hitpoints': 95,
        'magic': 45,
        'attack': 105,
        'defense': 90,
        'intellect': 41,
        'speed': 64,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 214,
    'name': 'Panjyamon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 220,
    'eggCycles': 40,
    'base': {
        'hitpoints': 75,
        'magic': 75,
        'attack': 75,
        'defense': 65,
        'intellect': 62,
        'speed': 73,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 215,
    'name': 'Parrotmon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 248,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 50,
        'attack': 60,
        'defense': 60,
        'intellect': 89,
        'speed': 133,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 216,
    'name': 'Pumpmon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 222,
    'eggCycles': 40,
    'base': {
        'hitpoints': 85,
        'magic': 53,
        'attack': 70,
        'defense': 55,
        'intellect': 70,
        'speed': 67,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 217,
    'name': 'Skull Satamon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 231,
    'eggCycles': 40,
    'base': {
        'hitpoints': 68,
        'magic': 50,
        'attack': 92,
        'defense': 52,
        'intellect': 83,
        'speed': 65,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 218,
    'name': 'Tekkamon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 225,
    'eggCycles': 40,
    'base': {
        'hitpoints': 38,
        'magic': 113,
        'attack': 132,
        'defense': 35,
        'intellect': 76,
        'speed': 29,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 219,
    'name': 'Vamdemon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 209,
    'eggCycles': 40,
    'base': {
        'hitpoints': 80,
        'magic': 64,
        'attack': 90,
        'defense': 55,
        'intellect': 90,
        'speed': 61,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 220,
    'name': 'Vermillimon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 239,
    'eggCycles': 40,
    'base': {
        'hitpoints': 45,
        'magic': 76,
        'attack': 89,
        'defense': 106,
        'intellect': 54,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 221,
    'name': 'Waru Monzaemon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 202,
    'eggCycles': 40,
    'base': {
        'hitpoints': 113,
        'magic': 60,
        'attack': 70,
        'defense': 58,
        'intellect': 57,
        'speed': 87,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 222,
    'name': 'Waru Seadramon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 224,
    'eggCycles': 40,
    'base': {
        'hitpoints': 85,
        'magic': 123,
        'attack': 39,
        'defense': 64,
        'intellect': 87,
        'speed': 36,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 223,
    'name': 'Were Garurumon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 206,
    'eggCycles': 40,
    'base': {
        'hitpoints': 85,
        'magic': 45,
        'attack': 115,
        'defense': 45,
        'intellect': 40,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 224,
    'name': 'Apocalymon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 280,
    'eggCycles': 95,
    'base': {
        'hitpoints': 150,
        'magic': 110,
        'attack': 50,
        'defense': 60,
        'intellect': 120,
        'speed': 130,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 225,
    'name': 'Babamon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 267,
    'eggCycles': 95,
    'base': {
        'hitpoints': 148,
        'magic': 111,
        'attack': 61,
        'defense': 127,
        'intellect': 77,
        'speed': 51,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 226,
    'name': 'Boltmon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 269,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 44,
        'attack': 135,
        'defense': 105,
        'intellect': 45,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 227,
    'name': 'Demon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 300,
    'eggCycles': 95,
    'base': {
        'hitpoints': 95,
        'magic': 84,
        'attack': 125,
        'defense': 70,
        'intellect': 126,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 228,
    'name': 'Diablomon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 286,
    'eggCycles': 95,
    'base': {
        'hitpoints': 110,
        'magic': 70,
        'attack': 180,
        'defense': 60,
        'intellect': 40,
        'speed': 115,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 229,
    'name': 'Goddramon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 276,
    'eggCycles': 95,
    'base': {
        'hitpoints': 110,
        'magic': 55,
        'attack': 130,
        'defense': 105,
        'intellect': 95,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 230,
    'name': 'Griffomon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 261,
    'eggCycles': 95,
    'base': {
        'hitpoints': 68,
        'magic': 85,
        'attack': 101,
        'defense': 60,
        'intellect': 91,
        'speed': 115,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 231,
    'name': 'Hououmon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 300,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 110,
        'attack': 45,
        'defense': 55,
        'intellect': 130,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 232,
    'name': 'King Etemon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 287,
    'eggCycles': 95,
    'base': {
        'hitpoints': 80,
        'magic': 65,
        'attack': 111,
        'defense': 100,
        'intellect': 78,
        'speed': 86,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 233,
    'name': 'Metal Garurumon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 279,
    'eggCycles': 95,
    'base': {
        'hitpoints': 70,
        'magic': 90,
        'attack': 105,
        'defense': 80,
        'intellect': 80,
        'speed': 115,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 234,
    'name': 'Millenniumon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 273,
    'eggCycles': 95,
    'base': {
        'hitpoints': 94,
        'magic': 117,
        'attack': 101,
        'defense': 75,
        'intellect': 92,
        'speed': 111,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 235,
    'name': 'Mugendramon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 278,
    'eggCycles': 95,
    'base': {
        'hitpoints': 75,
        'magic': 65,
        'attack': 120,
        'defense': 121,
        'intellect': 75,
        'speed': 84,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 236,
    'name': 'Omegamon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 286,
    'eggCycles': 95,
    'base': {
        'hitpoints': 110,
        'magic': 65,
        'attack': 145,
        'defense': 110,
        'intellect': 95,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 237,
    'name': 'Piemon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 299,
    'eggCycles': 95,
    'base': {
        'hitpoints': 50,
        'magic': 115,
        'attack': 90,
        'defense': 60,
        'intellect': 120,
        'speed': 105,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 238,
    'name': 'Pinochimon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 283,
    'eggCycles': 95,
    'base': {
        'hitpoints': 65,
        'magic': 65,
        'attack': 110,
        'defense': 100,
        'intellect': 95,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 239,
    'name': 'Plesiomon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 281,
    'eggCycles': 95,
    'base': {
        'hitpoints': 115,
        'magic': 95,
        'attack': 35,
        'defense': 65,
        'intellect': 125,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 240,
    'name': 'Rosemon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 300,
    'eggCycles': 95,
    'base': {
        'hitpoints': 80,
        'magic': 94,
        'attack': 95,
        'defense': 80,
        'intellect': 100,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 241,
    'name': 'Skull Mammon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 276,
    'eggCycles': 95,
    'base': {
        'hitpoints': 109,
        'magic': 100,
        'attack': 69,
        'defense': 159,
        'intellect': 33,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 242,
    'name': 'Venom Vamdemon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 276,
    'eggCycles': 95,
    'base': {
        'hitpoints': 105,
        'magic': 71,
        'attack': 135,
        'defense': 60,
        'intellect': 90,
        'speed': 89,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 243,
    'name': 'War Greymon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 282,
    'eggCycles': 95,
    'base': {
        'hitpoints': 105,
        'magic': 59,
        'attack': 130,
        'defense': 105,
        'intellect': 60,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 244,
    'name': 'Chicomon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 18,
    'eggCycles': 5,
    'base': {
        'hitpoints': 24,
        'magic': 35,
        'attack': 13,
        'defense': 14,
        'intellect': 32,
        'speed': 22,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 245,
    'name': 'Cocomon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 27,
    'eggCycles': 5,
    'base': {
        'hitpoints': 32,
        'magic': 13,
        'attack': 29,
        'defense': 12,
        'intellect': 29,
        'speed': 24,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 246,
    'name': 'Kuramon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 35,
    'eggCycles': 5,
    'base': {
        'hitpoints': 15,
        'magic': 24,
        'attack': 30,
        'defense': 20,
        'intellect': 19,
        'speed': 31,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 247,
    'name': 'Leafmon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 21,
    'eggCycles': 5,
    'base': {
        'hitpoints': 21,
        'magic': 25,
        'attack': 23,
        'defense': 29,
        'intellect': 15,
        'speed': 26,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 248,
    'name': 'Pururumon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 22,
    'eggCycles': 5,
    'base': {
        'hitpoints': 19,
        'magic': 20,
        'attack': 12,
        'defense': 23,
        'intellect': 32,
        'speed': 33,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 249,
    'name': 'Tsubumon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 31,
    'eggCycles': 5,
    'base': {
        'hitpoints': 24,
        'magic': 22,
        'attack': 17,
        'defense': 34,
        'intellect': 22,
        'speed': 21,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 250,
    'name': 'Zerimon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 29,
    'eggCycles': 5,
    'base': {
        'hitpoints': 20,
        'magic': 23,
        'attack': 22,
        'defense': 25,
        'intellect': 17,
        'speed': 33,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 251,
    'name': 'Arkadimon Baby',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumslow,
    'exp': 40,
    'eggCycles': 10,
    'base': {
        'hitpoints': 33,
        'magic': 22,
        'attack': 47,
        'defense': 15,
        'intellect': 18,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 252,
    'name': 'Chibimon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumslow,
    'exp': 58,
    'eggCycles': 10,
    'base': {
        'hitpoints': 14,
        'magic': 39,
        'attack': 29,
        'defense': 19,
        'intellect': 34,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 253,
    'name': 'Chocomon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.mediumslow,
    'exp': 38,
    'eggCycles': 10,
    'base': {
        'hitpoints': 44,
        'magic': 35,
        'attack': 33,
        'defense': 19,
        'intellect': 19,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 254,
    'name': 'Gummymon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.mediumslow,
    'exp': 46,
    'eggCycles': 10,
    'base': {
        'hitpoints': 31,
        'magic': 30,
        'attack': 23,
        'defense': 22,
        'intellect': 31,
        'speed': 33,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 255,
    'name': 'Minomon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.mediumslow,
    'exp': 44,
    'eggCycles': 10,
    'base': {
        'hitpoints': 18,
        'magic': 22,
        'attack': 38,
        'defense': 39,
        'intellect': 35,
        'speed': 18,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 256,
    'name': 'Poromon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.mediumslow,
    'exp': 35,
    'eggCycles': 10,
    'base': {
        'hitpoints': 15,
        'magic': 41,
        'attack': 24,
        'defense': 18,
        'intellect': 28,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 257,
    'name': 'Tsumemon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.mediumslow,
    'exp': 60,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'magic': 20,
        'attack': 45,
        'defense': 20,
        'intellect': 15,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 258,
    'name': 'Upamon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumslow,
    'exp': 76,
    'eggCycles': 10,
    'base': {
        'hitpoints': 30,
        'magic': 15,
        'attack': 21,
        'defense': 37,
        'intellect': 37,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 259,
    'name': 'Agumon Black',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 84,
    'eggCycles': 15,
    'base': {
        'hitpoints': 44,
        'magic': 17,
        'attack': 61,
        'defense': 50,
        'intellect': 17,
        'speed': 36,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 260,
    'name': 'Armadimon',
    'catchRate': 35,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 83,
    'eggCycles': 15,
    'evolutions': [
        new StoneEvolution('Armadimon', 'Boarmon', GameConstants.StoneType.Courage_Digimental),
        new StoneEvolution('Armadimon', 'Sepikmon', GameConstants.StoneType.Friendship_Digimental),
        new StoneEvolution('Armadimon', 'Pteranomon', GameConstants.StoneType.Love_Digimental),
        new StoneEvolution('Armadimon', 'Frogmon', GameConstants.StoneType.Purity_Digimental),
        new StoneEvolution('Armadimon', 'Digmon', GameConstants.StoneType.Knowledge_Digimental),
        new StoneEvolution('Armadimon', 'Submarimon', GameConstants.StoneType.Sincerity_Digimental),
        new StoneEvolution('Armadimon', 'Sheepmon', GameConstants.StoneType.Hope_Digimental),
        new StoneEvolution('Armadimon', 'Seahomon', GameConstants.StoneType.Light_Digimental),
        new StoneEvolution('Armadimon', 'Chamelemon', GameConstants.StoneType.Kindness_Digimental),
        new StoneEvolution('Armadimon', 'Elephamon', GameConstants.StoneType.Miracles_Digimental),
    ],
    'base': {
        'hitpoints': 53,
        'magic': 32,
        'attack': 23,
        'defense': 48,
        'intellect': 21,
        'speed': 33,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 261,
    'name': 'Elecmon Violet',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 92,
    'eggCycles': 15,
    'base': {
        'hitpoints': 30,
        'magic': 63,
        'attack': 26,
        'defense': 41,
        'intellect': 26,
        'speed': 26,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 262,
    'name': 'Gabumon Black',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 115,
    'eggCycles': 15,
    'base': {
        'hitpoints': 42,
        'magic': 30,
        'attack': 50,
        'defense': 40,
        'intellect': 25,
        'speed': 38,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 263,
    'name': 'Hawkmon',
    'catchRate': 35,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 111,
    'eggCycles': 15,
    'evolutions': [
        new StoneEvolution('Hawkmon', 'Allomon', GameConstants.StoneType.Courage_Digimental),
        new StoneEvolution('Hawkmon', 'Rinkmon', GameConstants.StoneType.Friendship_Digimental),
        new StoneEvolution('Hawkmon', 'Holsmon', GameConstants.StoneType.Love_Digimental),
        new StoneEvolution('Hawkmon', 'Shurimon', GameConstants.StoneType.Purity_Digimental),
        new StoneEvolution('Hawkmon', 'Flybeemon', GameConstants.StoneType.Knowledge_Digimental),
        new StoneEvolution('Hawkmon', 'Orcamon', GameConstants.StoneType.Sincerity_Digimental),
        new StoneEvolution('Hawkmon', 'Moosemon', GameConstants.StoneType.Hope_Digimental),
        new StoneEvolution('Hawkmon', 'Harpymon', GameConstants.StoneType.Light_Digimental),
        new StoneEvolution('Hawkmon', 'Tocanmon', GameConstants.StoneType.Kindness_Digimental),
        new StoneEvolution('Hawkmon', 'Peacockmon', GameConstants.StoneType.Miracles_Digimental),
    ],
    'base': {
        'hitpoints': 25,
        'magic': 35,
        'attack': 50,
        'defense': 30,
        'intellect': 34,
        'speed': 51,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 264,
    'name': 'Keramon',
    'catchRate': 35,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 107,
    'eggCycles': 15,
    'base': {
        'hitpoints': 45,
        'magic': 30,
        'attack': 60,
        'defense': 25,
        'intellect': 22,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 265,
    'name': 'Lopmon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 85,
    'eggCycles': 15,
    'base': {
        'hitpoints': 30,
        'magic': 30,
        'attack': 45,
        'defense': 24,
        'intellect': 45,
        'speed': 36,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 266,
    'name': 'Otamamon Red',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 107,
    'eggCycles': 15,
    'base': {
        'hitpoints': 54,
        'magic': 38,
        'attack': 45,
        'defense': 23,
        'intellect': 25,
        'speed': 38,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 267,
    'name': 'Solarmon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 15,
    'base': {
        'hitpoints': 40,
        'magic': 35,
        'attack': 25,
        'defense': 45,
        'intellect': 27,
        'speed': 38,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 268,
    'name': 'Terriermon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 15,
    'evolutions': [
        new StoneEvolution('Terriermon', 'Salamandamon', GameConstants.StoneType.Courage_Digimental),
        new StoneEvolution('Terriermon', 'Fla Wizarmon', GameConstants.StoneType.Friendship_Digimental),
        new StoneEvolution('Terriermon', 'Pteranomon X-Antibody', GameConstants.StoneType.Love_Digimental),
        new StoneEvolution('Terriermon', 'Allomon X-Antibody', GameConstants.StoneType.Purity_Digimental),
        new StoneEvolution('Terriermon', 'Thunderbirmon', GameConstants.StoneType.Knowledge_Digimental),
        new StoneEvolution('Terriermon', 'Tylomon X-Antibody', GameConstants.StoneType.Sincerity_Digimental),
        new StoneEvolution('Terriermon', 'Mantaraymon X-Antibody', GameConstants.StoneType.Hope_Digimental),
        new StoneEvolution('Terriermon', 'Nefertimon X-Antibody', GameConstants.StoneType.Light_Digimental),
        new StoneEvolution('Terriermon', 'Pucchiemon Green', GameConstants.StoneType.Kindness_Digimental),
        new StoneEvolution('Terriermon', 'Kenkimon', GameConstants.StoneType.Miracles_Digimental),
        new StoneEvolution('Terriermon', 'Rapidmon Armor', GameConstants.StoneType.Fate_Digimental),
    ],
    'base': {
        'hitpoints': 25,
        'magic': 40,
        'attack': 35,
        'defense': 26,
        'intellect': 35,
        'speed': 49,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 269,
    'name': 'Toy Agumon Black',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 98,
    'eggCycles': 15,
    'base': {
        'hitpoints': 53,
        'magic': 33,
        'attack': 27,
        'defense': 42,
        'intellect': 19,
        'speed': 47,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 270,
    'name': 'V-mon',
    'catchRate': 35,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 85,
    'eggCycles': 15,
    'evolutions': [
        new StoneEvolution('V-mon', 'Fladramon', GameConstants.StoneType.Courage_Digimental),
        new StoneEvolution('V-mon', 'Lighdramon', GameConstants.StoneType.Friendship_Digimental),
        new StoneEvolution('V-mon', 'Sethmon', GameConstants.StoneType.Love_Digimental),
        new StoneEvolution('V-mon', 'Yaksamon', GameConstants.StoneType.Purity_Digimental),
        new StoneEvolution('V-mon', 'Honeybeemon', GameConstants.StoneType.Knowledge_Digimental),
        new StoneEvolution('V-mon', 'Depthmon', GameConstants.StoneType.Sincerity_Digimental),
        new StoneEvolution('V-mon', 'Sagittarimon', GameConstants.StoneType.Hope_Digimental),
        new StoneEvolution('V-mon', 'Gargomon', GameConstants.StoneType.Light_Digimental),
        new StoneEvolution('V-mon', 'Kangarumon', GameConstants.StoneType.Kindness_Digimental),
        new StoneEvolution('V-mon', 'Magnamon', GameConstants.StoneType.Miracles_Digimental),
        new StoneEvolution('V-mon', 'Gold V-dramon', GameConstants.StoneType.Fate_Digimental),
    ],
    'base': {
        'hitpoints': 46,
        'magic': 30,
        'attack': 67,
        'defense': 30,
        'intellect': 14,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 271,
    'name': 'Wormmon',
    'catchRate': 35,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 119,
    'eggCycles': 15,
    'evolutions': [
        new StoneEvolution('Wormmon', 'Shadramon', GameConstants.StoneType.Courage_Digimental),
        new StoneEvolution('Wormmon', 'Togemogumon', GameConstants.StoneType.Friendship_Digimental),
        new StoneEvolution('Wormmon', 'Owlmon', GameConstants.StoneType.Love_Digimental),
        new StoneEvolution('Wormmon', 'Nohemon', GameConstants.StoneType.Purity_Digimental),
        new StoneEvolution('Wormmon', 'Searchmon', GameConstants.StoneType.Knowledge_Digimental),
        new StoneEvolution('Wormmon', 'Archelomon', GameConstants.StoneType.Sincerity_Digimental),
        new StoneEvolution('Wormmon', 'Bullmon', GameConstants.StoneType.Hope_Digimental),
        new StoneEvolution('Wormmon', 'Coatlmon', GameConstants.StoneType.Light_Digimental),
        new StoneEvolution('Wormmon', 'Pucchiemon', GameConstants.StoneType.Kindness_Digimental),
        new StoneEvolution('Wormmon', 'Kongoumon', GameConstants.StoneType.Miracles_Digimental),
    ],
    'base': {
        'hitpoints': 27,
        'magic': 27,
        'attack': 39,
        'defense': 48,
        'intellect': 37,
        'speed': 32,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 272,
    'name': 'Ankylomon',
    'catchRate': 25,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 172,
    'eggCycles': 25,
    'base': {
        'hitpoints': 70,
        'magic': 45,
        'attack': 45,
        'defense': 70,
        'intellect': 35,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 273,
    'name': 'Aquilamon',
    'catchRate': 25,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 179,
    'eggCycles': 25,
    'base': {
        'hitpoints': 40,
        'magic': 55,
        'attack': 60,
        'defense': 40,
        'intellect': 40,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 274,
    'name': 'Black Tailmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 164,
    'eggCycles': 25,
    'base': {
        'hitpoints': 30,
        'magic': 70,
        'attack': 45,
        'defense': 40,
        'intellect': 70,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 275,
    'name': 'Bomber Nanimon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 165,
    'eggCycles': 25,
    'base': {
        'hitpoints': 58,
        'magic': 30,
        'attack': 82,
        'defense': 63,
        'intellect': 59,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 276,
    'name': 'Chrysalimon',
    'catchRate': 25,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 175,
    'eggCycles': 25,
    'base': {
        'hitpoints': 70,
        'magic': 40,
        'attack': 90,
        'defense': 35,
        'intellect': 25,
        'speed': 55,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 277,
    'name': 'Galgomon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 186,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'magic': 50,
        'attack': 60,
        'defense': 40,
        'intellect': 50,
        'speed': 55,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 278,
    'name': 'Garurumon Black',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 166,
    'eggCycles': 25,
    'base': {
        'hitpoints': 45,
        'magic': 55,
        'attack': 60,
        'defense': 55,
        'intellect': 30,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 279,
    'name': 'Greymon Blue',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 184,
    'eggCycles': 25,
    'base': {
        'hitpoints': 70,
        'magic': 35,
        'attack': 90,
        'defense': 60,
        'intellect': 20,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 280,
    'name': 'Red V-dramon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 177,
    'eggCycles': 25,
    'base': {
        'hitpoints': 42,
        'magic': 40,
        'attack': 52,
        'defense': 67,
        'intellect': 46,
        'speed': 66,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 281,
    'name': 'Sorcerimon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 166,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'magic': 65,
        'attack': 25,
        'defense': 44,
        'intellect': 85,
        'speed': 46,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 282,
    'name': 'Stingmon',
    'catchRate': 25,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 178,
    'eggCycles': 25,
    'base': {
        'hitpoints': 55,
        'magic': 40,
        'attack': 80,
        'defense': 30,
        'intellect': 35,
        'speed': 75,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 283,
    'name': 'Wendimon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 195,
    'eggCycles': 25,
    'base': {
        'hitpoints': 100,
        'magic': 34,
        'attack': 34,
        'defense': 77,
        'intellect': 34,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 284,
    'name': 'XV-mon',
    'catchRate': 25,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 185,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'magic': 65,
        'attack': 55,
        'defense': 45,
        'intellect': 45,
        'speed': 65,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 285,
    'name': 'Andiramon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 201,
    'eggCycles': 40,
    'base': {
        'hitpoints': 50,
        'magic': 70,
        'attack': 75,
        'defense': 65,
        'intellect': 60,
        'speed': 105,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 286,
    'name': 'Archnemon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 231,
    'eggCycles': 40,
    'base': {
        'hitpoints': 93,
        'magic': 68,
        'attack': 90,
        'defense': 99,
        'intellect': 36,
        'speed': 36,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 287,
    'name': 'Cyberdramon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 230,
    'eggCycles': 40,
    'base': {
        'hitpoints': 90,
        'magic': 42,
        'attack': 110,
        'defense': 85,
        'intellect': 40,
        'speed': 73,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 288,
    'name': 'Dinobeemon',
    'catchRate': 15,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 249,
    'eggCycles': 40,
    'base': {
        'hitpoints': 75,
        'magic': 50,
        'attack': 130,
        'defense': 80,
        'intellect': 45,
        'speed': 75,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 289,
    'name': 'Infermon',
    'catchRate': 15,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 248,
    'eggCycles': 40,
    'base': {
        'hitpoints': 75,
        'magic': 55,
        'attack': 135,
        'defense': 45,
        'intellect': 35,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 290,
    'name': 'Mummymon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 218,
    'eggCycles': 40,
    'base': {
        'hitpoints': 89,
        'magic': 123,
        'attack': 58,
        'defense': 69,
        'intellect': 50,
        'speed': 36,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 291,
    'name': 'Paildramon',
    'catchRate': 15,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 251,
    'eggCycles': 40,
    'base': {
        'hitpoints': 75,
        'magic': 80,
        'attack': 90,
        'defense': 75,
        'intellect': 60,
        'speed': 75,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 292,
    'name': 'Shakkoumon',
    'catchRate': 15,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 222,
    'eggCycles': 40,
    'base': {
        'hitpoints': 90,
        'magic': 82,
        'attack': 40,
        'defense': 95,
        'intellect': 95,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 293,
    'name': 'Silphymon',
    'catchRate': 15,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 241,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 85,
        'attack': 70,
        'defense': 70,
        'intellect': 75,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 294,
    'name': 'Superstarmon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 252,
    'eggCycles': 40,
    'base': {
        'hitpoints': 65,
        'magic': 75,
        'attack': 73,
        'defense': 85,
        'intellect': 60,
        'speed': 67,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 295,
    'name': 'Volcamon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 200,
    'eggCycles': 40,
    'base': {
        'hitpoints': 95,
        'magic': 38,
        'attack': 95,
        'defense': 75,
        'intellect': 30,
        'speed': 67,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 296,
    'name': 'Were Garurumon Black',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 213,
    'eggCycles': 40,
    'base': {
        'hitpoints': 90,
        'magic': 35,
        'attack': 120,
        'defense': 30,
        'intellect': 60,
        'speed': 90,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 297,
    'name': 'Baihumon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 286,
    'eggCycles': 95,
    'base': {
        'hitpoints': 144,
        'magic': 143,
        'attack': 67,
        'defense': 59,
        'intellect': 142,
        'speed': 55,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 298,
    'name': 'Belial Vamdemon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 274,
    'eggCycles': 95,
    'base': {
        'hitpoints': 57,
        'magic': 140,
        'attack': 95,
        'defense': 47,
        'intellect': 96,
        'speed': 83,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 299,
    'name': 'Black War Greymon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 263,
    'eggCycles': 95,
    'base': {
        'hitpoints': 115,
        'magic': 54,
        'attack': 120,
        'defense': 120,
        'intellect': 50,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 300,
    'name': 'Chaos Greymon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 260,
    'eggCycles': 95,
    'base': {
        'hitpoints': 116,
        'magic': 101,
        'attack': 81,
        'defense': 77,
        'intellect': 115,
        'speed': 87,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 301,
    'name': 'Chaos Lord',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 275,
    'eggCycles': 95,
    'base': {
        'hitpoints': 79,
        'magic': 110,
        'attack': 79,
        'defense': 169,
        'intellect': 65,
        'speed': 109,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 302,
    'name': 'Chaos Piemon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 269,
    'eggCycles': 95,
    'base': {
        'hitpoints': 88,
        'magic': 102,
        'attack': 95,
        'defense': 100,
        'intellect': 66,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 303,
    'name': 'Chaos Seadramon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 289,
    'eggCycles': 95,
    'base': {
        'hitpoints': 81,
        'magic': 115,
        'attack': 98,
        'defense': 70,
        'intellect': 98,
        'speed': 99,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 304,
    'name': 'Cherubimon Vice',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 292,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 125,
        'attack': 55,
        'defense': 50,
        'intellect': 160,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 305,
    'name': 'Cherubimon Virtue',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 298,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 125,
        'attack': 55,
        'defense': 60,
        'intellect': 145,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 306,
    'name': 'Crossmon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 295,
    'eggCycles': 95,
    'base': {
        'hitpoints': 55,
        'magic': 86,
        'attack': 100,
        'defense': 85,
        'intellect': 86,
        'speed': 158,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 307,
    'name': 'Deathmon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 291,
    'eggCycles': 95,
    'base': {
        'hitpoints': 42,
        'magic': 134,
        'attack': 97,
        'defense': 55,
        'intellect': 113,
        'speed': 94,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 308,
    'name': 'Deathmon Black',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 296,
    'eggCycles': 95,
    'base': {
        'hitpoints': 114,
        'magic': 115,
        'attack': 79,
        'defense': 126,
        'intellect': 38,
        'speed': 110,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 309,
    'name': 'Devitamamon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 280,
    'eggCycles': 95,
    'base': {
        'hitpoints': 159,
        'magic': 132,
        'attack': 100,
        'defense': 49,
        'intellect': 26,
        'speed': 74,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 310,
    'name': 'Ebemon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 280,
    'eggCycles': 95,
    'base': {
        'hitpoints': 70,
        'magic': 120,
        'attack': 35,
        'defense': 65,
        'intellect': 135,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 311,
    'name': 'Gran Kuwagamon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 277,
    'eggCycles': 95,
    'base': {
        'hitpoints': 95,
        'magic': 49,
        'attack': 115,
        'defense': 120,
        'intellect': 50,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 312,
    'name': 'Hi Andromon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 290,
    'eggCycles': 95,
    'base': {
        'hitpoints': 70,
        'magic': 65,
        'attack': 100,
        'defense': 115,
        'intellect': 85,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 313,
    'name': 'Imperialdramon Dragon Mode',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 278,
    'eggCycles': 95,
    'base': {
        'hitpoints': 120,
        'magic': 90,
        'attack': 90,
        'defense': 90,
        'intellect': 90,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 314,
    'name': 'Imperialdramon Dragon Mode Black',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 284,
    'eggCycles': 95,
    'base': {
        'hitpoints': 137,
        'magic': 129,
        'attack': 78,
        'defense': 55,
        'intellect': 133,
        'speed': 84,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 315,
    'name': 'Imperialdramon Fighter Mode',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 261,
    'eggCycles': 95,
    'base': {
        'hitpoints': 120,
        'magic': 70,
        'attack': 135,
        'defense': 80,
        'intellect': 75,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 316,
    'name': 'Lampmon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 271,
    'eggCycles': 95,
    'base': {
        'hitpoints': 130,
        'magic': 122,
        'attack': 73,
        'defense': 112,
        'intellect': 50,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 317,
    'name': 'Metal Garurumon Black',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 264,
    'eggCycles': 95,
    'base': {
        'hitpoints': 70,
        'magic': 79,
        'attack': 110,
        'defense': 110,
        'intellect': 80,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 318,
    'name': 'Moon Millenniumon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 283,
    'eggCycles': 95,
    'base': {
        'hitpoints': 101,
        'magic': 101,
        'attack': 50,
        'defense': 102,
        'intellect': 67,
        'speed': 101,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 319,
    'name': 'Pharaohmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 265,
    'eggCycles': 95,
    'base': {
        'hitpoints': 78,
        'magic': 134,
        'attack': 30,
        'defense': 138,
        'intellect': 108,
        'speed': 93,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 320,
    'name': 'Prince Mamemon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 265,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 84,
        'attack': 60,
        'defense': 110,
        'intellect': 65,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 321,
    'name': 'Qinglongmon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 293,
    'eggCycles': 95,
    'base': {
        'hitpoints': 125,
        'magic': 56,
        'attack': 113,
        'defense': 65,
        'intellect': 128,
        'speed': 138,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 322,
    'name': 'Seraphimon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 282,
    'eggCycles': 95,
    'base': {
        'hitpoints': 95,
        'magic': 104,
        'attack': 55,
        'defense': 95,
        'intellect': 135,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 323,
    'name': 'Valkyrimon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 260,
    'eggCycles': 95,
    'base': {
        'hitpoints': 75,
        'magic': 95,
        'attack': 85,
        'defense': 85,
        'intellect': 90,
        'speed': 110,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 324,
    'name': 'Vikemon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 289,
    'eggCycles': 95,
    'base': {
        'hitpoints': 115,
        'magic': 61,
        'attack': 105,
        'defense': 90,
        'intellect': 80,
        'speed': 89,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 325,
    'name': 'Xuanwumon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 266,
    'eggCycles': 95,
    'base': {
        'hitpoints': 118,
        'magic': 125,
        'attack': 72,
        'defense': 145,
        'intellect': 103,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 326,
    'name': 'Zanbamon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 273,
    'eggCycles': 95,
    'base': {
        'hitpoints': 73,
        'magic': 164,
        'attack': 78,
        'defense': 96,
        'intellect': 65,
        'speed': 119,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 327,
    'name': 'Zhuqiaomon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 261,
    'eggCycles': 95,
    'base': {
        'hitpoints': 95,
        'magic': 97,
        'attack': 108,
        'defense': 66,
        'intellect': 104,
        'speed': 133,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 328,
    'name': 'Allomon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 148,
    'eggCycles': 20,
    'base': {
        'hitpoints': 64,
        'magic': 55,
        'attack': 65,
        'defense': 55,
        'intellect': 55,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 329,
    'name': 'Archelomon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fast,
    'exp': 145,
    'eggCycles': 20,
    'base': {
        'hitpoints': 44,
        'magic': 66,
        'attack': 43,
        'defense': 70,
        'intellect': 65,
        'speed': 63,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 330,
    'name': 'Baromon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fast,
    'exp': 122,
    'eggCycles': 20,
    'base': {
        'hitpoints': 55,
        'magic': 48,
        'attack': 45,
        'defense': 55,
        'intellect': 82,
        'speed': 72,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 331,
    'name': 'Bitmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 127,
    'eggCycles': 20,
    'base': {
        'hitpoints': 66,
        'magic': 69,
        'attack': 40,
        'defense': 51,
        'intellect': 54,
        'speed': 72,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 332,
    'name': 'Boarmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fast,
    'exp': 144,
    'eggCycles': 20,
    'base': {
        'hitpoints': 43,
        'magic': 73,
        'attack': 76,
        'defense': 60,
        'intellect': 70,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 333,
    'name': 'Bullmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 129,
    'eggCycles': 20,
    'base': {
        'hitpoints': 47,
        'magic': 62,
        'attack': 72,
        'defense': 70,
        'intellect': 48,
        'speed': 55,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 334,
    'name': 'Butterflamon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 125,
    'eggCycles': 20,
    'base': {
        'hitpoints': 70,
        'magic': 41,
        'attack': 73,
        'defense': 61,
        'intellect': 61,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 335,
    'name': 'Chamelemon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fast,
    'exp': 143,
    'eggCycles': 20,
    'base': {
        'hitpoints': 45,
        'magic': 44,
        'attack': 46,
        'defense': 80,
        'intellect': 70,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 336,
    'name': 'Coatlmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 120,
    'eggCycles': 20,
    'base': {
        'hitpoints': 62,
        'magic': 70,
        'attack': 58,
        'defense': 48,
        'intellect': 57,
        'speed': 74,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 337,
    'name': 'Depthmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fast,
    'exp': 121,
    'eggCycles': 20,
    'base': {
        'hitpoints': 61,
        'magic': 79,
        'attack': 59,
        'defense': 41,
        'intellect': 65,
        'speed': 63,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 338,
    'name': 'Digmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 151,
    'eggCycles': 20,
    'base': {
        'hitpoints': 66,
        'magic': 51,
        'attack': 53,
        'defense': 72,
        'intellect': 70,
        'speed': 57,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 339,
    'name': 'Elephamon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 131,
    'eggCycles': 20,
    'base': {
        'hitpoints': 40,
        'magic': 76,
        'attack': 50,
        'defense': 79,
        'intellect': 64,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 340,
    'name': 'Fladramon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fast,
    'exp': 140,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'magic': 40,
        'attack': 70,
        'defense': 50,
        'intellect': 40,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 341,
    'name': 'Flybeemon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 123,
    'eggCycles': 20,
    'base': {
        'hitpoints': 52,
        'magic': 59,
        'attack': 64,
        'defense': 69,
        'intellect': 41,
        'speed': 74,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 342,
    'name': 'Frogmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fast,
    'exp': 123,
    'eggCycles': 20,
    'base': {
        'hitpoints': 74,
        'magic': 57,
        'attack': 51,
        'defense': 48,
        'intellect': 61,
        'speed': 61,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 343,
    'name': 'Gargomon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 151,
    'eggCycles': 20,
    'base': {
        'hitpoints': 55,
        'magic': 64,
        'attack': 50,
        'defense': 58,
        'intellect': 70,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 344,
    'name': 'Goatmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 120,
    'eggCycles': 20,
    'base': {
        'hitpoints': 76,
        'magic': 55,
        'attack': 62,
        'defense': 52,
        'intellect': 63,
        'speed': 59,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 345,
    'name': 'Gold V-dramon',
    'catchRate': 20,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 141,
    'eggCycles': 20,
    'base': {
        'hitpoints': 54,
        'magic': 80,
        'attack': 53,
        'defense': 64,
        'intellect': 45,
        'speed': 58,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 346,
    'name': 'Harpymon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 135,
    'eggCycles': 20,
    'base': {
        'hitpoints': 40,
        'magic': 73,
        'attack': 54,
        'defense': 46,
        'intellect': 75,
        'speed': 71,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 347,
    'name': 'Holsmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 133,
    'eggCycles': 20,
    'base': {
        'hitpoints': 70,
        'magic': 64,
        'attack': 65,
        'defense': 47,
        'intellect': 47,
        'speed': 76,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 348,
    'name': 'Honeybeemon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 147,
    'eggCycles': 20,
    'base': {
        'hitpoints': 83,
        'magic': 58,
        'attack': 86,
        'defense': 47,
        'intellect': 45,
        'speed': 48,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 349,
    'name': 'Kabukimon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fast,
    'exp': 140,
    'eggCycles': 20,
    'base': {
        'hitpoints': 55,
        'magic': 55,
        'attack': 55,
        'defense': 55,
        'intellect': 70,
        'speed': 55,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 350,
    'name': 'Kangarumon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 55,
        'magic': 73,
        'attack': 74,
        'defense': 41,
        'intellect': 47,
        'speed': 58,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 351,
    'name': 'Kongoumon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 154,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'magic': 68,
        'attack': 59,
        'defense': 63,
        'intellect': 60,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 352,
    'name': 'Lighdramon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.fast,
    'exp': 134,
    'eggCycles': 20,
    'base': {
        'hitpoints': 40,
        'magic': 60,
        'attack': 68,
        'defense': 40,
        'intellect': 68,
        'speed': 77,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 353,
    'name': 'Lynxmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fast,
    'exp': 141,
    'eggCycles': 20,
    'base': {
        'hitpoints': 52,
        'magic': 43,
        'attack': 82,
        'defense': 46,
        'intellect': 81,
        'speed': 57,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 354,
    'name': 'Magnamon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 145,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'magic': 75,
        'attack': 115,
        'defense': 145,
        'intellect': 95,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 355,
    'name': 'Maildramon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 151,
    'eggCycles': 20,
    'base': {
        'hitpoints': 46,
        'magic': 59,
        'attack': 57,
        'defense': 69,
        'intellect': 67,
        'speed': 65,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 356,
    'name': 'Manbomon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fast,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 81,
        'magic': 57,
        'attack': 51,
        'defense': 65,
        'intellect': 41,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 357,
    'name': 'Mantaraymon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fast,
    'exp': 141,
    'eggCycles': 20,
    'base': {
        'hitpoints': 73,
        'magic': 40,
        'attack': 56,
        'defense': 77,
        'intellect': 41,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 358,
    'name': 'Moosemon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 138,
    'eggCycles': 20,
    'base': {
        'hitpoints': 56,
        'magic': 60,
        'attack': 55,
        'defense': 55,
        'intellect': 64,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 359,
    'name': 'Mothmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 159,
    'eggCycles': 20,
    'base': {
        'hitpoints': 50,
        'magic': 82,
        'attack': 42,
        'defense': 77,
        'intellect': 42,
        'speed': 72,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 360,
    'name': 'Nefertimon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 128,
    'eggCycles': 20,
    'base': {
        'hitpoints': 48,
        'magic': 78,
        'attack': 72,
        'defense': 55,
        'intellect': 66,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 361,
    'name': 'Nohemon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fast,
    'exp': 142,
    'eggCycles': 20,
    'base': {
        'hitpoints': 66,
        'magic': 53,
        'attack': 59,
        'defense': 50,
        'intellect': 72,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 362,
    'name': 'Opossummon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 135,
    'eggCycles': 20,
    'base': {
        'hitpoints': 81,
        'magic': 44,
        'attack': 44,
        'defense': 81,
        'intellect': 46,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 363,
    'name': 'Orcamon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fast,
    'exp': 129,
    'eggCycles': 20,
    'base': {
        'hitpoints': 50,
        'magic': 58,
        'attack': 50,
        'defense': 56,
        'intellect': 66,
        'speed': 66,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 364,
    'name': 'Owlmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 157,
    'eggCycles': 20,
    'base': {
        'hitpoints': 50,
        'magic': 60,
        'attack': 62,
        'defense': 44,
        'intellect': 68,
        'speed': 64,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 365,
    'name': 'Peacockmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.fast,
    'exp': 156,
    'eggCycles': 20,
    'base': {
        'hitpoints': 84,
        'magic': 40,
        'attack': 41,
        'defense': 60,
        'intellect': 71,
        'speed': 65,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 366,
    'name': 'Pegasmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 140,
    'eggCycles': 20,
    'base': {
        'hitpoints': 64,
        'magic': 80,
        'attack': 45,
        'defense': 41,
        'intellect': 68,
        'speed': 69,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 367,
    'name': 'Pipismon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 128,
    'eggCycles': 20,
    'base': {
        'hitpoints': 67,
        'magic': 56,
        'attack': 61,
        'defense': 51,
        'intellect': 56,
        'speed': 78,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 368,
    'name': 'Ponchomon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fast,
    'exp': 153,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'magic': 50,
        'attack': 65,
        'defense': 71,
        'intellect': 66,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 369,
    'name': 'Prairiemon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 140,
    'eggCycles': 20,
    'base': {
        'hitpoints': 53,
        'magic': 62,
        'attack': 62,
        'defense': 53,
        'intellect': 63,
        'speed': 64,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 370,
    'name': 'Pteranomon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 158,
    'eggCycles': 20,
    'base': {
        'hitpoints': 51,
        'magic': 64,
        'attack': 75,
        'defense': 47,
        'intellect': 53,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 371,
    'name': 'Pucchiemon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 142,
    'eggCycles': 20,
    'base': {
        'hitpoints': 86,
        'magic': 50,
        'attack': 40,
        'defense': 54,
        'intellect': 60,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 372,
    'name': 'Pucchiemon Green',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 57,
        'magic': 73,
        'attack': 42,
        'defense': 57,
        'intellect': 63,
        'speed': 56,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 373,
    'name': 'Rapidmon Armor',
    'catchRate': 20,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 154,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'magic': 65,
        'attack': 105,
        'defense': 115,
        'intellect': 105,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 374,
    'name': 'Rhinomon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 126,
    'eggCycles': 20,
    'base': {
        'hitpoints': 62,
        'magic': 66,
        'attack': 40,
        'defense': 78,
        'intellect': 69,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 375,
    'name': 'Rinkmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 133,
    'eggCycles': 20,
    'base': {
        'hitpoints': 54,
        'magic': 50,
        'attack': 50,
        'defense': 73,
        'intellect': 76,
        'speed': 45,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 376,
    'name': 'Sagittarimon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 128,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'magic': 74,
        'attack': 85,
        'defense': 48,
        'intellect': 49,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 377,
    'name': 'Seahomon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fast,
    'exp': 147,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'magic': 60,
        'attack': 65,
        'defense': 63,
        'intellect': 59,
        'speed': 56,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 378,
    'name': 'Searchmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.fast,
    'exp': 131,
    'eggCycles': 20,
    'base': {
        'hitpoints': 49,
        'magic': 66,
        'attack': 45,
        'defense': 78,
        'intellect': 85,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 379,
    'name': 'Sepikmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fast,
    'exp': 159,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'magic': 77,
        'attack': 63,
        'defense': 48,
        'intellect': 43,
        'speed': 46,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 380,
    'name': 'Sethmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fast,
    'exp': 129,
    'eggCycles': 20,
    'base': {
        'hitpoints': 62,
        'magic': 78,
        'attack': 40,
        'defense': 64,
        'intellect': 64,
        'speed': 61,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 381,
    'name': 'Shadramon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fast,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 43,
        'magic': 78,
        'attack': 40,
        'defense': 63,
        'intellect': 66,
        'speed': 73,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 382,
    'name': 'Sheepmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 157,
    'eggCycles': 20,
    'base': {
        'hitpoints': 83,
        'magic': 53,
        'attack': 68,
        'defense': 52,
        'intellect': 54,
        'speed': 48,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 383,
    'name': 'Shurimon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fast,
    'exp': 129,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'magic': 49,
        'attack': 64,
        'defense': 56,
        'intellect': 63,
        'speed': 69,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 384,
    'name': 'Stegomon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 125,
    'eggCycles': 20,
    'base': {
        'hitpoints': 77,
        'magic': 44,
        'attack': 62,
        'defense': 55,
        'intellect': 40,
        'speed': 76,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 385,
    'name': 'Submarimon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fast,
    'exp': 135,
    'eggCycles': 20,
    'base': {
        'hitpoints': 43,
        'magic': 50,
        'attack': 59,
        'defense': 77,
        'intellect': 60,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 386,
    'name': 'Swanmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fast,
    'exp': 126,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'magic': 55,
        'attack': 64,
        'defense': 61,
        'intellect': 51,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 387,
    'name': 'Tocanmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 139,
    'eggCycles': 20,
    'base': {
        'hitpoints': 79,
        'magic': 40,
        'attack': 66,
        'defense': 68,
        'intellect': 56,
        'speed': 42,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 388,
    'name': 'Togemogumon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 122,
    'eggCycles': 20,
    'base': {
        'hitpoints': 72,
        'magic': 71,
        'attack': 70,
        'defense': 56,
        'intellect': 41,
        'speed': 57,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 389,
    'name': 'Tylomon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fast,
    'exp': 127,
    'eggCycles': 20,
    'base': {
        'hitpoints': 43,
        'magic': 51,
        'attack': 66,
        'defense': 60,
        'intellect': 53,
        'speed': 75,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 390,
    'name': 'Yaksamon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fast,
    'exp': 157,
    'eggCycles': 20,
    'base': {
        'hitpoints': 63,
        'magic': 50,
        'attack': 67,
        'defense': 47,
        'intellect': 69,
        'speed': 56,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 391,
    'name': 'Jyarimon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 30,
    'eggCycles': 5,
    'base': {
        'hitpoints': 29,
        'magic': 15,
        'attack': 23,
        'defense': 29,
        'intellect': 13,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 392,
    'name': 'Ketomon',
    'catchRate': 50,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 28,
    'eggCycles': 5,
    'base': {
        'hitpoints': 16,
        'magic': 29,
        'attack': 35,
        'defense': 17,
        'intellect': 20,
        'speed': 23,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 393,
    'name': 'Paomon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 21,
    'eggCycles': 5,
    'base': {
        'hitpoints': 20,
        'magic': 15,
        'attack': 30,
        'defense': 13,
        'intellect': 34,
        'speed': 28,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 394,
    'name': 'Pipimon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 29,
    'eggCycles': 5,
    'base': {
        'hitpoints': 15,
        'magic': 25,
        'attack': 26,
        'defense': 16,
        'intellect': 33,
        'speed': 24,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 395,
    'name': 'Relemon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 30,
    'eggCycles': 5,
    'base': {
        'hitpoints': 19,
        'magic': 30,
        'attack': 30,
        'defense': 19,
        'intellect': 20,
        'speed': 22,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 396,
    'name': 'Gigimon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 76,
    'eggCycles': 10,
    'base': {
        'hitpoints': 28,
        'magic': 32,
        'attack': 31,
        'defense': 16,
        'intellect': 25,
        'speed': 38,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 397,
    'name': 'Hopmon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumslow,
    'exp': 41,
    'eggCycles': 10,
    'base': {
        'hitpoints': 34,
        'magic': 13,
        'attack': 42,
        'defense': 39,
        'intellect': 19,
        'speed': 23,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 398,
    'name': 'Pokomon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.mediumslow,
    'exp': 68,
    'eggCycles': 10,
    'base': {
        'hitpoints': 26,
        'magic': 41,
        'attack': 14,
        'defense': 32,
        'intellect': 16,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 399,
    'name': 'Xiaomon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumslow,
    'exp': 53,
    'eggCycles': 10,
    'base': {
        'hitpoints': 31,
        'magic': 31,
        'attack': 20,
        'defense': 20,
        'intellect': 41,
        'speed': 27,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 400,
    'name': 'Arkadimon Child',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 83,
    'eggCycles': 15,
    'base': {
        'hitpoints': 42,
        'magic': 33,
        'attack': 56,
        'defense': 30,
        'intellect': 36,
        'speed': 33,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 401,
    'name': 'Guilmon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 115,
    'eggCycles': 15,
    'base': {
        'hitpoints': 47,
        'magic': 25,
        'attack': 70,
        'defense': 30,
        'intellect': 15,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 402,
    'name': 'Impmon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 82,
    'eggCycles': 15,
    'base': {
        'hitpoints': 14,
        'magic': 51,
        'attack': 44,
        'defense': 21,
        'intellect': 51,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 403,
    'name': 'Labramon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 15,
    'base': {
        'hitpoints': 48,
        'magic': 35,
        'attack': 25,
        'defense': 21,
        'intellect': 50,
        'speed': 33,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 404,
    'name': 'Lucemon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 113,
    'eggCycles': 15,
    'base': {
        'hitpoints': 30,
        'magic': 80,
        'attack': 20,
        'defense': 145,
        'intellect': 55,
        'speed': 75,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 405,
    'name': 'Monodramon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 99,
    'eggCycles': 15,
    'base': {
        'hitpoints': 46,
        'magic': 15,
        'attack': 65,
        'defense': 42,
        'intellect': 12,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 406,
    'name': 'Petit Mamon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 114,
    'eggCycles': 15,
    'base': {
        'hitpoints': 35,
        'magic': 30,
        'attack': 32,
        'defense': 37,
        'intellect': 55,
        'speed': 28,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 407,
    'name': 'Renamon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 99,
    'eggCycles': 15,
    'base': {
        'hitpoints': 40,
        'magic': 41,
        'attack': 40,
        'defense': 25,
        'intellect': 40,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 408,
    'name': 'Arkadimon Adult',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 171,
    'eggCycles': 25,
    'base': {
        'hitpoints': 60,
        'magic': 45,
        'attack': 90,
        'defense': 35,
        'intellect': 40,
        'speed': 55,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 409,
    'name': 'Black Galgomon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 186,
    'eggCycles': 25,
    'base': {
        'hitpoints': 41,
        'magic': 72,
        'attack': 55,
        'defense': 67,
        'intellect': 45,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 410,
    'name': 'Black Growmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 167,
    'eggCycles': 25,
    'base': {
        'hitpoints': 45,
        'magic': 95,
        'attack': 60,
        'defense': 55,
        'intellect': 25,
        'speed': 45,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 411,
    'name': 'Dobermon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 172,
    'eggCycles': 25,
    'base': {
        'hitpoints': 26,
        'magic': 42,
        'attack': 56,
        'defense': 37,
        'intellect': 65,
        'speed': 87,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 412,
    'name': 'Dogmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 165,
    'eggCycles': 25,
    'base': {
        'hitpoints': 96,
        'magic': 55,
        'attack': 27,
        'defense': 63,
        'intellect': 34,
        'speed': 37,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 413,
    'name': 'Growmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 167,
    'eggCycles': 25,
    'base': {
        'hitpoints': 60,
        'magic': 40,
        'attack': 80,
        'defense': 55,
        'intellect': 30,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 414,
    'name': 'Growmon Orange',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 169,
    'eggCycles': 25,
    'base': {
        'hitpoints': 68,
        'magic': 30,
        'attack': 27,
        'defense': 60,
        'intellect': 84,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 415,
    'name': 'Kyubimon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 170,
    'eggCycles': 25,
    'base': {
        'hitpoints': 35,
        'magic': 75,
        'attack': 20,
        'defense': 40,
        'intellect': 75,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 416,
    'name': 'Kyubimon Silver',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 190,
    'eggCycles': 25,
    'base': {
        'hitpoints': 97,
        'magic': 38,
        'attack': 31,
        'defense': 21,
        'intellect': 69,
        'speed': 51,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 417,
    'name': 'Siesamon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 179,
    'eggCycles': 25,
    'base': {
        'hitpoints': 51,
        'magic': 63,
        'attack': 50,
        'defense': 40,
        'intellect': 92,
        'speed': 28,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 418,
    'name': 'Strikedramon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 198,
    'eggCycles': 25,
    'base': {
        'hitpoints': 57,
        'magic': 28,
        'attack': 88,
        'defense': 43,
        'intellect': 29,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 419,
    'name': 'Turuiemon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 187,
    'eggCycles': 25,
    'base': {
        'hitpoints': 56,
        'magic': 34,
        'attack': 67,
        'defense': 47,
        'intellect': 39,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 420,
    'name': 'V-dramon Black',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 184,
    'eggCycles': 25,
    'base': {
        'hitpoints': 30,
        'magic': 85,
        'attack': 57,
        'defense': 66,
        'intellect': 25,
        'speed': 49,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 421,
    'name': 'Youkomon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 173,
    'eggCycles': 25,
    'base': {
        'hitpoints': 57,
        'magic': 50,
        'attack': 39,
        'defense': 25,
        'intellect': 94,
        'speed': 56,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 422,
    'name': 'Andiramon Deva',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 235,
    'eggCycles': 40,
    'base': {
        'hitpoints': 98,
        'magic': 76,
        'attack': 86,
        'defense': 53,
        'intellect': 102,
        'speed': 27,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 423,
    'name': 'Arkadimon Perfect',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 235,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 67,
        'attack': 108,
        'defense': 50,
        'intellect': 70,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 424,
    'name': 'Black Megalo Growmon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 205,
    'eggCycles': 40,
    'base': {
        'hitpoints': 73,
        'magic': 95,
        'attack': 51,
        'defense': 73,
        'intellect': 87,
        'speed': 29,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 425,
    'name': 'Black Rapidmon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 240,
    'eggCycles': 40,
    'base': {
        'hitpoints': 65,
        'magic': 70,
        'attack': 70,
        'defense': 70,
        'intellect': 70,
        'speed': 109,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 426,
    'name': 'Caturamon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 232,
    'eggCycles': 40,
    'base': {
        'hitpoints': 53,
        'magic': 84,
        'attack': 67,
        'defense': 83,
        'intellect': 72,
        'speed': 64,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 427,
    'name': 'Cerberumon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 208,
    'eggCycles': 40,
    'base': {
        'hitpoints': 40,
        'magic': 67,
        'attack': 55,
        'defense': 54,
        'intellect': 63,
        'speed': 122,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 428,
    'name': 'Doumon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 202,
    'eggCycles': 40,
    'base': {
        'hitpoints': 65,
        'magic': 89,
        'attack': 43,
        'defense': 73,
        'intellect': 111,
        'speed': 72,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 429,
    'name': 'Grappu Leomon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 242,
    'eggCycles': 40,
    'base': {
        'hitpoints': 100,
        'magic': 45,
        'attack': 100,
        'defense': 55,
        'intellect': 40,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 430,
    'name': 'Indaramon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 209,
    'eggCycles': 40,
    'base': {
        'hitpoints': 47,
        'magic': 101,
        'attack': 73,
        'defense': 39,
        'intellect': 89,
        'speed': 61,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 431,
    'name': 'Karatenmon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 218,
    'eggCycles': 40,
    'base': {
        'hitpoints': 44,
        'magic': 49,
        'attack': 56,
        'defense': 61,
        'intellect': 90,
        'speed': 128,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 432,
    'name': 'Kumbhiramon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 214,
    'eggCycles': 40,
    'base': {
        'hitpoints': 99,
        'magic': 140,
        'attack': 32,
        'defense': 36,
        'intellect': 50,
        'speed': 59,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 433,
    'name': 'Majiramon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 228,
    'eggCycles': 40,
    'base': {
        'hitpoints': 70,
        'magic': 114,
        'attack': 35,
        'defense': 44,
        'intellect': 79,
        'speed': 63,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 434,
    'name': 'Makuramon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 210,
    'eggCycles': 40,
    'base': {
        'hitpoints': 32,
        'magic': 70,
        'attack': 89,
        'defense': 73,
        'intellect': 78,
        'speed': 103,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 435,
    'name': 'Megalo Growmon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 210,
    'eggCycles': 40,
    'base': {
        'hitpoints': 85,
        'magic': 45,
        'attack': 115,
        'defense': 80,
        'intellect': 48,
        'speed': 67,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 436,
    'name': 'Megalo Growmon Data',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 231,
    'eggCycles': 40,
    'base': {
        'hitpoints': 34,
        'magic': 94,
        'attack': 89,
        'defense': 70,
        'intellect': 102,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 437,
    'name': 'Mephismon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 212,
    'eggCycles': 40,
    'base': {
        'hitpoints': 88,
        'magic': 43,
        'attack': 42,
        'defense': 96,
        'intellect': 105,
        'speed': 52,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 438,
    'name': 'Mihiramon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 200,
    'eggCycles': 40,
    'base': {
        'hitpoints': 47,
        'magic': 125,
        'attack': 33,
        'defense': 103,
        'intellect': 106,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 439,
    'name': 'Orochimon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 215,
    'eggCycles': 40,
    'base': {
        'hitpoints': 36,
        'magic': 99,
        'attack': 77,
        'defense': 25,
        'intellect': 95,
        'speed': 81,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 440,
    'name': 'Pajramon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 211,
    'eggCycles': 40,
    'base': {
        'hitpoints': 67,
        'magic': 99,
        'attack': 80,
        'defense': 31,
        'intellect': 58,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 441,
    'name': 'Pandamon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 229,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 55,
        'attack': 82,
        'defense': 90,
        'intellect': 65,
        'speed': 58,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 442,
    'name': 'Rapidmon Perfect',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 239,
    'eggCycles': 40,
    'base': {
        'hitpoints': 65,
        'magic': 60,
        'attack': 65,
        'defense': 60,
        'intellect': 70,
        'speed': 90,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 443,
    'name': 'Sandiramon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 247,
    'eggCycles': 40,
    'base': {
        'hitpoints': 97,
        'magic': 36,
        'attack': 36,
        'defense': 97,
        'intellect': 60,
        'speed': 104,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 444,
    'name': 'Scorpiomon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 221,
    'eggCycles': 40,
    'base': {
        'hitpoints': 47,
        'magic': 74,
        'attack': 124,
        'defense': 86,
        'intellect': 55,
        'speed': 38,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 445,
    'name': 'Sinduramon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 249,
    'eggCycles': 40,
    'base': {
        'hitpoints': 38,
        'magic': 78,
        'attack': 39,
        'defense': 100,
        'intellect': 69,
        'speed': 90,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 446,
    'name': 'Taomon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 201,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 85,
        'attack': 30,
        'defense': 60,
        'intellect': 110,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 447,
    'name': 'Taomon Silver',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 237,
    'eggCycles': 40,
    'base': {
        'hitpoints': 112,
        'magic': 67,
        'attack': 63,
        'defense': 63,
        'intellect': 75,
        'speed': 31,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 448,
    'name': 'Vajramon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 221,
    'eggCycles': 40,
    'base': {
        'hitpoints': 58,
        'magic': 58,
        'attack': 105,
        'defense': 103,
        'intellect': 44,
        'speed': 83,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 449,
    'name': 'Vikaralamon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 244,
    'eggCycles': 40,
    'base': {
        'hitpoints': 138,
        'magic': 53,
        'attack': 58,
        'defense': 54,
        'intellect': 85,
        'speed': 65,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 450,
    'name': 'Anubimon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 272,
    'eggCycles': 95,
    'base': {
        'hitpoints': 32,
        'magic': 157,
        'attack': 67,
        'defense': 72,
        'intellect': 67,
        'speed': 122,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 451,
    'name': 'Arkadimon Ultimate',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 292,
    'eggCycles': 95,
    'base': {
        'hitpoints': 88,
        'magic': 100,
        'attack': 147,
        'defense': 60,
        'intellect': 70,
        'speed': 110,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 452,
    'name': 'Armagemon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 279,
    'eggCycles': 95,
    'base': {
        'hitpoints': 118,
        'magic': 75,
        'attack': 192,
        'defense': 75,
        'intellect': 45,
        'speed': 115,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 453,
    'name': 'Beelzebumon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 260,
    'eggCycles': 95,
    'base': {
        'hitpoints': 110,
        'magic': 70,
        'attack': 165,
        'defense': 75,
        'intellect': 60,
        'speed': 110,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 454,
    'name': 'Beelzebumon Blast Mode',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 278,
    'eggCycles': 95,
    'base': {
        'hitpoints': 110,
        'magic': 70,
        'attack': 175,
        'defense': 80,
        'intellect': 65,
        'speed': 120,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 455,
    'name': 'Black Saint Galgomon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 289,
    'eggCycles': 95,
    'base': {
        'hitpoints': 63,
        'magic': 140,
        'attack': 89,
        'defense': 100,
        'intellect': 105,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 456,
    'name': 'Chaos Dukemon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 285,
    'eggCycles': 95,
    'base': {
        'hitpoints': 85,
        'magic': 90,
        'attack': 120,
        'defense': 95,
        'intellect': 105,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 457,
    'name': 'Dukemon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 295,
    'eggCycles': 95,
    'base': {
        'hitpoints': 95,
        'magic': 95,
        'attack': 100,
        'defense': 105,
        'intellect': 100,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 458,
    'name': 'Dukemon Crimson Mode',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 262,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 95,
        'attack': 140,
        'defense': 80,
        'intellect': 100,
        'speed': 115,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 459,
    'name': 'Gokumon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 300,
    'eggCycles': 95,
    'base': {
        'hitpoints': 40,
        'magic': 100,
        'attack': 91,
        'defense': 149,
        'intellect': 118,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 460,
    'name': 'Gulfmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 274,
    'eggCycles': 95,
    'base': {
        'hitpoints': 95,
        'magic': 86,
        'attack': 57,
        'defense': 100,
        'intellect': 157,
        'speed': 77,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 461,
    'name': 'Imperialdramon Fighter Mode Black',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 270,
    'eggCycles': 95,
    'base': {
        'hitpoints': 85,
        'magic': 121,
        'attack': 100,
        'defense': 100,
        'intellect': 93,
        'speed': 120,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 462,
    'name': 'Imperialdramon Paladin Mode',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 290,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 105,
        'attack': 105,
        'defense': 105,
        'intellect': 105,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 463,
    'name': 'Justimon Accel Arm',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 289,
    'eggCycles': 95,
    'base': {
        'hitpoints': 95,
        'magic': 60,
        'attack': 130,
        'defense': 100,
        'intellect': 60,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 464,
    'name': 'Justimon Blitz Arm',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 281,
    'eggCycles': 95,
    'base': {
        'hitpoints': 85,
        'magic': 88,
        'attack': 72,
        'defense': 65,
        'intellect': 95,
        'speed': 140,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 465,
    'name': 'Justimon Critical Arm',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 279,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 141,
        'attack': 128,
        'defense': 50,
        'intellect': 60,
        'speed': 64,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 466,
    'name': 'Kuzuhamon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 283,
    'eggCycles': 95,
    'base': {
        'hitpoints': 85,
        'magic': 105,
        'attack': 45,
        'defense': 80,
        'intellect': 130,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 467,
    'name': 'Megidramon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 297,
    'eggCycles': 95,
    'base': {
        'hitpoints': 125,
        'magic': 67,
        'attack': 150,
        'defense': 83,
        'intellect': 60,
        'speed': 90,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 468,
    'name': 'Ofanimon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 299,
    'eggCycles': 95,
    'base': {
        'hitpoints': 45,
        'magic': 120,
        'attack': 65,
        'defense': 130,
        'intellect': 120,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 469,
    'name': 'Parallelmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 288,
    'eggCycles': 95,
    'base': {
        'hitpoints': 154,
        'magic': 84,
        'attack': 100,
        'defense': 104,
        'intellect': 40,
        'speed': 117,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 470,
    'name': 'Saint Galgomon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 263,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 79,
        'attack': 100,
        'defense': 90,
        'intellect': 70,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 471,
    'name': 'Sakuyamon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 270,
    'eggCycles': 95,
    'base': {
        'hitpoints': 60,
        'magic': 115,
        'attack': 55,
        'defense': 70,
        'intellect': 125,
        'speed': 115,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 472,
    'name': 'Sakuyamon Miko Mode',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 270,
    'eggCycles': 95,
    'base': {
        'hitpoints': 65,
        'magic': 146,
        'attack': 65,
        'defense': 65,
        'intellect': 102,
        'speed': 82,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 473,
    'name': 'Zeed Millenniumon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 294,
    'eggCycles': 95,
    'base': {
        'hitpoints': 139,
        'magic': 143,
        'attack': 129,
        'defense': 33,
        'intellect': 40,
        'speed': 79,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 474,
    'name': 'Culumon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fast,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 1,
        'magic': 255,
        'attack': 1,
        'defense': 1,
        'intellect': 1,
        'speed': 1,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 475,
    'name': 'Keemon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 23,
    'eggCycles': 5,
    'base': {
        'hitpoints': 24,
        'magic': 11,
        'attack': 20,
        'defense': 29,
        'intellect': 30,
        'speed': 26,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 476,
    'name': 'Puttimon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 23,
    'eggCycles': 5,
    'base': {
        'hitpoints': 32,
        'magic': 32,
        'attack': 15,
        'defense': 15,
        'intellect': 33,
        'speed': 12,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 477,
    'name': 'Cupimon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.mediumslow,
    'exp': 80,
    'eggCycles': 10,
    'base': {
        'hitpoints': 13,
        'magic': 28,
        'attack': 20,
        'defense': 31,
        'intellect': 41,
        'speed': 37,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 478,
    'name': 'Torikara Ballmon',
    'catchRate': 40,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.mediumslow,
    'exp': 57,
    'eggCycles': 10,
    'base': {
        'hitpoints': 43,
        'magic': 18,
        'attack': 29,
        'defense': 26,
        'intellect': 20,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 479,
    'name': 'Yarmon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.mediumslow,
    'exp': 51,
    'eggCycles': 10,
    'base': {
        'hitpoints': 27,
        'magic': 19,
        'attack': 25,
        'defense': 15,
        'intellect': 47,
        'speed': 37,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 480,
    'name': 'Bearmon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 109,
    'eggCycles': 15,
    'base': {
        'hitpoints': 49,
        'magic': 35,
        'attack': 36,
        'defense': 48,
        'intellect': 29,
        'speed': 31,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 481,
    'name': 'Bemmon',
    'catchRate': 35,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 91,
    'eggCycles': 15,
    'base': {
        'hitpoints': 60,
        'magic': 19,
        'attack': 26,
        'defense': 19,
        'intellect': 51,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 482,
    'name': 'Bokomon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 89,
    'eggCycles': 15,
    'base': {
        'hitpoints': 39,
        'magic': 36,
        'attack': 32,
        'defense': 30,
        'intellect': 56,
        'speed': 32,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 483,
    'name': 'Burgamon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 119,
    'eggCycles': 15,
    'base': {
        'hitpoints': 34,
        'magic': 34,
        'attack': 34,
        'defense': 42,
        'intellect': 50,
        'speed': 26,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 484,
    'name': 'Cardmon C1',
    'catchRate': 35,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 95,
    'eggCycles': 15,
    'base': {
        'hitpoints': 36,
        'magic': 69,
        'attack': 44,
        'defense': 29,
        'intellect': 28,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 485,
    'name': 'Ebi Burgamon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 80,
    'eggCycles': 15,
    'base': {
        'hitpoints': 48,
        'magic': 21,
        'attack': 32,
        'defense': 49,
        'intellect': 33,
        'speed': 29,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 486,
    'name': 'Koemon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 98,
    'eggCycles': 15,
    'base': {
        'hitpoints': 39,
        'magic': 41,
        'attack': 60,
        'defense': 20,
        'intellect': 21,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 487,
    'name': 'Kotemon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 117,
    'eggCycles': 15,
    'base': {
        'hitpoints': 21,
        'magic': 20,
        'attack': 45,
        'defense': 31,
        'intellect': 46,
        'speed': 57,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 488,
    'name': 'Neamon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 81,
    'eggCycles': 15,
    'base': {
        'hitpoints': 32,
        'magic': 33,
        'attack': 26,
        'defense': 30,
        'intellect': 68,
        'speed': 33,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 489,
    'name': 'Blimpmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 192,
    'eggCycles': 25,
    'base': {
        'hitpoints': 77,
        'magic': 40,
        'attack': 30,
        'defense': 85,
        'intellect': 40,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 490,
    'name': 'Boogiemon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 198,
    'eggCycles': 25,
    'base': {
        'hitpoints': 21,
        'magic': 65,
        'attack': 65,
        'defense': 33,
        'intellect': 66,
        'speed': 66,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 491,
    'name': 'Burgamon Adult',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 190,
    'eggCycles': 25,
    'base': {
        'hitpoints': 100,
        'magic': 84,
        'attack': 20,
        'defense': 80,
        'intellect': 20,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 492,
    'name': 'Darcmon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 183,
    'eggCycles': 25,
    'base': {
        'hitpoints': 45,
        'magic': 53,
        'attack': 42,
        'defense': 40,
        'intellect': 81,
        'speed': 64,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 493,
    'name': 'Dinohumon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 162,
    'eggCycles': 25,
    'base': {
        'hitpoints': 34,
        'magic': 32,
        'attack': 95,
        'defense': 25,
        'intellect': 25,
        'speed': 102,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 494,
    'name': 'Fangmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 189,
    'eggCycles': 25,
    'base': {
        'hitpoints': 46,
        'magic': 98,
        'attack': 22,
        'defense': 23,
        'intellect': 57,
        'speed': 61,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 495,
    'name': 'Gladimon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 196,
    'eggCycles': 25,
    'base': {
        'hitpoints': 55,
        'magic': 41,
        'attack': 41,
        'defense': 99,
        'intellect': 41,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 496,
    'name': 'Gryzmon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 184,
    'eggCycles': 25,
    'base': {
        'hitpoints': 89,
        'magic': 59,
        'attack': 59,
        'defense': 43,
        'intellect': 34,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 497,
    'name': 'Hookmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 176,
    'eggCycles': 25,
    'base': {
        'hitpoints': 61,
        'magic': 43,
        'attack': 41,
        'defense': 43,
        'intellect': 78,
        'speed': 51,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 498,
    'name': 'Kougamon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 186,
    'eggCycles': 25,
    'base': {
        'hitpoints': 70,
        'magic': 66,
        'attack': 73,
        'defense': 33,
        'intellect': 22,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 499,
    'name': 'Mikemon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 172,
    'eggCycles': 25,
    'base': {
        'hitpoints': 39,
        'magic': 83,
        'attack': 28,
        'defense': 50,
        'intellect': 23,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 500,
    'name': 'Snatchmon',
    'catchRate': 25,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 176,
    'eggCycles': 25,
    'base': {
        'hitpoints': 101,
        'magic': 38,
        'attack': 40,
        'defense': 23,
        'intellect': 90,
        'speed': 31,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 501,
    'name': 'Trailmon Worm',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 174,
    'eggCycles': 25,
    'base': {
        'hitpoints': 99,
        'magic': 23,
        'attack': 23,
        'defense': 101,
        'intellect': 22,
        'speed': 47,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 502,
    'name': 'Witchmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 184,
    'eggCycles': 25,
    'base': {
        'hitpoints': 58,
        'magic': 98,
        'attack': 27,
        'defense': 60,
        'intellect': 33,
        'speed': 45,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 503,
    'name': 'XV-mon Black',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 178,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'magic': 59,
        'attack': 50,
        'defense': 50,
        'intellect': 50,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 504,
    'name': 'Assaultmon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 222,
    'eggCycles': 40,
    'base': {
        'hitpoints': 84,
        'magic': 87,
        'attack': 119,
        'defense': 45,
        'intellect': 52,
        'speed': 45,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 505,
    'name': 'Bastemon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 252,
    'eggCycles': 40,
    'base': {
        'hitpoints': 88,
        'magic': 106,
        'attack': 37,
        'defense': 60,
        'intellect': 48,
        'speed': 108,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 506,
    'name': 'Betsumon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 210,
    'eggCycles': 40,
    'base': {
        'hitpoints': 91,
        'magic': 81,
        'attack': 77,
        'defense': 43,
        'intellect': 102,
        'speed': 42,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 507,
    'name': 'Black King Numemon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 252,
    'eggCycles': 40,
    'base': {
        'hitpoints': 95,
        'magic': 60,
        'attack': 45,
        'defense': 105,
        'intellect': 45,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 508,
    'name': 'Destromon',
    'catchRate': 15,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 247,
    'eggCycles': 40,
    'base': {
        'hitpoints': 130,
        'magic': 87,
        'attack': 95,
        'defense': 33,
        'intellect': 33,
        'speed': 61,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 509,
    'name': 'Hippogriffomon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 220,
    'eggCycles': 40,
    'base': {
        'hitpoints': 55,
        'magic': 85,
        'attack': 58,
        'defense': 33,
        'intellect': 94,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 510,
    'name': 'Jewelbeemon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 202,
    'eggCycles': 40,
    'base': {
        'hitpoints': 49,
        'magic': 50,
        'attack': 82,
        'defense': 88,
        'intellect': 74,
        'speed': 111,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 511,
    'name': 'Kyukimon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 204,
    'eggCycles': 40,
    'base': {
        'hitpoints': 69,
        'magic': 80,
        'attack': 67,
        'defense': 71,
        'intellect': 79,
        'speed': 79,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 512,
    'name': 'Locomon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 223,
    'eggCycles': 40,
    'base': {
        'hitpoints': 65,
        'magic': 43,
        'attack': 42,
        'defense': 101,
        'intellect': 42,
        'speed': 115,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 513,
    'name': 'Lucemon Falldown Mode',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 217,
    'eggCycles': 40,
    'base': {
        'hitpoints': 90,
        'magic': 90,
        'attack': 105,
        'defense': 70,
        'intellect': 145,
        'speed': 90,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 514,
    'name': 'Mermaimon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 257,
    'eggCycles': 40,
    'base': {
        'hitpoints': 97,
        'magic': 98,
        'attack': 48,
        'defense': 50,
        'intellect': 87,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 515,
    'name': 'Mistymon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 233,
    'eggCycles': 40,
    'base': {
        'hitpoints': 101,
        'magic': 64,
        'attack': 75,
        'defense': 29,
        'intellect': 110,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 516,
    'name': 'Neo Devimon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 215,
    'eggCycles': 40,
    'base': {
        'hitpoints': 38,
        'magic': 104,
        'attack': 96,
        'defense': 49,
        'intellect': 99,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 517,
    'name': 'Phelesmon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 201,
    'eggCycles': 40,
    'base': {
        'hitpoints': 41,
        'magic': 102,
        'attack': 64,
        'defense': 41,
        'intellect': 138,
        'speed': 51,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 518,
    'name': 'Valvemon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 211,
    'eggCycles': 40,
    'base': {
        'hitpoints': 82,
        'magic': 39,
        'attack': 71,
        'defense': 126,
        'intellect': 50,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 519,
    'name': 'Wisemon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 256,
    'eggCycles': 40,
    'base': {
        'hitpoints': 40,
        'magic': 105,
        'attack': 30,
        'defense': 135,
        'intellect': 40,
        'speed': 75,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 520,
    'name': 'Ancient Beatmon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 286,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 91,
        'attack': 124,
        'defense': 127,
        'intellect': 77,
        'speed': 77,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 521,
    'name': 'Ancient Garurumon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 265,
    'eggCycles': 95,
    'base': {
        'hitpoints': 39,
        'magic': 97,
        'attack': 117,
        'defense': 75,
        'intellect': 53,
        'speed': 169,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 522,
    'name': 'Ancient Greymon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 295,
    'eggCycles': 95,
    'base': {
        'hitpoints': 141,
        'magic': 108,
        'attack': 113,
        'defense': 70,
        'intellect': 100,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 523,
    'name': 'Ancient Irismon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 292,
    'eggCycles': 95,
    'base': {
        'hitpoints': 81,
        'magic': 110,
        'attack': 96,
        'defense': 96,
        'intellect': 123,
        'speed': 77,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 524,
    'name': 'Ancient Megatheriumon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 265,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 87,
        'attack': 43,
        'defense': 148,
        'intellect': 72,
        'speed': 145,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 525,
    'name': 'Ancient Mermaimon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 287,
    'eggCycles': 95,
    'base': {
        'hitpoints': 77,
        'magic': 77,
        'attack': 77,
        'defense': 77,
        'intellect': 159,
        'speed': 124,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 526,
    'name': 'Ancient Sphinxmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 296,
    'eggCycles': 95,
    'base': {
        'hitpoints': 84,
        'magic': 59,
        'attack': 77,
        'defense': 107,
        'intellect': 140,
        'speed': 46,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 527,
    'name': 'Ancient Troiamon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 265,
    'eggCycles': 95,
    'base': {
        'hitpoints': 134,
        'magic': 78,
        'attack': 66,
        'defense': 154,
        'intellect': 66,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 528,
    'name': 'Ancient Volcamon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 297,
    'eggCycles': 95,
    'base': {
        'hitpoints': 143,
        'magic': 53,
        'attack': 69,
        'defense': 66,
        'intellect': 66,
        'speed': 143,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 529,
    'name': 'Ancient Wisemon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 262,
    'eggCycles': 95,
    'base': {
        'hitpoints': 97,
        'magic': 77,
        'attack': 39,
        'defense': 110,
        'intellect': 121,
        'speed': 94,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 530,
    'name': 'Black Seraphimon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 279,
    'eggCycles': 95,
    'base': {
        'hitpoints': 46,
        'magic': 125,
        'attack': 95,
        'defense': 95,
        'intellect': 104,
        'speed': 73,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 531,
    'name': 'Callismon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 265,
    'eggCycles': 95,
    'base': {
        'hitpoints': 136,
        'magic': 71,
        'attack': 96,
        'defense': 133,
        'intellect': 34,
        'speed': 48,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 532,
    'name': 'Cannondramon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 266,
    'eggCycles': 95,
    'base': {
        'hitpoints': 170,
        'magic': 59,
        'attack': 123,
        'defense': 67,
        'intellect': 31,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 533,
    'name': 'Chaosdramon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 270,
    'eggCycles': 95,
    'base': {
        'hitpoints': 105,
        'magic': 60,
        'attack': 140,
        'defense': 115,
        'intellect': 70,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 534,
    'name': 'Dominimon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 267,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 128,
        'attack': 100,
        'defense': 100,
        'intellect': 50,
        'speed': 45,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 535,
    'name': 'Dynasmon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 296,
    'eggCycles': 95,
    'base': {
        'hitpoints': 110,
        'magic': 70,
        'attack': 150,
        'defense': 85,
        'intellect': 55,
        'speed': 120,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 536,
    'name': 'Fujinmon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 262,
    'eggCycles': 95,
    'base': {
        'hitpoints': 50,
        'magic': 50,
        'attack': 66,
        'defense': 104,
        'intellect': 143,
        'speed': 167,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 537,
    'name': 'Grand Locomon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 273,
    'eggCycles': 95,
    'base': {
        'hitpoints': 65,
        'magic': 65,
        'attack': 91,
        'defense': 150,
        'intellect': 80,
        'speed': 89,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 538,
    'name': 'Huanglongmon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 277,
    'eggCycles': 95,
    'base': {
        'hitpoints': 104,
        'magic': 105,
        'attack': 104,
        'defense': 104,
        'intellect': 104,
        'speed': 104,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 539,
    'name': 'Lilithmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 266,
    'eggCycles': 95,
    'base': {
        'hitpoints': 55,
        'magic': 140,
        'attack': 60,
        'defense': 60,
        'intellect': 160,
        'speed': 115,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 540,
    'name': 'Lord Knightmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 265,
    'eggCycles': 95,
    'base': {
        'hitpoints': 80,
        'magic': 100,
        'attack': 95,
        'defense': 90,
        'intellect': 95,
        'speed': 130,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 541,
    'name': 'Lucemon Satan Mode',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 287,
    'eggCycles': 95,
    'base': {
        'hitpoints': 110,
        'magic': 110,
        'attack': 50,
        'defense': 80,
        'intellect': 170,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 542,
    'name': 'Marsmon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 268,
    'eggCycles': 95,
    'base': {
        'hitpoints': 97,
        'magic': 106,
        'attack': 148,
        'defense': 73,
        'intellect': 65,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 543,
    'name': 'Metamormon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 286,
    'eggCycles': 95,
    'base': {
        'hitpoints': 153,
        'magic': 36,
        'attack': 141,
        'defense': 89,
        'intellect': 69,
        'speed': 92,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 544,
    'name': 'Murmukusmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 298,
    'eggCycles': 95,
    'base': {
        'hitpoints': 111,
        'magic': 148,
        'attack': 32,
        'defense': 129,
        'intellect': 117,
        'speed': 49,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 545,
    'name': 'Ornismon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 287,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 50,
        'attack': 100,
        'defense': 90,
        'intellect': 67,
        'speed': 113,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 546,
    'name': 'Parasimon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 291,
    'eggCycles': 95,
    'base': {
        'hitpoints': 155,
        'magic': 62,
        'attack': 96,
        'defense': 34,
        'intellect': 55,
        'speed': 132,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 547,
    'name': 'Pile Volcamon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 262,
    'eggCycles': 95,
    'base': {
        'hitpoints': 75,
        'magic': 70,
        'attack': 110,
        'defense': 105,
        'intellect': 72,
        'speed': 88,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 548,
    'name': 'Ragnamon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 278,
    'eggCycles': 95,
    'base': {
        'hitpoints': 160,
        'magic': 132,
        'attack': 124,
        'defense': 51,
        'intellect': 72,
        'speed': 54,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 549,
    'name': 'Raidenmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 289,
    'eggCycles': 95,
    'base': {
        'hitpoints': 148,
        'magic': 70,
        'attack': 115,
        'defense': 34,
        'intellect': 70,
        'speed': 137,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 550,
    'name': 'Raijinmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 290,
    'eggCycles': 95,
    'base': {
        'hitpoints': 98,
        'magic': 103,
        'attack': 55,
        'defense': 68,
        'intellect': 114,
        'speed': 103,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 551,
    'name': 'Regulumon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 274,
    'eggCycles': 95,
    'base': {
        'hitpoints': 144,
        'magic': 71,
        'attack': 133,
        'defense': 61,
        'intellect': 92,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 552,
    'name': 'Slash Angemon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 266,
    'eggCycles': 95,
    'base': {
        'hitpoints': 81,
        'magic': 39,
        'attack': 110,
        'defense': 87,
        'intellect': 57,
        'speed': 138,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 553,
    'name': 'Suijinmon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 278,
    'eggCycles': 95,
    'base': {
        'hitpoints': 168,
        'magic': 38,
        'attack': 121,
        'defense': 101,
        'intellect': 73,
        'speed': 38,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 554,
    'name': 'Susanoomon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 281,
    'eggCycles': 95,
    'base': {
        'hitpoints': 105,
        'magic': 90,
        'attack': 120,
        'defense': 100,
        'intellect': 110,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 555,
    'name': 'Ulforce V-dramon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 279,
    'eggCycles': 95,
    'base': {
        'hitpoints': 110,
        'magic': 85,
        'attack': 125,
        'defense': 65,
        'intellect': 65,
        'speed': 140,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 556,
    'name': 'Fla Wizarmon',
    'catchRate': 20,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fast,
    'exp': 137,
    'eggCycles': 20,
    'base': {
        'hitpoints': 70,
        'magic': 81,
        'attack': 42,
        'defense': 53,
        'intellect': 62,
        'speed': 42,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 557,
    'name': 'Kenkimon',
    'catchRate': 20,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 152,
    'eggCycles': 20,
    'base': {
        'hitpoints': 45,
        'magic': 53,
        'attack': 54,
        'defense': 82,
        'intellect': 81,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 558,
    'name': 'Salamandamon',
    'catchRate': 20,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fast,
    'exp': 123,
    'eggCycles': 20,
    'base': {
        'hitpoints': 59,
        'magic': 75,
        'attack': 76,
        'defense': 54,
        'intellect': 52,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 559,
    'name': 'Thunderbirmon',
    'catchRate': 20,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.fast,
    'exp': 130,
    'eggCycles': 20,
    'base': {
        'hitpoints': 70,
        'magic': 72,
        'attack': 57,
        'defense': 46,
        'intellect': 63,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 560,
    'name': 'Agnimon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fast,
    'exp': 159,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'magic': 35,
        'attack': 85,
        'defense': 44,
        'intellect': 35,
        'speed': 66,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 561,
    'name': 'Aldamon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fast,
    'exp': 134,
    'eggCycles': 20,
    'base': {
        'hitpoints': 82,
        'magic': 45,
        'attack': 65,
        'defense': 82,
        'intellect': 46,
        'speed': 120,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 562,
    'name': 'Arbormon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fast,
    'exp': 153,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'magic': 62,
        'attack': 26,
        'defense': 73,
        'intellect': 28,
        'speed': 69,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 563,
    'name': 'Beowolfmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 128,
    'eggCycles': 20,
    'base': {
        'hitpoints': 78,
        'magic': 52,
        'attack': 85,
        'defense': 65,
        'intellect': 60,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 564,
    'name': 'Blitzmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.fast,
    'exp': 128,
    'eggCycles': 20,
    'base': {
        'hitpoints': 48,
        'magic': 55,
        'attack': 55,
        'defense': 70,
        'intellect': 18,
        'speed': 74,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 565,
    'name': 'Blizzarmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fast,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'magic': 66,
        'attack': 50,
        'defense': 65,
        'intellect': 72,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 566,
    'name': 'Bolgmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.fast,
    'exp': 145,
    'eggCycles': 20,
    'base': {
        'hitpoints': 48,
        'magic': 70,
        'attack': 50,
        'defense': 82,
        'intellect': 31,
        'speed': 78,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 567,
    'name': 'Calamaramon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fast,
    'exp': 153,
    'eggCycles': 20,
    'base': {
        'hitpoints': 69,
        'magic': 68,
        'attack': 40,
        'defense': 45,
        'intellect': 78,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 568,
    'name': 'Chackmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fast,
    'exp': 133,
    'eggCycles': 20,
    'base': {
        'hitpoints': 40,
        'magic': 63,
        'attack': 67,
        'defense': 18,
        'intellect': 74,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 569,
    'name': 'Daipenmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fast,
    'exp': 124,
    'eggCycles': 20,
    'base': {
        'hitpoints': 110,
        'magic': 86,
        'attack': 24,
        'defense': 100,
        'intellect': 25,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 570,
    'name': 'Duskmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.fast,
    'exp': 126,
    'eggCycles': 20,
    'base': {
        'hitpoints': 67,
        'magic': 62,
        'attack': 73,
        'defense': 30,
        'intellect': 18,
        'speed': 69,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 571,
    'name': 'Fairimon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 142,
    'eggCycles': 20,
    'base': {
        'hitpoints': 45,
        'magic': 62,
        'attack': 30,
        'defense': 56,
        'intellect': 57,
        'speed': 69,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 572,
    'name': 'Flamon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fast,
    'exp': 129,
    'eggCycles': 20,
    'base': {
        'hitpoints': 43,
        'magic': 45,
        'attack': 20,
        'defense': 20,
        'intellect': 53,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 573,
    'name': 'Garummon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 151,
    'eggCycles': 20,
    'base': {
        'hitpoints': 40,
        'magic': 66,
        'attack': 75,
        'defense': 55,
        'intellect': 30,
        'speed': 74,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 574,
    'name': 'Gigasmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 145,
    'eggCycles': 20,
    'base': {
        'hitpoints': 101,
        'magic': 72,
        'attack': 11,
        'defense': 85,
        'intellect': 21,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 575,
    'name': 'Grottomon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 144,
    'eggCycles': 20,
    'base': {
        'hitpoints': 88,
        'magic': 63,
        'attack': 9,
        'defense': 74,
        'intellect': 18,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 576,
    'name': 'Jet Silphymon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 148,
    'eggCycles': 20,
    'base': {
        'hitpoints': 50,
        'magic': 70,
        'attack': 60,
        'defense': 79,
        'intellect': 20,
        'speed': 83,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 577,
    'name': 'Kaiser Greymon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fast,
    'exp': 153,
    'eggCycles': 20,
    'base': {
        'hitpoints': 115,
        'magic': 50,
        'attack': 148,
        'defense': 107,
        'intellect': 65,
        'speed': 90,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 578,
    'name': 'Kaiser Leomon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.fast,
    'exp': 121,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'magic': 68,
        'attack': 40,
        'defense': 80,
        'intellect': 36,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 579,
    'name': 'Löwemon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 125,
    'eggCycles': 20,
    'base': {
        'hitpoints': 88,
        'magic': 63,
        'attack': 45,
        'defense': 74,
        'intellect': 20,
        'speed': 31,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 580,
    'name': 'Magna Garurumon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 150,
    'eggCycles': 20,
    'base': {
        'hitpoints': 125,
        'magic': 78,
        'attack': 112,
        'defense': 60,
        'intellect': 75,
        'speed': 125,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 581,
    'name': 'Mercuremon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.fast,
    'exp': 139,
    'eggCycles': 20,
    'base': {
        'hitpoints': 54,
        'magic': 63,
        'attack': 40,
        'defense': 74,
        'intellect': 50,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 582,
    'name': 'Petaldramon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fast,
    'exp': 128,
    'eggCycles': 20,
    'base': {
        'hitpoints': 79,
        'magic': 68,
        'attack': 14,
        'defense': 91,
        'intellect': 19,
        'speed': 75,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 583,
    'name': 'Raihimon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.fast,
    'exp': 156,
    'eggCycles': 20,
    'base': {
        'hitpoints': 120,
        'magic': 86,
        'attack': 13,
        'defense': 100,
        'intellect': 25,
        'speed': 96,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 584,
    'name': 'Ranamon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fast,
    'exp': 141,
    'eggCycles': 20,
    'base': {
        'hitpoints': 24,
        'magic': 63,
        'attack': 33,
        'defense': 44,
        'intellect': 88,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 585,
    'name': 'Rhino Kabuterimon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.fast,
    'exp': 124,
    'eggCycles': 20,
    'base': {
        'hitpoints': 93,
        'magic': 86,
        'attack': 96,
        'defense': 100,
        'intellect': 25,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 586,
    'name': 'Sephirothmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 122,
    'eggCycles': 20,
    'base': {
        'hitpoints': 47,
        'magic': 95,
        'attack': 30,
        'defense': 96,
        'intellect': 19,
        'speed': 59,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 587,
    'name': 'Shutumon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 137,
    'eggCycles': 20,
    'base': {
        'hitpoints': 25,
        'magic': 86,
        'attack': 34,
        'defense': 99,
        'intellect': 100,
        'speed': 96,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 588,
    'name': 'Strabimon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 125,
    'eggCycles': 20,
    'base': {
        'hitpoints': 44,
        'magic': 46,
        'attack': 54,
        'defense': 23,
        'intellect': 16,
        'speed': 51,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 589,
    'name': 'Velgrmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 146,
    'eggCycles': 20,
    'base': {
        'hitpoints': 56,
        'magic': 68,
        'attack': 50,
        'defense': 76,
        'intellect': 19,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 590,
    'name': 'Vritramon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fast,
    'exp': 135,
    'eggCycles': 20,
    'base': {
        'hitpoints': 73,
        'magic': 67,
        'attack': 79,
        'defense': 30,
        'intellect': 19,
        'speed': 75,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 591,
    'name': 'Wolfmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 127,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'magic': 40,
        'attack': 80,
        'defense': 37,
        'intellect': 30,
        'speed': 68,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 592,
    'name': 'Būmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fast,
    'exp': 136,
    'eggCycles': 20,
    'base': {
        'hitpoints': 29,
        'magic': 31,
        'attack': 30,
        'defense': 30,
        'intellect': 30,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 593,
    'name': 'Dodomon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 24,
    'eggCycles': 5,
    'base': {
        'hitpoints': 17,
        'magic': 28,
        'attack': 29,
        'defense': 24,
        'intellect': 20,
        'speed': 22,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 594,
    'name': 'Fufumon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 29,
    'eggCycles': 5,
    'base': {
        'hitpoints': 17,
        'magic': 11,
        'attack': 21,
        'defense': 29,
        'intellect': 30,
        'speed': 31,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 595,
    'name': 'Pupumon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 27,
    'eggCycles': 5,
    'base': {
        'hitpoints': 19,
        'magic': 17,
        'attack': 20,
        'defense': 20,
        'intellect': 33,
        'speed': 31,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 596,
    'name': 'Dorimon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumslow,
    'exp': 49,
    'eggCycles': 10,
    'base': {
        'hitpoints': 26,
        'magic': 34,
        'attack': 35,
        'defense': 13,
        'intellect': 28,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 597,
    'name': 'Kyokyomon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 47,
    'eggCycles': 10,
    'base': {
        'hitpoints': 26,
        'magic': 26,
        'attack': 26,
        'defense': 29,
        'intellect': 16,
        'speed': 47,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 598,
    'name': 'Puroromon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.mediumslow,
    'exp': 47,
    'eggCycles': 10,
    'base': {
        'hitpoints': 21,
        'magic': 34,
        'attack': 24,
        'defense': 19,
        'intellect': 44,
        'speed': 28,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 599,
    'name': 'Agumon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 94,
    'eggCycles': 15,
    'base': {
        'hitpoints': 22,
        'magic': 56,
        'attack': 52,
        'defense': 35,
        'intellect': 26,
        'speed': 28,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 600,
    'name': 'Betamon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 15,
    'base': {
        'hitpoints': 53,
        'magic': 51,
        'attack': 48,
        'defense': 23,
        'intellect': 25,
        'speed': 28,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 601,
    'name': 'DORUmon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 113,
    'eggCycles': 15,
    'base': {
        'hitpoints': 44,
        'magic': 21,
        'attack': 65,
        'defense': 35,
        'intellect': 17,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 602,
    'name': 'Funbeemon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 119,
    'eggCycles': 15,
    'base': {
        'hitpoints': 28,
        'magic': 30,
        'attack': 41,
        'defense': 28,
        'intellect': 34,
        'speed': 49,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 603,
    'name': 'Gabumon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 88,
    'eggCycles': 15,
    'base': {
        'hitpoints': 28,
        'magic': 26,
        'attack': 44,
        'defense': 46,
        'intellect': 37,
        'speed': 46,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 604,
    'name': 'Ganimon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 82,
    'eggCycles': 15,
    'base': {
        'hitpoints': 41,
        'magic': 30,
        'attack': 39,
        'defense': 50,
        'intellect': 17,
        'speed': 36,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 605,
    'name': 'Gazimon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 110,
    'eggCycles': 15,
    'base': {
        'hitpoints': 57,
        'magic': 27,
        'attack': 67,
        'defense': 23,
        'intellect': 27,
        'speed': 27,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 606,
    'name': 'Gomamon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 116,
    'eggCycles': 15,
    'base': {
        'hitpoints': 36,
        'magic': 49,
        'attack': 24,
        'defense': 41,
        'intellect': 54,
        'speed': 22,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 607,
    'name': 'Gottsumon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 104,
    'eggCycles': 15,
    'base': {
        'hitpoints': 63,
        'magic': 32,
        'attack': 34,
        'defense': 67,
        'intellect': 16,
        'speed': 15,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 608,
    'name': 'Guilmon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 96,
    'eggCycles': 15,
    'base': {
        'hitpoints': 22,
        'magic': 22,
        'attack': 36,
        'defense': 39,
        'intellect': 42,
        'speed': 68,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 609,
    'name': 'Kokuwamon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 113,
    'eggCycles': 15,
    'base': {
        'hitpoints': 40,
        'magic': 30,
        'attack': 35,
        'defense': 34,
        'intellect': 38,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 610,
    'name': 'Otamamon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 113,
    'eggCycles': 15,
    'base': {
        'hitpoints': 58,
        'magic': 34,
        'attack': 36,
        'defense': 55,
        'intellect': 20,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 611,
    'name': 'Palmon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 88,
    'eggCycles': 15,
    'base': {
        'hitpoints': 30,
        'magic': 55,
        'attack': 45,
        'defense': 31,
        'intellect': 32,
        'speed': 32,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 612,
    'name': 'Plotmon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.mediumfast,
    'exp': 92,
    'eggCycles': 15,
    'base': {
        'hitpoints': 44,
        'magic': 44,
        'attack': 20,
        'defense': 44,
        'intellect': 45,
        'speed': 28,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 613,
    'name': 'Ryudamon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 117,
    'eggCycles': 15,
    'base': {
        'hitpoints': 21,
        'magic': 29,
        'attack': 60,
        'defense': 53,
        'intellect': 18,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 614,
    'name': 'Shakomon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 84,
    'eggCycles': 15,
    'base': {
        'hitpoints': 47,
        'magic': 36,
        'attack': 16,
        'defense': 51,
        'intellect': 35,
        'speed': 26,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 615,
    'name': 'Allomon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 165,
    'eggCycles': 25,
    'base': {
        'hitpoints': 62,
        'magic': 38,
        'attack': 104,
        'defense': 38,
        'intellect': 38,
        'speed': 38,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 616,
    'name': 'Death-X-DORUgamon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 197,
    'eggCycles': 25,
    'base': {
        'hitpoints': 46,
        'magic': 63,
        'attack': 48,
        'defense': 40,
        'intellect': 46,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 617,
    'name': 'Dobermon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 179,
    'eggCycles': 25,
    'base': {
        'hitpoints': 40,
        'magic': 48,
        'attack': 73,
        'defense': 24,
        'intellect': 52,
        'speed': 83,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 618,
    'name': 'DORUgamon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 197,
    'eggCycles': 25,
    'base': {
        'hitpoints': 60,
        'magic': 40,
        'attack': 75,
        'defense': 45,
        'intellect': 30,
        'speed': 65,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 619,
    'name': 'Garurumon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 169,
    'eggCycles': 25,
    'base': {
        'hitpoints': 25,
        'magic': 25,
        'attack': 58,
        'defense': 66,
        'intellect': 40,
        'speed': 98,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 620,
    'name': 'Gesomon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 161,
    'eggCycles': 25,
    'base': {
        'hitpoints': 95,
        'magic': 29,
        'attack': 22,
        'defense': 85,
        'intellect': 47,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 621,
    'name': 'Ginryumon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 162,
    'eggCycles': 25,
    'base': {
        'hitpoints': 39,
        'magic': 42,
        'attack': 72,
        'defense': 70,
        'intellect': 32,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 622,
    'name': 'Greymon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 179,
    'eggCycles': 25,
    'base': {
        'hitpoints': 24,
        'magic': 80,
        'attack': 47,
        'defense': 44,
        'intellect': 56,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 623,
    'name': 'Growmon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 195,
    'eggCycles': 25,
    'base': {
        'hitpoints': 89,
        'magic': 71,
        'attack': 41,
        'defense': 30,
        'intellect': 37,
        'speed': 49,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 624,
    'name': 'Kuwagamon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 189,
    'eggCycles': 25,
    'base': {
        'hitpoints': 67,
        'magic': 25,
        'attack': 95,
        'defense': 25,
        'intellect': 25,
        'speed': 75,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 625,
    'name': 'Leomon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 189,
    'eggCycles': 25,
    'base': {
        'hitpoints': 37,
        'magic': 53,
        'attack': 47,
        'defense': 79,
        'intellect': 82,
        'speed': 25,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 626,
    'name': 'Mantaraymon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 176,
    'eggCycles': 25,
    'base': {
        'hitpoints': 23,
        'magic': 22,
        'attack': 55,
        'defense': 94,
        'intellect': 80,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 627,
    'name': 'Monochromon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 178,
    'eggCycles': 25,
    'base': {
        'hitpoints': 99,
        'magic': 25,
        'attack': 88,
        'defense': 55,
        'intellect': 26,
        'speed': 25,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 628,
    'name': 'Nefertimon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 179,
    'eggCycles': 25,
    'base': {
        'hitpoints': 37,
        'magic': 77,
        'attack': 20,
        'defense': 62,
        'intellect': 79,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 629,
    'name': 'Omekamon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 189,
    'eggCycles': 25,
    'base': {
        'hitpoints': 84,
        'magic': 52,
        'attack': 30,
        'defense': 25,
        'intellect': 92,
        'speed': 37,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 630,
    'name': 'Pteranomon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 167,
    'eggCycles': 25,
    'base': {
        'hitpoints': 30,
        'magic': 22,
        'attack': 69,
        'defense': 63,
        'intellect': 22,
        'speed': 99,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 631,
    'name': 'Raptordramon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 172,
    'eggCycles': 25,
    'base': {
        'hitpoints': 60,
        'magic': 25,
        'attack': 92,
        'defense': 52,
        'intellect': 20,
        'speed': 56,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 632,
    'name': 'Rhinomon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 166,
    'eggCycles': 25,
    'base': {
        'hitpoints': 69,
        'magic': 24,
        'attack': 55,
        'defense': 80,
        'intellect': 54,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 633,
    'name': 'Seadramon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 197,
    'eggCycles': 25,
    'base': {
        'hitpoints': 46,
        'magic': 55,
        'attack': 60,
        'defense': 40,
        'intellect': 42,
        'speed': 73,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 634,
    'name': 'Starmon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 198,
    'eggCycles': 25,
    'base': {
        'hitpoints': 32,
        'magic': 94,
        'attack': 40,
        'defense': 71,
        'intellect': 40,
        'speed': 46,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 635,
    'name': 'Tailmon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 174,
    'eggCycles': 25,
    'base': {
        'hitpoints': 23,
        'magic': 90,
        'attack': 68,
        'defense': 55,
        'intellect': 46,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 636,
    'name': 'Tobucatmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 197,
    'eggCycles': 25,
    'base': {
        'hitpoints': 47,
        'magic': 53,
        'attack': 25,
        'defense': 59,
        'intellect': 86,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 637,
    'name': 'Togemon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 194,
    'eggCycles': 25,
    'base': {
        'hitpoints': 93,
        'magic': 50,
        'attack': 56,
        'defense': 29,
        'intellect': 51,
        'speed': 31,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 638,
    'name': 'Tylomon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 182,
    'eggCycles': 25,
    'base': {
        'hitpoints': 49,
        'magic': 36,
        'attack': 64,
        'defense': 44,
        'intellect': 31,
        'speed': 99,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 639,
    'name': 'Waspmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 194,
    'eggCycles': 25,
    'base': {
        'hitpoints': 60,
        'magic': 30,
        'attack': 70,
        'defense': 55,
        'intellect': 35,
        'speed': 55,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 640,
    'name': 'Anomalocarimon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 215,
    'eggCycles': 40,
    'base': {
        'hitpoints': 130,
        'magic': 26,
        'attack': 63,
        'defense': 45,
        'intellect': 94,
        'speed': 93,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 641,
    'name': 'Cannonbeemon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 257,
    'eggCycles': 40,
    'base': {
        'hitpoints': 55,
        'magic': 70,
        'attack': 80,
        'defense': 90,
        'intellect': 50,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 642,
    'name': 'Cerberumon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 201,
    'eggCycles': 40,
    'base': {
        'hitpoints': 37,
        'magic': 53,
        'attack': 75,
        'defense': 38,
        'intellect': 73,
        'speed': 133,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 643,
    'name': 'Death-X-DORUguremon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 211,
    'eggCycles': 40,
    'base': {
        'hitpoints': 92,
        'magic': 128,
        'attack': 118,
        'defense': 40,
        'intellect': 34,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 644,
    'name': 'DORUguremon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 240,
    'eggCycles': 40,
    'base': {
        'hitpoints': 90,
        'magic': 45,
        'attack': 98,
        'defense': 95,
        'intellect': 45,
        'speed': 67,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 645,
    'name': 'Garudamon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 259,
    'eggCycles': 40,
    'base': {
        'hitpoints': 40,
        'magic': 75,
        'attack': 95,
        'defense': 40,
        'intellect': 103,
        'speed': 97,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 646,
    'name': 'Grademon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 206,
    'eggCycles': 40,
    'base': {
        'hitpoints': 80,
        'magic': 48,
        'attack': 115,
        'defense': 45,
        'intellect': 42,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 647,
    'name': 'Hisyaryumon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 248,
    'eggCycles': 40,
    'base': {
        'hitpoints': 62,
        'magic': 45,
        'attack': 120,
        'defense': 113,
        'intellect': 35,
        'speed': 65,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 648,
    'name': 'Lilimon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 223,
    'eggCycles': 40,
    'base': {
        'hitpoints': 62,
        'magic': 123,
        'attack': 87,
        'defense': 70,
        'intellect': 51,
        'speed': 47,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 649,
    'name': 'Mametyramon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 217,
    'eggCycles': 40,
    'base': {
        'hitpoints': 59,
        'magic': 34,
        'attack': 118,
        'defense': 117,
        'intellect': 34,
        'speed': 51,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 650,
    'name': 'Mammon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 251,
    'eggCycles': 40,
    'base': {
        'hitpoints': 102,
        'magic': 58,
        'attack': 62,
        'defense': 120,
        'intellect': 44,
        'speed': 54,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 651,
    'name': 'Mega Seadramon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 229,
    'eggCycles': 40,
    'base': {
        'hitpoints': 51,
        'magic': 73,
        'attack': 66,
        'defense': 47,
        'intellect': 74,
        'speed': 114,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 652,
    'name': 'Megalo Growmon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 206,
    'eggCycles': 40,
    'base': {
        'hitpoints': 105,
        'magic': 83,
        'attack': 101,
        'defense': 29,
        'intellect': 66,
        'speed': 38,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 653,
    'name': 'Metal Fantomon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 217,
    'eggCycles': 40,
    'base': {
        'hitpoints': 33,
        'magic': 100,
        'attack': 97,
        'defense': 111,
        'intellect': 33,
        'speed': 33,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 654,
    'name': 'Metal Greymon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 208,
    'eggCycles': 40,
    'base': {
        'hitpoints': 110,
        'magic': 139,
        'attack': 57,
        'defense': 31,
        'intellect': 27,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 655,
    'name': 'Metal Tyranomon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 257,
    'eggCycles': 40,
    'base': {
        'hitpoints': 80,
        'magic': 34,
        'attack': 101,
        'defense': 111,
        'intellect': 33,
        'speed': 61,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 656,
    'name': 'Ookuwamon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 249,
    'eggCycles': 40,
    'base': {
        'hitpoints': 103,
        'magic': 27,
        'attack': 94,
        'defense': 47,
        'intellect': 27,
        'speed': 107,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 657,
    'name': 'Panjyamon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 248,
    'eggCycles': 40,
    'base': {
        'hitpoints': 135,
        'magic': 115,
        'attack': 60,
        'defense': 44,
        'intellect': 34,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 658,
    'name': 'Skull Baluchimon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 207,
    'eggCycles': 40,
    'base': {
        'hitpoints': 56,
        'magic': 99,
        'attack': 79,
        'defense': 43,
        'intellect': 88,
        'speed': 36,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 659,
    'name': 'Triceramon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 244,
    'eggCycles': 40,
    'base': {
        'hitpoints': 46,
        'magic': 60,
        'attack': 125,
        'defense': 74,
        'intellect': 33,
        'speed': 92,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 660,
    'name': 'Vademon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 222,
    'eggCycles': 40,
    'base': {
        'hitpoints': 34,
        'magic': 70,
        'attack': 77,
        'defense': 30,
        'intellect': 124,
        'speed': 71,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 661,
    'name': 'Were Garurumon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 204,
    'eggCycles': 40,
    'base': {
        'hitpoints': 125,
        'magic': 33,
        'attack': 133,
        'defense': 38,
        'intellect': 38,
        'speed': 86,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 662,
    'name': 'Alphamon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 264,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 79,
        'attack': 105,
        'defense': 120,
        'intellect': 105,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 663,
    'name': 'Alphamon Ouryuken',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 273,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 80,
        'attack': 130,
        'defense': 100,
        'intellect': 110,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 664,
    'name': 'Arkadimon Super Ultimate',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 271,
    'eggCycles': 95,
    'base': {
        'hitpoints': 98,
        'magic': 105,
        'attack': 155,
        'defense': 60,
        'intellect': 85,
        'speed': 117,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 665,
    'name': 'Barbamon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 272,
    'eggCycles': 95,
    'base': {
        'hitpoints': 80,
        'magic': 126,
        'attack': 45,
        'defense': 80,
        'intellect': 170,
        'speed': 89,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 666,
    'name': 'Death-X-DORUgoramon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 284,
    'eggCycles': 95,
    'base': {
        'hitpoints': 130,
        'magic': 158,
        'attack': 68,
        'defense': 74,
        'intellect': 30,
        'speed': 81,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 667,
    'name': 'Death-X-mon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 298,
    'eggCycles': 95,
    'base': {
        'hitpoints': 89,
        'magic': 121,
        'attack': 92,
        'defense': 140,
        'intellect': 52,
        'speed': 65,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 668,
    'name': 'Demon Super Ultimate',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 292,
    'eggCycles': 95,
    'base': {
        'hitpoints': 130,
        'magic': 115,
        'attack': 69,
        'defense': 40,
        'intellect': 159,
        'speed': 107,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 669,
    'name': 'Dinorexmon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 293,
    'eggCycles': 95,
    'base': {
        'hitpoints': 92,
        'magic': 82,
        'attack': 107,
        'defense': 44,
        'intellect': 52,
        'speed': 164,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 670,
    'name': 'Dinotigermon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 268,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 97,
        'attack': 86,
        'defense': 105,
        'intellect': 30,
        'speed': 123,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 671,
    'name': 'DORUgoramon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 263,
    'eggCycles': 95,
    'base': {
        'hitpoints': 115,
        'magic': 42,
        'attack': 167,
        'defense': 90,
        'intellect': 30,
        'speed': 96,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 672,
    'name': 'Dukemon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 260,
    'eggCycles': 95,
    'base': {
        'hitpoints': 70,
        'magic': 91,
        'attack': 104,
        'defense': 83,
        'intellect': 155,
        'speed': 48,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 673,
    'name': 'Dynasmon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 298,
    'eggCycles': 95,
    'base': {
        'hitpoints': 50,
        'magic': 50,
        'attack': 125,
        'defense': 162,
        'intellect': 65,
        'speed': 135,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 674,
    'name': 'Ebemon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 285,
    'eggCycles': 95,
    'base': {
        'hitpoints': 65,
        'magic': 50,
        'attack': 92,
        'defense': 150,
        'intellect': 166,
        'speed': 58,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 675,
    'name': 'Gaioumon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 293,
    'eggCycles': 95,
    'base': {
        'hitpoints': 105,
        'magic': 55,
        'attack': 140,
        'defense': 85,
        'intellect': 55,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 676,
    'name': 'Giga Seadramon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 298,
    'eggCycles': 95,
    'base': {
        'hitpoints': 64,
        'magic': 116,
        'attack': 99,
        'defense': 145,
        'intellect': 60,
        'speed': 139,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 677,
    'name': 'Goddramon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 284,
    'eggCycles': 95,
    'base': {
        'hitpoints': 42,
        'magic': 105,
        'attack': 136,
        'defense': 85,
        'intellect': 146,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 678,
    'name': 'Grandis Kuwagamon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 294,
    'eggCycles': 95,
    'base': {
        'hitpoints': 101,
        'magic': 45,
        'attack': 119,
        'defense': 137,
        'intellect': 45,
        'speed': 131,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 679,
    'name': 'Holydramon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 276,
    'eggCycles': 95,
    'base': {
        'hitpoints': 162,
        'magic': 106,
        'attack': 130,
        'defense': 76,
        'intellect': 50,
        'speed': 56,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 680,
    'name': 'Leviamon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 269,
    'eggCycles': 95,
    'base': {
        'hitpoints': 110,
        'magic': 76,
        'attack': 115,
        'defense': 105,
        'intellect': 95,
        'speed': 89,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 681,
    'name': 'Lucemon Larva',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 270,
    'eggCycles': 95,
    'base': {
        'hitpoints': 1,
        'magic': 170,
        'attack': 1,
        'defense': 160,
        'intellect': 200,
        'speed': 1,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 682,
    'name': 'Magnamon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 296,
    'eggCycles': 95,
    'base': {
        'hitpoints': 60,
        'magic': 93,
        'attack': 84,
        'defense': 134,
        'intellect': 76,
        'speed': 76,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 683,
    'name': 'Medieval Dukemon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 284,
    'eggCycles': 95,
    'base': {
        'hitpoints': 64,
        'magic': 95,
        'attack': 70,
        'defense': 100,
        'intellect': 130,
        'speed': 78,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 684,
    'name': 'Megidramon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 282,
    'eggCycles': 95,
    'base': {
        'hitpoints': 140,
        'magic': 33,
        'attack': 119,
        'defense': 60,
        'intellect': 133,
        'speed': 102,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 685,
    'name': 'Metal Garurumon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 292,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 33,
        'attack': 85,
        'defense': 145,
        'intellect': 91,
        'speed': 88,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 686,
    'name': 'Metal Piranimon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 294,
    'eggCycles': 95,
    'base': {
        'hitpoints': 152,
        'magic': 86,
        'attack': 124,
        'defense': 117,
        'intellect': 34,
        'speed': 56,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 687,
    'name': 'Omegamon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 283,
    'eggCycles': 95,
    'base': {
        'hitpoints': 133,
        'magic': 36,
        'attack': 126,
        'defense': 50,
        'intellect': 155,
        'speed': 42,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 688,
    'name': 'Ouryumon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 262,
    'eggCycles': 95,
    'base': {
        'hitpoints': 77,
        'magic': 60,
        'attack': 158,
        'defense': 135,
        'intellect': 45,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 689,
    'name': 'Plesiomon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 285,
    'eggCycles': 95,
    'base': {
        'hitpoints': 85,
        'magic': 38,
        'attack': 87,
        'defense': 159,
        'intellect': 98,
        'speed': 113,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 690,
    'name': 'Rosemon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 300,
    'eggCycles': 95,
    'base': {
        'hitpoints': 150,
        'magic': 59,
        'attack': 121,
        'defense': 38,
        'intellect': 112,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 691,
    'name': 'Skull Mammon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 277,
    'eggCycles': 95,
    'base': {
        'hitpoints': 131,
        'magic': 82,
        'attack': 109,
        'defense': 150,
        'intellect': 37,
        'speed': 71,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 692,
    'name': 'Tiger Vespamon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 264,
    'eggCycles': 95,
    'base': {
        'hitpoints': 105,
        'magic': 60,
        'attack': 130,
        'defense': 70,
        'intellect': 60,
        'speed': 115,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 693,
    'name': 'Ulforce V-dramon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 293,
    'eggCycles': 95,
    'base': {
        'hitpoints': 130,
        'magic': 49,
        'attack': 88,
        'defense': 49,
        'intellect': 103,
        'speed': 166,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 694,
    'name': 'Ulforce V-dramon Future Mode',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 284,
    'eggCycles': 95,
    'base': {
        'hitpoints': 117,
        'magic': 108,
        'attack': 66,
        'defense': 68,
        'intellect': 63,
        'speed': 146,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 695,
    'name': 'Ultimate Brachimon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 287,
    'eggCycles': 95,
    'base': {
        'hitpoints': 149,
        'magic': 49,
        'attack': 118,
        'defense': 114,
        'intellect': 49,
        'speed': 69,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 696,
    'name': 'War Greymon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 275,
    'eggCycles': 95,
    'base': {
        'hitpoints': 170,
        'magic': 80,
        'attack': 119,
        'defense': 69,
        'intellect': 30,
        'speed': 71,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 697,
    'name': 'Black Guilmon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 80,
    'eggCycles': 15,
    'base': {
        'hitpoints': 40,
        'magic': 59,
        'attack': 56,
        'defense': 20,
        'intellect': 17,
        'speed': 24,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 698,
    'name': 'Hagurumon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 89,
    'eggCycles': 15,
    'base': {
        'hitpoints': 52,
        'magic': 17,
        'attack': 49,
        'defense': 55,
        'intellect': 36,
        'speed': 17,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 699,
    'name': 'Phascomon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 94,
    'eggCycles': 15,
    'base': {
        'hitpoints': 46,
        'magic': 41,
        'attack': 36,
        'defense': 48,
        'intellect': 34,
        'speed': 14,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 700,
    'name': 'Porcupamon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 162,
    'eggCycles': 25,
    'base': {
        'hitpoints': 38,
        'magic': 40,
        'attack': 67,
        'defense': 70,
        'intellect': 68,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 701,
    'name': 'Thunderballmon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 162,
    'eggCycles': 25,
    'base': {
        'hitpoints': 40,
        'magic': 87,
        'attack': 81,
        'defense': 40,
        'intellect': 30,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 702,
    'name': 'Astamon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 235,
    'eggCycles': 40,
    'base': {
        'hitpoints': 50,
        'magic': 129,
        'attack': 114,
        'defense': 50,
        'intellect': 36,
        'speed': 63,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 703,
    'name': 'Mamemon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 248,
    'eggCycles': 40,
    'base': {
        'hitpoints': 91,
        'magic': 113,
        'attack': 40,
        'defense': 93,
        'intellect': 27,
        'speed': 90,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 704,
    'name': 'Metal Mamemon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 246,
    'eggCycles': 40,
    'base': {
        'hitpoints': 87,
        'magic': 121,
        'attack': 39,
        'defense': 91,
        'intellect': 32,
        'speed': 63,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 705,
    'name': 'Belphemon Rage Mode',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 279,
    'eggCycles': 95,
    'base': {
        'hitpoints': 120,
        'magic': 45,
        'attack': 184,
        'defense': 110,
        'intellect': 70,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 706,
    'name': 'Belphemon Sleep Mode',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 298,
    'eggCycles': 95,
    'base': {
        'hitpoints': 120,
        'magic': 120,
        'attack': 50,
        'defense': 65,
        'intellect': 140,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 707,
    'name': 'Chaosdramon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 273,
    'eggCycles': 95,
    'base': {
        'hitpoints': 85,
        'magic': 83,
        'attack': 123,
        'defense': 158,
        'intellect': 40,
        'speed': 51,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 708,
    'name': 'Prince Mamemon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 290,
    'eggCycles': 95,
    'base': {
        'hitpoints': 60,
        'magic': 65,
        'attack': 68,
        'defense': 74,
        'intellect': 166,
        'speed': 82,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 709,
    'name': 'Bommon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 16,
    'eggCycles': 5,
    'base': {
        'hitpoints': 23,
        'magic': 23,
        'attack': 20,
        'defense': 25,
        'intellect': 15,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 710,
    'name': 'Pafumon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 20,
    'eggCycles': 5,
    'base': {
        'hitpoints': 15,
        'magic': 25,
        'attack': 24,
        'defense': 13,
        'intellect': 33,
        'speed': 29,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 711,
    'name': 'Popomon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 18,
    'eggCycles': 5,
    'base': {
        'hitpoints': 23,
        'magic': 24,
        'attack': 21,
        'defense': 28,
        'intellect': 29,
        'speed': 15,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 712,
    'name': 'Puwamon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 29,
    'eggCycles': 5,
    'base': {
        'hitpoints': 27,
        'magic': 18,
        'attack': 23,
        'defense': 25,
        'intellect': 15,
        'speed': 31,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 713,
    'name': 'Frimon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumslow,
    'exp': 52,
    'eggCycles': 10,
    'base': {
        'hitpoints': 14,
        'magic': 31,
        'attack': 18,
        'defense': 18,
        'intellect': 46,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 714,
    'name': 'Kyaromon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.mediumslow,
    'exp': 43,
    'eggCycles': 10,
    'base': {
        'hitpoints': 20,
        'magic': 27,
        'attack': 28,
        'defense': 32,
        'intellect': 40,
        'speed': 23,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 715,
    'name': 'Missimon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.mediumslow,
    'exp': 77,
    'eggCycles': 10,
    'base': {
        'hitpoints': 14,
        'magic': 29,
        'attack': 40,
        'defense': 20,
        'intellect': 20,
        'speed': 47,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 716,
    'name': 'Pinamon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.mediumslow,
    'exp': 58,
    'eggCycles': 10,
    'base': {
        'hitpoints': 25,
        'magic': 35,
        'attack': 36,
        'defense': 19,
        'intellect': 16,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 717,
    'name': 'Tokomon X-Antibody',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumslow,
    'exp': 52,
    'eggCycles': 10,
    'base': {
        'hitpoints': 18,
        'magic': 46,
        'attack': 20,
        'defense': 16,
        'intellect': 35,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 718,
    'name': 'Agumon 2006',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 89,
    'eggCycles': 15,
    'base': {
        'hitpoints': 23,
        'magic': 50,
        'attack': 33,
        'defense': 14,
        'intellect': 46,
        'speed': 64,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 719,
    'name': 'Commandramon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 15,
    'base': {
        'hitpoints': 26,
        'magic': 16,
        'attack': 51,
        'defense': 22,
        'intellect': 55,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 720,
    'name': 'Dracumon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 84,
    'eggCycles': 15,
    'base': {
        'hitpoints': 38,
        'magic': 32,
        'attack': 55,
        'defense': 25,
        'intellect': 30,
        'speed': 45,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 721,
    'name': 'Falcomon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 120,
    'eggCycles': 15,
    'base': {
        'hitpoints': 57,
        'magic': 40,
        'attack': 22,
        'defense': 43,
        'intellect': 19,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 722,
    'name': 'Kokabuterimon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 120,
    'eggCycles': 15,
    'base': {
        'hitpoints': 51,
        'magic': 22,
        'attack': 21,
        'defense': 69,
        'intellect': 18,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 723,
    'name': 'Kudamon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.mediumfast,
    'exp': 85,
    'eggCycles': 15,
    'base': {
        'hitpoints': 20,
        'magic': 65,
        'attack': 14,
        'defense': 30,
        'intellect': 54,
        'speed': 47,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 724,
    'name': 'Liollmon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 98,
    'eggCycles': 15,
    'base': {
        'hitpoints': 33,
        'magic': 26,
        'attack': 32,
        'defense': 44,
        'intellect': 44,
        'speed': 45,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 725,
    'name': 'Swimmon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 99,
    'eggCycles': 15,
    'base': {
        'hitpoints': 35,
        'magic': 30,
        'attack': 30,
        'defense': 40,
        'intellect': 35,
        'speed': 58,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 726,
    'name': 'Blade Kuwagamon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 191,
    'eggCycles': 25,
    'base': {
        'hitpoints': 64,
        'magic': 26,
        'attack': 80,
        'defense': 73,
        'intellect': 26,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 727,
    'name': 'Diatrymon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 188,
    'eggCycles': 25,
    'base': {
        'hitpoints': 66,
        'magic': 57,
        'attack': 42,
        'defense': 51,
        'intellect': 30,
        'speed': 69,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 728,
    'name': 'Liamon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 194,
    'eggCycles': 25,
    'base': {
        'hitpoints': 74,
        'magic': 27,
        'attack': 70,
        'defense': 20,
        'intellect': 40,
        'speed': 93,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 729,
    'name': 'Reppamon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 163,
    'eggCycles': 25,
    'base': {
        'hitpoints': 35,
        'magic': 65,
        'attack': 45,
        'defense': 50,
        'intellect': 50,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 730,
    'name': 'Sangloupmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 176,
    'eggCycles': 25,
    'base': {
        'hitpoints': 55,
        'magic': 41,
        'attack': 70,
        'defense': 38,
        'intellect': 41,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 731,
    'name': 'Sealsdramon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 197,
    'eggCycles': 25,
    'base': {
        'hitpoints': 80,
        'magic': 20,
        'attack': 52,
        'defense': 24,
        'intellect': 84,
        'speed': 57,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 732,
    'name': 'Loader Leomon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 240,
    'eggCycles': 40,
    'base': {
        'hitpoints': 46,
        'magic': 40,
        'attack': 100,
        'defense': 135,
        'intellect': 40,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 733,
    'name': 'Matadrmon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 226,
    'eggCycles': 40,
    'base': {
        'hitpoints': 85,
        'magic': 50,
        'attack': 95,
        'defense': 40,
        'intellect': 55,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 734,
    'name': 'Metallife Kuwagamon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 239,
    'eggCycles': 40,
    'base': {
        'hitpoints': 52,
        'magic': 33,
        'attack': 107,
        'defense': 115,
        'intellect': 68,
        'speed': 74,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 735,
    'name': 'Tankdramon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 258,
    'eggCycles': 40,
    'base': {
        'hitpoints': 29,
        'magic': 29,
        'attack': 128,
        'defense': 66,
        'intellect': 50,
        'speed': 116,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 736,
    'name': 'Tyilinmon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 226,
    'eggCycles': 40,
    'base': {
        'hitpoints': 50,
        'magic': 80,
        'attack': 75,
        'defense': 70,
        'intellect': 75,
        'speed': 105,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 737,
    'name': 'Volcdramon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 255,
    'eggCycles': 40,
    'base': {
        'hitpoints': 92,
        'magic': 49,
        'attack': 109,
        'defense': 63,
        'intellect': 27,
        'speed': 84,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 738,
    'name': 'Yatagaramon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 224,
    'eggCycles': 40,
    'base': {
        'hitpoints': 26,
        'magic': 60,
        'attack': 104,
        'defense': 50,
        'intellect': 76,
        'speed': 117,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 739,
    'name': 'Bancho Leomon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 297,
    'eggCycles': 95,
    'base': {
        'hitpoints': 105,
        'magic': 45,
        'attack': 130,
        'defense': 131,
        'intellect': 40,
        'speed': 89,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 740,
    'name': 'Beelzebumon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 265,
    'eggCycles': 95,
    'base': {
        'hitpoints': 30,
        'magic': 125,
        'attack': 163,
        'defense': 69,
        'intellect': 40,
        'speed': 144,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 741,
    'name': 'Black War Greymon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 289,
    'eggCycles': 95,
    'base': {
        'hitpoints': 42,
        'magic': 104,
        'attack': 126,
        'defense': 119,
        'intellect': 35,
        'speed': 131,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 742,
    'name': 'Chaosmon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 290,
    'eggCycles': 95,
    'base': {
        'hitpoints': 50,
        'magic': 85,
        'attack': 255,
        'defense': 50,
        'intellect': 50,
        'speed': 130,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 743,
    'name': 'Clavis Angemon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 278,
    'eggCycles': 95,
    'base': {
        'hitpoints': 115,
        'magic': 47,
        'attack': 92,
        'defense': 115,
        'intellect': 116,
        'speed': 83,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 744,
    'name': 'Craniummon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 262,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 90,
        'attack': 80,
        'defense': 145,
        'intellect': 90,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 745,
    'name': 'Darkdramon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 277,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 55,
        'attack': 125,
        'defense': 90,
        'intellect': 60,
        'speed': 90,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 746,
    'name': 'Grand Dracumon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 300,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 87,
        'attack': 125,
        'defense': 65,
        'intellect': 120,
        'speed': 88,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 747,
    'name': 'Herakle Kabuterimon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 277,
    'eggCycles': 95,
    'base': {
        'hitpoints': 116,
        'magic': 57,
        'attack': 125,
        'defense': 141,
        'intellect': 30,
        'speed': 57,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 748,
    'name': 'Mercurymon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 268,
    'eggCycles': 95,
    'base': {
        'hitpoints': 83,
        'magic': 66,
        'attack': 125,
        'defense': 75,
        'intellect': 88,
        'speed': 138,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 749,
    'name': 'Minervamon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 294,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 70,
        'attack': 145,
        'defense': 70,
        'intellect': 80,
        'speed': 110,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 750,
    'name': 'Neptunemon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 269,
    'eggCycles': 95,
    'base': {
        'hitpoints': 95,
        'magic': 88,
        'attack': 105,
        'defense': 67,
        'intellect': 120,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 751,
    'name': 'Sleipmon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 291,
    'eggCycles': 95,
    'base': {
        'hitpoints': 70,
        'magic': 100,
        'attack': 90,
        'defense': 105,
        'intellect': 105,
        'speed': 120,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 752,
    'name': 'Spinomon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 293,
    'eggCycles': 95,
    'base': {
        'hitpoints': 112,
        'magic': 74,
        'attack': 56,
        'defense': 67,
        'intellect': 117,
        'speed': 128,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 753,
    'name': 'Tyrant Kabuterimon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 265,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 50,
        'attack': 135,
        'defense': 115,
        'intellect': 60,
        'speed': 115,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 754,
    'name': 'Ultimate Chaosmon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 267,
    'eggCycles': 95,
    'base': {
        'hitpoints': 110,
        'magic': 150,
        'attack': 149,
        'defense': 92,
        'intellect': 34,
        'speed': 54,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 755,
    'name': 'Valdurmon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 276,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 120,
        'attack': 40,
        'defense': 50,
        'intellect': 150,
        'speed': 115,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 756,
    'name': 'Budmon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.mediumslow,
    'exp': 59,
    'eggCycles': 10,
    'base': {
        'hitpoints': 23,
        'magic': 27,
        'attack': 27,
        'defense': 38,
        'intellect': 23,
        'speed': 32,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 757,
    'name': 'Chapmon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.mediumslow,
    'exp': 78,
    'eggCycles': 10,
    'base': {
        'hitpoints': 21,
        'magic': 37,
        'attack': 36,
        'defense': 17,
        'intellect': 38,
        'speed': 21,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 758,
    'name': 'Wanyamon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.mediumslow,
    'exp': 68,
    'eggCycles': 10,
    'base': {
        'hitpoints': 30,
        'magic': 29,
        'attack': 30,
        'defense': 26,
        'intellect': 26,
        'speed': 29,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 759,
    'name': 'Agumon Black 2006',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 114,
    'eggCycles': 15,
    'base': {
        'hitpoints': 45,
        'magic': 58,
        'attack': 30,
        'defense': 16,
        'intellect': 36,
        'speed': 37,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 760,
    'name': 'Agumon Hakase',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 91,
    'eggCycles': 15,
    'base': {
        'hitpoints': 16,
        'magic': 36,
        'attack': 15,
        'defense': 61,
        'intellect': 62,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 761,
    'name': 'Bushi Agumon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 108,
    'eggCycles': 15,
    'base': {
        'hitpoints': 41,
        'magic': 20,
        'attack': 32,
        'defense': 16,
        'intellect': 56,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 762,
    'name': 'Falcomon 2006',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 91,
    'eggCycles': 15,
    'base': {
        'hitpoints': 30,
        'magic': 40,
        'attack': 45,
        'defense': 30,
        'intellect': 30,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 763,
    'name': 'Gaomon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 95,
    'eggCycles': 15,
    'base': {
        'hitpoints': 45,
        'magic': 25,
        'attack': 55,
        'defense': 30,
        'intellect': 27,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 764,
    'name': 'Kamemon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 82,
    'eggCycles': 15,
    'base': {
        'hitpoints': 25,
        'magic': 30,
        'attack': 32,
        'defense': 61,
        'intellect': 52,
        'speed': 18,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 765,
    'name': 'Kudamon 2006',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.mediumfast,
    'exp': 80,
    'eggCycles': 15,
    'base': {
        'hitpoints': 35,
        'magic': 56,
        'attack': 30,
        'defense': 30,
        'intellect': 45,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 766,
    'name': 'Lalamon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 83,
    'eggCycles': 15,
    'base': {
        'hitpoints': 47,
        'magic': 30,
        'attack': 34,
        'defense': 34,
        'intellect': 30,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 767,
    'name': 'Minidekachimon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 102,
    'eggCycles': 15,
    'base': {
        'hitpoints': 25,
        'magic': 53,
        'attack': 35,
        'defense': 23,
        'intellect': 23,
        'speed': 57,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 768,
    'name': 'Nise Agumon Hakase',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 120,
    'eggCycles': 15,
    'base': {
        'hitpoints': 29,
        'magic': 62,
        'attack': 16,
        'defense': 28,
        'intellect': 50,
        'speed': 31,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 769,
    'name': 'Pawn Chessmon Black',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 97,
    'eggCycles': 15,
    'base': {
        'hitpoints': 18,
        'magic': 18,
        'attack': 63,
        'defense': 71,
        'intellect': 23,
        'speed': 37,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 770,
    'name': 'Pawn Chessmon White',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 104,
    'eggCycles': 15,
    'base': {
        'hitpoints': 18,
        'magic': 24,
        'attack': 71,
        'defense': 63,
        'intellect': 17,
        'speed': 31,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 771,
    'name': 'Proto Gizmon',
    'catchRate': 35,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 110,
    'eggCycles': 15,
    'base': {
        'hitpoints': 39,
        'magic': 22,
        'attack': 17,
        'defense': 30,
        'intellect': 68,
        'speed': 37,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 772,
    'name': 'Santa Agumon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 107,
    'eggCycles': 15,
    'base': {
        'hitpoints': 38,
        'magic': 38,
        'attack': 37,
        'defense': 37,
        'intellect': 39,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 773,
    'name': 'Yuki Agumon 2006',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 115,
    'eggCycles': 15,
    'base': {
        'hitpoints': 49,
        'magic': 40,
        'attack': 41,
        'defense': 32,
        'intellect': 32,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 774,
    'name': 'Atamadekachimon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 186,
    'eggCycles': 25,
    'base': {
        'hitpoints': 35,
        'magic': 35,
        'attack': 57,
        'defense': 41,
        'intellect': 62,
        'speed': 81,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 775,
    'name': 'Black Gaogamon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 183,
    'eggCycles': 25,
    'base': {
        'hitpoints': 21,
        'magic': 22,
        'attack': 95,
        'defense': 22,
        'intellect': 102,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 776,
    'name': 'Gaogamon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 196,
    'eggCycles': 25,
    'base': {
        'hitpoints': 30,
        'magic': 55,
        'attack': 60,
        'defense': 45,
        'intellect': 50,
        'speed': 75,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 777,
    'name': 'Gawappamon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 178,
    'eggCycles': 25,
    'base': {
        'hitpoints': 45,
        'magic': 65,
        'attack': 60,
        'defense': 29,
        'intellect': 62,
        'speed': 51,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 778,
    'name': 'Geo Greymon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 193,
    'eggCycles': 25,
    'base': {
        'hitpoints': 75,
        'magic': 45,
        'attack': 80,
        'defense': 40,
        'intellect': 25,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 779,
    'name': 'Gizmon AT',
    'catchRate': 25,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 175,
    'eggCycles': 25,
    'base': {
        'hitpoints': 30,
        'magic': 30,
        'attack': 59,
        'defense': 54,
        'intellect': 85,
        'speed': 52,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 780,
    'name': 'Gold Numemon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 187,
    'eggCycles': 25,
    'base': {
        'hitpoints': 60,
        'magic': 66,
        'attack': 20,
        'defense': 80,
        'intellect': 35,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 781,
    'name': 'Knight Chessmon Black',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 170,
    'eggCycles': 25,
    'base': {
        'hitpoints': 63,
        'magic': 35,
        'attack': 57,
        'defense': 65,
        'intellect': 51,
        'speed': 55,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 782,
    'name': 'Knight Chessmon White',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 165,
    'eggCycles': 25,
    'base': {
        'hitpoints': 41,
        'magic': 37,
        'attack': 57,
        'defense': 55,
        'intellect': 65,
        'speed': 56,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 783,
    'name': 'Peckmon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 166,
    'eggCycles': 25,
    'base': {
        'hitpoints': 35,
        'magic': 60,
        'attack': 55,
        'defense': 35,
        'intellect': 45,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 784,
    'name': 'Sunflowmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 172,
    'eggCycles': 25,
    'base': {
        'hitpoints': 65,
        'magic': 55,
        'attack': 25,
        'defense': 40,
        'intellect': 78,
        'speed': 42,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 785,
    'name': 'Yoxtu!Yoxtu!mon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 163,
    'eggCycles': 25,
    'base': {
        'hitpoints': 68,
        'magic': 94,
        'attack': 50,
        'defense': 52,
        'intellect': 23,
        'speed': 31,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 786,
    'name': 'Algomon Perfect',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 237,
    'eggCycles': 40,
    'base': {
        'hitpoints': 110,
        'magic': 60,
        'attack': 107,
        'defense': 46,
        'intellect': 40,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 787,
    'name': 'Bishop Chessmon White',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 242,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 108,
        'attack': 40,
        'defense': 40,
        'intellect': 122,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 788,
    'name': 'Gizmon XT',
    'catchRate': 15,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 223,
    'eggCycles': 40,
    'base': {
        'hitpoints': 53,
        'magic': 34,
        'attack': 71,
        'defense': 103,
        'intellect': 140,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 789,
    'name': 'Lilamon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 256,
    'eggCycles': 40,
    'base': {
        'hitpoints': 75,
        'magic': 90,
        'attack': 30,
        'defense': 55,
        'intellect': 105,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 790,
    'name': 'Mach Gaogamon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 246,
    'eggCycles': 40,
    'base': {
        'hitpoints': 90,
        'magic': 45,
        'attack': 95,
        'defense': 50,
        'intellect': 45,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 791,
    'name': 'Rize Greymon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 208,
    'eggCycles': 40,
    'base': {
        'hitpoints': 95,
        'magic': 50,
        'attack': 115,
        'defense': 65,
        'intellect': 30,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 792,
    'name': 'Rook Chessmon Black',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 254,
    'eggCycles': 40,
    'base': {
        'hitpoints': 131,
        'magic': 36,
        'attack': 34,
        'defense': 148,
        'intellect': 49,
        'speed': 28,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 793,
    'name': 'Shawujinmon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 237,
    'eggCycles': 40,
    'base': {
        'hitpoints': 95,
        'magic': 130,
        'attack': 76,
        'defense': 30,
        'intellect': 50,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 794,
    'name': 'Yatagaramon 2006',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 249,
    'eggCycles': 40,
    'base': {
        'hitpoints': 45,
        'magic': 75,
        'attack': 70,
        'defense': 55,
        'intellect': 70,
        'speed': 110,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 795,
    'name': 'Algomon Ultimate',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 273,
    'eggCycles': 95,
    'base': {
        'hitpoints': 160,
        'magic': 43,
        'attack': 78,
        'defense': 78,
        'intellect': 160,
        'speed': 84,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 796,
    'name': 'Bio Darkdramon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 268,
    'eggCycles': 95,
    'base': {
        'hitpoints': 83,
        'magic': 130,
        'attack': 130,
        'defense': 62,
        'intellect': 111,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 797,
    'name': 'Bio Lotusmon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 282,
    'eggCycles': 95,
    'base': {
        'hitpoints': 58,
        'magic': 146,
        'attack': 37,
        'defense': 98,
        'intellect': 98,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 798,
    'name': 'Bio Spinomon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 264,
    'eggCycles': 95,
    'base': {
        'hitpoints': 53,
        'magic': 34,
        'attack': 102,
        'defense': 63,
        'intellect': 137,
        'speed': 143,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 799,
    'name': 'Chronomon Destroy Mode',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 264,
    'eggCycles': 95,
    'base': {
        'hitpoints': 96,
        'magic': 150,
        'attack': 130,
        'defense': 31,
        'intellect': 87,
        'speed': 122,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 800,
    'name': 'Chronomon Holy Mode',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 261,
    'eggCycles': 95,
    'base': {
        'hitpoints': 168,
        'magic': 100,
        'attack': 59,
        'defense': 47,
        'intellect': 131,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 801,
    'name': 'El Doradimon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 299,
    'eggCycles': 95,
    'base': {
        'hitpoints': 111,
        'magic': 88,
        'attack': 100,
        'defense': 156,
        'intellect': 30,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 802,
    'name': 'Jumbo Gamemon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 290,
    'eggCycles': 95,
    'base': {
        'hitpoints': 107,
        'magic': 76,
        'attack': 99,
        'defense': 153,
        'intellect': 64,
        'speed': 49,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 803,
    'name': 'King Chessmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 286,
    'eggCycles': 95,
    'base': {
        'hitpoints': 54,
        'magic': 110,
        'attack': 31,
        'defense': 117,
        'intellect': 164,
        'speed': 119,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 804,
    'name': 'Mirage Gaogamon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 266,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 70,
        'attack': 120,
        'defense': 70,
        'intellect': 70,
        'speed': 120,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 805,
    'name': 'Mirage Gaogamon Burst Mode',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 289,
    'eggCycles': 95,
    'base': {
        'hitpoints': 95,
        'magic': 75,
        'attack': 120,
        'defense': 60,
        'intellect': 100,
        'speed': 125,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 806,
    'name': 'Platinum Numemon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 265,
    'eggCycles': 95,
    'base': {
        'hitpoints': 120,
        'magic': 79,
        'attack': 50,
        'defense': 115,
        'intellect': 65,
        'speed': 81,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 807,
    'name': 'Queen Chessmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 260,
    'eggCycles': 95,
    'base': {
        'hitpoints': 83,
        'magic': 20,
        'attack': 138,
        'defense': 87,
        'intellect': 100,
        'speed': 130,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 808,
    'name': 'Ravmon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 275,
    'eggCycles': 95,
    'base': {
        'hitpoints': 60,
        'magic': 90,
        'attack': 90,
        'defense': 70,
        'intellect': 90,
        'speed': 140,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 809,
    'name': 'Ravmon Burst Mode',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 282,
    'eggCycles': 95,
    'base': {
        'hitpoints': 60,
        'magic': 80,
        'attack': 100,
        'defense': 90,
        'intellect': 95,
        'speed': 150,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 810,
    'name': 'Shine Greymon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 290,
    'eggCycles': 95,
    'base': {
        'hitpoints': 130,
        'magic': 70,
        'attack': 140,
        'defense': 65,
        'intellect': 45,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 811,
    'name': 'Shine Greymon Burst Mode',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 288,
    'eggCycles': 95,
    'base': {
        'hitpoints': 140,
        'magic': 70,
        'attack': 165,
        'defense': 60,
        'intellect': 45,
        'speed': 110,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 812,
    'name': 'Shine Greymon Ruin Mode',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 265,
    'eggCycles': 95,
    'base': {
        'hitpoints': 55,
        'magic': 155,
        'attack': 141,
        'defense': 67,
        'intellect': 40,
        'speed': 117,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 813,
    'name': 'Tonosama Mamemon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 294,
    'eggCycles': 95,
    'base': {
        'hitpoints': 99,
        'magic': 115,
        'attack': 66,
        'defense': 110,
        'intellect': 145,
        'speed': 63,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 814,
    'name': 'Bio Coatlmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.fast,
    'exp': 151,
    'eggCycles': 20,
    'base': {
        'hitpoints': 52,
        'magic': 55,
        'attack': 56,
        'defense': 50,
        'intellect': 60,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 815,
    'name': 'Bio Stegomon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 152,
    'eggCycles': 20,
    'base': {
        'hitpoints': 83,
        'magic': 50,
        'attack': 80,
        'defense': 52,
        'intellect': 43,
        'speed': 57,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 816,
    'name': 'Bio Thunderbirmon',
    'catchRate': 20,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.fast,
    'exp': 156,
    'eggCycles': 20,
    'base': {
        'hitpoints': 70,
        'magic': 75,
        'attack': 41,
        'defense': 50,
        'intellect': 75,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 817,
    'name': 'Petitmon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 14,
    'eggCycles': 5,
    'base': {
        'hitpoints': 11,
        'magic': 16,
        'attack': 35,
        'defense': 20,
        'intellect': 22,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 818,
    'name': 'Babydmon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 79,
    'eggCycles': 10,
    'base': {
        'hitpoints': 22,
        'magic': 20,
        'attack': 46,
        'defense': 18,
        'intellect': 32,
        'speed': 32,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 819,
    'name': 'Chicchimon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Wind],
    'levelType': LevelType.mediumslow,
    'exp': 79,
    'eggCycles': 10,
    'base': {
        'hitpoints': 17,
        'magic': 31,
        'attack': 32,
        'defense': 16,
        'intellect': 33,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 820,
    'name': 'Moonmon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 66,
    'eggCycles': 10,
    'base': {
        'hitpoints': 32,
        'magic': 32,
        'attack': 34,
        'defense': 19,
        'intellect': 39,
        'speed': 14,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 821,
    'name': 'Sunmon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 44,
    'eggCycles': 10,
    'base': {
        'hitpoints': 43,
        'magic': 13,
        'attack': 42,
        'defense': 16,
        'intellect': 42,
        'speed': 14,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 822,
    'name': 'Coronamon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 119,
    'eggCycles': 15,
    'base': {
        'hitpoints': 52,
        'magic': 38,
        'attack': 40,
        'defense': 19,
        'intellect': 37,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 823,
    'name': 'Dracomon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 101,
    'eggCycles': 15,
    'base': {
        'hitpoints': 40,
        'magic': 30,
        'attack': 69,
        'defense': 10,
        'intellect': 31,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 824,
    'name': 'Lunamon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 87,
    'eggCycles': 15,
    'base': {
        'hitpoints': 26,
        'magic': 50,
        'attack': 36,
        'defense': 23,
        'intellect': 52,
        'speed': 38,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 825,
    'name': 'Coredramon Blue',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 177,
    'eggCycles': 25,
    'base': {
        'hitpoints': 65,
        'magic': 37,
        'attack': 88,
        'defense': 45,
        'intellect': 30,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 826,
    'name': 'Coredramon Green',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 190,
    'eggCycles': 25,
    'base': {
        'hitpoints': 65,
        'magic': 30,
        'attack': 88,
        'defense': 55,
        'intellect': 22,
        'speed': 65,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 827,
    'name': 'Firamon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 191,
    'eggCycles': 25,
    'base': {
        'hitpoints': 92,
        'magic': 22,
        'attack': 80,
        'defense': 27,
        'intellect': 22,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 828,
    'name': 'Grimmon',
    'catchRate': 25,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 193,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'magic': 96,
        'attack': 60,
        'defense': 24,
        'intellect': 24,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 829,
    'name': 'Lekismon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 166,
    'eggCycles': 25,
    'base': {
        'hitpoints': 35,
        'magic': 60,
        'attack': 45,
        'defense': 35,
        'intellect': 50,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 830,
    'name': 'Catch Mamemon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 228,
    'eggCycles': 40,
    'base': {
        'hitpoints': 93,
        'magic': 60,
        'attack': 65,
        'defense': 90,
        'intellect': 37,
        'speed': 55,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 831,
    'name': 'Chaos Grimmon',
    'catchRate': 15,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 239,
    'eggCycles': 40,
    'base': {
        'hitpoints': 65,
        'magic': 99,
        'attack': 39,
        'defense': 45,
        'intellect': 96,
        'speed': 99,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 832,
    'name': 'Crescemon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 253,
    'eggCycles': 40,
    'base': {
        'hitpoints': 55,
        'magic': 80,
        'attack': 80,
        'defense': 40,
        'intellect': 95,
        'speed': 75,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 833,
    'name': 'Dark Superstarmon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 209,
    'eggCycles': 40,
    'base': {
        'hitpoints': 42,
        'magic': 108,
        'attack': 62,
        'defense': 57,
        'intellect': 89,
        'speed': 84,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 834,
    'name': 'Flaremon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 250,
    'eggCycles': 40,
    'base': {
        'hitpoints': 130,
        'magic': 50,
        'attack': 114,
        'defense': 50,
        'intellect': 40,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 835,
    'name': 'Groundramon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 203,
    'eggCycles': 40,
    'base': {
        'hitpoints': 85,
        'magic': 45,
        'attack': 135,
        'defense': 85,
        'intellect': 35,
        'speed': 55,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 836,
    'name': 'Wingdramon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 252,
    'eggCycles': 40,
    'base': {
        'hitpoints': 80,
        'magic': 45,
        'attack': 100,
        'defense': 65,
        'intellect': 50,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 837,
    'name': 'Apollomon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 292,
    'eggCycles': 95,
    'base': {
        'hitpoints': 121,
        'magic': 95,
        'attack': 116,
        'defense': 59,
        'intellect': 91,
        'speed': 108,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 838,
    'name': 'Breakdramon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 276,
    'eggCycles': 95,
    'base': {
        'hitpoints': 130,
        'magic': 50,
        'attack': 150,
        'defense': 110,
        'intellect': 55,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 839,
    'name': 'Dianamon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 290,
    'eggCycles': 95,
    'base': {
        'hitpoints': 40,
        'magic': 115,
        'attack': 50,
        'defense': 110,
        'intellect': 135,
        'speed': 125,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 840,
    'name': 'Duftmon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 287,
    'eggCycles': 95,
    'base': {
        'hitpoints': 60,
        'magic': 125,
        'attack': 85,
        'defense': 70,
        'intellect': 120,
        'speed': 130,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 841,
    'name': 'Duftmon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 293,
    'eggCycles': 95,
    'base': {
        'hitpoints': 78,
        'magic': 105,
        'attack': 60,
        'defense': 68,
        'intellect': 122,
        'speed': 170,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 842,
    'name': 'Duftmon Leopard Mode',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 282,
    'eggCycles': 95,
    'base': {
        'hitpoints': 85,
        'magic': 100,
        'attack': 110,
        'defense': 80,
        'intellect': 90,
        'speed': 155,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 843,
    'name': 'Examon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 268,
    'eggCycles': 95,
    'base': {
        'hitpoints': 110,
        'magic': 95,
        'attack': 125,
        'defense': 80,
        'intellect': 80,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 844,
    'name': 'Exo Grimmon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 268,
    'eggCycles': 95,
    'base': {
        'hitpoints': 111,
        'magic': 169,
        'attack': 58,
        'defense': 49,
        'intellect': 102,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 845,
    'name': 'Lotusmon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 284,
    'eggCycles': 95,
    'base': {
        'hitpoints': 55,
        'magic': 125,
        'attack': 35,
        'defense': 65,
        'intellect': 150,
        'speed': 110,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 846,
    'name': 'Ogudomon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 287,
    'eggCycles': 95,
    'base': {
        'hitpoints': 130,
        'magic': 126,
        'attack': 121,
        'defense': 99,
        'intellect': 119,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 847,
    'name': 'Rosemon Burst Mode',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 260,
    'eggCycles': 95,
    'base': {
        'hitpoints': 95,
        'magic': 90,
        'attack': 100,
        'defense': 90,
        'intellect': 110,
        'speed': 90,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 848,
    'name': 'Slayerdramon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 271,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 95,
        'attack': 120,
        'defense': 80,
        'intellect': 80,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 849,
    'name': 'Surfymon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 297,
    'eggCycles': 95,
    'base': {
        'hitpoints': 115,
        'magic': 57,
        'attack': 79,
        'defense': 79,
        'intellect': 60,
        'speed': 155,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 850,
    'name': 'Victory Greymon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 268,
    'eggCycles': 95,
    'base': {
        'hitpoints': 51,
        'magic': 147,
        'attack': 136,
        'defense': 94,
        'intellect': 87,
        'speed': 47,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 851,
    'name': 'Zd Garurumon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 268,
    'eggCycles': 95,
    'base': {
        'hitpoints': 83,
        'magic': 86,
        'attack': 72,
        'defense': 148,
        'intellect': 44,
        'speed': 110,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 852,
    'name': 'Burpmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fast,
    'exp': 137,
    'eggCycles': 20,
    'base': {
        'hitpoints': 255,
        'magic': 1,
        'attack': 1,
        'defense': 255,
        'intellect': 1,
        'speed': 1,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 853,
    'name': 'Bombmon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 11,
    'eggCycles': 5,
    'base': {
        'hitpoints': 15,
        'magic': 27,
        'attack': 33,
        'defense': 31,
        'intellect': 23,
        'speed': 11,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 854,
    'name': 'Chibickmon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 18,
    'eggCycles': 5,
    'base': {
        'hitpoints': 27,
        'magic': 19,
        'attack': 11,
        'defense': 30,
        'intellect': 21,
        'speed': 31,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 855,
    'name': 'Monimon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.mediumslow,
    'exp': 49,
    'eggCycles': 10,
    'base': {
        'hitpoints': 18,
        'magic': 28,
        'attack': 19,
        'defense': 43,
        'intellect': 43,
        'speed': 19,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 856,
    'name': 'Pickmon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.mediumslow,
    'exp': 58,
    'eggCycles': 10,
    'base': {
        'hitpoints': 27,
        'magic': 28,
        'attack': 26,
        'defense': 28,
        'intellect': 18,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 857,
    'name': 'Chikurimon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 117,
    'eggCycles': 15,
    'base': {
        'hitpoints': 36,
        'magic': 49,
        'attack': 56,
        'defense': 25,
        'intellect': 32,
        'speed': 25,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 858,
    'name': 'Cutemon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 119,
    'eggCycles': 15,
    'base': {
        'hitpoints': 31,
        'magic': 49,
        'attack': 26,
        'defense': 25,
        'intellect': 69,
        'speed': 23,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 859,
    'name': 'Dondokomon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 93,
    'eggCycles': 15,
    'base': {
        'hitpoints': 46,
        'magic': 26,
        'attack': 38,
        'defense': 38,
        'intellect': 43,
        'speed': 28,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 860,
    'name': 'Gaossmon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 15,
    'base': {
        'hitpoints': 42,
        'magic': 16,
        'attack': 41,
        'defense': 47,
        'intellect': 35,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 861,
    'name': 'Hyokomon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 120,
    'eggCycles': 15,
    'base': {
        'hitpoints': 40,
        'magic': 17,
        'attack': 19,
        'defense': 34,
        'intellect': 53,
        'speed': 54,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 862,
    'name': 'Monitamon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 95,
    'eggCycles': 15,
    'base': {
        'hitpoints': 22,
        'magic': 16,
        'attack': 39,
        'defense': 66,
        'intellect': 39,
        'speed': 37,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 863,
    'name': 'Shoutmon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 110,
    'eggCycles': 15,
    'base': {
        'hitpoints': 45,
        'magic': 23,
        'attack': 65,
        'defense': 43,
        'intellect': 16,
        'speed': 38,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 864,
    'name': 'Shoutmon-Dorulu Cannon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 100,
    'eggCycles': 15,
    'base': {
        'hitpoints': 25,
        'magic': 30,
        'attack': 60,
        'defense': 23,
        'intellect': 44,
        'speed': 42,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 865,
    'name': 'Shoutmon-Jet Sparrow',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 115,
    'eggCycles': 15,
    'base': {
        'hitpoints': 41,
        'magic': 32,
        'attack': 49,
        'defense': 26,
        'intellect': 19,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 866,
    'name': 'Shoutmon-Star Sword',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.mediumfast,
    'exp': 108,
    'eggCycles': 15,
    'base': {
        'hitpoints': 37,
        'magic': 54,
        'attack': 47,
        'defense': 23,
        'intellect': 23,
        'speed': 27,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 867,
    'name': 'Spadamon',
    'catchRate': 35,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 82,
    'eggCycles': 15,
    'base': {
        'hitpoints': 30,
        'magic': 19,
        'attack': 68,
        'defense': 36,
        'intellect': 46,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 868,
    'name': 'Sparrowmon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 85,
    'eggCycles': 15,
    'base': {
        'hitpoints': 25,
        'magic': 20,
        'attack': 51,
        'defense': 34,
        'intellect': 34,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 869,
    'name': 'Starmons',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.mediumfast,
    'exp': 107,
    'eggCycles': 15,
    'base': {
        'hitpoints': 36,
        'magic': 17,
        'attack': 65,
        'defense': 18,
        'intellect': 17,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 870,
    'name': 'Tyutyumon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 92,
    'eggCycles': 15,
    'base': {
        'hitpoints': 20,
        'magic': 30,
        'attack': 22,
        'defense': 42,
        'intellect': 62,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 871,
    'name': 'Ballistamon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 166,
    'eggCycles': 25,
    'base': {
        'hitpoints': 28,
        'magic': 83,
        'attack': 31,
        'defense': 84,
        'intellect': 40,
        'speed': 54,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 872,
    'name': 'Buraimon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 171,
    'eggCycles': 25,
    'base': {
        'hitpoints': 21,
        'magic': 27,
        'attack': 76,
        'defense': 66,
        'intellect': 41,
        'speed': 87,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 873,
    'name': 'Damemon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 194,
    'eggCycles': 25,
    'base': {
        'hitpoints': 66,
        'magic': 59,
        'attack': 33,
        'defense': 69,
        'intellect': 22,
        'speed': 68,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 874,
    'name': 'Deadly Axemon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 186,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'magic': 25,
        'attack': 102,
        'defense': 69,
        'intellect': 25,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 875,
    'name': 'Deckerdramon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 176,
    'eggCycles': 25,
    'base': {
        'hitpoints': 51,
        'magic': 43,
        'attack': 58,
        'defense': 75,
        'intellect': 20,
        'speed': 75,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 876,
    'name': 'Don Shoutmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 189,
    'eggCycles': 25,
    'base': {
        'hitpoints': 28,
        'magic': 21,
        'attack': 81,
        'defense': 35,
        'intellect': 103,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 877,
    'name': 'Dorulumon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 199,
    'eggCycles': 25,
    'base': {
        'hitpoints': 42,
        'magic': 42,
        'attack': 51,
        'defense': 49,
        'intellect': 40,
        'speed': 82,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 878,
    'name': 'Greymon 2010',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 182,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'magic': 54,
        'attack': 56,
        'defense': 77,
        'intellect': 43,
        'speed': 32,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 879,
    'name': 'Mad Leomon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 191,
    'eggCycles': 25,
    'base': {
        'hitpoints': 71,
        'magic': 30,
        'attack': 72,
        'defense': 30,
        'intellect': 30,
        'speed': 74,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 880,
    'name': 'Mad Leomon Armed Mode',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 176,
    'eggCycles': 25,
    'base': {
        'hitpoints': 71,
        'magic': 20,
        'attack': 85,
        'defense': 20,
        'intellect': 30,
        'speed': 87,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 881,
    'name': 'Mail Birdramon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 190,
    'eggCycles': 25,
    'base': {
        'hitpoints': 96,
        'magic': 30,
        'attack': 40,
        'defense': 99,
        'intellect': 20,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 882,
    'name': 'Shonitamon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 184,
    'eggCycles': 25,
    'base': {
        'hitpoints': 46,
        'magic': 40,
        'attack': 65,
        'defense': 44,
        'intellect': 84,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 883,
    'name': 'Shortmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 184,
    'eggCycles': 25,
    'base': {
        'hitpoints': 57,
        'magic': 50,
        'attack': 36,
        'defense': 62,
        'intellect': 74,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 884,
    'name': 'Shoutmon X2',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 172,
    'eggCycles': 25,
    'base': {
        'hitpoints': 67,
        'magic': 96,
        'attack': 60,
        'defense': 57,
        'intellect': 20,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 885,
    'name': 'Shoutmon X3',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 190,
    'eggCycles': 25,
    'base': {
        'hitpoints': 67,
        'magic': 101,
        'attack': 60,
        'defense': 57,
        'intellect': 20,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 886,
    'name': 'Shoutmon X4',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 175,
    'eggCycles': 25,
    'base': {
        'hitpoints': 67,
        'magic': 106,
        'attack': 60,
        'defense': 57,
        'intellect': 20,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 887,
    'name': 'Skull Knightmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 182,
    'eggCycles': 25,
    'base': {
        'hitpoints': 69,
        'magic': 58,
        'attack': 47,
        'defense': 86,
        'intellect': 21,
        'speed': 24,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 888,
    'name': 'Skull Knightmon Big Axe Mode',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 162,
    'eggCycles': 25,
    'base': {
        'hitpoints': 69,
        'magic': 58,
        'attack': 56,
        'defense': 86,
        'intellect': 21,
        'speed': 24,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 889,
    'name': 'Skull Knightmon Cavalier Mode',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 163,
    'eggCycles': 25,
    'base': {
        'hitpoints': 69,
        'magic': 58,
        'attack': 47,
        'defense': 86,
        'intellect': 21,
        'speed': 45,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 890,
    'name': 'Troopmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 178,
    'eggCycles': 25,
    'base': {
        'hitpoints': 39,
        'magic': 44,
        'attack': 65,
        'defense': 57,
        'intellect': 84,
        'speed': 33,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 891,
    'name': 'Baalmon',
    'catchRate': 15,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 200,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 104,
        'attack': 100,
        'defense': 96,
        'intellect': 26,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 892,
    'name': 'Butenmon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 226,
    'eggCycles': 40,
    'base': {
        'hitpoints': 36,
        'magic': 97,
        'attack': 27,
        'defense': 88,
        'intellect': 90,
        'speed': 115,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 893,
    'name': 'Cyberdramon 2010',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 230,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 94,
        'attack': 55,
        'defense': 40,
        'intellect': 76,
        'speed': 78,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 894,
    'name': 'Dark Knightmon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 244,
    'eggCycles': 40,
    'base': {
        'hitpoints': 70,
        'magic': 45,
        'attack': 93,
        'defense': 122,
        'intellect': 70,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 895,
    'name': 'Decker Greymon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 251,
    'eggCycles': 40,
    'base': {
        'hitpoints': 51,
        'magic': 35,
        'attack': 98,
        'defense': 100,
        'intellect': 27,
        'speed': 99,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 896,
    'name': 'Metal Greymon 2010',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 226,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 54,
        'attack': 98,
        'defense': 100,
        'intellect': 43,
        'speed': 78,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 897,
    'name': 'Metal Greymon-Cyber Launcher',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 237,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 54,
        'attack': 106,
        'defense': 110,
        'intellect': 43,
        'speed': 78,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 898,
    'name': 'Shoutmon X4B',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 222,
    'eggCycles': 40,
    'base': {
        'hitpoints': 97,
        'magic': 149,
        'attack': 96,
        'defense': 70,
        'intellect': 20,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 899,
    'name': 'Shoutmon X4K',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 219,
    'eggCycles': 40,
    'base': {
        'hitpoints': 107,
        'magic': 149,
        'attack': 96,
        'defense': 70,
        'intellect': 20,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 900,
    'name': 'Shoutmon X5',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 249,
    'eggCycles': 40,
    'base': {
        'hitpoints': 107,
        'magic': 149,
        'attack': 109,
        'defense': 70,
        'intellect': 20,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 901,
    'name': 'Weddinmon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 245,
    'eggCycles': 40,
    'base': {
        'hitpoints': 51,
        'magic': 117,
        'attack': 50,
        'defense': 46,
        'intellect': 121,
        'speed': 45,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 902,
    'name': 'Aegisdramon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 265,
    'eggCycles': 95,
    'base': {
        'hitpoints': 106,
        'magic': 75,
        'attack': 56,
        'defense': 170,
        'intellect': 56,
        'speed': 137,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 903,
    'name': 'Bagramon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 290,
    'eggCycles': 95,
    'base': {
        'hitpoints': 164,
        'magic': 95,
        'attack': 68,
        'defense': 40,
        'intellect': 113,
        'speed': 113,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 904,
    'name': 'Beelzebumon 2010',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 299,
    'eggCycles': 95,
    'base': {
        'hitpoints': 108,
        'magic': 112,
        'attack': 106,
        'defense': 73,
        'intellect': 73,
        'speed': 96,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 905,
    'name': 'Blastmon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 280,
    'eggCycles': 95,
    'base': {
        'hitpoints': 82,
        'magic': 64,
        'attack': 149,
        'defense': 156,
        'intellect': 50,
        'speed': 74,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 906,
    'name': 'Chaosmon Valdur Arm',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 279,
    'eggCycles': 95,
    'base': {
        'hitpoints': 35,
        'magic': 85,
        'attack': 205,
        'defense': 35,
        'intellect': 155,
        'speed': 105,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 907,
    'name': 'King Whamon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 279,
    'eggCycles': 95,
    'base': {
        'hitpoints': 200,
        'magic': 40,
        'attack': 127,
        'defense': 139,
        'intellect': 40,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 908,
    'name': 'Shoutmon X5B',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 271,
    'eggCycles': 95,
    'base': {
        'hitpoints': 120,
        'magic': 145,
        'attack': 100,
        'defense': 85,
        'intellect': 20,
        'speed': 110,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 909,
    'name': 'Tactimon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 287,
    'eggCycles': 95,
    'base': {
        'hitpoints': 47,
        'magic': 47,
        'attack': 95,
        'defense': 65,
        'intellect': 124,
        'speed': 147,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 910,
    'name': 'Panbachimon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fast,
    'exp': 154,
    'eggCycles': 20,
    'base': {
        'hitpoints': 99,
        'magic': 100,
        'attack': 60,
        'defense': 11,
        'intellect': 10,
        'speed': 10,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 911,
    'name': 'Kozenimon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumslow,
    'exp': 53,
    'eggCycles': 10,
    'base': {
        'hitpoints': 41,
        'magic': 22,
        'attack': 33,
        'defense': 44,
        'intellect': 15,
        'speed': 15,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 912,
    'name': 'Bacomon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 93,
    'eggCycles': 15,
    'base': {
        'hitpoints': 52,
        'magic': 22,
        'attack': 30,
        'defense': 50,
        'intellect': 31,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 913,
    'name': 'Ekakimon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 102,
    'eggCycles': 15,
    'base': {
        'hitpoints': 32,
        'magic': 46,
        'attack': 45,
        'defense': 33,
        'intellect': 47,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 914,
    'name': 'Gumdramon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 15,
    'base': {
        'hitpoints': 25,
        'magic': 26,
        'attack': 63,
        'defense': 44,
        'intellect': 40,
        'speed': 25,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 915,
    'name': 'Iguneetmon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 89,
    'eggCycles': 15,
    'base': {
        'hitpoints': 33,
        'magic': 22,
        'attack': 62,
        'defense': 16,
        'intellect': 20,
        'speed': 63,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 916,
    'name': 'Soundbirdmon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 103,
    'eggCycles': 15,
    'base': {
        'hitpoints': 16,
        'magic': 33,
        'attack': 56,
        'defense': 22,
        'intellect': 20,
        'speed': 63,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 917,
    'name': 'Tinkermon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 113,
    'eggCycles': 15,
    'base': {
        'hitpoints': 26,
        'magic': 58,
        'attack': 58,
        'defense': 19,
        'intellect': 27,
        'speed': 42,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 918,
    'name': 'Zenimon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 91,
    'eggCycles': 15,
    'base': {
        'hitpoints': 50,
        'magic': 32,
        'attack': 18,
        'defense': 66,
        'intellect': 30,
        'speed': 24,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 919,
    'name': 'Arresterdramon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 167,
    'eggCycles': 25,
    'base': {
        'hitpoints': 70,
        'magic': 66,
        'attack': 77,
        'defense': 20,
        'intellect': 19,
        'speed': 68,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 920,
    'name': 'Ganemon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 163,
    'eggCycles': 25,
    'base': {
        'hitpoints': 64,
        'magic': 19,
        'attack': 40,
        'defense': 77,
        'intellect': 48,
        'speed': 77,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 921,
    'name': 'Ginkakumon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 182,
    'eggCycles': 25,
    'base': {
        'hitpoints': 96,
        'magic': 29,
        'attack': 23,
        'defense': 101,
        'intellect': 20,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 922,
    'name': 'Ginkakumon Promote',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 165,
    'eggCycles': 25,
    'base': {
        'hitpoints': 31,
        'magic': 29,
        'attack': 23,
        'defense': 100,
        'intellect': 101,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 923,
    'name': 'Hi-Vision Monitamon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 188,
    'eggCycles': 25,
    'base': {
        'hitpoints': 34,
        'magic': 34,
        'attack': 37,
        'defense': 103,
        'intellect': 51,
        'speed': 56,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 924,
    'name': 'Kinkakumon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 166,
    'eggCycles': 25,
    'base': {
        'hitpoints': 30,
        'magic': 29,
        'attack': 79,
        'defense': 40,
        'intellect': 101,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 925,
    'name': 'Petermon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 190,
    'eggCycles': 25,
    'base': {
        'hitpoints': 23,
        'magic': 68,
        'attack': 26,
        'defense': 23,
        'intellect': 87,
        'speed': 87,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 926,
    'name': 'Raptor Sparrowmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 184,
    'eggCycles': 25,
    'base': {
        'hitpoints': 49,
        'magic': 30,
        'attack': 67,
        'defense': 44,
        'intellect': 30,
        'speed': 103,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 927,
    'name': 'Shademon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 196,
    'eggCycles': 25,
    'base': {
        'hitpoints': 42,
        'magic': 105,
        'attack': 38,
        'defense': 28,
        'intellect': 21,
        'speed': 84,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 928,
    'name': 'Shooting Starmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 170,
    'eggCycles': 25,
    'base': {
        'hitpoints': 89,
        'magic': 23,
        'attack': 54,
        'defense': 21,
        'intellect': 21,
        'speed': 105,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 929,
    'name': 'Shoutmon King Ver',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 190,
    'eggCycles': 25,
    'base': {
        'hitpoints': 43,
        'magic': 56,
        'attack': 57,
        'defense': 44,
        'intellect': 92,
        'speed': 25,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 930,
    'name': 'Targetmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 199,
    'eggCycles': 25,
    'base': {
        'hitpoints': 74,
        'magic': 70,
        'attack': 27,
        'defense': 64,
        'intellect': 34,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 931,
    'name': 'Tuwarmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 170,
    'eggCycles': 25,
    'base': {
        'hitpoints': 72,
        'magic': 45,
        'attack': 71,
        'defense': 68,
        'intellect': 24,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 932,
    'name': 'Atlur Ballistamon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 255,
    'eggCycles': 40,
    'base': {
        'hitpoints': 115,
        'magic': 81,
        'attack': 117,
        'defense': 27,
        'intellect': 51,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 933,
    'name': 'Black Mach Gaogamon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 240,
    'eggCycles': 40,
    'base': {
        'hitpoints': 93,
        'magic': 58,
        'attack': 95,
        'defense': 35,
        'intellect': 28,
        'speed': 140,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 934,
    'name': 'Captain Hookmon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 200,
    'eggCycles': 40,
    'base': {
        'hitpoints': 49,
        'magic': 50,
        'attack': 78,
        'defense': 81,
        'intellect': 111,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 935,
    'name': 'Cho·Hakkaimon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 235,
    'eggCycles': 40,
    'base': {
        'hitpoints': 39,
        'magic': 43,
        'attack': 109,
        'defense': 93,
        'intellect': 110,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 936,
    'name': 'Footmon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 217,
    'eggCycles': 40,
    'base': {
        'hitpoints': 28,
        'magic': 34,
        'attack': 70,
        'defense': 72,
        'intellect': 120,
        'speed': 120,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 937,
    'name': 'Gokuwmon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 245,
    'eggCycles': 40,
    'base': {
        'hitpoints': 78,
        'magic': 23,
        'attack': 66,
        'defense': 78,
        'intellect': 50,
        'speed': 138,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 938,
    'name': 'Gravimon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 222,
    'eggCycles': 40,
    'base': {
        'hitpoints': 77,
        'magic': 110,
        'attack': 91,
        'defense': 35,
        'intellect': 96,
        'speed': 42,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 939,
    'name': 'Musou Knightmon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 258,
    'eggCycles': 40,
    'base': {
        'hitpoints': 71,
        'magic': 40,
        'attack': 120,
        'defense': 109,
        'intellect': 30,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 940,
    'name': 'Omega Shoutmon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 218,
    'eggCycles': 40,
    'base': {
        'hitpoints': 98,
        'magic': 88,
        'attack': 117,
        'defense': 95,
        'intellect': 65,
        'speed': 112,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 941,
    'name': 'Sagomon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 242,
    'eggCycles': 40,
    'base': {
        'hitpoints': 88,
        'magic': 59,
        'attack': 74,
        'defense': 56,
        'intellect': 74,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 942,
    'name': 'Sanzomon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 208,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 70,
        'attack': 81,
        'defense': 73,
        'intellect': 86,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 943,
    'name': 'Splashmon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 215,
    'eggCycles': 40,
    'base': {
        'hitpoints': 81,
        'magic': 29,
        'attack': 111,
        'defense': 54,
        'intellect': 130,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 944,
    'name': 'Splashmon Darkness Mode',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 257,
    'eggCycles': 40,
    'base': {
        'hitpoints': 130,
        'magic': 19,
        'attack': 130,
        'defense': 54,
        'intellect': 88,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 945,
    'name': 'Yaeger Dorulumon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 259,
    'eggCycles': 40,
    'base': {
        'hitpoints': 87,
        'magic': 42,
        'attack': 63,
        'defense': 54,
        'intellect': 58,
        'speed': 120,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 946,
    'name': 'Zamielmon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 212,
    'eggCycles': 40,
    'base': {
        'hitpoints': 45,
        'magic': 45,
        'attack': 118,
        'defense': 38,
        'intellect': 36,
        'speed': 119,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 947,
    'name': 'Darkness Bagramon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 274,
    'eggCycles': 95,
    'base': {
        'hitpoints': 143,
        'magic': 119,
        'attack': 131,
        'defense': 78,
        'intellect': 58,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 948,
    'name': 'Dorbickmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 296,
    'eggCycles': 95,
    'base': {
        'hitpoints': 58,
        'magic': 100,
        'attack': 111,
        'defense': 58,
        'intellect': 89,
        'speed': 166,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 949,
    'name': 'Jet Mervamon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 283,
    'eggCycles': 95,
    'base': {
        'hitpoints': 70,
        'magic': 68,
        'attack': 152,
        'defense': 60,
        'intellect': 62,
        'speed': 163,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 950,
    'name': 'Mervamon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 281,
    'eggCycles': 95,
    'base': {
        'hitpoints': 51,
        'magic': 108,
        'attack': 152,
        'defense': 60,
        'intellect': 60,
        'speed': 163,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 951,
    'name': 'Neo Vamdemon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 276,
    'eggCycles': 95,
    'base': {
        'hitpoints': 65,
        'magic': 126,
        'attack': 80,
        'defense': 50,
        'intellect': 100,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 952,
    'name': 'Ofanimon Falldown Mode',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 267,
    'eggCycles': 95,
    'base': {
        'hitpoints': 62,
        'magic': 162,
        'attack': 63,
        'defense': 100,
        'intellect': 131,
        'speed': 52,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 953,
    'name': 'Olegmon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 281,
    'eggCycles': 95,
    'base': {
        'hitpoints': 83,
        'magic': 100,
        'attack': 80,
        'defense': 155,
        'intellect': 34,
        'speed': 103,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 954,
    'name': 'Omegamon Zwart',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 296,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 90,
        'attack': 100,
        'defense': 130,
        'intellect': 105,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 955,
    'name': 'Shakamon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 263,
    'eggCycles': 95,
    'base': {
        'hitpoints': 111,
        'magic': 114,
        'attack': 111,
        'defense': 53,
        'intellect': 135,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 956,
    'name': 'Shoutmon DX',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 263,
    'eggCycles': 95,
    'base': {
        'hitpoints': 150,
        'magic': 170,
        'attack': 150,
        'defense': 70,
        'intellect': 20,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 957,
    'name': 'Shoutmon EX6',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 287,
    'eggCycles': 95,
    'base': {
        'hitpoints': 107,
        'magic': 170,
        'attack': 155,
        'defense': 80,
        'intellect': 20,
        'speed': 68,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 958,
    'name': 'Shoutmon X7',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 282,
    'eggCycles': 95,
    'base': {
        'hitpoints': 107,
        'magic': 190,
        'attack': 110,
        'defense': 100,
        'intellect': 20,
        'speed': 73,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 959,
    'name': 'Shoutmon X7 Superior Mode',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 285,
    'eggCycles': 95,
    'base': {
        'hitpoints': 132,
        'magic': 190,
        'attack': 110,
        'defense': 100,
        'intellect': 20,
        'speed': 73,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 960,
    'name': 'Venusmon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 292,
    'eggCycles': 95,
    'base': {
        'hitpoints': 123,
        'magic': 61,
        'attack': 131,
        'defense': 64,
        'intellect': 132,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 961,
    'name': 'Vulcanusmon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 268,
    'eggCycles': 95,
    'base': {
        'hitpoints': 42,
        'magic': 82,
        'attack': 110,
        'defense': 151,
        'intellect': 94,
        'speed': 81,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 962,
    'name': 'Zeke Greymon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 290,
    'eggCycles': 95,
    'base': {
        'hitpoints': 143,
        'magic': 89,
        'attack': 121,
        'defense': 45,
        'intellect': 40,
        'speed': 123,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 963,
    'name': 'Armamon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 148,
    'eggCycles': 20,
    'base': {
        'hitpoints': 100,
        'magic': 20,
        'attack': 200,
        'defense': 220,
        'intellect': 20,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 964,
    'name': 'Dark Volumon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.fast,
    'exp': 133,
    'eggCycles': 20,
    'base': {
        'hitpoints': 99,
        'magic': 99,
        'attack': 32,
        'defense': 102,
        'intellect': 40,
        'speed': 54,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 965,
    'name': 'Deadly Tuwarmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.fast,
    'exp': 152,
    'eggCycles': 20,
    'base': {
        'hitpoints': 70,
        'magic': 45,
        'attack': 71,
        'defense': 68,
        'intellect': 24,
        'speed': 72,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 966,
    'name': 'Grand Generamon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fast,
    'exp': 141,
    'eggCycles': 20,
    'base': {
        'hitpoints': 72,
        'magic': 111,
        'attack': 111,
        'defense': 60,
        'intellect': 100,
        'speed': 166,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 967,
    'name': 'Grey Knightsmon',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fast,
    'exp': 125,
    'eggCycles': 20,
    'base': {
        'hitpoints': 70,
        'magic': 45,
        'attack': 140,
        'defense': 95,
        'intellect': 170,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 968,
    'name': 'Omega Armamon BM',
    'catchRate': 20,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fast,
    'exp': 138,
    'eggCycles': 20,
    'base': {
        'hitpoints': 105,
        'magic': 10,
        'attack': 250,
        'defense': 220,
        'intellect': 20,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 969,
    'name': 'Shoutmon X3GM',
    'catchRate': 20,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.fast,
    'exp': 155,
    'eggCycles': 20,
    'base': {
        'hitpoints': 67,
        'magic': 101,
        'attack': 75,
        'defense': 57,
        'intellect': 20,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 970,
    'name': 'Shoutmon X3SD',
    'catchRate': 20,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.fast,
    'exp': 133,
    'eggCycles': 20,
    'base': {
        'hitpoints': 67,
        'magic': 101,
        'attack': 60,
        'defense': 57,
        'intellect': 35,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 971,
    'name': 'Shoutmon X4S',
    'catchRate': 20,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 143,
    'eggCycles': 20,
    'base': {
        'hitpoints': 107,
        'magic': 149,
        'attack': 96,
        'defense': 70,
        'intellect': 28,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 972,
    'name': 'Shoutmon X5S',
    'catchRate': 20,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.fast,
    'exp': 128,
    'eggCycles': 20,
    'base': {
        'hitpoints': 125,
        'magic': 145,
        'attack': 109,
        'defense': 89,
        'intellect': 20,
        'speed': 117,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 973,
    'name': 'Huckmon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 107,
    'eggCycles': 15,
    'base': {
        'hitpoints': 45,
        'magic': 20,
        'attack': 55,
        'defense': 50,
        'intellect': 24,
        'speed': 36,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 974,
    'name': 'Pillomon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 15,
    'base': {
        'hitpoints': 55,
        'magic': 19,
        'attack': 19,
        'defense': 49,
        'intellect': 55,
        'speed': 19,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 975,
    'name': 'Sistermon Blanc',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.mediumfast,
    'exp': 85,
    'eggCycles': 15,
    'base': {
        'hitpoints': 35,
        'magic': 47,
        'attack': 14,
        'defense': 23,
        'intellect': 53,
        'speed': 38,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 976,
    'name': 'Sistermon Noir',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 192,
    'eggCycles': 25,
    'base': {
        'hitpoints': 40,
        'magic': 66,
        'attack': 47,
        'defense': 38,
        'intellect': 68,
        'speed': 46,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 977,
    'name': 'Yakiimon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 168,
    'eggCycles': 25,
    'base': {
        'hitpoints': 88,
        'magic': 55,
        'attack': 55,
        'defense': 37,
        'intellect': 44,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 978,
    'name': 'Arresterdramon Superior Mode',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 254,
    'eggCycles': 40,
    'base': {
        'hitpoints': 70,
        'magic': 90,
        'attack': 120,
        'defense': 27,
        'intellect': 40,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 979,
    'name': 'Jokermon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 258,
    'eggCycles': 40,
    'base': {
        'hitpoints': 85,
        'magic': 139,
        'attack': 40,
        'defense': 43,
        'intellect': 43,
        'speed': 105,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 980,
    'name': 'Luminamon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 238,
    'eggCycles': 40,
    'base': {
        'hitpoints': 77,
        'magic': 90,
        'attack': 30,
        'defense': 90,
        'intellect': 109,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 981,
    'name': 'Luminamon Nene Version',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 226,
    'eggCycles': 40,
    'base': {
        'hitpoints': 77,
        'magic': 100,
        'attack': 30,
        'defense': 97,
        'intellect': 109,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 982,
    'name': 'Gankoomon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 282,
    'eggCycles': 95,
    'base': {
        'hitpoints': 150,
        'magic': 51,
        'attack': 125,
        'defense': 105,
        'intellect': 70,
        'speed': 89,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 983,
    'name': 'Quartzmon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 261,
    'eggCycles': 95,
    'base': {
        'hitpoints': 41,
        'magic': 87,
        'attack': 134,
        'defense': 157,
        'intellect': 74,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 984,
    'name': 'Sistermon Blanc Awaken',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.mediumfast,
    'exp': 113,
    'eggCycles': 15,
    'base': {
        'hitpoints': 92,
        'magic': 70,
        'attack': 33,
        'defense': 20,
        'intellect': 112,
        'speed': 107,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 985,
    'name': 'Aegiomon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 188,
    'eggCycles': 25,
    'base': {
        'hitpoints': 40,
        'magic': 41,
        'attack': 72,
        'defense': 21,
        'intellect': 103,
        'speed': 36,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 986,
    'name': 'Sistermon Noir Awaken',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 178,
    'eggCycles': 25,
    'base': {
        'hitpoints': 40,
        'magic': 100,
        'attack': 100,
        'defense': 52,
        'intellect': 101,
        'speed': 90,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 987,
    'name': 'Aegiochusmon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 201,
    'eggCycles': 40,
    'base': {
        'hitpoints': 64,
        'magic': 100,
        'attack': 100,
        'defense': 21,
        'intellect': 103,
        'speed': 36,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 988,
    'name': 'Aegiochusmon Blue',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 247,
    'eggCycles': 40,
    'base': {
        'hitpoints': 64,
        'magic': 100,
        'attack': 21,
        'defense': 103,
        'intellect': 100,
        'speed': 36,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 989,
    'name': 'Aegiochusmon Green',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 257,
    'eggCycles': 40,
    'base': {
        'hitpoints': 64,
        'magic': 33,
        'attack': 100,
        'defense': 22,
        'intellect': 102,
        'speed': 103,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 990,
    'name': 'Cerberumon Werewolf Mode',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 257,
    'eggCycles': 40,
    'base': {
        'hitpoints': 40,
        'magic': 67,
        'attack': 115,
        'defense': 54,
        'intellect': 60,
        'speed': 116,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 991,
    'name': 'Sirenmon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 210,
    'eggCycles': 40,
    'base': {
        'hitpoints': 91,
        'magic': 45,
        'attack': 51,
        'defense': 61,
        'intellect': 92,
        'speed': 61,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 992,
    'name': 'Avenge Kidmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 288,
    'eggCycles': 95,
    'base': {
        'hitpoints': 42,
        'magic': 111,
        'attack': 121,
        'defense': 55,
        'intellect': 42,
        'speed': 161,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 993,
    'name': 'Bacchusmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 277,
    'eggCycles': 95,
    'base': {
        'hitpoints': 240,
        'magic': 46,
        'attack': 73,
        'defense': 151,
        'intellect': 10,
        'speed': 10,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 994,
    'name': 'Beel Starmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 276,
    'eggCycles': 95,
    'base': {
        'hitpoints': 41,
        'magic': 72,
        'attack': 135,
        'defense': 75,
        'intellect': 39,
        'speed': 156,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 995,
    'name': 'Ceresmon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 271,
    'eggCycles': 95,
    'base': {
        'hitpoints': 145,
        'magic': 95,
        'attack': 57,
        'defense': 156,
        'intellect': 50,
        'speed': 83,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 996,
    'name': 'Ceresmon Medium',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 268,
    'eggCycles': 95,
    'base': {
        'hitpoints': 41,
        'magic': 145,
        'attack': 83,
        'defense': 105,
        'intellect': 100,
        'speed': 83,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 997,
    'name': 'Jupitermon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 267,
    'eggCycles': 95,
    'base': {
        'hitpoints': 64,
        'magic': 150,
        'attack': 150,
        'defense': 22,
        'intellect': 160,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 998,
    'name': 'Kuzuhamon Miko Mode',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 296,
    'eggCycles': 95,
    'base': {
        'hitpoints': 85,
        'magic': 100,
        'attack': 45,
        'defense': 80,
        'intellect': 120,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 999,
    'name': 'Magna Kidmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 279,
    'eggCycles': 95,
    'base': {
        'hitpoints': 64,
        'magic': 73,
        'attack': 132,
        'defense': 64,
        'intellect': 90,
        'speed': 157,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1000,
    'name': 'Plutomon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 274,
    'eggCycles': 95,
    'base': {
        'hitpoints': 68,
        'magic': 128,
        'attack': 122,
        'defense': 43,
        'intellect': 109,
        'speed': 89,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1001,
    'name': 'Rust Tyranomon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 271,
    'eggCycles': 95,
    'base': {
        'hitpoints': 110,
        'magic': 44,
        'attack': 155,
        'defense': 105,
        'intellect': 35,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1002,
    'name': 'Titamon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 278,
    'eggCycles': 95,
    'base': {
        'hitpoints': 130,
        'magic': 55,
        'attack': 130,
        'defense': 75,
        'intellect': 65,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1003,
    'name': 'Bao Huckmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 196,
    'eggCycles': 25,
    'base': {
        'hitpoints': 60,
        'magic': 33,
        'attack': 77,
        'defense': 73,
        'intellect': 27,
        'speed': 55,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1004,
    'name': 'Aegiochusmon Dark',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 223,
    'eggCycles': 40,
    'base': {
        'hitpoints': 64,
        'magic': 103,
        'attack': 100,
        'defense': 21,
        'intellect': 100,
        'speed': 36,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1005,
    'name': 'Aegiochusmon Holy',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 259,
    'eggCycles': 40,
    'base': {
        'hitpoints': 103,
        'magic': 100,
        'attack': 100,
        'defense': 21,
        'intellect': 64,
        'speed': 36,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1006,
    'name': 'Savior Huckmon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 237,
    'eggCycles': 40,
    'base': {
        'hitpoints': 80,
        'magic': 55,
        'attack': 100,
        'defense': 70,
        'intellect': 40,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1007,
    'name': 'Bancho Golemon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 289,
    'eggCycles': 95,
    'base': {
        'hitpoints': 170,
        'magic': 72,
        'attack': 71,
        'defense': 180,
        'intellect': 60,
        'speed': 27,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1008,
    'name': 'Bancho Lilimon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 299,
    'eggCycles': 95,
    'base': {
        'hitpoints': 87,
        'magic': 20,
        'attack': 169,
        'defense': 40,
        'intellect': 84,
        'speed': 180,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1009,
    'name': 'Bancho Mamemon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 263,
    'eggCycles': 95,
    'base': {
        'hitpoints': 134,
        'magic': 51,
        'attack': 100,
        'defense': 109,
        'intellect': 40,
        'speed': 150,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1010,
    'name': 'Bancho Stingmon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 300,
    'eggCycles': 95,
    'base': {
        'hitpoints': 73,
        'magic': 80,
        'attack': 141,
        'defense': 50,
        'intellect': 75,
        'speed': 150,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1011,
    'name': 'Gundramon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 262,
    'eggCycles': 95,
    'base': {
        'hitpoints': 106,
        'magic': 40,
        'attack': 245,
        'defense': 30,
        'intellect': 38,
        'speed': 121,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1012,
    'name': 'Jesmon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 280,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 75,
        'attack': 135,
        'defense': 105,
        'intellect': 75,
        'speed': 110,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1013,
    'name': 'Junomon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 268,
    'eggCycles': 95,
    'base': {
        'hitpoints': 91,
        'magic': 134,
        'attack': 100,
        'defense': 80,
        'intellect': 62,
        'speed': 94,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1014,
    'name': 'Junomon Hysteric Mode',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 300,
    'eggCycles': 95,
    'base': {
        'hitpoints': 91,
        'magic': 173,
        'attack': 100,
        'defense': 80,
        'intellect': 62,
        'speed': 94,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1015,
    'name': 'Jupitermon Wrath Mode',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 296,
    'eggCycles': 95,
    'base': {
        'hitpoints': 64,
        'magic': 150,
        'attack': 150,
        'defense': 22,
        'intellect': 125,
        'speed': 114,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1016,
    'name': 'Vorvomon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 114,
    'eggCycles': 15,
    'base': {
        'hitpoints': 29,
        'magic': 38,
        'attack': 47,
        'defense': 21,
        'intellect': 11,
        'speed': 67,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1017,
    'name': 'Guardromon Gold',
    'catchRate': 25,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 193,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'magic': 30,
        'attack': 55,
        'defense': 105,
        'intellect': 52,
        'speed': 23,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1018,
    'name': 'Meicoomon',
    'catchRate': 25,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 180,
    'eggCycles': 25,
    'base': {
        'hitpoints': 84,
        'magic': 47,
        'attack': 35,
        'defense': 30,
        'intellect': 93,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1019,
    'name': 'Meicrackmon Vicious Mode',
    'catchRate': 15,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 221,
    'eggCycles': 40,
    'base': {
        'hitpoints': 84,
        'magic': 112,
        'attack': 45,
        'defense': 30,
        'intellect': 110,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1020,
    'name': 'Mastemon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 270,
    'eggCycles': 95,
    'base': {
        'hitpoints': 85,
        'magic': 95,
        'attack': 115,
        'defense': 90,
        'intellect': 115,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1021,
    'name': 'Omegamon Alter-B',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 267,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 150,
        'attack': 109,
        'defense': 66,
        'intellect': 68,
        'speed': 132,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1022,
    'name': 'Omegamon Zwart Defeat',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 279,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 90,
        'attack': 109,
        'defense': 90,
        'intellect': 89,
        'speed': 147,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1023,
    'name': 'Volcanicdramon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 278,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 83,
        'attack': 100,
        'defense': 51,
        'intellect': 60,
        'speed': 145,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1024,
    'name': 'Sakumon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 15,
    'eggCycles': 5,
    'base': {
        'hitpoints': 26,
        'magic': 25,
        'attack': 35,
        'defense': 14,
        'intellect': 27,
        'speed': 13,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1025,
    'name': 'Sakuttomon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumslow,
    'exp': 72,
    'eggCycles': 10,
    'base': {
        'hitpoints': 33,
        'magic': 20,
        'attack': 34,
        'defense': 29,
        'intellect': 34,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1026,
    'name': 'Ludomon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 119,
    'eggCycles': 15,
    'base': {
        'hitpoints': 32,
        'magic': 45,
        'attack': 29,
        'defense': 46,
        'intellect': 35,
        'speed': 38,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1027,
    'name': 'Zubamon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.mediumfast,
    'exp': 103,
    'eggCycles': 15,
    'base': {
        'hitpoints': 43,
        'magic': 18,
        'attack': 63,
        'defense': 53,
        'intellect': 15,
        'speed': 38,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1028,
    'name': 'Hudiemon',
    'catchRate': 25,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 180,
    'eggCycles': 25,
    'base': {
        'hitpoints': 45,
        'magic': 58,
        'attack': 60,
        'defense': 36,
        'intellect': 64,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1029,
    'name': 'Lavorvomon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 161,
    'eggCycles': 25,
    'base': {
        'hitpoints': 70,
        'magic': 36,
        'attack': 30,
        'defense': 40,
        'intellect': 40,
        'speed': 92,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1030,
    'name': 'Sistermon Ciel',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 190,
    'eggCycles': 25,
    'base': {
        'hitpoints': 40,
        'magic': 58,
        'attack': 47,
        'defense': 38,
        'intellect': 46,
        'speed': 76,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1031,
    'name': 'Sistermon Ciel Awaken',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 160,
    'eggCycles': 25,
    'base': {
        'hitpoints': 40,
        'magic': 70,
        'attack': 125,
        'defense': 58,
        'intellect': 75,
        'speed': 115,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1032,
    'name': 'Zubaeagermon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 165,
    'eggCycles': 25,
    'base': {
        'hitpoints': 58,
        'magic': 28,
        'attack': 85,
        'defense': 68,
        'intellect': 24,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1033,
    'name': 'Duramon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 233,
    'eggCycles': 40,
    'base': {
        'hitpoints': 88,
        'magic': 42,
        'attack': 112,
        'defense': 88,
        'intellect': 40,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1034,
    'name': 'Lavogaritamon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 245,
    'eggCycles': 40,
    'base': {
        'hitpoints': 90,
        'magic': 40,
        'attack': 70,
        'defense': 60,
        'intellect': 70,
        'speed': 120,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1035,
    'name': 'Meicrackmon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 227,
    'eggCycles': 40,
    'base': {
        'hitpoints': 84,
        'magic': 110,
        'attack': 45,
        'defense': 30,
        'intellect': 112,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1036,
    'name': 'Blitz Greymon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 278,
    'eggCycles': 95,
    'base': {
        'hitpoints': 39,
        'magic': 68,
        'attack': 128,
        'defense': 158,
        'intellect': 39,
        'speed': 103,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1037,
    'name': 'Cres Garurumon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 290,
    'eggCycles': 95,
    'base': {
        'hitpoints': 106,
        'magic': 49,
        'attack': 139,
        'defense': 34,
        'intellect': 150,
        'speed': 86,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1038,
    'name': 'Durandamon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 268,
    'eggCycles': 95,
    'base': {
        'hitpoints': 108,
        'magic': 53,
        'attack': 130,
        'defense': 117,
        'intellect': 56,
        'speed': 86,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1039,
    'name': 'Grace Novamon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 291,
    'eggCycles': 95,
    'base': {
        'hitpoints': 126,
        'magic': 165,
        'attack': 137,
        'defense': 91,
        'intellect': 30,
        'speed': 76,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1040,
    'name': 'Omegamon Alter-S',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 285,
    'eggCycles': 95,
    'base': {
        'hitpoints': 155,
        'magic': 30,
        'attack': 150,
        'defense': 75,
        'intellect': 78,
        'speed': 137,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1041,
    'name': 'Ordinemon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 261,
    'eggCycles': 95,
    'base': {
        'hitpoints': 140,
        'magic': 140,
        'attack': 100,
        'defense': 60,
        'intellect': 90,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1042,
    'name': 'Raguelmon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 278,
    'eggCycles': 95,
    'base': {
        'hitpoints': 91,
        'magic': 139,
        'attack': 60,
        'defense': 70,
        'intellect': 140,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1043,
    'name': 'Rasielmon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 300,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 140,
        'attack': 70,
        'defense': 60,
        'intellect': 140,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1044,
    'name': 'Voltobautamon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 264,
    'eggCycles': 95,
    'base': {
        'hitpoints': 107,
        'magic': 30,
        'attack': 107,
        'defense': 120,
        'intellect': 121,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1045,
    'name': 'Cotsucomon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 12,
    'eggCycles': 5,
    'base': {
        'hitpoints': 27,
        'magic': 32,
        'attack': 16,
        'defense': 33,
        'intellect': 15,
        'speed': 17,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1046,
    'name': 'Pusumon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 23,
    'eggCycles': 5,
    'base': {
        'hitpoints': 25,
        'magic': 16,
        'attack': 32,
        'defense': 35,
        'intellect': 17,
        'speed': 15,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1047,
    'name': 'Kakkinmon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.mediumslow,
    'exp': 78,
    'eggCycles': 10,
    'base': {
        'hitpoints': 40,
        'magic': 32,
        'attack': 16,
        'defense': 45,
        'intellect': 15,
        'speed': 22,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1048,
    'name': 'Pusurimon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.mediumslow,
    'exp': 42,
    'eggCycles': 10,
    'base': {
        'hitpoints': 25,
        'magic': 16,
        'attack': 46,
        'defense': 47,
        'intellect': 17,
        'speed': 19,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1049,
    'name': 'Bulucomon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 114,
    'eggCycles': 15,
    'base': {
        'hitpoints': 66,
        'magic': 26,
        'attack': 55,
        'defense': 29,
        'intellect': 18,
        'speed': 24,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1050,
    'name': 'Dracomon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 106,
    'eggCycles': 15,
    'base': {
        'hitpoints': 40,
        'magic': 30,
        'attack': 60,
        'defense': 10,
        'intellect': 31,
        'speed': 69,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1051,
    'name': 'Herissmon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 114,
    'eggCycles': 15,
    'base': {
        'hitpoints': 25,
        'magic': 16,
        'attack': 60,
        'defense': 62,
        'intellect': 17,
        'speed': 46,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1052,
    'name': 'Renamon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 85,
    'eggCycles': 15,
    'base': {
        'hitpoints': 40,
        'magic': 41,
        'attack': 40,
        'defense': 25,
        'intellect': 50,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1053,
    'name': 'Terriermon Assistant',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 97,
    'eggCycles': 15,
    'base': {
        'hitpoints': 25,
        'magic': 35,
        'attack': 32,
        'defense': 20,
        'intellect': 52,
        'speed': 49,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1054,
    'name': 'Filmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 188,
    'eggCycles': 25,
    'base': {
        'hitpoints': 25,
        'magic': 16,
        'attack': 88,
        'defense': 90,
        'intellect': 17,
        'speed': 77,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1055,
    'name': 'Paledramon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 190,
    'eggCycles': 25,
    'base': {
        'hitpoints': 72,
        'magic': 49,
        'attack': 45,
        'defense': 40,
        'intellect': 52,
        'speed': 55,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1056,
    'name': 'Tia Ludomon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 174,
    'eggCycles': 25,
    'base': {
        'hitpoints': 72,
        'magic': 45,
        'attack': 29,
        'defense': 90,
        'intellect': 35,
        'speed': 38,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1057,
    'name': 'Tyranomon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 189,
    'eggCycles': 25,
    'base': {
        'hitpoints': 65,
        'magic': 20,
        'attack': 85,
        'defense': 67,
        'intellect': 20,
        'speed': 58,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1058,
    'name': 'Crys Paledramon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 251,
    'eggCycles': 40,
    'base': {
        'hitpoints': 110,
        'magic': 95,
        'attack': 60,
        'defense': 51,
        'intellect': 27,
        'speed': 64,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1059,
    'name': 'Raiji Ludomon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 238,
    'eggCycles': 40,
    'base': {
        'hitpoints': 100,
        'magic': 54,
        'attack': 50,
        'defense': 120,
        'intellect': 35,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1060,
    'name': 'Stiffilmon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 227,
    'eggCycles': 40,
    'base': {
        'hitpoints': 76,
        'magic': 16,
        'attack': 110,
        'defense': 130,
        'intellect': 17,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1061,
    'name': 'Beel Starmon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 265,
    'eggCycles': 95,
    'base': {
        'hitpoints': 51,
        'magic': 72,
        'attack': 135,
        'defense': 75,
        'intellect': 39,
        'speed': 156,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1062,
    'name': 'Bryweludramon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 283,
    'eggCycles': 95,
    'base': {
        'hitpoints': 150,
        'magic': 54,
        'attack': 130,
        'defense': 170,
        'intellect': 35,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1063,
    'name': 'Craniummon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 294,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 90,
        'attack': 90,
        'defense': 145,
        'intellect': 90,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1064,
    'name': 'Diablomon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 281,
    'eggCycles': 95,
    'base': {
        'hitpoints': 110,
        'magic': 80,
        'attack': 115,
        'defense': 60,
        'intellect': 40,
        'speed': 180,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1065,
    'name': 'Jesmon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 284,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 135,
        'attack': 85,
        'defense': 105,
        'intellect': 75,
        'speed': 110,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1066,
    'name': 'Lord Knightmon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 264,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 100,
        'attack': 95,
        'defense': 90,
        'intellect': 95,
        'speed': 130,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1067,
    'name': 'Minervamon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 295,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 70,
        'attack': 123,
        'defense': 132,
        'intellect': 80,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1068,
    'name': 'Omegamon Merciful Mode',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 287,
    'eggCycles': 95,
    'base': {
        'hitpoints': 110,
        'magic': 130,
        'attack': 130,
        'defense': 65,
        'intellect': 95,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1069,
    'name': 'Rafflesimon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 281,
    'eggCycles': 95,
    'base': {
        'hitpoints': 73,
        'magic': 46,
        'attack': 100,
        'defense': 159,
        'intellect': 100,
        'speed': 89,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1070,
    'name': 'Ragna Lordmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 271,
    'eggCycles': 95,
    'base': {
        'hitpoints': 20,
        'magic': 150,
        'attack': 150,
        'defense': 150,
        'intellect': 30,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1071,
    'name': 'Sakuyamon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 260,
    'eggCycles': 95,
    'base': {
        'hitpoints': 60,
        'magic': 125,
        'attack': 55,
        'defense': 70,
        'intellect': 125,
        'speed': 115,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1072,
    'name': 'Sleipmon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 275,
    'eggCycles': 95,
    'base': {
        'hitpoints': 70,
        'magic': 100,
        'attack': 100,
        'defense': 105,
        'intellect': 105,
        'speed': 120,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1073,
    'name': 'Agumon Black X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 82,
    'eggCycles': 15,
    'base': {
        'hitpoints': 44,
        'magic': 27,
        'attack': 61,
        'defense': 50,
        'intellect': 17,
        'speed': 36,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1074,
    'name': 'Impmon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 89,
    'eggCycles': 15,
    'base': {
        'hitpoints': 14,
        'magic': 51,
        'attack': 44,
        'defense': 31,
        'intellect': 51,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1075,
    'name': 'Jazamon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 107,
    'eggCycles': 15,
    'base': {
        'hitpoints': 25,
        'magic': 23,
        'attack': 40,
        'defense': 40,
        'intellect': 16,
        'speed': 66,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1076,
    'name': 'Keramon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 90,
    'eggCycles': 15,
    'base': {
        'hitpoints': 45,
        'magic': 30,
        'attack': 25,
        'defense': 60,
        'intellect': 32,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1077,
    'name': 'Lopmon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 115,
    'eggCycles': 15,
    'base': {
        'hitpoints': 30,
        'magic': 45,
        'attack': 45,
        'defense': 24,
        'intellect': 45,
        'speed': 31,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1078,
    'name': 'Terriermon X-Antibody',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 98,
    'eggCycles': 15,
    'base': {
        'hitpoints': 25,
        'magic': 52,
        'attack': 35,
        'defense': 26,
        'intellect': 35,
        'speed': 49,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1079,
    'name': 'Dark Tyranomon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 195,
    'eggCycles': 25,
    'base': {
        'hitpoints': 20,
        'magic': 103,
        'attack': 30,
        'defense': 79,
        'intellect': 50,
        'speed': 41,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1080,
    'name': 'Jazardmon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 195,
    'eggCycles': 25,
    'base': {
        'hitpoints': 25,
        'magic': 23,
        'attack': 40,
        'defense': 40,
        'intellect': 15,
        'speed': 166,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1081,
    'name': 'Meramon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 182,
    'eggCycles': 25,
    'base': {
        'hitpoints': 55,
        'magic': 75,
        'attack': 43,
        'defense': 55,
        'intellect': 40,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1082,
    'name': 'Numemon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 186,
    'eggCycles': 25,
    'base': {
        'hitpoints': 90,
        'magic': 46,
        'attack': 40,
        'defense': 75,
        'intellect': 25,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1083,
    'name': 'Orgemon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 168,
    'eggCycles': 25,
    'base': {
        'hitpoints': 65,
        'magic': 25,
        'attack': 102,
        'defense': 60,
        'intellect': 25,
        'speed': 48,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1084,
    'name': 'Pegasmon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 162,
    'eggCycles': 25,
    'base': {
        'hitpoints': 64,
        'magic': 90,
        'attack': 45,
        'defense': 41,
        'intellect': 68,
        'speed': 69,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1085,
    'name': 'Siesamon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.slow,
    'exp': 182,
    'eggCycles': 25,
    'base': {
        'hitpoints': 51,
        'magic': 63,
        'attack': 50,
        'defense': 40,
        'intellect': 102,
        'speed': 28,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1086,
    'name': 'Wizarmon X-Antibody',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 194,
    'eggCycles': 25,
    'base': {
        'hitpoints': 30,
        'magic': 75,
        'attack': 35,
        'defense': 35,
        'intellect': 90,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1087,
    'name': 'Angewomon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 204,
    'eggCycles': 40,
    'base': {
        'hitpoints': 50,
        'magic': 100,
        'attack': 30,
        'defense': 50,
        'intellect': 135,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1088,
    'name': 'Cyberdramon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 204,
    'eggCycles': 40,
    'base': {
        'hitpoints': 90,
        'magic': 42,
        'attack': 83,
        'defense': 85,
        'intellect': 40,
        'speed': 110,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1089,
    'name': 'Jazarichmon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 203,
    'eggCycles': 40,
    'base': {
        'hitpoints': 36,
        'magic': 23,
        'attack': 100,
        'defense': 40,
        'intellect': 15,
        'speed': 200,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1090,
    'name': 'Lady Devimon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 238,
    'eggCycles': 40,
    'base': {
        'hitpoints': 50,
        'magic': 110,
        'attack': 60,
        'defense': 50,
        'intellect': 95,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1091,
    'name': 'Mephismon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 250,
    'eggCycles': 40,
    'base': {
        'hitpoints': 88,
        'magic': 105,
        'attack': 42,
        'defense': 56,
        'intellect': 96,
        'speed': 52,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1092,
    'name': 'Metal Greymon Virus X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 237,
    'eggCycles': 40,
    'base': {
        'hitpoints': 109,
        'magic': 45,
        'attack': 120,
        'defense': 85,
        'intellect': 30,
        'speed': 61,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1093,
    'name': 'Monzaemon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 200,
    'eggCycles': 40,
    'base': {
        'hitpoints': 118,
        'magic': 49,
        'attack': 75,
        'defense': 65,
        'intellect': 70,
        'speed': 56,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1094,
    'name': 'Omega Shoutmon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 232,
    'eggCycles': 40,
    'base': {
        'hitpoints': 98,
        'magic': 88,
        'attack': 116,
        'defense': 96,
        'intellect': 70,
        'speed': 117,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1095,
    'name': 'Rize Greymon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 235,
    'eggCycles': 40,
    'base': {
        'hitpoints': 115,
        'magic': 40,
        'attack': 115,
        'defense': 65,
        'intellect': 30,
        'speed': 85,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1096,
    'name': 'Vamdemon X-Antibody',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 240,
    'eggCycles': 40,
    'base': {
        'hitpoints': 80,
        'magic': 64,
        'attack': 90,
        'defense': 55,
        'intellect': 100,
        'speed': 61,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1097,
    'name': 'Barbamon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 267,
    'eggCycles': 95,
    'base': {
        'hitpoints': 80,
        'magic': 170,
        'attack': 45,
        'defense': 80,
        'intellect': 136,
        'speed': 89,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1098,
    'name': 'Belphemon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 277,
    'eggCycles': 95,
    'base': {
        'hitpoints': 126,
        'magic': 45,
        'attack': 184,
        'defense': 185,
        'intellect': 40,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1099,
    'name': 'Cherubimon Vice X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 296,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 125,
        'attack': 55,
        'defense': 50,
        'intellect': 170,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1100,
    'name': 'Cherubimon Virtue X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 286,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 135,
        'attack': 55,
        'defense': 60,
        'intellect': 145,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1101,
    'name': 'Dark Knightmon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 281,
    'eggCycles': 95,
    'base': {
        'hitpoints': 70,
        'magic': 43,
        'attack': 170,
        'defense': 200,
        'intellect': 70,
        'speed': 47,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1102,
    'name': 'Demon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 261,
    'eggCycles': 95,
    'base': {
        'hitpoints': 95,
        'magic': 84,
        'attack': 125,
        'defense': 80,
        'intellect': 126,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1103,
    'name': 'Examon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 300,
    'eggCycles': 95,
    'base': {
        'hitpoints': 120,
        'magic': 95,
        'attack': 115,
        'defense': 90,
        'intellect': 80,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1104,
    'name': 'Gankoomon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 289,
    'eggCycles': 95,
    'base': {
        'hitpoints': 150,
        'magic': 51,
        'attack': 125,
        'defense': 105,
        'intellect': 80,
        'speed': 89,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1105,
    'name': 'Hexeblaumon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 274,
    'eggCycles': 95,
    'base': {
        'hitpoints': 151,
        'magic': 65,
        'attack': 145,
        'defense': 51,
        'intellect': 51,
        'speed': 113,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1106,
    'name': 'Hououmon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 285,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 110,
        'attack': 55,
        'defense': 55,
        'intellect': 114,
        'speed': 116,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1107,
    'name': 'Jesmon GX',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 273,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 115,
        'attack': 85,
        'defense': 105,
        'intellect': 120,
        'speed': 110,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1108,
    'name': 'Justimon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 262,
    'eggCycles': 95,
    'base': {
        'hitpoints': 136,
        'magic': 129,
        'attack': 128,
        'defense': 55,
        'intellect': 60,
        'speed': 107,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1109,
    'name': 'Leviamon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 274,
    'eggCycles': 95,
    'base': {
        'hitpoints': 120,
        'magic': 76,
        'attack': 115,
        'defense': 105,
        'intellect': 95,
        'speed': 89,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1110,
    'name': 'Lilithmon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 268,
    'eggCycles': 95,
    'base': {
        'hitpoints': 65,
        'magic': 150,
        'attack': 60,
        'defense': 60,
        'intellect': 150,
        'speed': 115,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1111,
    'name': 'Lucemon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 266,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 145,
        'attack': 105,
        'defense': 70,
        'intellect': 100,
        'speed': 90,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1112,
    'name': 'Metallicdramon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 282,
    'eggCycles': 95,
    'base': {
        'hitpoints': 120,
        'magic': 23,
        'attack': 150,
        'defense': 40,
        'intellect': 10,
        'speed': 240,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1113,
    'name': 'Noble Pumpmon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 278,
    'eggCycles': 95,
    'base': {
        'hitpoints': 106,
        'magic': 99,
        'attack': 100,
        'defense': 85,
        'intellect': 138,
        'speed': 49,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1114,
    'name': 'Ofanimon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 270,
    'eggCycles': 95,
    'base': {
        'hitpoints': 61,
        'magic': 120,
        'attack': 65,
        'defense': 130,
        'intellect': 120,
        'speed': 95,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1115,
    'name': 'Ofanimon Falldown Mode X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 296,
    'eggCycles': 95,
    'base': {
        'hitpoints': 62,
        'magic': 162,
        'attack': 63,
        'defense': 100,
        'intellect': 131,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1116,
    'name': 'Ogudomon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 261,
    'eggCycles': 95,
    'base': {
        'hitpoints': 130,
        'magic': 99,
        'attack': 99,
        'defense': 99,
        'intellect': 99,
        'speed': 99,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1117,
    'name': 'Rapidmon X-Antibody',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 283,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 100,
        'attack': 87,
        'defense': 104,
        'intellect': 104,
        'speed': 105,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1118,
    'name': 'Rasenmon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 274,
    'eggCycles': 95,
    'base': {
        'hitpoints': 76,
        'magic': 16,
        'attack': 160,
        'defense': 200,
        'intellect': 17,
        'speed': 125,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1119,
    'name': 'Rasenmon Fury Mode',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 269,
    'eggCycles': 95,
    'base': {
        'hitpoints': 76,
        'magic': 240,
        'attack': 16,
        'defense': 126,
        'intellect': 17,
        'speed': 125,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1120,
    'name': 'Algomon Baby I',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 19,
    'eggCycles': 5,
    'base': {
        'hitpoints': 36,
        'magic': 22,
        'attack': 29,
        'defense': 21,
        'intellect': 17,
        'speed': 15,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1121,
    'name': 'Dokimon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 22,
    'eggCycles': 5,
    'base': {
        'hitpoints': 25,
        'magic': 30,
        'attack': 12,
        'defense': 18,
        'intellect': 26,
        'speed': 29,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1122,
    'name': 'Algomon Baby II',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Plant],
    'levelType': LevelType.mediumslow,
    'exp': 65,
    'eggCycles': 10,
    'base': {
        'hitpoints': 41,
        'magic': 36,
        'attack': 40,
        'defense': 21,
        'intellect': 17,
        'speed': 15,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1123,
    'name': 'Bibimon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Electric],
    'levelType': LevelType.mediumslow,
    'exp': 51,
    'eggCycles': 10,
    'base': {
        'hitpoints': 24,
        'magic': 40,
        'attack': 20,
        'defense': 23,
        'intellect': 33,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1124,
    'name': 'Algomon Child',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 99,
    'eggCycles': 15,
    'base': {
        'hitpoints': 60,
        'magic': 36,
        'attack': 50,
        'defense': 31,
        'intellect': 27,
        'speed': 18,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1125,
    'name': 'Ghostmon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 105,
    'eggCycles': 15,
    'base': {
        'hitpoints': 19,
        'magic': 69,
        'attack': 36,
        'defense': 19,
        'intellect': 45,
        'speed': 23,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1126,
    'name': 'Junkmon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 83,
    'eggCycles': 15,
    'base': {
        'hitpoints': 41,
        'magic': 28,
        'attack': 18,
        'defense': 59,
        'intellect': 36,
        'speed': 31,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1127,
    'name': 'Morphomon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.mediumfast,
    'exp': 115,
    'eggCycles': 15,
    'base': {
        'hitpoints': 45,
        'magic': 20,
        'attack': 34,
        'defense': 30,
        'intellect': 67,
        'speed': 25,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1128,
    'name': 'Pomumon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 87,
    'eggCycles': 15,
    'base': {
        'hitpoints': 38,
        'magic': 34,
        'attack': 38,
        'defense': 38,
        'intellect': 38,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1129,
    'name': 'Pulsemon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 15,
    'base': {
        'hitpoints': 34,
        'magic': 36,
        'attack': 35,
        'defense': 35,
        'intellect': 35,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1130,
    'name': 'Sangomon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 93,
    'eggCycles': 15,
    'base': {
        'hitpoints': 47,
        'magic': 46,
        'attack': 29,
        'defense': 42,
        'intellect': 26,
        'speed': 26,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1131,
    'name': 'Sunarizamon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 107,
    'eggCycles': 15,
    'base': {
        'hitpoints': 68,
        'magic': 20,
        'attack': 16,
        'defense': 56,
        'intellect': 30,
        'speed': 33,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1132,
    'name': 'Algomon Adult',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 182,
    'eggCycles': 25,
    'base': {
        'hitpoints': 67,
        'magic': 60,
        'attack': 66,
        'defense': 56,
        'intellect': 49,
        'speed': 15,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1133,
    'name': 'Baboongamon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 181,
    'eggCycles': 25,
    'base': {
        'hitpoints': 70,
        'magic': 22,
        'attack': 46,
        'defense': 87,
        'intellect': 55,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1134,
    'name': 'Baluchimon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 166,
    'eggCycles': 25,
    'base': {
        'hitpoints': 21,
        'magic': 95,
        'attack': 81,
        'defense': 27,
        'intellect': 30,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1135,
    'name': 'Bulkmon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 172,
    'eggCycles': 25,
    'base': {
        'hitpoints': 64,
        'magic': 78,
        'attack': 31,
        'defense': 54,
        'intellect': 74,
        'speed': 16,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1136,
    'name': 'Dark Maildramon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 185,
    'eggCycles': 25,
    'base': {
        'hitpoints': 57,
        'magic': 93,
        'attack': 24,
        'defense': 81,
        'intellect': 30,
        'speed': 40,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1137,
    'name': 'Eosmon Adult',
    'catchRate': 25,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 193,
    'eggCycles': 25,
    'base': {
        'hitpoints': 45,
        'magic': 65,
        'attack': 65,
        'defense': 45,
        'intellect': 74,
        'speed': 20,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1138,
    'name': 'Exermon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 191,
    'eggCycles': 25,
    'base': {
        'hitpoints': 69,
        'magic': 30,
        'attack': 55,
        'defense': 39,
        'intellect': 74,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1139,
    'name': 'Eyesmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 164,
    'eggCycles': 25,
    'base': {
        'hitpoints': 62,
        'magic': 93,
        'attack': 51,
        'defense': 23,
        'intellect': 53,
        'speed': 29,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1140,
    'name': 'Eyesmon Scatter Mode',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 194,
    'eggCycles': 25,
    'base': {
        'hitpoints': 29,
        'magic': 105,
        'attack': 51,
        'defense': 23,
        'intellect': 53,
        'speed': 62,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1141,
    'name': 'Machmon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 192,
    'eggCycles': 25,
    'base': {
        'hitpoints': 20,
        'magic': 20,
        'attack': 68,
        'defense': 20,
        'intellect': 20,
        'speed': 166,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1142,
    'name': 'Mimicmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.slow,
    'exp': 199,
    'eggCycles': 25,
    'base': {
        'hitpoints': 66,
        'magic': 27,
        'attack': 40,
        'defense': 100,
        'intellect': 30,
        'speed': 58,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1143,
    'name': 'Namakemon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 175,
    'eggCycles': 25,
    'base': {
        'hitpoints': 87,
        'magic': 54,
        'attack': 28,
        'defense': 56,
        'intellect': 47,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1144,
    'name': 'Parasaurmon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 183,
    'eggCycles': 25,
    'base': {
        'hitpoints': 30,
        'magic': 30,
        'attack': 66,
        'defense': 79,
        'intellect': 25,
        'speed': 81,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1145,
    'name': 'Runnermon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 160,
    'eggCycles': 25,
    'base': {
        'hitpoints': 54,
        'magic': 34,
        'attack': 73,
        'defense': 31,
        'intellect': 21,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1146,
    'name': 'Tobiumon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 191,
    'eggCycles': 25,
    'base': {
        'hitpoints': 61,
        'magic': 36,
        'attack': 31,
        'defense': 55,
        'intellect': 60,
        'speed': 76,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1147,
    'name': 'Boutmon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 225,
    'eggCycles': 40,
    'base': {
        'hitpoints': 30,
        'magic': 131,
        'attack': 119,
        'defense': 30,
        'intellect': 60,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1148,
    'name': 'Entmon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 217,
    'eggCycles': 40,
    'base': {
        'hitpoints': 79,
        'magic': 57,
        'attack': 97,
        'defense': 106,
        'intellect': 39,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1149,
    'name': 'Eosmon Perfect',
    'catchRate': 15,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 238,
    'eggCycles': 40,
    'base': {
        'hitpoints': 60,
        'magic': 90,
        'attack': 90,
        'defense': 60,
        'intellect': 95,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1150,
    'name': 'Gogmamon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 218,
    'eggCycles': 40,
    'base': {
        'hitpoints': 75,
        'magic': 50,
        'attack': 96,
        'defense': 110,
        'intellect': 43,
        'speed': 26,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1151,
    'name': 'Gusokumon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 216,
    'eggCycles': 40,
    'base': {
        'hitpoints': 55,
        'magic': 95,
        'attack': 34,
        'defense': 106,
        'intellect': 89,
        'speed': 35,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1152,
    'name': 'Manticoremon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 247,
    'eggCycles': 40,
    'base': {
        'hitpoints': 137,
        'magic': 74,
        'attack': 69,
        'defense': 25,
        'intellect': 25,
        'speed': 120,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1153,
    'name': 'Marin Chimairamon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 259,
    'eggCycles': 40,
    'base': {
        'hitpoints': 129,
        'magic': 55,
        'attack': 60,
        'defense': 53,
        'intellect': 20,
        'speed': 90,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1154,
    'name': 'Metal Greymon Alterous Mode',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.erratic,
    'exp': 232,
    'eggCycles': 40,
    'base': {
        'hitpoints': 58,
        'magic': 20,
        'attack': 120,
        'defense': 104,
        'intellect': 50,
        'speed': 90,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1155,
    'name': 'Piranimon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 242,
    'eggCycles': 40,
    'base': {
        'hitpoints': 100,
        'magic': 48,
        'attack': 83,
        'defense': 65,
        'intellect': 56,
        'speed': 80,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1156,
    'name': 'Rebellimon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 228,
    'eggCycles': 40,
    'base': {
        'hitpoints': 42,
        'magic': 33,
        'attack': 117,
        'defense': 139,
        'intellect': 31,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1157,
    'name': 'Toropiamon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 259,
    'eggCycles': 40,
    'base': {
        'hitpoints': 67,
        'magic': 45,
        'attack': 90,
        'defense': 37,
        'intellect': 35,
        'speed': 134,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1158,
    'name': 'Were Garurumon Sagittarius Mode',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.erratic,
    'exp': 216,
    'eggCycles': 40,
    'base': {
        'hitpoints': 56,
        'magic': 35,
        'attack': 98,
        'defense': 50,
        'intellect': 60,
        'speed': 133,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1159,
    'name': 'Agumon -Yuki no Kizuna-',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 280,
    'eggCycles': 95,
    'base': {
        'hitpoints': 59,
        'magic': 98,
        'attack': 130,
        'defense': 95,
        'intellect': 131,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1160,
    'name': 'Done Devimon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 283,
    'eggCycles': 95,
    'base': {
        'hitpoints': 105,
        'magic': 168,
        'attack': 138,
        'defense': 85,
        'intellect': 47,
        'speed': 69,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1161,
    'name': 'Eosmon Ultimate',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 263,
    'eggCycles': 95,
    'base': {
        'hitpoints': 70,
        'magic': 130,
        'attack': 118,
        'defense': 70,
        'intellect': 152,
        'speed': 60,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1162,
    'name': 'Gabumon -Yujo no Kizuna-',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 277,
    'eggCycles': 95,
    'base': {
        'hitpoints': 60,
        'magic': 131,
        'attack': 68,
        'defense': 127,
        'intellect': 127,
        'speed': 53,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1163,
    'name': 'Heavy Leomon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 269,
    'eggCycles': 95,
    'base': {
        'hitpoints': 87,
        'magic': 146,
        'attack': 37,
        'defense': 150,
        'intellect': 35,
        'speed': 114,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1164,
    'name': 'Kazuchimon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Electric],
    'levelType': LevelType.fluctuating,
    'exp': 299,
    'eggCycles': 95,
    'base': {
        'hitpoints': 100,
        'magic': 135,
        'attack': 100,
        'defense': 41,
        'intellect': 100,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1165,
    'name': 'Mitamamon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 294,
    'eggCycles': 95,
    'base': {
        'hitpoints': 53,
        'magic': 147,
        'attack': 39,
        'defense': 93,
        'intellect': 76,
        'speed': 169,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1166,
    'name': 'Nidhoggmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 277,
    'eggCycles': 95,
    'base': {
        'hitpoints': 140,
        'magic': 79,
        'attack': 100,
        'defense': 130,
        'intellect': 40,
        'speed': 88,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1167,
    'name': 'Omedamon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.fluctuating,
    'exp': 284,
    'eggCycles': 95,
    'base': {
        'hitpoints': 83,
        'magic': 32,
        'attack': 112,
        'defense': 139,
        'intellect': 96,
        'speed': 135,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1168,
    'name': 'Regalecusmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 299,
    'eggCycles': 95,
    'base': {
        'hitpoints': 169,
        'magic': 36,
        'attack': 110,
        'defense': 78,
        'intellect': 42,
        'speed': 91,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1169,
    'name': 'Curimon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 16,
    'eggCycles': 5,
    'base': {
        'hitpoints': 18,
        'magic': 32,
        'attack': 31,
        'defense': 15,
        'intellect': 17,
        'speed': 27,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1170,
    'name': 'Hiyarimon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 32,
    'eggCycles': 10,
    'base': {
        'hitpoints': 34,
        'magic': 12,
        'attack': 30,
        'defense': 18,
        'intellect': 21,
        'speed': 25,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1171,
    'name': 'Puyomon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.fluctuating,
    'exp': 30,
    'eggCycles': 5,
    'base': {
        'hitpoints': 26,
        'magic': 33,
        'attack': 17,
        'defense': 25,
        'intellect': 11,
        'speed': 28,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1172,
    'name': 'Pyonmon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 21,
    'eggCycles': 5,
    'base': {
        'hitpoints': 30,
        'magic': 23,
        'attack': 16,
        'defense': 19,
        'intellect': 29,
        'speed': 22,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1173,
    'name': 'Sunamon',
    'catchRate': 50,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.fluctuating,
    'exp': 12,
    'eggCycles': 5,
    'base': {
        'hitpoints': 18,
        'magic': 31,
        'attack': 20,
        'defense': 35,
        'intellect': 12,
        'speed': 23,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1174,
    'name': 'Bosamon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.mediumslow,
    'exp': 30,
    'eggCycles': 10,
    'base': {
        'hitpoints': 44,
        'magic': 39,
        'attack': 28,
        'defense': 15,
        'intellect': 29,
        'speed': 15,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1175,
    'name': 'Goromon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Earth],
    'levelType': LevelType.mediumslow,
    'exp': 20,
    'eggCycles': 10,
    'base': {
        'hitpoints': 27,
        'magic': 42,
        'attack': 21,
        'defense': 50,
        'intellect': 15,
        'speed': 15,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1176,
    'name': 'Gurimon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 13,
    'eggCycles': 10,
    'base': {
        'hitpoints': 15,
        'magic': 46,
        'attack': 34,
        'defense': 18,
        'intellect': 14,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1177,
    'name': 'Puyoyomon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 23,
    'eggCycles': 10,
    'base': {
        'hitpoints': 15,
        'magic': 45,
        'attack': 23,
        'defense': 40,
        'intellect': 31,
        'speed': 16,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1178,
    'name': 'Negamon',
    'catchRate': 40,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.mediumslow,
    'exp': 12,
    'eggCycles': 10,
    'base': {
        'hitpoints': 31,
        'magic': 34,
        'attack': 28,
        'defense': 21,
        'intellect': 26,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1179,
    'name': 'Angoramon',
    'catchRate': 35,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.mediumfast,
    'exp': 87,
    'eggCycles': 15,
    'base': {
        'hitpoints': 57,
        'magic': 22,
        'attack': 23,
        'defense': 56,
        'intellect': 35,
        'speed': 28,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1180,
    'name': 'Gammamon',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 87,
    'eggCycles': 15,
    'base': {
        'hitpoints': 21,
        'magic': 65,
        'attack': 37,
        'defense': 23,
        'intellect': 23,
        'speed': 43,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1181,
    'name': 'Jellymon',
    'catchRate': 35,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 110,
    'eggCycles': 15,
    'base': {
        'hitpoints': 36,
        'magic': 54,
        'attack': 16,
        'defense': 23,
        'intellect': 50,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1182,
    'name': 'Kodokugumon Child',
    'catchRate': 35,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.mediumfast,
    'exp': 113,
    'eggCycles': 15,
    'base': {
        'hitpoints': 30,
        'magic': 43,
        'attack': 30,
        'defense': 51,
        'intellect': 21,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1183,
    'name': 'Betel Gammamon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 192,
    'eggCycles': 25,
    'base': {
        'hitpoints': 45,
        'magic': 40,
        'attack': 104,
        'defense': 36,
        'intellect': 45,
        'speed': 48,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1184,
    'name': 'Gulus Gammamon',
    'catchRate': 25,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 173,
    'eggCycles': 25,
    'base': {
        'hitpoints': 45,
        'magic': 48,
        'attack': 40,
        'defense': 36,
        'intellect': 45,
        'speed': 104,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1185,
    'name': 'Kaus Gammamon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Wind],
    'levelType': LevelType.slow,
    'exp': 184,
    'eggCycles': 25,
    'base': {
        'hitpoints': 45,
        'magic': 36,
        'attack': 40,
        'defense': 104,
        'intellect': 45,
        'speed': 48,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1186,
    'name': 'Komondomon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 162,
    'eggCycles': 25,
    'base': {
        'hitpoints': 83,
        'magic': 14,
        'attack': 17,
        'defense': 85,
        'intellect': 63,
        'speed': 47,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1187,
    'name': 'Potamon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Plant],
    'levelType': LevelType.slow,
    'exp': 191,
    'eggCycles': 25,
    'base': {
        'hitpoints': 95,
        'magic': 20,
        'attack': 54,
        'defense': 73,
        'intellect': 20,
        'speed': 44,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1188,
    'name': 'Symbare Angoramon',
    'catchRate': 25,
    'type': [PokemonType.Vaccine, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 173,
    'eggCycles': 25,
    'base': {
        'hitpoints': 94,
        'magic': 24,
        'attack': 56,
        'defense': 59,
        'intellect': 23,
        'speed': 66,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1189,
    'name': 'Tesla Jellymon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 171,
    'eggCycles': 25,
    'base': {
        'hitpoints': 22,
        'magic': 87,
        'attack': 70,
        'defense': 24,
        'intellect': 69,
        'speed': 34,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1190,
    'name': 'Wezen Gammamon',
    'catchRate': 25,
    'type': [PokemonType.Data, PokemonType.Earth],
    'levelType': LevelType.slow,
    'exp': 170,
    'eggCycles': 25,
    'base': {
        'hitpoints': 45,
        'magic': 104,
        'attack': 40,
        'defense': 36,
        'intellect': 45,
        'speed': 48,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1191,
    'name': 'Black Tailmon Uver',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Dark],
    'levelType': LevelType.erratic,
    'exp': 220,
    'eggCycles': 40,
    'base': {
        'hitpoints': 43,
        'magic': 66,
        'attack': 81,
        'defense': 92,
        'intellect': 28,
        'speed': 105,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1192,
    'name': 'Canoweissmon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.erratic,
    'exp': 218,
    'eggCycles': 40,
    'base': {
        'hitpoints': 56,
        'magic': 115,
        'attack': 105,
        'defense': 58,
        'intellect': 30,
        'speed': 83,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1193,
    'name': 'Climbmon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 233,
    'eggCycles': 40,
    'base': {
        'hitpoints': 73,
        'magic': 32,
        'attack': 100,
        'defense': 39,
        'intellect': 100,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1194,
    'name': 'Divemon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 220,
    'eggCycles': 40,
    'base': {
        'hitpoints': 90,
        'magic': 64,
        'attack': 30,
        'defense': 48,
        'intellect': 65,
        'speed': 131,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1195,
    'name': 'Frozomon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Water],
    'levelType': LevelType.erratic,
    'exp': 239,
    'eggCycles': 40,
    'base': {
        'hitpoints': 69,
        'magic': 101,
        'attack': 68,
        'defense': 138,
        'intellect': 30,
        'speed': 30,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Security },
}, {
    'id': 1196,
    'name': 'Lamortmon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 240,
    'eggCycles': 40,
    'base': {
        'hitpoints': 110,
        'magic': 30,
        'attack': 98,
        'defense': 72,
        'intellect': 36,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1197,
    'name': 'Pistmon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.erratic,
    'exp': 222,
    'eggCycles': 40,
    'base': {
        'hitpoints': 70,
        'magic': 40,
        'attack': 91,
        'defense': 45,
        'intellect': 47,
        'speed': 138,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1198,
    'name': 'Rare Raremon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 238,
    'eggCycles': 40,
    'base': {
        'hitpoints': 138,
        'magic': 24,
        'attack': 100,
        'defense': 123,
        'intellect': 21,
        'speed': 39,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1199,
    'name': 'Shootmon',
    'catchRate': 15,
    'type': [PokemonType.Vaccine, PokemonType.Neutral],
    'levelType': LevelType.erratic,
    'exp': 206,
    'eggCycles': 40,
    'base': {
        'hitpoints': 105,
        'magic': 48,
        'attack': 102,
        'defense': 81,
        'intellect': 51,
        'speed': 47,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1200,
    'name': 'Tempomon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 210,
    'eggCycles': 40,
    'base': {
        'hitpoints': 61,
        'magic': 140,
        'attack': 73,
        'defense': 55,
        'intellect': 51,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1201,
    'name': 'Thetismon',
    'catchRate': 15,
    'type': [PokemonType.Data, PokemonType.Electric],
    'levelType': LevelType.erratic,
    'exp': 245,
    'eggCycles': 40,
    'base': {
        'hitpoints': 52,
        'magic': 125,
        'attack': 82,
        'defense': 35,
        'intellect': 101,
        'speed': 50,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1202,
    'name': 'Vulturemon',
    'catchRate': 15,
    'type': [PokemonType.Virus, PokemonType.Wind],
    'levelType': LevelType.erratic,
    'exp': 208,
    'eggCycles': 40,
    'base': {
        'hitpoints': 32,
        'magic': 40,
        'attack': 105,
        'defense': 40,
        'intellect': 90,
        'speed': 106,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1203,
    'name': 'Abbadomon',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 268,
    'eggCycles': 95,
    'base': {
        'hitpoints': 169,
        'magic': 185,
        'attack': 20,
        'defense': 185,
        'intellect': 31,
        'speed': 28,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Light },
}, {
    'id': 1204,
    'name': 'Abbadomon Core',
    'catchRate': 5,
    'type': [PokemonType.Free, PokemonType.Dark],
    'levelType': LevelType.fluctuating,
    'exp': 291,
    'eggCycles': 95,
    'base': {
        'hitpoints': 169,
        'magic': 184,
        'attack': 20,
        'defense': 28,
        'intellect': 31,
        'speed': 186,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1205,
    'name': 'Achillesmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 273,
    'eggCycles': 95,
    'base': {
        'hitpoints': 79,
        'magic': 50,
        'attack': 125,
        'defense': 108,
        'intellect': 96,
        'speed': 144,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1206,
    'name': 'Ajatarmon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 270,
    'eggCycles': 95,
    'base': {
        'hitpoints': 90,
        'magic': 91,
        'attack': 112,
        'defense': 78,
        'intellect': 44,
        'speed': 155,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1207,
    'name': 'Bloom Lordmon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 284,
    'eggCycles': 95,
    'base': {
        'hitpoints': 154,
        'magic': 38,
        'attack': 101,
        'defense': 65,
        'intellect': 60,
        'speed': 161,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1208,
    'name': 'Fros Velgrmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Wind],
    'levelType': LevelType.fluctuating,
    'exp': 298,
    'eggCycles': 95,
    'base': {
        'hitpoints': 84,
        'magic': 131,
        'attack': 100,
        'defense': 43,
        'intellect': 82,
        'speed': 140,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Step },
}, {
    'id': 1209,
    'name': 'Gaioumon Invincible Sword',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 261,
    'eggCycles': 95,
    'base': {
        'hitpoints': 49,
        'magic': 111,
        'attack': 157,
        'defense': 142,
        'intellect': 37,
        'speed': 103,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Games },
}, {
    'id': 1210,
    'name': 'Hydramon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 292,
    'eggCycles': 95,
    'base': {
        'hitpoints': 147,
        'magic': 129,
        'attack': 115,
        'defense': 86,
        'intellect': 35,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1211,
    'name': 'Lovely Angemon',
    'catchRate': 5,
    'type': [PokemonType.Vaccine, PokemonType.Light],
    'levelType': LevelType.fluctuating,
    'exp': 272,
    'eggCycles': 95,
    'base': {
        'hitpoints': 143,
        'magic': 40,
        'attack': 82,
        'defense': 60,
        'intellect': 70,
        'speed': 138,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
}, {
    'id': 1212,
    'name': 'Shivamon',
    'catchRate': 5,
    'type': [PokemonType.Data, PokemonType.Plant],
    'levelType': LevelType.fluctuating,
    'exp': 261,
    'eggCycles': 95,
    'base': {
        'hitpoints': 71,
        'magic': 102,
        'attack': 100,
        'defense': 77,
        'intellect': 111,
        'speed': 70,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.eBook },
}, {
    'id': 1213,
    'name': 'Shroudmon',
    'catchRate': 5,
    'type': [PokemonType.Virus, PokemonType.Fire],
    'levelType': LevelType.fluctuating,
    'exp': 300,
    'eggCycles': 95,
    'base': {
        'hitpoints': 145,
        'magic': 81,
        'attack': 130,
        'defense': 106,
        'intellect': 73,
        'speed': 55,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Health },
});
const pokemonNameIndex = {};
const maxEggCycles = Math.max(...pokemonList.map(p => p.eggCycles));
// This needs to be initiallised before pokemonMap as some other things rely on it for data
// Specifically Roamers not sure what else.
pokemonList.forEach(p => {
    var _a, _b;
    // Calculate our attack values
    const baseOffense = 2 * Math.round(Math.sqrt(p.base.attack * p.base.magic) + Math.sqrt(p.base.speed));
    const baseDefense = 2 * Math.round(Math.sqrt(p.base.defense * p.base.intellect) + Math.sqrt(p.base.speed));
    const baseStamina = 2 * p.base.hitpoints;
    p.attack = Math.max(10, Math.floor(Math.sqrt(baseDefense * baseStamina) * baseOffense / 250));
    if (p.baby) {
        // Calculate prevolutions/baby pokemon
        // Egg steos should be lower than evolved form
        (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.forEach(evo => {
            pokemonBabyPrevolutionMap[evo.getEvolvedPokemon()] = evo.basePokemon;
            const poke = pokemonList.find(_p => _p.name == evo.getEvolvedPokemon());
            p.eggCycles = Math.round(poke.eggCycles * 0.8);
        });
    }
    else {
        // Calculate evolutions egg steps to be higher than the base forms
        (_b = p.evolutions) === null || _b === void 0 ? void 0 : _b.forEach(evo => {
            const poke = pokemonList.find(_p => _p.name == evo.getEvolvedPokemon());
            poke.eggCycles = Math.min(maxEggCycles, Math.round(p.eggCycles * 1.5));
        });
    }
    // Calculate this pokemons native region
    p.nativeRegion = p.nativeRegion || GameConstants.MaxIDPerRegion.findIndex(maxRegionID => maxRegionID >= Math.floor(p.id));
    // Create an index of pokemon
    pokemonNameIndex[p.name.toLowerCase()] = p;
});
const pokemonMap = new GenericProxy(pokemonList, {
    get: (pokemon, prop) => {
        var _a, _b;
        if (!isNaN(+prop)) {
            const id = +prop;
            const pokemonByID = pokemon.find(p => p.id == id);
            if (pokemonByID) {
                return pokemonByID;
            }
        }
        switch (prop) {
            case 'random':
                return (_max = 0, _min = 0) => {
                    // minimum 0
                    const min = Math.max(0, Math.min(_min, _max));
                    // maximum is same as however many pokemon are available
                    const max = Math.min(pokemon.length, Math.max(_min, _max));
                    // Decide on a base ID first (so we aren't weighted towards pokemon with multiple forms such as Alcremie)
                    const basePokemonIDs = [...new Set(pokemon.filter(p => p.id >= min && p.id <= max).map(p => Math.floor(p.id)))];
                    const ID = Rand.fromArray(basePokemonIDs);
                    // Choose a Pokemon with that base ID
                    const poke = Rand.fromArray(pokemon.filter(p => Math.floor(p.id) === ID && p.id >= min && p.id <= max));
                    return poke || pokemon.find(p => p.id == 0);
                };
            case 'randomRegion':
                return (_max = GameConstants.Region.adventure01, _min = GameConstants.Region.adventure01) => {
                    // minimum 0 (Kanto)
                    const min = Math.max(GameConstants.Region.adventure01, Math.min(_min, _max));
                    const max = Math.max(GameConstants.Region.adventure01, _min, _max);
                    // Decide on a base ID first (so we aren't weighted towards pokemon with multiple forms such as Alcremie)
                    const basePokemonIDs = [...new Set(pokemon.filter(p => p.id > 0 && p.nativeRegion >= min && p.nativeRegion <= max).map(p => Math.floor(p.id)))];
                    const ID = Rand.fromArray(basePokemonIDs);
                    // Choose a Pokemon with that base ID
                    const poke = Rand.fromArray(pokemon.filter(p => Math.floor(p.id) === ID && p.nativeRegion >= min && p.nativeRegion <= max));
                    // return a random Pokemon or MissingNo if none found
                    return poke || pokemon.find(p => p.id == 0);
                };
            default:
                return pokemonNameIndex[prop.toLowerCase()] || ((_b = (_a = pokemon[prop]) === null || _a === void 0 ? void 0 : _a.bind) === null || _b === void 0 ? void 0 : _b.call(pokemon[prop], pokemon)) || pokemon[prop] || pokemon.find(p => p.id == 0);
        }
    },
});
///<reference path="PokemonList.ts"/>
///<reference path="../GameConstants.d.ts"/>
var PokemonLocationType;
(function (PokemonLocationType) {
    PokemonLocationType[PokemonLocationType["Route"] = 0] = "Route";
    PokemonLocationType[PokemonLocationType["Roaming"] = 1] = "Roaming";
    PokemonLocationType[PokemonLocationType["Dungeon"] = 2] = "Dungeon";
    PokemonLocationType[PokemonLocationType["DungeonBoss"] = 3] = "DungeonBoss";
    PokemonLocationType[PokemonLocationType["Evolution"] = 4] = "Evolution";
    PokemonLocationType[PokemonLocationType["Egg"] = 5] = "Egg";
    PokemonLocationType[PokemonLocationType["Baby"] = 6] = "Baby";
    PokemonLocationType[PokemonLocationType["Shop"] = 7] = "Shop";
    PokemonLocationType[PokemonLocationType["Fossil"] = 8] = "Fossil";
    PokemonLocationType[PokemonLocationType["Safari"] = 9] = "Safari";
    PokemonLocationType[PokemonLocationType["BattleFrontier"] = 10] = "BattleFrontier";
    PokemonLocationType[PokemonLocationType["Wandering"] = 11] = "Wandering";
})(PokemonLocationType || (PokemonLocationType = {}));
class PokemonHelper {
    static getPokemonsWithEvolution(evoType) {
        return App.game.party.caughtPokemon.filter((partyPokemon) => {
            if (!partyPokemon.evolutions) {
                return false;
            }
            for (const evolution of partyPokemon.evolutions) {
                if (evolution instanceof StoneEvolution && evolution.stone == evoType && evolution.isSatisfied() && PokemonHelper.calcNativeRegion(evolution.getEvolvedPokemon()) <= player.highestRegion()) {
                    return true;
                }
            }
            return false;
        }).sort((a, b) => a.id - b.id);
    }
    static getEvolution(id, evoType) {
        const pokemon = App.game.party.caughtPokemon.find(p => p.id == id);
        if (pokemon) {
            for (const evolution of pokemon.evolutions) {
                if (evolution instanceof StoneEvolution && evolution.stone == evoType) {
                    return evolution.getEvolvedPokemon();
                }
            }
        }
        return '';
    }
    static getPokemonById(id) {
        return this.getPokemonByName(pokemonMap[id].name);
    }
    static getPokemonByName(name) {
        var _a;
        const basePokemon = pokemonMap[name];
        if (!basePokemon) {
            console.warn('Could not find pokemon', name);
            return;
        }
        const type1 = basePokemon['type'][0];
        const type2 = (_a = basePokemon['type'][1]) !== null && _a !== void 0 ? _a : PokemonType.None;
        const eggCycles = basePokemon['eggCycles'] || 20;
        return new DataPokemon(basePokemon['id'], basePokemon['name'], basePokemon['catchRate'], basePokemon['evolutions'], type1, type2, basePokemon['attack'], basePokemon['base']['hitpoints'], basePokemon['levelType'], basePokemon['exp'], eggCycles, basePokemon['heldItem']);
    }
    static typeStringToId(id) {
        return PokemonType[id];
    }
    static typeIdToString(id) {
        return PokemonType[id];
    }
    static getImage(pokemon, shiny) {
        let src = 'assets/images/';
        if (shiny) {
            src += 'shiny';
        }
        src += `pokemon/${pokemon.id}.png`;
        return src;
    }
    static getListImage(pokemon, shiny) {
        let src = 'assets/images/';
        if (shiny) {
            src += 'dot';
        }
        src += `digidex/${pokemon.id}.png`;
        return src;
    }
    static getPokeballImage(pokemonName) {
        let src = '';
        if (App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(pokemonName).id)) {
            src = 'assets/images/pokeball/Pokeball-';
            if (App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(pokemonName).id, true)) {
                src += 'shiny-';
            }
            src += 'small.png';
        }
        return src;
    }
    static calcNativeRegion(pokemonName) {
        const pokemon = pokemonMap[pokemonName];
        if (pokemon.nativeRegion != undefined) {
            return pokemon.nativeRegion;
        }
        const id = pokemon.id;
        const region = GameConstants.MaxIDPerRegion.findIndex(maxRegionID => maxRegionID >= Math.floor(id));
        return region >= 0 ? region : GameConstants.Region.none;
    }
    static calcUniquePokemonsByRegion(region) {
        return new Set(pokemonList.filter(p => p.id > 0 && PokemonHelper.calcNativeRegion(p.name) === region).map(p => Math.floor(p.id))).size;
    }
    /*
    PRETTY MUCH ONLY USED BY THE BOT BELOW
    */
    static getPokemonRegionRoutes(pokemonName, maxRegion = GameConstants.Region.none) {
        const regionRoutes = {};
        Routes.regionRoutes.forEach(routeData => {
            var _a;
            const region = routeData.region;
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none && region > maxRegion) {
                return false;
            }
            Object.entries(routeData.pokemon).forEach(([encounterType, pokemon]) => {
                if (Object.values(pokemon).flat().includes(pokemonName)) {
                    if (!regionRoutes[region]) {
                        regionRoutes[region] = [];
                    }
                    regionRoutes[region].push({ route: routeData.number });
                }
            });
            (_a = routeData.pokemon.special) === null || _a === void 0 ? void 0 : _a.forEach(special => {
                if (special.pokemon.includes(pokemonName)) {
                    if (!regionRoutes[region]) {
                        regionRoutes[region] = [];
                    }
                    regionRoutes[region].push({ route: routeData.number, requirements: special.req.hint() });
                }
            });
            return true;
        });
        return regionRoutes;
    }
    static getPokemonDungeons(pokemonName, maxRegion = GameConstants.Region.none) {
        const dungeons = [];
        Object.entries(dungeonList).forEach(([dungeonName, dungeon]) => {
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none) {
                const region = GameConstants.RegionDungeons.findIndex(d => d.includes(dungeonName));
                if (region > maxRegion) {
                    return false;
                }
            }
            // Dungeon Grunt
            if (dungeon.pokemonList.includes(pokemonName)) {
                dungeons.push(dungeonName);
            }
        });
        return dungeons;
    }
    static getPokemonBossDungeons(pokemonName, maxRegion = GameConstants.Region.none) {
        const dungeons = [];
        Object.entries(dungeonList).forEach(([dungeonName, dungeon]) => {
            var _a, _b;
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none) {
                const region = GameConstants.RegionDungeons.findIndex(d => d.includes(dungeonName));
                if (region > maxRegion) {
                    return false;
                }
            }
            // Dungeon Boss
            const boss = dungeon.availableBosses(false, true).find(boss => boss.name == pokemonName);
            if (boss) {
                const data = {
                    dungeon: dungeonName,
                    requirements: (_b = (_a = boss.options) === null || _a === void 0 ? void 0 : _a.requirement) === null || _b === void 0 ? void 0 : _b.hint(),
                };
                dungeons.push(data);
            }
        });
        return dungeons;
    }
    static getPokemonEggs(pokemonName, maxRegion = GameConstants.Region.none) {
        const eggTypes = [];
        Object.entries(App.game.breeding.hatchList).forEach(([eggType, eggArr]) => {
            eggArr.forEach((pokemonArr, region) => {
                // If we only want to check up to a maximum region
                if (maxRegion != GameConstants.Region.none && region > maxRegion) {
                    return false;
                }
                if (pokemonArr.includes(pokemonName)) {
                    eggTypes.push(EggType[eggType]);
                }
            });
        });
        return eggTypes;
    }
    static getPokemonShops(pokemonName, maxRegion = GameConstants.Region.none) {
        const shops = [];
        Object.entries(TownList).forEach(([townName, town]) => {
            // Check if the shop has items
            const townShops = town.content.filter(c => c instanceof Shop && c.items);
            if (townShops.length) {
                // If we only want to check up to a maximum region
                const region = town.region;
                if (maxRegion != GameConstants.Region.none && region > maxRegion) {
                    return false;
                }
                const hasPokemon = townShops.find(ts => { var _a; return (_a = ts.items) === null || _a === void 0 ? void 0 : _a.find(item => item.name == pokemonName); });
                if (hasPokemon) {
                    shops.push(townName);
                }
            }
        });
        return shops;
    }
    static getPokemonRoamingRegions(pokemonName, maxRegion = GameConstants.Region.none) {
        const regions = [];
        Object.entries(RoamingPokemonList.list).forEach(([region, pokemonArr]) => {
            var _a;
            if (maxRegion != GameConstants.Region.none && (+region) > maxRegion) {
                return false;
            }
            const pokemon = pokemonArr.find(r => r.pokemon.name == pokemonName);
            if (pokemon) {
                const data = {
                    region: +region,
                    requirements: (_a = pokemon.unlockRequirement) === null || _a === void 0 ? void 0 : _a.hint(),
                };
                regions.push(data);
            }
        });
        return regions;
    }
    static getPokemonParents(pokemonName, maxRegion = GameConstants.Region.none) {
        const parents = [];
        Object.entries(pokemonBabyPrevolutionMap).forEach(([parent, baby]) => {
            if (baby == pokemonName) {
                if (maxRegion != GameConstants.Region.none && pokemonMap[parent].nativeRegion > maxRegion) {
                    return false;
                }
                parents.push(parent);
            }
        });
        return parents;
    }
    static getPokemonFossils(pokemonName) {
        const fossils = [];
        Object.entries(GameConstants.FossilToPokemon).forEach(([fossil, pokemon]) => {
            if (pokemon == pokemonName) {
                fossils.push(fossil);
            }
        });
        return fossils;
    }
    static getPokemonSafariChance(pokemonName) {
        const safariWeight = SafariPokemon.list.reduce((sum, p) => sum += p.weight, 0);
        const safariPokemon = SafariPokemon.list.find(p => p.name == pokemonName);
        return safariPokemon ? +((SafariPokemon.calcPokemonWeight(safariPokemon) / safariWeight) * 100).toFixed(2) : 0;
    }
    static getPokemonPrevolution(pokemonName, maxRegion = GameConstants.Region.none) {
        const evolutions = [];
        const prevolutionPokemon = pokemonList.filter((p) => { var _a; return (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.find(e => e.getEvolvedPokemon() == pokemonName); });
        prevolutionPokemon.forEach((p) => p.evolutions.forEach(e => {
            if (e.getEvolvedPokemon() == pokemonName) {
                if (maxRegion != GameConstants.Region.none && p.nativeRegion > maxRegion) {
                    return false;
                }
                evolutions.push(e);
            }
        }));
        return evolutions;
    }
    static getPokemonLevelPrevolution(pokemonName, maxRegion = GameConstants.Region.none) {
        var _a, _b;
        const evolutionPokemon = pokemonList.find((p) => { var _a; return (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.find(e => e.type.includes(EvolutionType.Level) && e.getEvolvedPokemon() == pokemonName); });
        if (maxRegion != GameConstants.Region.none && pokemonMap[evolutionPokemon.name].nativeRegion > maxRegion) {
            return;
        }
        return (_b = (_a = evolutionPokemon) === null || _a === void 0 ? void 0 : _a.evolutions) === null || _b === void 0 ? void 0 : _b.find(e => e.getEvolvedPokemon() == pokemonName);
    }
    static getPokemonStonePrevolution(pokemonName, maxRegion = GameConstants.Region.none) {
        var _a, _b;
        const evolutionPokemon = pokemonList.find((p) => { var _a; return (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.find(e => e.type.includes(EvolutionType.Stone) && e.getEvolvedPokemon() == pokemonName); });
        if (maxRegion != GameConstants.Region.none && pokemonMap[evolutionPokemon.name].nativeRegion > maxRegion) {
            return;
        }
        return (_b = (_a = evolutionPokemon) === null || _a === void 0 ? void 0 : _a.evolutions) === null || _b === void 0 ? void 0 : _b.find(e => e.getEvolvedPokemon() == pokemonName);
    }
    static getPokemonBattleFrontier(pokemonName) {
        const stages = [];
        BattleFrontierMilestones.milestoneRewards.filter(m => m instanceof BattleFrontierMilestonePokemon).forEach(milestone => {
            if (milestone.pokemonName == pokemonName) {
                stages.push(milestone.stage);
            }
        });
        return stages;
    }
    static getPokemonWandering(pokemonName) {
        const berries = [];
        if (Berry.baseWander.includes(pokemonName)) {
            return ['Always'];
        }
        App.game.farming.berryData.forEach((berry) => {
            if (berry.wander.includes(pokemonName)) {
                berries.push(BerryType[berry.type]);
            }
        });
        return berries;
    }
}
PokemonHelper.getPokemonLocations = (pokemonName, maxRegion = GameConstants.Region.none) => {
    const encounterTypes = {};
    // Routes
    const regionRoutes = PokemonHelper.getPokemonRegionRoutes(pokemonName, maxRegion);
    if (Object.keys(regionRoutes).length) {
        encounterTypes[PokemonLocationType.Route] = regionRoutes;
    }
    // Dungeons
    const dungeons = PokemonHelper.getPokemonDungeons(pokemonName, maxRegion);
    if (dungeons.length) {
        encounterTypes[PokemonLocationType.Dungeon] = dungeons;
    }
    // Dungeon Boss
    const bossDungeons = PokemonHelper.getPokemonBossDungeons(pokemonName, maxRegion);
    if (bossDungeons.length) {
        encounterTypes[PokemonLocationType.DungeonBoss] = bossDungeons;
    }
    // Eggs
    const eggs = PokemonHelper.getPokemonEggs(pokemonName, maxRegion);
    if (eggs.length) {
        encounterTypes[PokemonLocationType.Egg] = eggs;
    }
    // Shops
    const shops = PokemonHelper.getPokemonShops(pokemonName, maxRegion);
    if (shops.length) {
        encounterTypes[PokemonLocationType.Shop] = shops;
    }
    // Roaming
    const roaming = PokemonHelper.getPokemonRoamingRegions(pokemonName, maxRegion);
    if (roaming.length) {
        encounterTypes[PokemonLocationType.Roaming] = roaming;
    }
    // Baby
    const parents = PokemonHelper.getPokemonParents(pokemonName, maxRegion);
    if (parents.length) {
        encounterTypes[PokemonLocationType.Baby] = parents;
    }
    // Fossil
    const fossils = PokemonHelper.getPokemonFossils(pokemonName);
    if (fossils.length) {
        encounterTypes[PokemonLocationType.Fossil] = fossils;
    }
    // Safari
    const safariChance = PokemonHelper.getPokemonSafariChance(pokemonName);
    if (safariChance) {
        encounterTypes[PokemonLocationType.Safari] = `${safariChance}%`;
    }
    // Evolution
    const evolutions = PokemonHelper.getPokemonPrevolution(pokemonName, maxRegion);
    if (evolutions.length) {
        encounterTypes[PokemonLocationType.Evolution] = evolutions;
    }
    // Battle Frontier
    const battleFrontier = PokemonHelper.getPokemonBattleFrontier(pokemonName);
    if (battleFrontier.length) {
        encounterTypes[PokemonLocationType.BattleFrontier] = battleFrontier;
    }
    // Wandering
    const wandering = PokemonHelper.getPokemonWandering(pokemonName);
    if (wandering.length) {
        encounterTypes[PokemonLocationType.Wandering] = wandering;
    }
    // Return the list of items
    return encounterTypes;
};
/// <reference path="../../declarations/GameHelper.d.ts" />
class BattlePokemon {
    /**
     * In case you want to manually create a Pokémon instead of generating it from the route number
     * @param name Pokémon name
     * @param id Pokémon
     * @param type1 First type of the Pokémon
     * @param type2 Second type of the Pokémon
     * @param maxHealth max health that the Pokémon can have
     * @param level level is 2 times the current route
     * @param catchRate base chance of catching this Pokémon
     * @param exp base exp reward for defeating this Pokémon
     * @param reward currency reward for defeating this Pokémon
     * @param shiny is a shiny variant
     * @param [heldItem] item to possibly gain for defeating this Pokémon
     */
    constructor(name, id, type1 = PokemonType.None, type2 = PokemonType.None, maxHealth, level, catchRate, exp, reward = new Amount(0, GameConstants.Currency.money), shiny, gemReward = 1, heldItem) {
        this.name = name;
        this.id = id;
        this.type1 = type1;
        this.type2 = type2;
        this.level = level;
        this.catchRate = catchRate;
        this.exp = exp;
        this.reward = reward;
        this.shiny = shiny;
        this.gemReward = gemReward;
        this.heldItem = heldItem;
        this.health = ko.observable(maxHealth);
        this.maxHealth = ko.observable(maxHealth);
        this.healthPercentage = ko.observable(100);
    }
    isAlive() {
        return this.health() > 0;
    }
    /**
     * Lost health without
     * @param damage
     */
    damage(damage) {
        this.health(Math.max(0, this.health() - damage));
        this.healthPercentage(Math.floor(this.health() / this.maxHealth() * 100));
    }
    defeat(trainer = false) {
        GameHelper.incrementObservable(App.game.statistics.digimonDefeated[this.id]);
        GameHelper.incrementObservable(App.game.statistics.totalDigimonDefeated);
        if (this.shiny) {
            GameHelper.incrementObservable(App.game.statistics.dotDigimonDefeated[this.id]);
            GameHelper.incrementObservable(App.game.statistics.totalDotDigimonDefeated);
        }
        if (this.reward.amount > 0) {
            App.game.wallet.addAmount(this.reward);
        }
        if (this.heldItem) {
            const name = BagHandler.displayName(this.heldItem);
            BagHandler.gainItem(this.heldItem);
            if (name === "Games Disk") {
                App.game.wallet.gainAttackcoin(1);
            }
            else if (name === "Security Disk") {
                App.game.wallet.gainDefencecoin(1);
            }
            else if (name === "Step Disk") {
                App.game.wallet.gainSpeedcoin(1);
            }
            else if (name === "eBook Disk") {
                App.game.wallet.gainIntcoin(1);
            }
            else if (name === "Health Disk") {
                App.game.wallet.gainHealthcoin(1);
            }
            else if (name === "Light Disk") {
                App.game.wallet.gainMagiccoin(1);
            }
        }
        App.game.party.gainExp(this.exp, this.level, trainer);
        App.game.gems.gainGems(this.gemReward, this.type1);
        App.game.gems.gainGems(this.gemReward, this.type2);
    }
}
///<reference path="PokemonHelper.ts"/>
///<reference path="BattlePokemon.ts"/>
class PokemonFactory {
    /**
     * Generate a wild pokemon based on route, region and the dataList.
     * @param route route that the player is on.
     * @param region region that the player is in.
     * @returns {any}
     */
    static generateWildPokemon(route, region) {
        if (!MapHelper.validRoute(route, region)) {
            return new BattlePokemon('Ohakadamon', 0, PokemonType.None, PokemonType.None, 0, 0, 0, 0, new Amount(0, GameConstants.Currency.money), false, 0);
        }
        let name;
        if (PokemonFactory.roamingEncounter(route, region)) {
            name = PokemonFactory.generateRoamingEncounter(route, region);
        }
        else {
            name = Rand.fromArray(RouteHelper.getAvailablePokemonList(route, region));
        }
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        const routeAvgHp = (region, route) => {
            const poke = [...new Set(Object.values(Routes.getRoute(region, route).pokemon).flat().map(p => { var _a; return (_a = p.pokemon) !== null && _a !== void 0 ? _a : p; }).flat())];
            const total = poke.map(p => pokemonMap[p].base.hitpoints).reduce((s, a) => s + a, 0);
            return total / poke.length;
        };
        // TODO this monster formula needs to be improved. Preferably with graphs :D
        // Health has a +/- 10% variable based on base health stat compared to the average of the route
        const maxHealth = Math.round((PokemonFactory.routeHealth(route, region) - (PokemonFactory.routeHealth(route, region) / 10)) + (PokemonFactory.routeHealth(route, region) / 10 / routeAvgHp(region, route) * basePokemon.hitpoints));
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const level = this.routeLevel(route, region);
        const heldItem = this.generateHeldItem(basePokemon.heldItem, GameConstants.ROUTE_HELD_ITEM_MODIFIER);
        const money = this.routeMoney(route, region);
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        if (shiny) {
            Notifier.notify({
                message: `👾 You encountered a dot ${name}! 👾`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.shiny_long,
                setting: NotificationConstants.NotificationSetting.General.encountered_shiny,
            });
            // Track shinies encountered, and rate of shinies
            LogEvent('encountered shiny', 'shiny pokemon', 'wild encounter', Math.floor(App.game.statistics.totalDigimonEncountered() / App.game.statistics.totalDotDigimonEncountered()));
        }
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, level, catchRate, exp, new Amount(money, GameConstants.Currency.money), shiny, 1, heldItem);
    }
    static routeLevel(route, region) {
        return Math.floor(MapHelper.normalizeRoute(route, region) * 2 + 20 * Math.pow(region, 2.3));
    }
    static routeHealth(route, region) {
        route = MapHelper.normalizeRoute(route, region);
        const health = Math.max(20, Math.floor(Math.pow((100 * Math.pow(route, 2.2) / 12), 1.15) * (1 + region / 20))) || 20;
        return health;
    }
    static routeMoney(route, region, useRandomDeviation = true) {
        route = MapHelper.normalizeRoute(route, region);
        //If it's not random, we take the mean value (truncated)
        const deviation = useRandomDeviation ? Rand.intBetween(-25, 25) : 12;
        const money = Math.max(10, 3 * route + 5 * Math.pow(route, 1.15) + deviation);
        return money;
    }
    static routeDungeonTokens(route, region) {
        route = MapHelper.normalizeRoute(route, region);
        const tokens = Math.max(1, 6 * Math.pow(route * 2 / (2.8 / (1 + region / 3)), 1.08));
        return tokens;
    }
    /**
     * Calculate if a shiny has spawned.
     * @param chance Base chance, should be from GameConstants.SHINY_CHANCE.*
     * @returns {boolean}
     */
    static generateShiny(chance, skipBonus = false) {
        const bonus = skipBonus ? 1 : App.game.multiplier.getBonus('shiny');
        if (Rand.chance(chance / bonus)) {
            App.game.oakItems.use(OakItemType.Pixel_Stone);
            return true;
        }
        return false;
    }
    static generatePartyPokemon(id, shiny = false) {
        const dataPokemon = PokemonHelper.getPokemonById(id);
        return new PartyPokemon(dataPokemon.id, dataPokemon.name, dataPokemon.evolutions, dataPokemon.attack, 0, 0, 0, 0, false, shiny);
    }
    /**
     * Generate a Gym trainer pokemon based on gymName, index and the dataList.
     * @param gymName name of the gym that the player is fighting.
     * @param index index of the Pokémon that is being generated.
     * @returns {any}
     */
    static generateGymPokemon(gym, index) {
        const pokemon = gym.pokemons[index];
        const basePokemon = PokemonHelper.getPokemonByName(pokemon.name);
        const exp = basePokemon.exp * 1.5;
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        return new BattlePokemon(pokemon.name, basePokemon.id, basePokemon.type1, basePokemon.type2, pokemon.maxHealth, pokemon.level, 0, exp, new Amount(0, GameConstants.Currency.money), shiny, GameConstants.GYM_GEMS);
    }
    static generateDungeonPokemon(name, chestsOpened, baseHealth, level) {
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        const maxHealth = Math.floor(baseHealth * (1 + (chestsOpened / 5)));
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const money = 0;
        const heldItem = this.generateHeldItem(basePokemon.heldItem, GameConstants.DUNGEON_HELD_ITEM_MODIFIER);
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_DUNGEON);
        if (shiny) {
            Notifier.notify({
                message: `👾 You encountered a dot ${name}! 👾`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.shiny_long,
                setting: NotificationConstants.NotificationSetting.General.encountered_shiny,
            });
            // Track shinies encountered, and rate of shinies
            LogEvent('encountered shiny', 'shiny pokemon', 'dungeon encounter', Math.floor(App.game.statistics.totalDigimonEncountered() / App.game.statistics.totalDotDigimonEncountered()));
        }
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, level, catchRate, exp, new Amount(money, GameConstants.Currency.money), shiny, GameConstants.DUNGEON_GEMS, heldItem);
    }
    static generateDungeonTrainerPokemon(pokemon, chestsOpened, baseHealth, level) {
        // TODO: HLXII - Will Dungeon Trainer pokemon health be handled differently?
        const name = pokemon.name;
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const maxHealth = Math.floor(baseHealth * (1 + (chestsOpened / 5)));
        const exp = basePokemon.exp;
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_DUNGEON);
        // Reward 2% or 5% (boss) of dungeon DT cost when the trainer mons are defeated
        const money = 0;
        return new BattlePokemon(name, basePokemon.id, basePokemon.type1, basePokemon.type2, maxHealth, level, 0, exp, new Amount(money, GameConstants.Currency.money), shiny, GameConstants.DUNGEON_GEMS);
    }
    static generateDungeonBoss(bossPokemon, chestsOpened) {
        const name = bossPokemon.name;
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        const maxHealth = Math.floor(bossPokemon.baseHealth * (1 + (chestsOpened / 5)));
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const money = 0;
        const heldItem = this.generateHeldItem(basePokemon.heldItem, GameConstants.DUNGEON_BOSS_HELD_ITEM_MODIFIER);
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_DUNGEON);
        if (shiny) {
            Notifier.notify({
                message: `👾 You encountered a dot ${name}! 👾`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.shiny_long,
                setting: NotificationConstants.NotificationSetting.General.encountered_shiny,
            });
            // Track shinies encountered, and rate of shinies
            LogEvent('encountered shiny', 'shiny pokemon', 'dungeon boss encounter', Math.floor(App.game.statistics.totalDigimonEncountered() / App.game.statistics.totalDotDigimonEncountered()));
        }
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, bossPokemon.level, catchRate, exp, new Amount(money, GameConstants.Currency.money), shiny, GameConstants.DUNGEON_BOSS_GEMS, heldItem);
    }
    static generateTemporaryBattlePokemon(battle, index) {
        const pokemon = battle.pokemons[index];
        const basePokemon = PokemonHelper.getPokemonByName(pokemon.name);
        const exp = basePokemon.exp * 1.5;
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        return new BattlePokemon(pokemon.name, basePokemon.id, basePokemon.type1, basePokemon.type2, pokemon.maxHealth, pokemon.level, 0, exp, new Amount(0, GameConstants.Currency.money), shiny, GameConstants.GYM_GEMS);
    }
    static generateRoamingEncounter(route, region) {
        const possible = RoamingPokemonList.getRegionalRoamers(region);
        // Double the chance of encountering a roaming Pokemon you have not yet caught
        return Rand.fromWeightedArray(possible, possible.map(r => App.game.party.alreadyCaughtPokemonByName(r.pokemon.name) ? 1 : 2)).pokemon.name;
    }
    static roamingEncounter(routeNum, region) {
        // Map to the route numbers
        const route = Routes.getRoute(region, routeNum);
        const routes = Routes.getRoutesByRegion(region).map(r => MapHelper.normalizeRoute(r.number, region));
        // Check if the dice rolls in their favor
        const encounter = PokemonFactory.roamingChance(Math.max(...routes), Math.min(...routes), route, region);
        if (!encounter) {
            return false;
        }
        // There is likely to be a roamer available, so we can check this last
        const roamingPokemon = RoamingPokemonList.getRegionalRoamers(region);
        if (!routes || !routes.length || !roamingPokemon || !roamingPokemon.length) {
            return false;
        }
        // Roaming encounter
        return true;
    }
    static roamingChance(maxRoute, minRoute, curRoute, region, max = GameConstants.ROAMING_MAX_CHANCE, min = GameConstants.ROAMING_MIN_CHANCE, skipBonus = false) {
        var _a;
        const bonus = skipBonus ? 1 : App.game.multiplier.getBonus('roaming');
        const routeNum = MapHelper.normalizeRoute(curRoute === null || curRoute === void 0 ? void 0 : curRoute.number, region);
        // Check if we should have increased chances on this route (3 x rate)
        const increasedChance = ((_a = RoamingPokemonList.getIncreasedChanceRouteByRegion(player.region)()) === null || _a === void 0 ? void 0 : _a.number) == (curRoute === null || curRoute === void 0 ? void 0 : curRoute.number);
        const roamingChance = (max + ((min - max) * (maxRoute - routeNum) / (maxRoute - minRoute))) / ((increasedChance ? 3 : 1) * bonus);
        return Rand.chance(roamingChance);
    }
    static catchRateHelper(baseCatchRate, noVariation = false) {
        const catchVariation = noVariation ? 0 : Rand.intBetween(-3, 3);
        const catchRateRaw = baseCatchRate;
        return GameConstants.clipNumber(catchRateRaw, 0, 100);
    }
    static generateHeldItem(item, modifier) {
        if (!item || !BagHandler.displayName(item)) {
            return null;
        }
        let chance = GameConstants.HELD_ITEM_CHANCE;
        // Apply drop chance by item type
        switch (item.type) {
            case ItemType.underground:
                chance = GameConstants.HELD_UNDERGROUND_ITEM_CHANCE;
                break;
        }
        // Apply drop chance by item ID
        switch (item.id) {
            case 'Black_DNA':
                chance = GameConstants.DNA_ITEM_CHANCE;
                break;
            case 'White_DNA':
                chance = GameConstants.DNA_ITEM_CHANCE;
                break;
        }
        chance /= modifier;
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.Item_magnet)()) {
            chance /= 1.5;
        }
        if (FluteEffectRunner.isActive(GameConstants.FluteItemType.H_Wind_Spirit)()) {
            chance /= (FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.H_Wind_Spirit) * AchievementHandler.achievementBonus());
        }
        if (Rand.chance(chance)) {
            return item;
        }
        return null;
    }
}
///<reference path="pokemons/PokemonFactory.ts"/>
/// <reference path="../declarations/GameHelper.d.ts" />
/**
 * Handles all logic related to battling
 */
class Battle {
    /**
     * Probably not needed right now, but might be if we add more logic to a gameTick.
     */
    static tick() {
        this.counter = 0;
        this.pokemonAttack();
    }
    /**
     * Attacks with Pokémon and checks if the enemy is defeated.
     */
    static pokemonAttack() {
        var _a;
        // TODO: figure out a better way of handling this
        // Limit pokemon attack speed, Only allow 1 attack per 900ms
        const now = Date.now();
        if (this.lastPokemonAttack > now - 900) {
            return;
        }
        this.lastPokemonAttack = now;
        if (!((_a = this.enemyPokemon()) === null || _a === void 0 ? void 0 : _a.isAlive())) {
            return;
        }
        this.enemyPokemon().damage(App.game.party.calculatePokemonAttack(this.enemyPokemon().type1, this.enemyPokemon().type2));
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Attacks with clicks and checks if the enemy is defeated.
     */
    static clickAttack() {
        var _a;
        // click attacks disabled and we already beat the starter
        if (App.game.challenges.list.disableClickAttack.active() && player.starter() != GameConstants.Starter.None) {
            return;
        }
        // TODO: figure out a better way of handling this
        // Limit click attack speed, Only allow 1 attack per 50ms (20 per second)
        const now = Date.now();
        if (this.lastClickAttack > now - 50) {
            return;
        }
        this.lastClickAttack = now;
        if (!((_a = this.enemyPokemon()) === null || _a === void 0 ? void 0 : _a.isAlive())) {
            return;
        }
        GameHelper.incrementObservable(App.game.statistics.clickAttacks);
        this.enemyPokemon().damage(App.game.party.calculateClickAttack(true));
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Award the player with money and exp, and throw a Pokéball if applicable
     */
    static defeatPokemon() {
        const enemyPokemon = this.enemyPokemon();
        Battle.route = player.route();
        enemyPokemon.defeat();
        GameHelper.incrementObservable(App.game.statistics.routeKills[player.region][Battle.route]);
        App.game.breeding.progressEggsBattle(Battle.route, player.region);
        const isShiny = enemyPokemon.shiny;
        const pokeBall = App.game.pokeballs.calculatePokeballToUse(enemyPokemon.id, isShiny);
        if (pokeBall !== GameConstants.Pokeball.None) {
            this.prepareCatch(enemyPokemon, pokeBall);
            setTimeout(() => {
                this.attemptCatch(enemyPokemon);
                if (Battle.route != 0) {
                    this.generateNewEnemy();
                }
            }, App.game.pokeballs.calculateCatchTime(pokeBall));
        }
        else {
            this.generateNewEnemy();
        }
        this.gainItem();
        player.lowerItemMultipliers(MultiplierDecreaser.Battle);
    }
    /**
     * Generate a new enemy based on the current route and region.
     * Reset the counter.
     */
    static generateNewEnemy() {
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateWildPokemon(player.route(), player.region));
        const enemyPokemon = this.enemyPokemon();
        GameHelper.incrementObservable(App.game.statistics.digimonEncountered[enemyPokemon.id]);
        GameHelper.incrementObservable(App.game.statistics.totalDigimonEncountered);
        if (enemyPokemon.shiny) {
            GameHelper.incrementObservable(App.game.statistics.dotDigimonEncountered[enemyPokemon.id]);
            GameHelper.incrementObservable(App.game.statistics.totalDotDigimonEncountered);
            App.game.logbook.newLog(LogBookTypes.SHINY, `[${Routes.getRoute(player.region, player.route()).routeName}] You encountered a wild Dot ${enemyPokemon.name}.`);
        }
        else if (!App.game.party.alreadyCaughtPokemon(enemyPokemon.id) && enemyPokemon.health()) {
            App.game.logbook.newLog(LogBookTypes.NEW, `[${Routes.getRoute(player.region, player.route()).routeName}] You encountered a wild ${enemyPokemon.name}.`);
        }
    }
    static calculateActualCatchRate(enemyPokemon, pokeBall) {
        const pokeballBonus = App.game.pokeballs.getCatchBonus(pokeBall);
        const oakBonus = App.game.oakItems.calculateBonus(OakItemType.Memory_Stick);
        const scanBonus = App.game.statistics.digimonScanned[enemyPokemon.id]() + 1;
        const totalChance = GameConstants.clipNumber(enemyPokemon.catchRate * scanBonus + pokeballBonus + oakBonus, 0, 100);
        return totalChance;
    }
    static prepareCatch(enemyPokemon, pokeBall) {
        this.pokeball(pokeBall);
        this.catching(true);
        this.catchRateActual(this.calculateActualCatchRate(enemyPokemon, pokeBall));
        App.game.pokeballs.usePokeball(pokeBall);
    }
    static attemptCatch(enemyPokemon) {
        if (enemyPokemon == null) {
            this.catching(false);
            return;
        }
        if (Rand.chance(100 / 100)) { // Caught
            this.catchPokemon(enemyPokemon);
        }
        else if (enemyPokemon.shiny) { // Failed to catch, Shiny
            App.game.logbook.newLog(LogBookTypes.ESCAPED, `The Dot ${enemyPokemon.name} escaped!`);
        }
        else if (!App.game.party.alreadyCaughtPokemon(enemyPokemon.id)) { // Failed to catch, Uncaught
            App.game.logbook.newLog(LogBookTypes.ESCAPED, `The wild ${enemyPokemon.name} escaped!`);
        }
        this.catching(false);
        this.catchRateActual(null);
    }
    static catchPokemon(enemyPokemon) {
        var _a, _b;
        const catchRoute = Battle.route || ((_b = (_a = player.town()) === null || _a === void 0 ? void 0 : _a.dungeon) === null || _b === void 0 ? void 0 : _b.difficultyRoute) || 1;
        App.game.wallet.gainScancoin(PokemonFactory.routeDungeonTokens(catchRoute, player.region));
        App.game.oakItems.use(OakItemType.Memory_Stick);
        if (this.catchRateActual() >= 100) {
            App.game.party.gainPokemonById(enemyPokemon.id, enemyPokemon.shiny);
        }
        else {
            GameHelper.incrementObservable(App.game.statistics.digimonScanned[enemyPokemon.id]);
            GameHelper.incrementObservable(App.game.statistics.totalDigimonScanned);
        }
    }
    static gainItem() {
        const p = MapHelper.normalizeRoute(Battle.route, player.region) / 1600 + 0.009375;
        if (Rand.chance(p)) {
            App.game.farming.gainRandomBerry();
        }
    }
}
Battle.enemyPokemon = ko.observable(null);
Battle.counter = 0;
Battle.catching = ko.observable(false);
Battle.catchRateActual = ko.observable(null);
Battle.pokeball = ko.observable(GameConstants.Pokeball.Pokeball);
Battle.lastPokemonAttack = Date.now();
Battle.lastClickAttack = Date.now();
/// <reference path="../declarations/DataStore/BadgeCase.d.ts" />
/// <reference path="../declarations/GameHelper.d.ts" />
/// <reference path="../declarations/party/Category.d.ts"/>
/**
 * Main game class.
 */
class Game {
    /**
     * TODO(@Isha) pass all features through the constructor
     */
    constructor(update, profile, breeding, pokeballs, wallet, keyItems, badgeCase, oakItems, oakItemLoadouts, categories, party, gems, underground, farming, logbook, redeemableCodes, statistics, quests, specialEvents, discord, achievementTracker, challenges, battleFrontier, multiplier) {
        this.update = update;
        this.profile = profile;
        this.breeding = breeding;
        this.pokeballs = pokeballs;
        this.wallet = wallet;
        this.keyItems = keyItems;
        this.badgeCase = badgeCase;
        this.oakItems = oakItems;
        this.oakItemLoadouts = oakItemLoadouts;
        this.categories = categories;
        this.party = party;
        this.gems = gems;
        this.underground = underground;
        this.farming = farming;
        this.logbook = logbook;
        this.redeemableCodes = redeemableCodes;
        this.statistics = statistics;
        this.quests = quests;
        this.specialEvents = specialEvents;
        this.discord = discord;
        this.achievementTracker = achievementTracker;
        this.challenges = challenges;
        this.battleFrontier = battleFrontier;
        this.multiplier = multiplier;
        this._gameState = ko.observable(GameConstants.GameState.paused);
    }
    load() {
        const saveJSON = localStorage.getItem(`save${Save.key}`);
        const saveObject = JSON.parse(saveJSON || '{}');
        Object.keys(this).filter(key => { var _a; return (_a = this[key]) === null || _a === void 0 ? void 0 : _a.saveKey; }).forEach(key => {
            try {
                const saveKey = this[key].saveKey;
                // Load our save object or the default save data
                this[key].fromJSON(saveObject[saveKey] || this[key].toJSON());
            }
            catch (error) {
                console.error('Unable to load sava data from JSON for:', key, '\nError:\n', error);
            }
        });
    }
    initialize() {
        AchievementHandler.initialize(this.multiplier, this.challenges);
        FarmController.initialize();
        EffectEngineRunner.initialize(this.multiplier);
        FluteEffectRunner.initialize(this.multiplier);
        ItemHandler.initilizeEvoStones();
        this.profile.initialize();
        this.breeding.initialize();
        this.pokeballs.initialize();
        this.keyItems.initialize();
        this.oakItems.initialize();
        this.underground.initialize();
        this.farming.initialize();
        this.specialEvents.initialize();
        this.load();
        // Update if the achievements are already completed
        AchievementHandler.preCheckAchievements();
        // TODO refactor to proper initialization methods
        if (player.starter() != GameConstants.Starter.None) {
            Battle.generateNewEnemy();
        }
        else {
            const battlePokemon = new BattlePokemon('Ohakadamon', 0, PokemonType.None, PokemonType.None, 0, 0, 0, 0, new Amount(0, GameConstants.Currency.money), false);
            Battle.enemyPokemon(battlePokemon);
        }
        this.farming.resetAuras();
        //Safari.load();
        Underground.energyTick(this.underground.getEnergyRegenTime());
        AchievementHandler.calculateMaxBonus(); //recalculate bonus based on active challenges
        const now = new Date();
        SeededDateRand.seedWithDate(now);
        DailyDeal.generateDeals(this.underground.getDailyDealsMax(), now);
        BerryDeal.generateDeals(now);
        Weather.generateWeather(now);
        GemDeal.generateDeals();
        RoamingPokemonList.generateIncreasedChanceRoutes(now);
        this.computeOfflineEarnings();
        this.checkAndFix();
        // If the player isn't on a route, they're in a town/dungeon
        this.gameState = player.route() ? GameConstants.GameState.fighting : GameConstants.GameState.town;
    }
    computeOfflineEarnings() {
        const now = Date.now();
        const timeDiffInSeconds = Math.floor((now - player._lastSeen) / 1000);
        if (timeDiffInSeconds > 1) {
            // Only allow up to 24 hours worth of bonuses
            const timeDiffOverride = Math.min(86400, timeDiffInSeconds);
            let region = player.region;
            let route = player.route() || GameConstants.StartingRoutes[region];
            if (!MapHelper.validRoute(route, region)) {
                route = 1;
                region = GameConstants.Region.adventure01;
            }
            const availablePokemonMap = RouteHelper.getAvailablePokemonList(route, region).map(name => pokemonMap[name]);
            const maxHealth = PokemonFactory.routeHealth(route, region);
            let hitsToKill = 0;
            for (const pokemon of availablePokemonMap) {
                const type1 = pokemon.type[0];
                const type2 = pokemon.type.length > 1 ? pokemon.type[1] : PokemonType.None;
                const attackAgainstPokemon = App.game.party.calculatePokemonAttack(type1, type2);
                const currentHitsToKill = Math.ceil(maxHealth / attackAgainstPokemon);
                hitsToKill += currentHitsToKill;
            }
            hitsToKill = Math.ceil(hitsToKill / availablePokemonMap.length);
            const numberOfPokemonDefeated = Math.floor(timeDiffOverride / hitsToKill);
            if (numberOfPokemonDefeated === 0) {
                return;
            }
            const routeMoney = PokemonFactory.routeMoney(player.route(), player.region, false);
            const baseMoneyToEarn = numberOfPokemonDefeated * routeMoney;
            const moneyToEarn = Math.floor(baseMoneyToEarn * 0.5); //Debuff for offline money
            App.game.wallet.gainMoney(moneyToEarn, true);
            Notifier.notify({
                type: NotificationConstants.NotificationOption.info,
                title: 'Offline progress',
                message: `Defeated: ${numberOfPokemonDefeated.toLocaleString('en-US')} Digimon\nEarned: <img src="./assets/images/currency/money.svg" height="24px"/> ${moneyToEarn.toLocaleString('en-US')}`,
                strippedMessage: `Defeated: ${numberOfPokemonDefeated.toLocaleString('en-US')} Digimon\nEarned: ${moneyToEarn.toLocaleString('en-US')} money`,
                timeout: 2 * GameConstants.MINUTE,
                setting: NotificationConstants.NotificationSetting.General.offline_earnings,
            });
        }
    }
    checkAndFix() {
        // Quest box not showing (game thinking tutorial is not completed)
        if (App.game.quests.getQuestLine('Tutorial Quests').state() == QuestLineState.inactive) {
            if (App.game.statistics.challengesDefeated[GameConstants.getGymIndex('Toy Town')]() >= 0) {
                // Defeated Brock, Has completed the Tutorial
                App.game.quests.getQuestLine('Tutorial Quests').state(QuestLineState.ended);
            }
            else if (player.starter() >= 0) {
                // Has chosen a starter, Tutorial is started
                App.game.quests.getQuestLine('Tutorial Quests').state(QuestLineState.started);
                App.game.quests.getQuestLine('Tutorial Quests').beginQuest(App.game.quests.getQuestLine('Tutorial Quests').curQuest());
            }
        }
        // Battle Frontier not accessable (chances are people broke this themselves, but whatever...)
        if (App.game.quests.getQuestLine('Mystery of Deoxys').state() == QuestLineState.inactive) {
            if (App.game.statistics.colosseumHighestStageCompleted() >= 100) {
                // Defeated stage 100, has obtained deoxys
                App.game.quests.getQuestLine('Mystery of Deoxys').state(QuestLineState.ended);
            }
            else if (App.game.statistics.challengesDefeated[GameConstants.getGymIndex('Champion Wallace')]() >= 1) {
                // Has defeated the Hoenn champion, Quest is started
                App.game.quests.getQuestLine('Mystery of Deoxys').state(QuestLineState.started);
                App.game.quests.getQuestLine('Mystery of Deoxys').beginQuest(App.game.quests.getQuestLine('Mystery of Deoxys').curQuest());
            }
        }
        // Mining expedition questline
        if (App.game.quests.getQuestLine('Mining Expedition').state() == QuestLineState.inactive) {
            if (App.game.party.alreadyCaughtPokemon(142)) {
                // Has obtained Aerodactyl
                App.game.quests.getQuestLine('Mining Expedition').state(QuestLineState.ended);
            }
            else if (App.game.badgeCase.badgeList[BadgeEnums.Sincerity_Crest]()) {
                // Has the soul badge, Quest is started
                App.game.quests.getQuestLine('Mining Expedition').state(QuestLineState.started);
                App.game.quests.getQuestLine('Mining Expedition').beginQuest(App.game.quests.getQuestLine('Mining Expedition').curQuest());
            }
        }
        // Check if Koga has been defeated, but have no safari ticket yet
        if (App.game.badgeCase.badgeList[BadgeEnums.Sincerity_Crest]() && !App.game.keyItems.itemList[KeyItemType.Safari_ticket].isUnlocked()) {
            App.game.keyItems.gainKeyItem(KeyItemType.Safari_ticket, true);
        }
        // Check if Giovanni has been defeated, but have no gem case yet
        if (App.game.badgeCase.badgeList[BadgeEnums.Hope_Crest]() && !App.game.keyItems.itemList[KeyItemType.Chip_case].isUnlocked()) {
            App.game.keyItems.gainKeyItem(KeyItemType.Chip_case, true);
        }
    }
    start() {
        var _a;
        console.log(`[${GameConstants.formatDate(new Date())}] %cGame started`, 'color:#2ecc71;font-weight:900;');
        if (player.starter() === GameConstants.Starter.None) {
            StartSequenceRunner.start();
        }
        let pageHidden = document.hidden;
        // requestAnimationFrame (consistent if page visible)
        let lastFrameTime = 0;
        let ticks = 0;
        const tick = (currentFrameTime) => {
            // Don't process while page hidden
            if (pageHidden) {
                this.frameRequest = requestAnimationFrame(tick);
                return;
            }
            const delta = currentFrameTime - lastFrameTime;
            ticks += delta;
            lastFrameTime = currentFrameTime;
            if (ticks >= GameConstants.TICK_TIME) {
                // Skip the ticks if we have too many...
                if (ticks >= GameConstants.TICK_TIME * 2) {
                    ticks = 0;
                }
                else {
                    ticks -= GameConstants.TICK_TIME;
                }
                this.gameTick();
            }
            this.frameRequest = requestAnimationFrame(tick);
        };
        this.frameRequest = requestAnimationFrame(tick);
        // Try start our webworker so we can process stuff while the page isn't focused
        try {
            console.log(`[${GameConstants.formatDate(new Date())}] %cStarting web worker..`, 'color:#8e44ad;font-weight:900;');
            const blob = new Blob([
                `
                // Window visibility state
                let pageHidden = false;
                self.onmessage = function(e) {
                    if (e.data.pageHidden != undefined) {
                        pageHidden = e.data.pageHidden;
                    }
                };

                // setInterval (slightly slower on FireFox)
                const tickInterval = setInterval(() => {
                    // Don't process while page visible
                    if (!pageHidden) return;

                    postMessage('tick')
                }, ${GameConstants.TICK_TIME});
                `,
            ]);
            const blobURL = window.URL.createObjectURL(blob);
            this.worker = new Worker(blobURL);
            // use a setTimeout to queue the event
            (_a = this.worker) === null || _a === void 0 ? void 0 : _a.addEventListener('message', () => Settings.getSetting('useWebWorkerForGameTicks').value ? this.gameTick() : null);
            // Let our worker know if the page is visible or not
            document.addEventListener('visibilitychange', () => {
                if (pageHidden != document.hidden) {
                    pageHidden = document.hidden;
                    this.worker.postMessage({ 'pageHidden': pageHidden });
                }
            });
            this.worker.postMessage({ 'pageHidden': pageHidden });
            if (this.worker) {
                console.log(`[${GameConstants.formatDate(new Date())}] %cWeb worker started`, 'color:#2ecc71;font-weight:900;');
            }
        }
        catch (e) {
            console.error(`[${GameConstants.formatDate(new Date())}] Web worker error`, e);
        }
        window.onbeforeunload = () => {
            this.save();
        };
    }
    stop() {
        cancelAnimationFrame(this.frameRequest);
        window.onbeforeunload = () => { };
    }
    gameTick() {
        // Acheivements
        Game.achievementCounter += GameConstants.TICK_TIME;
        if (Game.achievementCounter >= GameConstants.ACHIEVEMENT_TICK) {
            Game.achievementCounter = 0;
            AchievementHandler.checkAchievements();
            GameHelper.incrementObservable(App.game.statistics.secondsPlayed);
        }
        // Battles
        switch (this.gameState) {
            case GameConstants.GameState.fighting: {
                Battle.counter += GameConstants.TICK_TIME;
                if (Battle.counter >= GameConstants.BATTLE_TICK) {
                    Battle.tick();
                }
                break;
            }
            case GameConstants.GameState.gym: {
                GymBattle.counter += GameConstants.TICK_TIME;
                if (GymBattle.counter >= GameConstants.BATTLE_TICK) {
                    GymBattle.tick();
                }
                GymRunner.tick();
                break;
            }
            case GameConstants.GameState.dungeon: {
                DungeonBattle.counter += GameConstants.TICK_TIME;
                if (DungeonBattle.counter >= GameConstants.BATTLE_TICK) {
                    DungeonBattle.tick();
                }
                DungeonRunner.tick();
                break;
            }
            case GameConstants.GameState.battleFrontier: {
                BattleFrontierBattle.counter += GameConstants.TICK_TIME;
                if (BattleFrontierBattle.counter >= GameConstants.BATTLE_FRONTIER_TICK) {
                    BattleFrontierBattle.tick();
                }
                BattleFrontierRunner.tick();
                break;
            }
            case GameConstants.GameState.temporaryBattle: {
                TemporaryBattleBattle.counter += GameConstants.TICK_TIME;
                if (TemporaryBattleBattle.counter >= GameConstants.BATTLE_TICK) {
                    TemporaryBattleBattle.tick();
                }
                TemporaryBattleRunner.tick();
                break;
            }
        }
        // Auto Save
        Save.counter += GameConstants.TICK_TIME;
        if (Save.counter > GameConstants.SAVE_TICK) {
            const old = new Date(player._lastSeen);
            const now = new Date();
            // Check if it's a new day
            if (old.toLocaleDateString() !== now.toLocaleDateString()) {
                SeededDateRand.seedWithDate(now);
                // Give the player a free quest refresh
                this.quests.freeRefresh(true);
                //Refresh the Underground deals
                DailyDeal.generateDeals(this.underground.getDailyDealsMax(), now);
                BerryDeal.generateDeals(now);
                if (this.underground.canAccess() || App.game.quests.isDailyQuestsUnlocked()) {
                    Notifier.notify({
                        title: 'It\'s a new day!',
                        message: `${this.underground.canAccess() ? 'Your Underground deals have been updated.\n' : ''}` +
                            `${App.game.quests.isDailyQuestsUnlocked() ? '<i>You have a free quest refresh.</i>' : ''}`,
                        type: NotificationConstants.NotificationOption.info,
                        timeout: 3e4,
                    });
                }
            }
            // Check if it's a new hour
            if (old.getHours() !== now.getHours()) {
                Weather.generateWeather(now);
                RoamingPokemonList.generateIncreasedChanceRoutes(now);
            }
            this.save();
        }
        // Underground
        Underground.counter += GameConstants.TICK_TIME;
        if (Underground.counter >= GameConstants.UNDERGROUND_TICK) {
            Underground.energyTick(Math.max(0, Underground.energyTick() - 1));
            if (Underground.energyTick() == 0) {
                // Check completed in case mine is locked out
                Mine.checkCompleted();
                this.underground.gainEnergy();
                Underground.energyTick(this.underground.getEnergyRegenTime());
            }
            Underground.counter = 0;
        }
        // Farm
        this.farming.update(GameConstants.TICK_TIME / GameConstants.SECOND);
        // Effect Engine (battle items and flutes)
        EffectEngineRunner.counter += GameConstants.TICK_TIME;
        if (EffectEngineRunner.counter >= GameConstants.EFFECT_ENGINE_TICK) {
            EffectEngineRunner.tick();
        }
        FluteEffectRunner.counter += GameConstants.TICK_TIME;
        if (FluteEffectRunner.counter >= GameConstants.EFFECT_ENGINE_TICK) {
            FluteEffectRunner.tick();
        }
        // Game timers
        GameHelper.counter += GameConstants.TICK_TIME;
        if (GameHelper.counter >= GameConstants.MINUTE) {
            GameHelper.tick();
        }
    }
    save() {
        player._lastSeen = Date.now();
        Save.store(player);
    }
    // Knockout getters/setters
    get gameState() {
        return this._gameState();
    }
    set gameState(value) {
        this._gameState(value);
    }
}
Game.achievementCounter = 0;
/**
 * Class which controls the UI of the game.
 */
class GameController {
    static applyRouteBindings() {
        $('path, rect').hover(function () {
            const id = $(this).attr('data-town');
            if (id && id != 'mapTooltipWrapper') {
                const tooltip = $('#mapTooltip');
                tooltip.text(id);
                tooltip.css('visibility', 'visible');
            }
        }, () => {
            const tooltip = $('#mapTooltip');
            tooltip.text('');
            tooltip.css('visibility', 'hidden');
        });
    }
    static convertKey(key) {
        let newKey = key.length > 1 ? key : key.toUpperCase();
        if (newKey == ' ') {
            newKey = 'Space';
        }
        return newKey;
    }
    static simulateKey(code, type = 'keydown', modifiers = {}) {
        const evtName = type.startsWith('key') ? type : `key${type}`;
        const event = document.createEvent('HTMLEvents');
        Object.defineProperties(event, {
            key: { value: code },
        });
        event.initEvent(evtName, true, false);
        for (const i in modifiers) {
            event[i] = modifiers[i];
        }
        document.dispatchEvent(event);
    }
    static bindToolTips() {
        $('[data-toggle="popover"]').popover();
        $('[data-toggle="tooltip"]').tooltip();
        ko.bindingHandlers.tooltip = {
            init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                const local = ko.utils.unwrapObservable(valueAccessor()), options = {};
                ko.utils.extend(options, ko.bindingHandlers.tooltip.options);
                ko.utils.extend(options, local);
                $(element).tooltip(options);
                ko.utils.domNodeDisposal.addDisposeCallback(element, () => {
                    $(element).tooltip('dispose');
                });
            },
            'update': function (element, valueAccessor) {
                const local = ko.utils.unwrapObservable(valueAccessor());
                const options = {};
                ko.utils.extend(options, ko.bindingHandlers.tooltip.options);
                ko.utils.extend(options, local);
                // Update the config of the tooltip
                const tooltipData = $(element).data('bs.tooltip');
                tooltipData.config.title = options.title;
                // If the tooltip is visible, update its text
                const tooltipInner = tooltipData.tip && tooltipData.tip.querySelector('.tooltip-inner');
                if (tooltipInner) {
                    tooltipInner.innerHTML = tooltipData.config.title || '';
                }
                if (tooltipData && tooltipData.config) {
                    if (tooltipData.config.title === '') {
                        $(element).tooltip('hide');
                    }
                }
            },
            options: {
                placement: 'bottom',
                trigger: 'click',
            },
        };
    }
    static focusedOnEditableElement() {
        const activeEl = document.activeElement;
        const localName = activeEl.localName.toLowerCase();
        const editables = ['textarea', 'input', 'select'];
        return (editables.includes(localName) || activeEl.isContentEditable);
    }
    static addKeyListeners() {
        // Oak Items
        const $oakItemsModal = $('#oakItemsModal');
        $oakItemsModal.on('hidden.bs.modal shown.bs.modal', _ => $oakItemsModal.data('disable-toggle', false));
        const oakItems = App.game.oakItems;
        // Pokeball Selector
        const $pokeballSelector = $('#pokeballSelectorModal');
        const pokeballs = App.game.pokeballs;
        // Underground
        const $undergroundModal = $('#mineModal');
        $undergroundModal.on('hidden.bs.modal shown.bs.modal', _ => $undergroundModal.data('disable-toggle', false));
        const underground = App.game.underground;
        // Farm
        const $farmsModal = $('#farmModal');
        $farmsModal.on('hidden.bs.modal shown.bs.modal', _ => $farmsModal.data('disable-toggle', false));
        const farms = App.game.farming;
        // Hatchery
        const $hatcheryModal = $('#breedingModal');
        $hatcheryModal.on('hidden.bs.modal shown.bs.modal', _ => $hatcheryModal.data('disable-toggle', false));
        const hatchery = App.game.breeding;
        // Ship
        const $shipModal = $('#ShipModal');
        // Shop
        const $shopModal = $('#shopModal');
        $(document).on('keydown', e => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            // Ignore any of our controls if focused on an input element
            if (this.focusedOnEditableElement()) {
                return;
            }
            const key = GameController.convertKey(e.key);
            // Set flags for any key currently pressed down (used to check if key held down currently)
            GameController.keyHeld[key] = true;
            // Set our number key if defined (-1 for 0 indexed)
            const numberKey = (+key) - 1;
            const isNumberKey = !isNaN(numberKey);
            const visibleModals = $('.modal:visible').length;
            // Safari Zone
            if (App.game.gameState === GameConstants.GameState.safari) {
                switch (key) {
                    case 'ArrowUp':
                    case Settings.getSetting('hotkey.dungeon.up').value:
                        Safari.move('up');
                        break;
                    case 'ArrowLeft':
                    case Settings.getSetting('hotkey.dungeon.left').value:
                        Safari.move('left');
                        break;
                    case 'ArrowDown':
                    case Settings.getSetting('hotkey.dungeon.down').value:
                        Safari.move('down');
                        break;
                    case 'ArrowRight':
                    case Settings.getSetting('hotkey.dungeon.right').value:
                        Safari.move('right');
                        break;
                }
                // We don't want to process any other keys while in the Safari zone
                return e.preventDefault();
            }
            // Within modals
            if ((_a = $farmsModal.data('bs.modal')) === null || _a === void 0 ? void 0 : _a._isShown) {
                if (key == Settings.getSetting('hotkey.farm.toggleShovel').value) {
                    FarmController.selectedShovel() ? FarmController.selectedShovel(false) : FarmController.selectedShovel(true);
                    return e.preventDefault();
                }
            }
            if ((_b = $undergroundModal.data('bs.modal')) === null || _b === void 0 ? void 0 : _b._isShown) {
                switch (key) {
                    case Settings.getSetting('hotkey.underground.hammer').value:
                        Mine.toolSelected(Mine.Tool.Hammer);
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.underground.chisel').value:
                        Mine.toolSelected(Mine.Tool.Chisel);
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.underground.survey').value:
                        Mine.survey();
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.underground.bomb').value:
                        Mine.bomb();
                        return e.preventDefault();
                }
                if (isNumberKey) {
                    if (numberKey === 0) {
                        ItemList['SmallRestore'].use();
                    }
                    else if (numberKey === 1) {
                        ItemList['MediumRestore'].use();
                    }
                    else if (numberKey === 2) {
                        ItemList['LargeRestore'].use();
                    }
                    return e.preventDefault();
                }
            }
            if ((_c = $oakItemsModal.data('bs.modal')) === null || _c === void 0 ? void 0 : _c._isShown) {
                // Toggle oak items
                if (isNumberKey) {
                    if (oakItems.isUnlocked(numberKey)) {
                        if (oakItems.isActive(numberKey)) {
                            oakItems.deactivate(numberKey);
                        }
                        else {
                            oakItems.activate(numberKey);
                        }
                    }
                    return e.preventDefault();
                }
            }
            if ((_d = $pokeballSelector.data('bs.modal')) === null || _d === void 0 ? void 0 : _d._isShown) {
                if (isNumberKey) {
                    // Switch selection type
                    if (GameController.keyHeld[Settings.getSetting('hotkey.pokeballSelection').value]) {
                        (_e = $('#pokeballSelectorBody .clickable.pokeball-selected').eq(numberKey)) === null || _e === void 0 ? void 0 : _e.trigger('click');
                        return e.preventDefault();
                    }
                    // Select Pokeball from pokeball selector (0 = none)
                    if (numberKey < App.game.pokeballs.pokeballs.length) {
                        pokeballs.selectedSelection()(numberKey);
                    }
                    return e.preventDefault();
                }
            }
            if ((_f = $shipModal.data('bs.modal')) === null || _f === void 0 ? void 0 : _f._isShown) {
                if (isNumberKey) {
                    if (numberKey <= player.highestRegion()) {
                        const regionButton = $('.ship-modal-region-button').eq(numberKey);
                        if (regionButton && !regionButton.prop('disabled')) {
                            regionButton.trigger('click');
                        }
                    }
                    return e.preventDefault();
                }
            }
            if ((_g = $shopModal.data('bs.modal')) === null || _g === void 0 ? void 0 : _g._isShown) {
                if (isNumberKey) {
                    if (numberKey <= ShopHandler.shopObservable().items.length) {
                        ShopHandler.setSelected(numberKey);
                    }
                    return e.preventDefault();
                }
                switch (key) {
                    case Settings.getSetting('hotkey.shop.buy').value:
                        ShopHandler.buyItem();
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.shop.max').value:
                        ShopHandler.maxAmount();
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.shop.reset').value:
                        ShopHandler.resetAmount();
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.shop.increase').value:
                        if (GameController.keyHeld['Shift']) {
                            switch (Settings.getSetting('shopButtons').value) {
                                case 'original':
                                    ShopHandler.increaseAmount(100);
                                    break;
                                case 'multiplication':
                                    ShopHandler.multiplyAmount(0.1);
                                    break;
                                case 'bigplus':
                                    ShopHandler.increaseAmount(1000);
                                    break;
                            }
                        }
                        else {
                            switch (Settings.getSetting('shopButtons').value) {
                                case 'original':
                                    ShopHandler.increaseAmount(10);
                                    break;
                                case 'multiplication':
                                    ShopHandler.multiplyAmount(10);
                                    break;
                                case 'bigplus':
                                    ShopHandler.increaseAmount(100);
                                    break;
                            }
                        }
                        return e.preventDefault();
                }
            }
            // Only run if no modals are open
            if (visibleModals === 0) {
                // Route Battles
                if (App.game.gameState === GameConstants.GameState.fighting) {
                    const initialRoute = MapHelper.normalizeRoute(player.route(), player.region);
                    const firstRoute = Routes.getRoutesByRegion(player.region)[0].number;
                    const lastRoute = Routes.getRoutesByRegion(player.region)[Routes.getRoutesByRegion(player.region).length - 1].number;
                    // Allow '=' to fallthrough to '+' since they share a key on many keyboards
                    switch (key) {
                        case '=':
                        case '+':
                            if (initialRoute + 1 > MapHelper.normalizeRoute(lastRoute, player.region)) {
                                MapHelper.moveToRoute(firstRoute, player.region);
                            }
                            else {
                                MapHelper.moveToRoute(Routes.unnormalizeRoute(initialRoute + 1), player.region);
                            }
                            return e.preventDefault();
                        case '-':
                            if (initialRoute - 1 < MapHelper.normalizeRoute(firstRoute, player.region)) {
                                MapHelper.moveToRoute(lastRoute, player.region);
                            }
                            else {
                                MapHelper.moveToRoute(Routes.unnormalizeRoute(initialRoute - 1), player.region);
                            }
                            return e.preventDefault();
                    }
                }
                // Dungeons
                if (App.game.gameState === GameConstants.GameState.dungeon) {
                    switch (key) {
                        case 'ArrowUp':
                        case Settings.getSetting('hotkey.dungeon.up').value:
                            DungeonRunner.map.moveUp();
                            return e.preventDefault();
                        case 'ArrowLeft':
                        case Settings.getSetting('hotkey.dungeon.left').value:
                            DungeonRunner.map.moveLeft();
                            return e.preventDefault();
                        case 'ArrowDown':
                        case Settings.getSetting('hotkey.dungeon.down').value:
                            DungeonRunner.map.moveDown();
                            return e.preventDefault();
                        case 'ArrowRight':
                        case Settings.getSetting('hotkey.dungeon.right').value:
                            DungeonRunner.map.moveRight();
                            return e.preventDefault();
                        case Settings.getSetting('hotkey.dungeon.interact').value:
                            if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.entrance) {
                                DungeonRunner.dungeonLeave();
                            }
                            else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.chest) {
                                DungeonRunner.openChest();
                            }
                            else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.boss && !DungeonRunner.fightingBoss()) {
                                DungeonRunner.startBossFight();
                            }
                            return e.preventDefault();
                    }
                }
                // Within towns
                if (App.game.gameState === GameConstants.GameState.town) {
                    if (key === Settings.getSetting('hotkey.town.start').value) {
                        if (player.town() instanceof DungeonTown) {
                            DungeonRunner.initializeDungeon(player.town().dungeon);
                        }
                        else {
                            player.town().content[0].protectedOnclick();
                        }
                        return e.preventDefault();
                    }
                    else if (isNumberKey) {
                        // Check if a number higher than 0 and less than our towns content was pressed
                        const filteredConent = player.town().content.filter(c => c.isVisible());
                        if (numberKey < filteredConent.length) {
                            filteredConent[numberKey].protectedOnclick();
                        }
                        else if (player.town().npcs && numberKey < filteredConent.length + player.town().npcs.length) {
                            player.town().npcs[numberKey - filteredConent.length].openDialog();
                        }
                        return e.preventDefault();
                    }
                }
            }
            // Anywhere keys
            switch (key) {
                case Settings.getSetting('hotkey.farm').value:
                    // Open the Farm
                    if (farms.canAccess() && !$farmsModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        $farmsModal.data('disable-toggle', true);
                        $farmsModal.modal('toggle');
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.hatchery').value:
                    // Open the Hatchery
                    if (hatchery.canAccess() && !$hatcheryModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        $hatcheryModal.data('disable-toggle', true);
                        $hatcheryModal.modal('toggle');
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.oakItems').value:
                    // Open oak items
                    if (oakItems.canAccess() && !$oakItemsModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        $oakItemsModal.data('disable-toggle', true);
                        $oakItemsModal.modal('toggle');
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.underground').value:
                    // Open the Underground
                    if (underground.canAccess() && !$undergroundModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        $undergroundModal.data('disable-toggle', true);
                        $undergroundModal.modal('toggle');
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.forceSave').value:
                    if (GameController.keyHeld['Shift']) {
                        Save.store(player);
                        return e.preventDefault();
                    }
                    break;
                default:
                    // Check for a number key being pressed
                    if (isNumberKey) {
                        if (GameController.keyHeld[Settings.getSetting('hotkey.pokeballSelection').value]) {
                            // Open pokeball selector modal using P + (1-4) for each condition
                            if (!((_h = $pokeballSelector.data('bs.modal')) === null || _h === void 0 ? void 0 : _h._isShown)) {
                                $('.modal').modal('hide');
                            }
                            (_j = $('#pokeballSelectorBody .clickable.pokeball-selected').eq(numberKey)) === null || _j === void 0 ? void 0 : _j.trigger('click');
                            return e.preventDefault();
                        }
                    }
            }
            if (key === 'Space') {
                return e.preventDefault();
            }
        });
        $(document).on('keyup', e => {
            // Ignore any of our controls if focused on an input element
            if (this.focusedOnEditableElement()) {
                return;
            }
            const key = GameController.convertKey(e.key);
            // Our key is no longer being held down
            delete GameController.keyHeld[key];
            if (App.game.gameState === GameConstants.GameState.safari) {
                switch (key) {
                    case 'ArrowUp':
                    case Settings.getSetting('hotkey.dungeon.up').value:
                        Safari.stop('up');
                        return e.preventDefault();
                    case 'ArrowLeft':
                    case Settings.getSetting('hotkey.dungeon.left').value:
                        Safari.stop('left');
                        return e.preventDefault();
                    case 'ArrowDown':
                    case Settings.getSetting('hotkey.dungeon.down').value:
                        Safari.stop('down');
                        return e.preventDefault();
                    case 'ArrowRight':
                    case Settings.getSetting('hotkey.dungeon.right').value:
                        Safari.stop('right');
                        return e.preventDefault();
                }
            }
            if (key === 'Space') {
                return e.preventDefault();
            }
        });
    }
}
// Store keys for multi-key combinations
GameController.keyHeld = {};
$(document).ready(() => {
    $('#pokedexModal').on('show.bs.modal', PokedexHelper.updateList);
});
// when stacking modals allow scrolling after top modal hidden
$(document).on('hidden.bs.modal', '.modal', () => {
    $('.modal:visible').length && $(document.body).addClass('modal-open');
});
/// <reference path="../declarations/upgrades/Upgrade.d.ts" />
/**
 * Required modules before porting:
 * Save.ts
 * upgrades/Upgrade.ts
 * towns/Town.ts - Town, TownList
 * worldmap/MapHelper.ts
 * items/Item.ts - ItemList
 */
/**
 * Information about the player.
 * All player variables need to be saved.
 */
class Player {
    constructor(savedPlayer) {
        var _a, _b, _c;
        this._timeTraveller = false;
        this.effectList = {};
        this.effectTimer = {};
        const saved = (savedPlayer != null);
        savedPlayer = savedPlayer || {
            _region: GameConstants.Region.adventure01,
            _route: 1,
        };
        this._lastSeen = savedPlayer._lastSeen || 0;
        this._timeTraveller = savedPlayer._timeTraveller || false;
        if (this._lastSeen > Date.now()) {
            Notifier.notify({
                title: 'Welcome Time Traveller!',
                message: 'Please ensure you keep a backup of your old save as travelling through time can cause some serious problems.\n\nAny Pokemon you may have obtained in the future could cease to exist which could corrupt your save file!',
                type: NotificationConstants.NotificationOption.danger,
                timeout: GameConstants.HOUR,
            });
            this._timeTraveller = true;
        }
        this._region = ko.observable(savedPlayer._region);
        this._subregion = ko.observable(savedPlayer._subregion || 0);
        this._route = ko.observable(savedPlayer._route);
        // Check that the route is valid, otherwise set it to the regions starting route (route 0 means they are in a town)
        if (this._route() > 0 && !MapHelper.validRoute(this._route(), this._region())) {
            this._route(GameConstants.StartingRoutes[this._region()]);
        }
        // Return player to last town or starter town if their town no longer exist for whatever reason
        this._townName = TownList[savedPlayer._townName] ? savedPlayer._townName : GameConstants.StartingTowns[this._region()];
        this._town = ko.observable(TownList[this._townName]);
        this._town.subscribe(value => this._townName = value.name);
        this.starter = ko.observable(savedPlayer.starter != undefined ? savedPlayer.starter : GameConstants.Starter.None);
        this.regionStarters = new Array();
        if (savedPlayer.regionStarters && savedPlayer.regionStarters[0]) {
            this.regionStarters.push(ko.observable(savedPlayer.regionStarters[0]));
        }
        else {
            switch (this.starter()) {
                case GameConstants.Starter.None:
                    this.regionStarters.push(ko.observable(undefined));
                    break;
                case GameConstants.Starter.Botamon:
                    this.regionStarters.push(ko.observable(0));
                    break;
                case GameConstants.Starter.Punimon:
                    this.regionStarters.push(ko.observable(1));
                    break;
                case GameConstants.Starter.Poyomon:
                    this.regionStarters.push(ko.observable(2));
                    break;
            }
        }
        for (let i = 1; i <= GameConstants.MAX_AVAILABLE_REGION; i++) {
            if (savedPlayer.regionStarters && savedPlayer.regionStarters[i] != undefined) {
                this.regionStarters.push(ko.observable(savedPlayer.regionStarters[i]));
            }
            else if (i < ((_a = savedPlayer.highestRegion) !== null && _a !== void 0 ? _a : 0)) {
                this.regionStarters.push(ko.observable(0));
            }
            else if (i == ((_b = savedPlayer.highestRegion) !== null && _b !== void 0 ? _b : 0)) {
                this.regionStarters.push(ko.observable(undefined));
                if (this._region() != i) {
                    this._region(i);
                    this._subregion(0);
                    this.route(undefined);
                    this._townName = GameConstants.StartingTowns[i];
                    this._town = ko.observable(TownList[this._townName]);
                }
                $('#pickStarterModal').modal('show');
            }
            else {
                this.regionStarters.push(ko.observable(undefined));
            }
        }
        this._itemList = Save.initializeItemlist();
        if (savedPlayer._itemList) {
            for (const key in savedPlayer._itemList) {
                if (this._itemList[key]) {
                    this._itemList[key](savedPlayer._itemList[key]);
                }
            }
        }
        this._itemMultipliers = savedPlayer._itemMultipliers || Save.initializeMultipliers();
        // TODO(@Isha) move to underground classes.
        const mineInventory = (savedPlayer.mineInventory || [])
            // TODO: Convert this to object spread after we're on TS modules
            .map((v) => Object.assign({}, v, {
            amount: ko.observable(v.amount),
            sellLocked: ko.observable(v.sellLocked),
        }));
        this.mineInventory = ko.observableArray(mineInventory);
        this.effectList = Save.initializeEffects(savedPlayer.effectList || {});
        this.effectTimer = Save.initializeEffectTimer();
        this.highestRegion = ko.observable(savedPlayer.highestRegion || 0);
        this.highestSubRegion = ko.observable(savedPlayer.highestSubRegion || 0);
        // Save game origins, useful for tracking down any errors that may not be related to the main game
        this._origins = [...new Set((savedPlayer.origin || [])).add((_c = window.location) === null || _c === void 0 ? void 0 : _c.origin)];
    }
    set itemList(value) {
        this._itemList = value;
    }
    get itemList() {
        return this._itemList;
    }
    amountOfItem(itemName) {
        return this._itemList[itemName]();
    }
    get itemMultipliers() {
        return this._itemMultipliers;
    }
    get route() {
        return this._route;
    }
    set route(value) {
        this._route = value;
    }
    get region() {
        return this._region();
    }
    set region(value) {
        this._region(value);
    }
    get subregion() {
        return this._subregion();
    }
    set subregion(value) {
        if (value < 0) {
            value = Math.max(...SubRegions.getSubRegions(player.region).filter(sr => sr.unlocked()).map(sr => sr.id));
        }
        if (value > Math.max(...SubRegions.getSubRegions(player.region).filter(sr => sr.unlocked()).map(sr => sr.id))) {
            value = 0;
        }
        this._subregion(value);
        if (value > this.highestSubRegion()) {
            this.highestSubRegion(value);
        }
        const subregion = SubRegions.getSubRegionById(this.region, value);
        if (subregion.startRoute) {
            MapHelper.moveToRoute(subregion.startRoute, player.region);
        }
        else if (subregion.startTown) {
            MapHelper.moveToTown(subregion.startTown);
        }
    }
    get town() {
        return this._town;
    }
    set town(value) {
        this._town = value;
    }
    gainItem(itemName, amount) {
        this._itemList[itemName](this._itemList[itemName]() + amount);
    }
    loseItem(itemName, amount) {
        this._itemList[itemName](this._itemList[itemName]() - amount);
    }
    lowerItemMultipliers(multiplierDecreaser, amount = 1) {
        for (const obj in ItemList) {
            const item = ItemList[obj];
            item.decreasePriceMultiplier(amount, multiplierDecreaser);
        }
    }
    // TODO(@Isha) move to underground classes.
    hasMineItems() {
        for (let i = 0; i < this.mineInventory().length; i++) {
            if (this.mineInventory()[i].amount() > 0) {
                return true;
            }
        }
        return false;
    }
    // TODO(@Isha) move to underground classes.
    mineInventoryIndex(id) {
        return player.mineInventory().findIndex(i => i.id == id);
    }
    // TODO(@Isha) move to underground classes.
    getUndergroundItemAmount(id) {
        var _a;
        const mineItem = player.mineInventory().find(i => i.id == id);
        if (mineItem) {
            return mineItem.amount();
        }
        const itemAmount = player.itemList[(_a = Underground.getMineItemById(id)) === null || _a === void 0 ? void 0 : _a.valueType];
        return (itemAmount === null || itemAmount === void 0 ? void 0 : itemAmount()) || 0;
    }
    toJSON() {
        const keep = [
            '_route',
            '_region',
            '_subregion',
            '_townName',
            '_itemList',
            '_itemMultipliers',
            'starter',
            // TODO(@Isha) remove.
            'mineInventory',
            '_lastSeen',
            '_timeTraveller',
            '_origins',
            'effectList',
            'highestRegion',
            'highestSubRegion',
            'regionStarters',
        ];
        const plainJS = ko.toJS(this);
        Object.entries(plainJS._itemMultipliers).forEach(([key, value]) => {
            if (value <= 1) {
                delete plainJS._itemMultipliers[key];
            }
        });
        Object.entries(plainJS._itemList).forEach(([key, value]) => {
            if (!value) {
                delete plainJS._itemList[key];
            }
        });
        Object.entries(plainJS.effectList).forEach(([key, value]) => {
            if (!value) {
                delete plainJS.effectList[key];
            }
        });
        return Save.filter(plainJS, keep);
    }
}
///<reference path="../declarations/Sortable.d.ts"/>
class Save {
    static store(player) {
        localStorage.setItem(`player${Save.key}`, JSON.stringify(player));
        localStorage.setItem(`save${Save.key}`, JSON.stringify(this.getSaveObject()));
        localStorage.setItem(`settings${Save.key}`, JSON.stringify(Settings.toJSON()));
        this.counter = 0;
        console.log('%cGame saved', 'color:#3498db;font-weight:900;');
    }
    static getSaveObject() {
        const saveObject = {};
        Object.keys(App.game).filter(key => App.game[key].saveKey).forEach(key => {
            saveObject[App.game[key].saveKey] = App.game[key].toJSON();
        });
        return saveObject;
    }
    static load() {
        const saved = localStorage.getItem(`player${Save.key}`);
        // Load our settings, or the saved default settings, or no settings
        const settings = localStorage.getItem(`settings${Save.key}`) || localStorage.getItem('settings') || '{}';
        Settings.fromJSON(JSON.parse(settings));
        // Sort modules now, save settings, load settings
        SortModules();
        if (saved !== 'null') {
            return new Player(JSON.parse(saved));
        }
        else {
            return new Player();
        }
    }
    static download() {
        const backupSaveData = { player, save: this.getSaveObject(), settings: Settings.toJSON() };
        try {
            const element = document.createElement('a');
            element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(btoa(JSON.stringify(backupSaveData)))}`);
            const datestr = GameConstants.formatDate(new Date());
            const filename = `[v${App.game.update.version}] PokeClickerSave_${datestr}.txt`;
            element.setAttribute('download', filename);
            element.style.display = 'none';
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
        }
        catch (err) {
            console.error('Error trying to download save', err);
            Notifier.notify({
                title: 'Failed to download save data',
                message: 'Please check the console for errors, and report them on our Discord.',
                type: NotificationConstants.NotificationOption.primary,
                timeout: 6e4,
            });
            try {
                localStorage.backupSave = JSON.stringify(backupSaveData);
            }
            catch (e) { }
        }
    }
    static delete() {
        return __awaiter(this, void 0, void 0, function* () {
            const confirmDelete = yield Notifier.prompt({
                title: 'Delete save file',
                message: 'Are you sure you want delete your save file?\n\nTo confirm, type "DELETE"',
                type: NotificationConstants.NotificationOption.danger,
                timeout: 6e4,
            });
            if (confirmDelete == 'DELETE') {
                localStorage.removeItem(`player${Save.key}`);
                localStorage.removeItem(`save${Save.key}`);
                localStorage.removeItem(`settings${Save.key}`);
                // Prevent the old save from being saved again
                window.onbeforeunload = () => { };
                location.reload();
            }
        });
    }
    /** Filters an object by property names
     * @param     object : any The object you want to filter
     * @param       keep : string[] An array of property names that should be kept
     * @returns {Object} : The original object with only the specified properties
     */
    static filter(object, keep) {
        const filtered = {};
        let prop;
        for (prop in object) {
            if (keep.includes(prop)) {
                filtered[prop] = object[prop];
            }
        }
        return filtered;
    }
    static initializeMultipliers() {
        const res = {};
        for (const obj in ItemList) {
            res[obj] = 1;
        }
        return res;
    }
    static initializeItemlist() {
        const res = {};
        for (const obj in ItemList) {
            res[obj] = ko.observable(0).extend({ numeric: 0 });
        }
        return res;
    }
    static initializeGems(saved) {
        let res;
        if (saved) {
            res = saved.map((type) => {
                return type.map((effectiveness) => {
                    return ko.observable(effectiveness);
                });
            });
        }
        else {
            res = [];
            for (const item in PokemonType) {
                if (!isNaN(Number(item))) {
                    res[item] = [];
                    res[item][GameConstants.TypeEffectiveness.Immune] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.NotVery] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.Normal] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.Very] = ko.observable(0);
                }
            }
        }
        return res;
    }
    static initializeEffects(saved) {
        const res = {};
        for (const obj in GameConstants.BattleItemType) {
            res[obj] = ko.observable(saved ? saved[obj] || 0 : 0);
        }
        for (const obj in GameConstants.FluteItemType) {
            res[obj] = ko.observable(saved ? saved[obj] || 0 : 0);
        }
        return res;
    }
    static initializeEffectTimer() {
        const res = {};
        for (const obj in GameConstants.BattleItemType) {
            res[obj] = ko.observable('00:00');
        }
        for (const obj in GameConstants.FluteItemType) {
            res[obj] = ko.observable('00:00');
        }
        return res;
    }
    static loadFromFile(file) {
        const fileToRead = file;
        const fr = new FileReader();
        fr.readAsText(fileToRead);
        setTimeout(() => {
            try {
                const decoded = atob(fr.result);
                console.debug('decoded:', decoded);
                const json = JSON.parse(decoded);
                console.debug('json:', json);
                if (decoded && json && json.player && json.save) {
                    localStorage.setItem(`player${Save.key}`, JSON.stringify(json.player));
                    localStorage.setItem(`save${Save.key}`, JSON.stringify(json.save));
                    if (json.settings) {
                        localStorage.setItem(`settings${Save.key}`, JSON.stringify(json.settings));
                    }
                    else {
                        localStorage.removeItem(`settings${Save.key}`);
                    }
                    // Prevent the old save from being saved again
                    window.onbeforeunload = () => { };
                    location.reload();
                }
                else {
                    Notifier.notify({
                        message: 'This is not a valid decoded savefile',
                        type: NotificationConstants.NotificationOption.danger,
                    });
                }
            }
            catch (err) {
                Notifier.notify({
                    message: 'This is not a valid savefile',
                    type: NotificationConstants.NotificationOption.danger,
                });
            }
        }, 1000);
    }
    static convert() {
        const base64 = $('#convertTextArea').val().toString();
        try {
            const json = atob(base64);
            const p = JSON.parse(json);
            Save.convertShinies(p.caughtPokemonList);
            $('#saveModal').modal('hide');
        }
        catch (e) {
            Notifier.notify({
                message: 'Invalid save data.',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    static convertShinies(list) {
        const converted = [];
        list = list.filter(p => p.shiny);
        for (const pokemon of list) {
            const id = +pokemon.id;
            const partyPokemon = App.game.party.getPokemon(id);
            if (partyPokemon) {
                converted.push(pokemon.name);
                partyPokemon.shiny = true;
            }
        }
        if (converted.length > 0) {
            Notifier.notify({
                message: `You have gained the following dot Digimon:</br>${converted.join(',</br>')}`,
                type: NotificationConstants.NotificationOption.success,
                timeout: 1e4,
            });
        }
        else {
            Notifier.notify({
                message: 'No new dot Digimon to import.',
                type: NotificationConstants.NotificationOption.info,
            });
        }
    }
}
Save.counter = 0;
Save.key = '';
class StartSequenceRunner {
    static start() {
        App.game.gameState = GameConstants.GameState.paused;
        $('#startSequenceModal').modal('show');
    }
    static pickStarter(s) {
        // Reload the achievements in case the user has any challenge modes activated
        AchievementHandler.load();
        App.game.quests.getQuestLine('Tutorial Quests').beginQuest(0);
        this.starterPicked = s;
        $('#pickStarterTutorialModal').modal('hide');
        const dataPokemon = PokemonHelper.getPokemonByName(GameConstants.Starter[this.starterPicked]);
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        App.game.gameState = GameConstants.GameState.fighting;
        const battlePokemon = new BattlePokemon(dataPokemon.name, dataPokemon.id, dataPokemon.type1, dataPokemon.type2, 10, 1, 100, 0, new Amount(0, GameConstants.Currency.money), shiny);
        Battle.enemyPokemon(battlePokemon);
        // Show the help information text
        Information.show({
            steps: [
                {
                    element: document.getElementsByClassName('battle-view')[0],
                    intro: 'Click here to deal "Click Attack" damage to Digimon.',
                },
            ],
        });
        // Set the function to call showCaughtMessage after pokemon is caught
        battlePokemon.isAlive = function () {
            if (battlePokemon.health() <= 0) {
                setTimeout(() => {
                    Information.hide();
                    player.starter(StartSequenceRunner.starterPicked);
                    App.game.profile.pokemon(dataPokemon.id);
                    StartSequenceRunner.showCaughtMessage();
                }, 1000);
                //reset the function so you don't call it too many times :)
                //What a beautiful piece of code
                battlePokemon.isAlive = function () {
                    return false;
                };
            }
            return this.health() > 0;
        };
    }
    static showCaughtMessage() {
        App.game.gameState = GameConstants.GameState.paused;
        $('#starterCaughtModal').modal('show');
        $('#pokeballSelector').css('display', 'block');
        $('#pokemonListContainer').css('display', 'block');
        $('#oakItemsContainer').css('display', 'block');
        $('#questDisplayContainer').css('display', 'block');
    }
}
StartSequenceRunner.starterPicked = GameConstants.Starter.None;
StartSequenceRunner.noStarterCount = 0;
document.addEventListener('DOMContentLoaded', () => {
    $('#startSequenceModal').on('hidden.bs.modal', () => {
        $('#pickStarterTutorialModal').modal('show');
    });
    $('#pickStarterTutorialModal').on('hidden.bs.modal', () => {
        if (StartSequenceRunner.starterPicked == GameConstants.Starter.None) {
            StartSequenceRunner.noStarterCount++;
            const startersCount = StartSequenceRunner.noStarterCount >= 5 ? 'four' : 'three';
            $('#pickStarterTutorialModalText').text(`I can't hold off all ${startersCount}! Please pick the Digimon you want to fight!`);
            $('#pickStarterTutorialModal').modal('show');
            if (StartSequenceRunner.noStarterCount == 5) {
                // Add Pikachu to the selections
                $('#starterSelection').append(`<div class="col">
                        <input class="image-starter" type="image"
                           src="assets/images/digidex/25.png"
                           onclick="StartSequenceRunner.pickStarter(GameConstants.Starter.Pikachu)">
                    </div>`);
            }
        }
    });
    $('#starterCaughtModal').on('hidden.bs.modal', () => {
        Save.store(player);
        App.game.gameState = GameConstants.GameState.fighting;
        Information.show({
            steps: [
                {
                    element: document.getElementById('questDisplayContainer'),
                    intro: 'Complete the tutorial quests to continue.',
                },
            ],
        });
    });
});
/// <reference path="./GameConstants.d.ts" />
class Update {
    constructor() {
        this.saveKey = 'update';
        // Loaded from package.json
        this.version = '0.9.8';
        this.saveVersion = '0.0.0';
        this.updateSteps = {
            '0.4.0': ({ playerData, saveData }) => {
                saveData.update = { version: '0.0.0' };
                // Update the save data as it is no longer a part of player data
                saveData.statistics = Object.assign(Object.assign({}, playerData.statistics || {}), { digimonScanned: playerData._caughtAmount || 0, digimonDefeated: playerData._defeatedAmount || 0, totalDotDigimonScanned: playerData._shinyCatches || 0, totalDigimonScanned: playerData.statistics.digimonScanned || 0, totalDigimonDefeated: playerData.statistics.digimonDefeated || 0 });
            },
            '0.4.4': ({ saveData }) => {
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Rename from the old statistic name
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { clickAttacks: saveData.statistics.clicks || 0, totalDungeonTokens: saveData.statistics.totalTokens || 0, junkyardItemsFound: saveData.statistics.digItems || 0, junkyardLayersMined: saveData.statistics.digDeeper || 0 });
            },
            '0.4.15': ({ playerData, saveData }) => {
                playerData._itemList.Lucky_pill = playerData._itemList.xExp;
                delete playerData._itemList.xExp;
                delete localStorage.mine;
            },
            '0.4.17': ({ saveData }) => {
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Rename from the old statistic name
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalDigimonHatched: saveData.statistics.hatchedEggs || 0 });
            },
            '0.4.18': ({ playerData, saveData }) => {
                // Move quests from player data -> save data
                saveData.quests = {
                    xp: Math.floor(playerData._questXP || 0),
                    refreshes: playerData.questRefreshes || 0,
                    lastRefresh: playerData._lastSeen,
                    questList: new Array(10).fill({}).map((q, index) => ({ index, initial: null })),
                    questLines: [
                        {
                            state: playerData.tutorialComplete ? 2 : 1,
                            name: 'Tutorial Quests',
                            quest: playerData.tutorialProgress || 0,
                        },
                    ],
                };
                // Convert quest the player is currently doing
                (playerData.currentQuests || []).forEach(quest => {
                    saveData.quests.questList[quest.index || 0].initial = quest.initial || null;
                });
                // Convert quest the player has completed
                (playerData.completedQuestList || []).forEach((complete, index) => {
                    if (complete) {
                        saveData.quests.questList[index].notified = true;
                        saveData.quests.questList[index].claimed = true;
                        saveData.quests.questList[index].initial = 0;
                    }
                });
                // If player has defeated the Hoenn Champion, start the deoxys quest line
                saveData.badgeCase = saveData.badgeCase || [];
                // Not using game constants incase the value isn't 39 in the future
                if (saveData.badgeCase[39]) {
                    saveData.quests.questLines.push({ state: 1, name: 'Mystery of Deoxys', quest: 0 });
                }
            },
            '0.5.0': ({ playerData }) => {
                // Give the players Soothe Bells in place of Time stones
                playerData._itemList = playerData._itemList || {};
                playerData._itemList.Soothe_bell = playerData._itemList.Time_stone || 0;
                delete playerData._itemList.Time_stone;
            },
            '0.5.2': ({ saveData }) => {
                // Calculate hatched amount (we can't calculate the shiny hatches though)
                const digimonHatched = {};
                saveData.party.caughtPokemon.forEach(p => digimonHatched[p.id] = p.attackBonus / 25);
                // Rename from the old statistic name, add our new statistics
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalDisksBurned: saveData.statistics.disksBurned.reduce((sum, b) => sum + b, 0) || 0, digimonHatched });
                // If the player has the Soul Badge already
                // Not using game constants incase the badge value isn't 5 in the future
                if (saveData.badgeCase[5]) {
                    saveData.quests.questLines.push({ state: 1, name: 'Mining Expedition', quest: 0 });
                }
            },
            '0.5.5': ({ saveData }) => {
                // Correct statistics
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 22, 34); // Petalburg Woods
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 30, 35); // New Mauville
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 56, 50); // Hall of Origin
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 33); // Sealed Chamber
            },
            '0.5.8': ({ playerData, saveData }) => {
                // Hardcoded to allow upgrading from an older save, if we change
                // the Routes class in the future. Values are lowest/highest route
                // index
                const regionRoutes = {
                    adventure01: [1, 23],
                    johto: [26, 48],
                    hoenn: [101, 134],
                    sinnoh: [201, 230],
                };
                // Refund any shards spent on shard upgrades that have no effect
                // Using magic number incase any of these values change in the future
                const invalidUpgrades = {
                    0: 3,
                    1: 0,
                    2: 0,
                    4: 0,
                    5: 0,
                    9: 0,
                    11: 0,
                    12: 0,
                    15: 0,
                    16: 0,
                    17: 0,
                };
                Object.entries(invalidUpgrades).forEach(([type, effectiveness]) => {
                });
                // Give breeding slots based on highest region
                saveData.breeding.queueSlots = 0;
                for (let region = 0; region < playerData.highestRegion; region++) {
                    saveData.breeding.queueSlots += Math.max(4, 4 * Math.pow(2, region - 1));
                }
            },
            '0.6.0': ({ saveData }) => {
                // Award Deoxys forms for completed Battle Frontier milestones
                const maxBattleFrontierStage = saveData.statistics.colosseumHighestStageCompleted;
                if (maxBattleFrontierStage >= 151) {
                    Update.addPokemonToSaveData(saveData, 386.1); // Deoxys (attack)
                }
                if (maxBattleFrontierStage >= 251) {
                    Update.addPokemonToSaveData(saveData, 386.2); // Deoxys (defense)
                }
                if (maxBattleFrontierStage >= 386) {
                    Update.addPokemonToSaveData(saveData, 386.3); // Deoxys (speed)
                }
                // Update the attack bonus percentages
                saveData.party.caughtPokemon = saveData.party.caughtPokemon.map(p => {
                    p.attackBonusPercent = p.attackBonus;
                    delete p.attackBonus;
                    return p;
                });
                // Update Farm data
                // Refund Farm Points for current berries
                for (let i = 0; i < 8; i++) {
                    const amount = 100 / i;
                    const refundTokens = Math.floor(saveData.farming.berryList[i] / amount);
                    saveData.wallet.currencies[4] += refundTokens;
                    saveData.farming.berryList[i] = 0;
                }
                // Unlock & Give 5 Cheri berries to start off with
                saveData.farming.unlockedBerries = [true];
                saveData.farming.berryList[0] = 5;
                // Refund Farm Points for plots previously unlocked
                saveData.wallet.currencies[4] += saveData.farming.plotList.map((p, i) => p.isUnlocked ? 10 * Math.floor(Math.pow(i, 2)) : 0).reduce((s, a) => s + a, 0);
                // Reset all plots
                delete saveData.farming.plotList;
            },
            '0.6.1': ({ saveData }) => {
                // Only update if save is from v0.6.0+
                if (this.minUpdateVersion('0.6.0', saveData)) {
                    if (saveData.oakItems.purchaseList) {
                        if (saveData.oakItems.purchaseList[OakItemType.Demo_Disk]) {
                            saveData.oakItems[OakItemType[OakItemType.Demo_Disk]]['purchased'] = true;
                        }
                        if (saveData.oakItems.purchaseList[OakItemType.Failure_Prevent]) {
                            saveData.oakItems[OakItemType[OakItemType.Failure_Prevent]]['purchased'] = true;
                        }
                    }
                }
            },
            '0.6.5': ({ playerData, saveData }) => {
                // Only update if save is from v0.6.0+
                if (this.minUpdateVersion('0.6.0', saveData)) {
                    // nerf amount of proteins used per Pokemon
                    const maxProteins = (playerData.highestRegion + 1) * 5;
                    let proteinsToRefund = 0;
                    saveData.party.caughtPokemon = saveData.party.caughtPokemon.map(p => {
                        if (!p.proteinsUsed || p.proteinsUsed <= maxProteins) {
                            return p;
                        }
                        proteinsToRefund += p.proteinsUsed - maxProteins;
                        p.proteinsUsed = maxProteins;
                        return p;
                    });
                    playerData._itemList.Protein += proteinsToRefund || 0;
                }
            },
            '0.7.1': ({ playerData, saveData }) => {
                var _a, _b;
                saveData.breeding.eggList.map((egg) => {
                    egg.shinyChance = GameConstants.SHINY_CHANCE_BREEDING - (0.5 * GameConstants.SHINY_CHANCE_BREEDING * Math.min(1, egg.shinySteps / egg.steps));
                    return egg;
                });
                // Update underground item IDs
                const itemMap = (id) => {
                    if (id <= 7) { // fossils
                        return id + 199;
                    }
                    else if (id <= 16) { // Diamond Items
                        return id - 7;
                    }
                    else if (id <= 22) { // Evolution Stones
                        return id + 283;
                    }
                    else if (id <= 28) { // Diamond Items
                        return id - 13;
                    }
                    else { // Shard Plates
                        return id + 71;
                    }
                };
                playerData.mineInventory = ((_a = playerData.mineInventory) === null || _a === void 0 ? void 0 : _a.map(i => {
                    i.id = itemMap(i.id);
                    return i;
                })) || [];
                if ((_b = saveData.underground) === null || _b === void 0 ? void 0 : _b.mine) {
                    // Reset the mine
                    delete saveData.underground.mine;
                }
            },
            '0.7.4': ({ playerData, saveData }) => {
                // Clear old quest data
                saveData.quests.questList = [];
                // Update starter selection
                playerData.starter = playerData._starter;
                /*
                 * Challenge Modes
                 */
                // Create empty challenges object
                saveData.challenges = { list: {} };
                // Disable Click Attacks
                if (saveData.statistics.clickAttacks <= 100) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Click Attack challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableClickAttack.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Disable Battle Items
                Notifier.notify({
                    title: 'Active Challenge Mode?',
                    message: `Do you want to activate No Battle Item challenge mode?

                <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableBattleItems.activate(); Object.values(player.effectList).forEach(e => e(0));" data-dismiss="toast">Activate</button>`,
                    timeout: GameConstants.HOUR,
                });
                // Disable Master Balls
                if (!saveData.statistics.digiscansUsed[3]) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Masterscan challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableMasterballs.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Disable Oak Items
                if (Object.values(saveData.oakItems).every((oi) => !oi.exp)) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Oak Item challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableOakItems.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Disable Proteins
                if (saveData.party.caughtPokemon.every(p => !p.proteinsUsed)) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Protein challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableProteins.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Add Solaceon Ruins
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 43);
                // Multi saves profile
                const firstPokemon = saveData.party.caughtPokemon[0];
                saveData.profile = {
                    name: 'Trainer',
                    pokemon: (firstPokemon === null || firstPokemon === void 0 ? void 0 : firstPokemon.id) || 0,
                    pokemonShiny: (firstPokemon === null || firstPokemon === void 0 ? void 0 : firstPokemon.shiny) || false,
                };
            },
            '0.7.6': ({ playerData, saveData }) => {
                Update.renamePokemonInSaveData(saveData, 'Lets go Pikachu', 'Let\'s Go Pikachu');
                Update.renamePokemonInSaveData(saveData, 'Lets go Eevee', 'Let\'s Go Eevee');
                // Check if the Let's Go Pikachu is hidden due to MissingNo (reset breeding status)
                const pikachu = saveData.party.caughtPokemon.find(p => p.id == -8);
                if (pikachu) {
                    pikachu.breeding = !!saveData.breeding.eggList.find((e) => e.pokemon == 'Let\'s Go Pikachu')
                        || !!saveData.breeding.queueList.find((p) => p == 'Let\'s Go Pikachu');
                }
                // Check if the Let's Go Eevee is hidden due to MissingNo (reset breeding status)
                const eevee = saveData.party.caughtPokemon.find(p => p.id == -9);
                if (eevee) {
                    eevee.breeding = !!saveData.breeding.eggList.find((e) => e.pokemon == 'Let\'s Go Eevee')
                        || !!saveData.breeding.queueList.find((p) => p == 'Let\'s Go Eevee');
                }
            },
            '0.8.1': ({ playerData, saveData }) => {
                // Add Weather Institute
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 29);
                // Add Magma Hideout
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 32);
                // Add Aqua Hideout
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 33);
                // Add Team Plasma Assault
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 72);
                // Add Plasma Frigate
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 74);
            },
            '0.8.3': ({ playerData, saveData }) => {
                // If player has defeated the 8th Kalos gym, start the vivillon quest line
                saveData.badgeCase = saveData.badgeCase || [];
                // Not using game constants incase the value isn't 73 in the future
                if (saveData.badgeCase[73]) { // Iceberg badge
                    saveData.quests.questLines.push({ state: 1, name: 'The Great Vivillon Hunt!', quest: 0 });
                }
                // Add missing key items if the player has the badge
                const badgeToKeyItems = {
                    [5]: 'Safari_ticket',
                    [8]: 'Shard_case',
                };
                Object.keys(badgeToKeyItems).forEach(badge => {
                    const keyItem = badgeToKeyItems[badge];
                    if (saveData.badgeCase[badge]) {
                        saveData.keyItems[keyItem] = true;
                    }
                });
            },
            '0.8.4': ({ playerData, saveData }) => {
                var _a;
                // Update Pokemon names
                Update.renamePokemonInSaveData(saveData, 'Vivillon', 'Vivillon (Meadow)');
                // Track Battle Frontier milestones earned
                const milestones = [
                    [5, '25 x Pokéball'],
                    [10, '100 x Pokéball'],
                    [20, '100 x Greatball'],
                    [30, '100 x Ultraball'],
                    [35, '100 x xClick'],
                    [40, '100 x xAttack'],
                    [50, '100 x Small Restore'],
                    [100, 'Deoxys'],
                    [110, '10 x Guard Digizoid'],
                    [120, '10 x Rush Digizoid'],
                    [130, '10 x Sage Digizoid'],
                    [140, '10 x Dreamy Digizoid'],
                    [150, '200 x Medium Restore'],
                    [151, 'Deoxys (attack)'],
                    [160, '100 x Lucky Pill'],
                    [170, '100 x Lucky Floppy'],
                    [180, '100 x Item Magnet'],
                    [190, '10 x Mystery Egg'],
                    [200, '100 x Large Restore'],
                    [210, '40 x Rage Digizoid'],
                    [220, '40 x Dreamy Digizoid'],
                    [230, '40 x Vigor Digizoid'],
                    [240, '40 x Rush Digizoid'],
                    [250, '6400 x Ultraball'],
                    [251, 'Deoxys (defense)'],
                    [300, '100 x Guard Digizoid'],
                    [386, 'Deoxys (speed)'],
                ];
                const highestStageCompleted = ((_a = saveData.statistics) === null || _a === void 0 ? void 0 : _a.colosseumHighestStageCompleted) || 0;
                saveData.battleFrontier = {
                    milestones: milestones.filter(([stage]) => stage <= highestStageCompleted),
                };
            },
            '0.8.9': ({ playerData, saveData }) => {
                var _a, _b, _c;
                // Retroactively track proteins obtained
                let proteinsObtained = 0;
                // Only update if save is from v0.6.0+ (when proteins were added)
                if (this.minUpdateVersion('0.6.0', saveData)) {
                    saveData.party.caughtPokemon.forEach(p => {
                        proteinsObtained += p.proteinsUsed;
                    });
                    proteinsObtained += playerData._itemList.Protein;
                }
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalProteinsObtained: proteinsObtained });
                // Only run if save is from v0.8.7 (a forked version which is breaking stuff)
                if (((_a = saveData.update) === null || _a === void 0 ? void 0 : _a.version) == '0.8.7') {
                    // Check if the save has the Vivillon quest line, otherwise it's not from the main website
                    const questLines = ((_c = (_b = saveData.quests) === null || _b === void 0 ? void 0 : _b.questLines) === null || _c === void 0 ? void 0 : _c.length) || 0;
                    if (questLines < 4) {
                        Notifier.notify({
                            title: 'Importing this save will cause errors!',
                            message: 'Please only use saves from the main website https://pokeclicker.com/',
                            type: NotificationConstants.NotificationOption.danger,
                            timeout: GameConstants.DAY,
                        });
                        throw new Error('Importing this save will cause errors');
                    }
                }
            },
            '0.8.12': ({ playerData, saveData }) => {
                // Add Team Rockets Hideout
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 19);
                // Add Radio Tower
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 20);
                // Add Victory Road Johto
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 23);
                // If the player has the Fog Badge already
                // Not using game constants incase the badge value isn't 17 in the future
                if (saveData.badgeCase[17]) {
                    saveData.quests.questLines.push({ state: 1, name: 'Team Rocket Again', quest: 0 });
                }
                setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                    // Check if player wants to activate the new challenge modes
                    if (!(yield Notifier.confirm({ title: 'Regional Attack Debuff (recommended)', message: 'New challenge mode added Regional Attack Debuff.\n\nLowers Digimon attack based on native map and highest reached map.\n\nThis is the default and recommended way to play, but is now an optional challenge.\n\nPlease choose if you would like this challenge mode to be enabled or disabled (cannot be re-enabled later)', confirm: 'enable', cancel: 'disable' }))) {
                        App.game.challenges.list.regionalAttackDebuff.disable();
                    }
                    if (!(yield Notifier.confirm({ title: 'Require Complete Digidex', message: 'New challenge mode added Require Complete Digidex.\n\nRequires a complete regional digidex before moving on to the next map.\n\nThis is the default and recommended way to play, but is now an optional challenge.\n\nPlease choose if you would like this challenge mode to be enabled or disabled (cannot be re-enabled later)', confirm: 'enable', cancel: 'disable' }))) {
                        App.game.challenges.list.requireCompletePokedex.disable();
                    }
                }), GameConstants.SECOND);
            },
            '0.8.14': ({ playerData, saveData }) => {
                // Start Aqua Magma questline if player has Dynamo Badge already
                if (saveData.badgeCase[29]) {
                    saveData.quests.questLines.push({ state: 1, name: 'Land vs Water', quest: 0 });
                }
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Rename from the old statistic name
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalDisksObtained: saveData.statistics.totalDisksBurned || 0, digiscansObtained: saveData.statistics.digiscansBought || 0, disksObtained: saveData.statistics.disksBurned || 0 });
            },
            '0.8.15': ({ playerData, saveData }) => {
                var _a, _b, _c, _d;
                // Start Plasma questline if player has Jet Badge already
                if (saveData.badgeCase[58]) {
                    saveData.quests.questLines.push({ state: 1, name: 'Quest for the DNA Splicers', quest: 0 });
                }
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 2, 1); // Digletts Cave
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 5, 4); // Power Plant
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 31, 28); // Jagged Pass
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 29, 30); // Mt. Chimney
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 32, 34); // New Mauville
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 84, 64); // Pledge Grove
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 78, 79); // Abundant Shrine
                // Shards -> Gems
                //Questlist update
                saveData.quests.questList = ((_a = saveData.quests.questList) === null || _a === void 0 ? void 0 : _a.map(q => {
                    if (q.name == 'GainShardsQuest') {
                        q.name = 'GainGemsQuest';
                    }
                    return q;
                })) || [];
                delete saveData.keyItems['Shard_case'];
                // Swapping Shard Case for Gem Case
                if (saveData.badgeCase[8]) {
                    saveData.keyItems['Chip_case'] = true;
                }
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Rename from the old statistic name
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalChipsGained: saveData.statistics.totalShardsGained || 0, chipsGained: saveData.statistics.shardsGained || 0 });
                // Challenge update
                saveData.challenges.list.disableGems = (_d = (_c = (_b = saveData.challenges) === null || _b === void 0 ? void 0 : _b.list) === null || _c === void 0 ? void 0 : _c.disableShards) !== null && _d !== void 0 ? _d : false;
            },
            '0.9.0': ({ playerData, saveData }) => {
                var _a;
                // Migrate event negative ID's to decimals of base form
                const eventIDs = [
                    [-1, 25.08],
                    [-2, 25.09],
                    [-3, 150.1],
                    [-4, 143.1],
                    [-5, 175.1],
                    [-6, 1.2],
                    [-7, 25.1],
                    [-8, 25.11],
                    [-9, 133.1],
                    [-10, 1.1],
                    [-11, 2.1],
                    [-12, 3.1],
                    [-13, 4.1],
                    [-14, 5.1],
                    [-15, 6.1],
                    [-16, 7.1],
                    [-17, 8.1],
                    [-18, 9.1],
                ];
                eventIDs.forEach(([oldID, newID]) => {
                    const pokemon = saveData.party.caughtPokemon.find(p => p.id === oldID);
                    // If player hasn't caught this mon yet, return.
                    if (pokemon == undefined) {
                        return;
                    }
                    // Update our ID
                    pokemon.id = newID;
                    if (!saveData.statistics.digimonHatched) {
                        saveData.statistics.digimonHatched = {};
                    }
                    if (!saveData.statistics.shinyPokemonHatched) {
                        saveData.statistics.shinyPokemonHatched = {};
                    }
                    // Update our statistics
                    saveData.statistics.digimonEncountered[newID] = saveData.statistics.digimonEncountered[oldID] || 0;
                    saveData.statistics.digimonDefeated[newID] = saveData.statistics.digimonDefeated[oldID] || 0;
                    saveData.statistics.digimonCaptured[newID] = saveData.statistics.digimonCaptured[oldID] || 0;
                    saveData.statistics.digimonHatched[newID] = saveData.statistics.digimonHatched[oldID] || 0;
                    saveData.statistics.dotDigimonEncountered[newID] = saveData.statistics.dotDigimonEncountered[oldID] || 0;
                    saveData.statistics.dotDigimonDefeated[newID] = saveData.statistics.dotDigimonDefeated[oldID] || 0;
                    saveData.statistics.dotDigimonScanned[newID] = saveData.statistics.dotDigimonScanned[oldID] || 0;
                    saveData.statistics.dotDigimonHatched[newID] = saveData.statistics.dotDigimonHatched[oldID] || 0;
                    // Delete our old statistics
                    delete saveData.statistics.digimonEncountered[oldID];
                    delete saveData.statistics.digimonDefeated[oldID];
                    delete saveData.statistics.digimonScanned[oldID];
                    delete saveData.statistics.digimonHatched[oldID];
                    delete saveData.statistics.dotDigimonEncountered[oldID];
                    delete saveData.statistics.dotDigimonDefeated[oldID];
                    delete saveData.statistics.dotDigimonScanned[oldID];
                    delete saveData.statistics.dotDigimonHatched[oldID];
                });
                playerData.mineInventory = ((_a = playerData.mineInventory) === null || _a === void 0 ? void 0 : _a.map(i => {
                    i.sellLocked = false;
                    return i;
                })) || [];
                // Start Galactic questline if player has Coal Badge already
                if (saveData.badgeCase[40]) {
                    saveData.quests.questLines.push({ state: 1, name: 'A new world', quest: 0 });
                }
                // Clear Valley Windworks Clears
                saveData.statistics.dungeonsCleared[44] = 0;
                // Add Team Galactic Eterna Building
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 47);
                // Move Lake Verity
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 53, 52);
                // Move Lake Valor
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 52, 54);
                // Add Team Galactic HQ
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 56);
                // Move Spear Pillar
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 57, 59);
                // Add Sendoff Spring
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 60);
            },
            '0.9.4': ({ playerData, saveData }) => {
                // Modifications relating to smaller save file sizes
                const PartyKeyMap = {
                    'attackBonusPercent': 0,
                    'attackBonusAmount': 1,
                    'proteinsUsed': 2,
                    'exp': 3,
                    'breeding': 4,
                    'shiny': 5,
                    'category': 6,
                    'levelEvolutionTriggered': 7,
                };
                Object.entries(PartyKeyMap).forEach(([oldKey, newKey]) => {
                    saveData.party.caughtPokemon.forEach(p => {
                        p[newKey] = p[oldKey];
                        delete p[oldKey];
                    });
                });
                saveData.farming.mutations = saveData.farming.mutations.map(m => m.hintsSeen || m.hintSeen);
                // Change Ultra Wormhole to a Temporary Battle
                saveData.statistics.temporaryBattleDefeated = new Array();
                saveData.statistics.temporaryBattleDefeated[0] = saveData.statistics.challengesDefeated[84];
                // Remove the Elite_Nihilego Gym, now a temporary battle instead of a gym
                saveData.statistics.challengesDefeated.splice(84, 1);
                saveData.badgeCase.splice(84, 1);
                // Change Ultra Megalopolis to a Temporary Battle
                saveData.statistics.temporaryBattleDefeated[1] = saveData.statistics.challengesDefeated[88];
                // Remove the Elite_ULtraNecrozma Gym, now a temporary battle instead of a gym
                saveData.statistics.challengesDefeated.splice(88, 1);
                saveData.badgeCase.splice(88, 1);
            },
        };
        const saveData = this.getSaveData();
        if (saveData) {
            this.fromJSON(saveData.update, true);
        }
        // Start our update check
        this.checkForNewerVersionOnInterval();
    }
    checkForNewerVersionOnInterval() {
        // Lets check every 3 hours for a newer version
        const checkForNewVersionInterval = setInterval(() => {
            try {
                $.ajax({
                    cache: false,
                    url: './package.json',
                    dataType: 'json',
                    success: result => {
                        // If the website version is newer
                        if (this.isNewerVersion(result.version, this.version)) {
                            clearInterval(checkForNewVersionInterval);
                            Notifier.notify({
                                title: `[UPDATE] v${result.version}`,
                                message: 'A newer version of the game is available:\n\n<a class="btn btn-warning btn-block" href="#" onclick="location.reload(true);">Reload Page</a>',
                                timeout: GameConstants.DAY,
                            });
                        }
                    },
                });
            }
            catch (ಠ_ಠ) {
                console.error('[update] Unable to check for new version', ಠ_ಠ);
            }
        }, GameConstants.HOUR * 3);
    }
    // check if save version is newer or equal to version
    minUpdateVersion(version, saveData) {
        var _a;
        return !this.isOlderVersion((_a = saveData.update) === null || _a === void 0 ? void 0 : _a.version, version);
    }
    // potentially newer version > check against version
    isNewerVersion(version, compareVersion) {
        return compareVersion.localeCompare(version, undefined, { numeric: true }) === -1;
    }
    // potentially older version < check against version
    isOlderVersion(version, compareVersion) {
        return compareVersion.localeCompare(version, undefined, { numeric: true }) === 1;
    }
    getBackupButton() {
        const playerData = this.getPlayerData();
        const saveData = this.getSaveData();
        // Save the data by stringifying it, so that it isn't mutated during update
        const backupSaveData = JSON.stringify({ player: playerData, save: saveData });
        const button = document.createElement('a');
        try {
            button.href = `data:text/plain;charset=utf-8,${encodeURIComponent(btoa(backupSaveData))}`;
            button.className = 'btn btn-block btn-warning';
            button.innerText = 'Click to Backup Save!';
            button.setAttribute('download', `[v${this.saveVersion}] Poke Clicker Backup Save.txt`);
        }
        catch (e) {
            console.error('Failed to create backup button data:', e);
        }
        return [button, backupSaveData];
    }
    automaticallyDownloadBackup(button, settingsData) {
        // Add to body and click, triggering auto download
        if (!(settingsData === null || settingsData === void 0 ? void 0 : settingsData.disableAutoDownloadBackupSaveOnUpdate)) {
            button.style.display = 'none';
            document.body.appendChild(button);
            button.click();
            document.body.removeChild(button);
        }
        button.style.display = '';
    }
    check() {
        if (this.saveVersion === this.version) {
            return;
        }
        // Check if the save is newer than the current client, don't allow it to load.
        if (this.isNewerVersion(this.saveVersion, this.version)) {
            Notifier.notify({
                title: 'Save version is newer than game version!',
                message: `Please update your game before attempting to load this save..\n\nSave version: ${this.saveVersion}\nGame version: ${this.version}`,
                type: NotificationConstants.NotificationOption.danger,
                timeout: GameConstants.DAY,
            });
            throw new Error(`Save is newer than game version\nSave version: ${this.saveVersion}\nGame version: ${this.version}`);
            return;
        }
        const [backupButton, backupSaveData] = this.getBackupButton();
        // Must modify these object when updating
        const playerData = this.getPlayerData();
        const saveData = this.getSaveData();
        const settingsData = this.getSettingsData();
        if (!playerData || !saveData) {
            return;
        }
        const updateResult = Object.entries(this.updateSteps)
            .filter(([version]) => this.isOlderVersion(this.saveVersion, version))
            .sort(([a], [b]) => this.isNewerVersion(a, b) ? 1 : -1)
            .reduce((beforeUpdate, [version, callback]) => {
            // The parse(stringify(...)) will deep-clone the object so
            // that it isn't mutated, and we can log if something fails
            const updateData = JSON.parse(JSON.stringify(beforeUpdate));
            try {
                console.info(`Applying update v${version}`);
                callback(updateData);
                return updateData;
            }
            catch (e) {
                try {
                    localStorage.backupSave = backupSaveData;
                }
                catch (e) { }
                const resetButton = document.createElement('a');
                resetButton.className = 'btn btn-block btn-danger';
                resetButton.innerText = 'Reset your save - This is not reversible';
                resetButton.id = 'failedUpdateResetButton';
                console.error(`Caught error while applying update v${version}`, e, { beforeUpdate, updateData });
                Notifier.notify({
                    title: `Failed to update to v${this.version}!`,
                    message: `Please check the console for errors, and report them on our <a class="text-light" href="https://discord.gg/a6DFe4p"><u>Discord</u></a> along with your save file.\n\n${backupButton.outerHTML}\n${resetButton.outerHTML}`,
                    type: NotificationConstants.NotificationOption.primary,
                    timeout: GameConstants.DAY,
                });
                // On the next tick, set the reset button click handler
                setTimeout(() => {
                    document.getElementById('failedUpdateResetButton').onclick = () => {
                        Notifier.confirm({
                            title: 'Reset save',
                            message: 'Are you sure you want to reset your save?\n\nThis cannot be undone, so please make sure you have a backup first!',
                            type: NotificationConstants.NotificationOption.danger,
                            confirm: 'reset',
                        }).then(confirmed => {
                            if (confirmed) {
                                // Force an autodownload of the backup when resetting the save
                                this.automaticallyDownloadBackup(backupButton, { disableAutoDownloadBackupSaveOnUpdate: false });
                                localStorage.removeItem(`player${Save.key}`);
                                localStorage.removeItem(`save${Save.key}`);
                                localStorage.removeItem(`settings${Save.key}`);
                                location.reload();
                            }
                        });
                    };
                }, 0);
                // Rethrow the error to prevent the game from corrupting the save
                throw e;
            }
        }, { playerData, saveData, settingsData });
        try {
            this.automaticallyDownloadBackup(backupButton, settingsData);
            Notifier.notify({
                title: `[v${this.version}] Game has been updated!`,
                message: `Check the <a class="text-light" href="#changelogModal" data-toggle="modal"><u>changelog</u></a> for details!\n\n${backupButton.outerHTML}`,
                type: NotificationConstants.NotificationOption.primary,
                timeout: 6e4,
            });
        }
        catch (err) {
            console.error('Error trying to convert backup save', err);
            Notifier.notify({
                title: `[v${this.version}] Game has been updated!`,
                message: 'Check the <a class="text-light" href="#changelogModal" data-toggle="modal"><u>changelog</u></a> for details!\n\n<i>Failed to download old save, Please check the console for errors, and report them on our <a class="text-light" href="https://discord.gg/a6DFe4p"><u>Discord</u></a>.</i>',
                type: NotificationConstants.NotificationOption.primary,
                timeout: 6e4,
            });
            try {
                localStorage.backupSave = backupSaveData;
            }
            catch (e) { }
            throw err;
        }
        // Update the save data version to our current version
        updateResult.saveData.update.version = this.version;
        this.setPlayerData(updateResult.playerData);
        this.setSaveData(updateResult.saveData);
        this.setSettingsData(updateResult.settingsData);
    }
    getPlayerData() {
        let playerData;
        try {
            playerData = JSON.parse(localStorage.getItem(`player${Save.key}`));
        }
        catch (err) {
            console.warn('Error getting player data', err);
        }
        finally {
            return playerData;
        }
    }
    setPlayerData(playerData) {
        try {
            localStorage.setItem(`player${Save.key}`, JSON.stringify(playerData));
        }
        catch (err) {
            console.error('Error setting player data', err);
        }
    }
    getSaveData() {
        let saveData;
        try {
            saveData = JSON.parse(localStorage.getItem(`save${Save.key}`));
        }
        catch (err) {
            console.warn('Error getting save data', err);
        }
        finally {
            return saveData;
        }
    }
    setSaveData(saveData) {
        try {
            localStorage.setItem(`save${Save.key}`, JSON.stringify(saveData));
        }
        catch (err) {
            console.error('Error setting save data', err);
        }
    }
    getSettingsData() {
        let settingsData;
        try {
            settingsData = JSON.parse(localStorage.getItem(`settings${Save.key}`) || localStorage.settings);
        }
        catch (err) {
            console.warn('Error getting settings data', err);
        }
        finally {
            return settingsData || {};
        }
    }
    setSettingsData(settingsData) {
        try {
            localStorage.setItem(`settings${Save.key}`, JSON.stringify(settingsData));
        }
        catch (err) {
            console.error('Error setting settings data', err);
        }
    }
    fromJSON(json, initial = false) {
        if (!initial) {
            return;
        }
        if (!json) {
            json = { version: '0.0.0' };
        }
        this.saveVersion = json.version || '0.0.0';
        this.check();
    }
    toJSON() {
        return {
            version: this.version,
        };
    }
}
// Used for moving dungeons and other stuff
// Be sure to insert from lowest index to highest index
// Example to get dungeons new index: GameConstants.getDungeonIndex('Aqua Hideout')
Update.moveIndex = (arr, to, from = Infinity, defaultVal = 0) => {
    let temp = arr.splice(from, 1);
    if (!temp.length) {
        temp = [defaultVal];
    }
    const end = arr.splice(to);
    arr = [...arr, ...temp, ...end];
    return arr;
};
Update.addPokemonToSaveData = (saveData, pokemonId) => {
    if (saveData.party.caughtPokemon.filter(p => p.id === pokemonId).length > 0) {
        return;
    }
    const pokemon = PokemonFactory.generatePartyPokemon(pokemonId, false);
    saveData.statistics.digimonScanned[pokemonId] = 1;
    saveData.statistics.totalDigimonScanned++;
    saveData.logbook.logs.unshift({
        date: Date.now(),
        description: `You have captured ${GameHelper.anOrA(pokemon.name)} ${pokemon.name}!`,
        type: {
            display: 'success',
            label: 'CAUGHT',
        },
    });
    saveData.party.caughtPokemon.push(pokemon);
};
// If any pokemon names change in the data rename them,
// note that name isn't used in party.
Update.renamePokemonInSaveData = (saveData, oldName, newName) => {
    var _a, _b;
    if (!saveData.breeding) {
        return;
    }
    // Fixup eggs
    (_a = saveData.breeding.eggList) === null || _a === void 0 ? void 0 : _a.forEach(egg => {
        if (egg.pokemon == oldName) {
            egg.pokemon = newName;
        }
    });
    // Fixup queue
    saveData.breeding.queueList = ((_b = saveData.breeding.queueList) === null || _b === void 0 ? void 0 : _b.map(p => p == oldName ? newName : p)) || [];
};
/**
 * TODO(@Isha) refactor this to no longer be global but App properties.
 * Will be done after the major player refactor.
 */
let player;
/**
 * Start the application when all html elements are loaded.
 */
document.addEventListener('DOMContentLoaded', () => {
    try {
        const settings = localStorage.getItem('settings');
        Settings.fromJSON(JSON.parse(settings));
        document.body.className = `no-select ${Settings.getSetting('theme').observableValue()} ${Settings.getSetting('backgroundImage').observableValue()}`;
        document.getElementById('theme-link').href = `https://bootswatch.com/4/${Settings.getSetting('theme').observableValue()}/bootstrap.min.css`;
    }
    catch (e) { }
    // Load list of saves
    SaveSelector.loadSaves();
});
// Nested modals can be opened while they are in the middle of hiding.
// This should raise their backdrop on top of any existing modals,
// preventing us from getting into that messy situation.
// Copied from https://stackoverflow.com/questions/19305821/multiple-modals-overlay#answer-24914782
$(document).on('show.bs.modal', '.modal', function () {
    const zIndex = 1040 + (10 * $('.modal:visible').length);
    $(this).css('z-index', zIndex);
    // setTimeout with 0 delay because the backdrop doesn't exist yet
    setTimeout(() => {
        $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
    }, 0);
});
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/achievements/Achievement.d.ts" />
class AchievementHandler {
    static setNavigateIndex(index) {
        if (index < 0 || index >= AchievementHandler.numberOfTabs()) {
            return;
        }
        AchievementHandler.navigateIndex(index);
        Settings.setSettingByName('achievementsPage', index);
    }
    static navigateRight() {
        this.setNavigateIndex(AchievementHandler.navigateIndex() + 1);
    }
    static navigateLeft() {
        this.setNavigateIndex(AchievementHandler.navigateIndex() - 1);
    }
    static isNavigateDirectionDisabled(navigateBackward) {
        return navigateBackward
            ? this.navigateIndex() === 0
            : this.navigateIndex() + 1 === this.numberOfTabs();
    }
    static calculateNumberOfTabs() {
        this.numberOfTabs(Math.max(1, Math.ceil(this.achievementListFiltered().length / 10)));
    }
    static getAchievementListWithIndex() {
        return this.getAchievementList().slice(this.navigateIndex() * 10, (this.navigateIndex() * 10) + 10);
    }
    static getAchievementList() {
        const achievementSortValue = Settings.getSetting('achievementSort').observableValue();
        // Checks if the user has selected the default sorting option
        if (achievementSortValue === AchievementSortOptions.default) {
            // ... in this case, returns the filtered list without sorting.
            return this.achievementListFiltered();
        }
        // ... otherwise, returns a copy of the filtered list sorted by provided property.
        const achievementSortedList = [...this.achievementListFiltered()];
        return achievementSortedList.sort(AchievementHandler.compareBy(achievementSortValue, Settings.getSetting('achievementSortDirection').observableValue()));
    }
    static filterAchievementList(retainPage = false) {
        this.achievementListFiltered(this.achievementList.filter((a) => (a.region <= player.highestRegion() &&
            a.achievable() &&
            (this.filter.status() == -2 || a.unlocked === !!this.filter.status()) &&
            (this.filter.type() == -2 || a.property.achievementType === this.filter.type()) &&
            (this.filter.region() == -2 || a.region === this.filter.region()))));
        this.calculateNumberOfTabs();
        if (!retainPage) {
            this.setNavigateIndex(0);
        }
        else if (this.getAchievementListWithIndex().length === 0 && this.navigateIndex() > 0) {
            this.setNavigateIndex(this.numberOfTabs() - 1);
        }
    }
    static compareBy(option, direction) {
        return function (a, b) {
            let res, dir = (direction) ? -1 : 1;
            const config = AchievementSortOptionConfigs[option];
            const aValue = config.getValue(a);
            const bValue = config.getValue(b);
            if (config.invert) {
                dir *= -1;
            }
            //Compare by provided property
            if (aValue == bValue) {
                //If they are equal according to provided property, sort by name
                return a.name.localeCompare(b.name);
            }
            else if (aValue < bValue) {
                res = -1;
            }
            else if (aValue > bValue) {
                res = 1;
            }
            else {
                res = 0;
            }
            return res * dir;
        };
    }
    static preCheckAchievements() {
        // Check if our achievements are completed, we don't want to re-notify if already done
        for (let i = 0; i < AchievementHandler.achievementList.length; i++) {
            AchievementHandler.achievementList[i].unlocked = AchievementHandler.achievementList[i].isCompleted();
        }
    }
    static checkAchievements() {
        for (let i = 0; i < AchievementHandler.achievementList.length; i++) {
            if (!AchievementHandler.achievementList[i].unlocked) {
                AchievementHandler.achievementList[i].check();
            }
        }
    }
    static addAchievement(name, description, property, bonus, region = GameConstants.Region.none, achievableFunction = null) {
        AchievementHandler.achievementList.push(new Achievement(name, description, property, bonus, region, achievableFunction));
    }
    static calculateBonus() {
        AchievementHandler.achievementList.forEach((achievement) => {
            if (!achievement.achievable()) {
                return 0;
            }
            const max = AchievementHandler.maxBonus()[achievement.region];
            achievement.bonus = (achievement.bonusWeight / max) * 100;
        });
    }
    static calculateMaxBonus() {
        GameHelper.enumNumbers(GameConstants.Region).forEach(region => {
            AchievementHandler.maxBonus()[region] = AchievementHandler.achievementList.filter(a => a.region == region && a.achievable()).reduce((sum, a) => sum + a.bonusWeight, 0);
        });
        AchievementHandler.calculateBonus();
    }
    static bonusUnlocked() {
        let sum = 0;
        GameHelper.enumNumbers(GameConstants.Region).forEach(region => {
            sum += AchievementHandler.achievementList.filter(a => a.region == region && a.isCompleted()).reduce((sum, a) => sum + a.bonusWeight, 0);
        });
        return sum;
    }
    static achievementBonus() {
        let sum = 0;
        GameHelper.enumNumbers(GameConstants.Region).forEach(region => {
            const total = AchievementHandler.achievementList.filter(a => a.region == region && a.isCompleted()).reduce((sum, a) => sum + a.bonusWeight, 0) / AchievementHandler.maxBonus()[region];
            if (!isNaN(total)) {
                sum += total;
            }
        });
        return sum;
    }
    static achievementBonusPercent() {
        return `${(100 * AchievementHandler.achievementBonus()).toFixed(2)}%`;
    }
    static findByName(name) {
        return AchievementHandler.achievementList.find((achievement) => achievement.name === name && achievement.achievable());
    }
    static initialize(multiplier, challenges) {
        /*
         * GENERAL
         */
        AchievementHandler.addAchievement('My First Hundo', 'Obtain 100 Digidollars', new MoneyRequirement(100), 0.05);
        AchievementHandler.addAchievement('I Should Buy a Bigger Wallet', 'Obtain 1,000 Digidollars', new MoneyRequirement(1000), 0.10);
        AchievementHandler.addAchievement('A Small Fortune', 'Obtain 10,000 Digidollars', new MoneyRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Annual Wage', 'Obtain 100,000 Digidollars', new MoneyRequirement(100000), 0.20);
        AchievementHandler.addAchievement('Officially a Millionaire', 'Obtain 1,000,000 Digidollars', new MoneyRequirement(1000000), 0.25);
        AchievementHandler.addAchievement('A billion Digipennies', 'Obtain 10,000,000 Digidollars', new MoneyRequirement(10000000), 0.5);
        AchievementHandler.addAchievement('Dungeon Time', 'Obtain 100 Scan Coins', new TokenRequirement(100), 0.05);
        AchievementHandler.addAchievement('Dungeon Collector', 'Obtain 1,000 Scan Coins', new TokenRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Dungeon Grinder', 'Obtain 10,000 Scan Coins', new TokenRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Dungeon Master', 'Obtain 100,000 Scan Coins', new TokenRequirement(100000), 0.20);
        AchievementHandler.addAchievement('Dungeon Legend', 'Obtain 1,000,000 Scan Coins', new TokenRequirement(1000000), 0.25);
        AchievementHandler.addAchievement('Basic Trainer', 'Have 100 Attack', new AttackRequirement(100), 0.05);
        AchievementHandler.addAchievement('Improving', 'Have 1,000 Attack', new AttackRequirement(1000), 0.10);
        AchievementHandler.addAchievement('An Unrelenting Force', 'Have 5,000 Attack', new AttackRequirement(5000), 0.15);
        AchievementHandler.addAchievement('FUS DOH RAH', 'Have 10,000 Attack', new AttackRequirement(10000), 0.20);
        AchievementHandler.addAchievement('Ok, I have enough attack already...', 'Have 25,000 Attack', new AttackRequirement(25000), 0.25);
        AchievementHandler.addAchievement('Silver attack button!', 'Have 100,000 Attack', new AttackRequirement(100000), 0.30);
        AchievementHandler.addAchievement('Pesky roamings, I need to oneshot routes for them...', 'Have 250,000 Attack', new AttackRequirement(250000), 0.35);
        AchievementHandler.addAchievement('You pressed F12 by any chance?', 'Have 500,000 Attack', new AttackRequirement(500000), 0.40);
        AchievementHandler.addAchievement('Left Left Right Right A B A B - Hey, 1 million!', 'Have 1,000,000 Attack', new AttackRequirement(1000000), 0.40);
        AchievementHandler.addAchievement('Bling', 'Obtain 100 Scrap', new DiamondRequirement(100), 0.05);
        AchievementHandler.addAchievement('Bling x10!', 'Obtain 1,000 Scrap', new DiamondRequirement(1000), 0.15);
        AchievementHandler.addAchievement('If you like it, you should\'ve put a ring on it.', 'Obtain 10,000 Scrap', new DiamondRequirement(10000), 0.25);
        AchievementHandler.addAchievement('Is my thumb green yet?', 'Dig up 1 item', new UndergroundItemsFoundRequirement(1), 0.01);
        AchievementHandler.addAchievement('My shovel is wrench to crack', 'Dig up 10 items', new UndergroundItemsFoundRequirement(10), 0.02);
        AchievementHandler.addAchievement('Why can\'t I make a diamond wrench?', 'Dig up 100 items', new UndergroundItemsFoundRequirement(100), 0.08);
        AchievementHandler.addAchievement('This is definitely not Minecraft', 'Dig up 1,000 items', new UndergroundItemsFoundRequirement(1000), 0.1);
        AchievementHandler.addAchievement('I wonder how much is down there...', 'Dig up 10,000 items', new UndergroundItemsFoundRequirement(10000), 0.4);
        AchievementHandler.addAchievement('The earth is like onions', 'Dig deeper 1 time', new UndergroundLayersMinedRequirement(1), 0.01);
        AchievementHandler.addAchievement('This takes foreverrrrrrr', 'Dig deeper 10 times', new UndergroundLayersMinedRequirement(10), 0.03);
        AchievementHandler.addAchievement('DigDug ain\'t got nothin on me', 'Dig deeper 100 times', new UndergroundLayersMinedRequirement(100), 0.1);
        AchievementHandler.addAchievement('Both my thumbs are green! This can\'t be healthy', 'Dig deeper 1,000 times', new UndergroundLayersMinedRequirement(1000), 0.3);
        AchievementHandler.addAchievement('Is that how I use this?', 'Level 1 Hina Item to the maximum level', new MaxLevelOakItemRequirement(1), 0.05, GameConstants.Region.none, () => !challenges.list.disableOakItems.active());
        AchievementHandler.addAchievement('I\'ve got my hands full with all of these', 'Level 3 Hina Items to the maximum level', new MaxLevelOakItemRequirement(3), 0.1, GameConstants.Region.none, () => !challenges.list.disableOakItems.active());
        AchievementHandler.addAchievement('Hina is the best!', 'Level 8 Hina Items to the maximum level', new MaxLevelOakItemRequirement(8), 0.14, GameConstants.Region.none, () => !challenges.list.disableOakItems.active());
        AchievementHandler.addAchievement('Prepared for anything!', 'Level 11 Hina Items to the maximum level', new MaxLevelOakItemRequirement(11), 0.18, GameConstants.Region.none, () => !challenges.list.disableOakItems.active() && challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Prepared for anything!', 'Level 12 Hina Items to the maximum level', new MaxLevelOakItemRequirement(12), 0.18, GameConstants.Region.none, () => !challenges.list.disableOakItems.active() && !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('First Team', 'Scan 100 Digimon', new CapturedRequirement(100), 0.05);
        AchievementHandler.addAchievement('Filling the Book', 'Scan 1,000 Digimon', new CapturedRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Digimon Army', 'Scan 10,000 Digimon', new CapturedRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Digimon Collector', 'Scan 100,000 Digimon', new CapturedRequirement(100000), 0.25);
        AchievementHandler.addAchievement('You get a Digimon, you get a Digimon, everyone gets a Digimon!', 'Scan 1,000,000 Digimon', new CapturedRequirement(1000000), 0.50);
        AchievementHandler.addAchievement('A Long Road Ahead', 'Defeat 100 Digimon', new DefeatedRequirement(100), 0.05);
        AchievementHandler.addAchievement('More Grind', 'Defeat 1,000 Digimon', new DefeatedRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Overleveled', 'Defeat 10,000 Digimon', new DefeatedRequirement(10000), 0.15);
        AchievementHandler.addAchievement('The Cake is a Lie, but the Grind is real', 'Defeat 100,000 Digimon', new DefeatedRequirement(100000), 0.25);
        AchievementHandler.addAchievement('Are there any left?', 'Defeat 1,000,000 Digimon', new DefeatedRequirement(1000000), 0.50);
        AchievementHandler.addAchievement('Startin\' Out', 'Scan your first Digimon', new CaughtPokemonRequirement(1), 0.01);
        AchievementHandler.addAchievement('Now you are getting it', 'Scan 15 unique Digimon', new CaughtPokemonRequirement(15), 0.05);
        AchievementHandler.addAchievement('Wonderful! Do you like to collect things?', 'Scan 50 unique Digimon', new CaughtPokemonRequirement(50), 0.10);
        AchievementHandler.addAchievement('Surpassing Ash', 'Scan 100 unique Digimon', new CaughtPokemonRequirement(100), 0.20);
        AchievementHandler.addAchievement('Pixelated', 'Scan your first Dot', new ShinyPokemonRequirement(1), 0.03);
        AchievementHandler.addAchievement('These Digimon must be sick', 'Scan 10 unique Dots', new ShinyPokemonRequirement(10), 0.06);
        AchievementHandler.addAchievement('Why Am I Doing This?', 'Scan 20 unique Dots', new ShinyPokemonRequirement(20), 0.09);
        AchievementHandler.addAchievement('Why Am I Still Doing This?!', 'Scan 30 unique Dots', new ShinyPokemonRequirement(30), 0.12);
        AchievementHandler.addAchievement('Okay fine, I can do a few more', 'Scan 40 unique Dots', new ShinyPokemonRequirement(40), 0.15);
        AchievementHandler.addAchievement('Where Did All The Dot Digimon Go?', 'Scan 50 unique Dots', new ShinyPokemonRequirement(50), 0.30);
        AchievementHandler.addAchievement('Nvm, found some more', 'Scan 75 unique Dots', new ShinyPokemonRequirement(75), 0.45);
        AchievementHandler.addAchievement('Just keep swimming just keep swimming -- oooo dot!', 'Scan 100 unique Dots', new ShinyPokemonRequirement(100), 0.60);
        AchievementHandler.addAchievement('I don\'t know if I can handle the next batch of dots.', 'Scan 151 unique Dots!', new ShinyPokemonRequirement(151), 1.50);
        AchievementHandler.addAchievement('Digimon Nursery', 'Hatch 1 egg', new HatchRequirement(1), 0.01);
        AchievementHandler.addAchievement('A Lot of Running', 'Hatch 10 eggs', new HatchRequirement(10), 0.04);
        AchievementHandler.addAchievement('Marathon Runner', 'Hatch 100 eggs', new HatchRequirement(100), 0.15);
        AchievementHandler.addAchievement('Egg Factory', 'Hatch 1,000 eggs', new HatchRequirement(1000), 0.3);
        AchievementHandler.addAchievement('Offical Easter Bunny', 'Hatch 10,000 eggs', new HatchRequirement(10000), 0.4);
        AchievementHandler.addAchievement('More Scans', 'Purchase your first DigiScan', new PokeballRequirement(1, GameConstants.Pokeball.Pokeball), 0.01);
        AchievementHandler.addAchievement('Starting a Collection', 'Purchase 10 DigiScan', new PokeballRequirement(10, GameConstants.Pokeball.Pokeball), 0.03);
        AchievementHandler.addAchievement('Stocking Up', 'Purchase 100 DigiScan', new PokeballRequirement(100, GameConstants.Pokeball.Pokeball), 0.05);
        AchievementHandler.addAchievement('Fully Stocked', 'Purchase 1,000 DigiScan', new PokeballRequirement(1000, GameConstants.Pokeball.Pokeball), 0.10);
        AchievementHandler.addAchievement('Maybe just a few more for the bunker', 'Purchase 10,000 DigiScan', new PokeballRequirement(10000, GameConstants.Pokeball.Pokeball), 0.15);
        AchievementHandler.addAchievement('Doomsday Bunker stocked with Digiscans!', 'Purchase 100,000 DigiScan', new PokeballRequirement(100000, GameConstants.Pokeball.Pokeball), 0.20);
        AchievementHandler.addAchievement('ooooo A blue one!', 'Purchase your first Greatscan', new PokeballRequirement(1, GameConstants.Pokeball.Greatball), 0.03);
        AchievementHandler.addAchievement('Greatscan 2', 'Purchase 10 Greatscans', new PokeballRequirement(10, GameConstants.Pokeball.Greatball), 0.05);
        AchievementHandler.addAchievement('Greatscan 3', 'Purchase 100 Greatscans', new PokeballRequirement(100, GameConstants.Pokeball.Greatball), 0.10);
        AchievementHandler.addAchievement('Greatscan 4', 'Purchase 1,000 Greatscans', new PokeballRequirement(1000, GameConstants.Pokeball.Greatball), 0.15);
        AchievementHandler.addAchievement('Greatscan 5', 'Purchase 10,000 Greatscans', new PokeballRequirement(10000, GameConstants.Pokeball.Greatball), 0.20);
        AchievementHandler.addAchievement('Greatscan 6', 'Purchase 100,000 Greatscans', new PokeballRequirement(100000, GameConstants.Pokeball.Greatball), 0.30);
        AchievementHandler.addAchievement('Ultrascan 1', 'Purchase your first Ultrascan', new PokeballRequirement(1, GameConstants.Pokeball.Ultraball), 0.05);
        AchievementHandler.addAchievement('Ultrascan 2', 'Purchase 10 Ultrascans', new PokeballRequirement(10, GameConstants.Pokeball.Ultraball), 0.10);
        AchievementHandler.addAchievement('Ultrascan 3', 'Purchase 100 Ultrascans', new PokeballRequirement(100, GameConstants.Pokeball.Ultraball), 0.15);
        AchievementHandler.addAchievement('Ultrascan 4', 'Purchase 1,000 Ultrascans', new PokeballRequirement(1000, GameConstants.Pokeball.Ultraball), 0.20);
        AchievementHandler.addAchievement('Ultrascan 5', 'Purchase 10,000 Ultrascans', new PokeballRequirement(10000, GameConstants.Pokeball.Ultraball), 0.30);
        AchievementHandler.addAchievement('Ultrascan 6', 'Purchase 100,000 Ultrascans', new PokeballRequirement(100000, GameConstants.Pokeball.Ultraball), 0.40);
        AchievementHandler.addAchievement('Masterscan 1', 'Purchase your first Masterscan', new PokeballRequirement(1, GameConstants.Pokeball.Masterball), 0.20);
        AchievementHandler.addAchievement('Masterscan 2', 'Purchase 10 Masterscans', new PokeballRequirement(10, GameConstants.Pokeball.Masterball), 0.30);
        AchievementHandler.addAchievement('Masterscan 3', 'Purchase 100 Masterscans', new PokeballRequirement(100, GameConstants.Pokeball.Masterball), 0.40);
        AchievementHandler.addAchievement('A Few Clicks In', 'Click 10 Times', new ClickRequirement(10, 1), 0.02, GameConstants.Region.none, () => !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Clicking Pro', 'Click 100 Times', new ClickRequirement(100, 1), 0.05, GameConstants.Region.none, () => !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Ultra Clicker', 'Click 1,000 Times', new ClickRequirement(1000, 1), 0.10, GameConstants.Region.none, () => !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Need a new mouse yet?', 'Click 10,000 Times', new ClickRequirement(10000, 1), 0.25, GameConstants.Region.none, () => !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('My new dirty hobby', 'Unlock 3 Trays in the Disk Shop', new FarmPlotsUnlockedRequirement(3), 0.05);
        AchievementHandler.addAchievement('Pirate', 'Unlock 9 Trays in the Disk Shop', new FarmPlotsUnlockedRequirement(9), 0.15);
        AchievementHandler.addAchievement('Piratebay', 'Unlock 25 Trays in the Disk Shop', new FarmPlotsUnlockedRequirement(25), 0.25);
        AchievementHandler.addAchievement('Free Trial', 'Unlock 8 Disks', new BerriesUnlockedRequirement(8), 0.1);
        AchievementHandler.addAchievement('Burner in training', 'Unlock 18 Disks', new BerriesUnlockedRequirement(18), 0.2);
        AchievementHandler.addAchievement('Burner Apprentice', 'Unlock 36 Disks', new BerriesUnlockedRequirement(36), 0.3);
        AchievementHandler.addAchievement('Master Burner', 'Unlock 67 Disks', new BerriesUnlockedRequirement(67), 0.4);
        AchievementHandler.addAchievement('Can you do this for me?', 'Complete 1 quest', new QuestRequirement(1), 0.05);
        AchievementHandler.addAchievement('One more favor', 'Complete 10 quests', new QuestRequirement(10), 0.15);
        AchievementHandler.addAchievement('YES MAN!', 'Complete 100 quests', new QuestRequirement(100), 0.25);
        AchievementHandler.addAchievement('I just love quests', 'Complete 1,000 quests', new QuestRequirement(1000), 0.4);
        AchievementHandler.addAchievement('Fighting novice', 'Complete stage 100 in Colosseum', new BattleFrontierHighestStageRequirement(100), 0.05);
        AchievementHandler.addAchievement('Competent fighter', 'Complete stage 250 in Colosseum', new BattleFrontierHighestStageRequirement(250), 0.15);
        AchievementHandler.addAchievement('Unstoppable fighting machine', 'Complete stage 500 in Colosseum', new BattleFrontierHighestStageRequirement(500), 0.25);
        AchievementHandler.addAchievement('Living Legend', 'Complete stage 1,000 in Colosseum', new BattleFrontierHighestStageRequirement(1000), 0.4);
        AchievementHandler.addAchievement('Keep on fighting', 'Complete 500 total stages in Colosseum', new BattleFrontierTotalStageRequirement(500), 0.05);
        AchievementHandler.addAchievement('Uphill battle', 'Complete 1,000 total stages in Colosseum', new BattleFrontierTotalStageRequirement(1000), 0.15);
        AchievementHandler.addAchievement('Don\'t stop trying', 'Complete 2,500 total stages in Colosseum', new BattleFrontierTotalStageRequirement(2500), 0.25);
        AchievementHandler.addAchievement('King of the hill', 'Complete 5,000 total stages in Colosseum', new BattleFrontierTotalStageRequirement(5000), 0.4);
        AchievementHandler.addAchievement('Let\'s try this out', 'Obtain your first Protein', new ProteinObtainRequirement(1), 0.01);
        AchievementHandler.addAchievement('Pre-workout supplements', 'Obtain five Proteins', new ProteinObtainRequirement(5), 0.02);
        AchievementHandler.addAchievement('Well-stocked medicine cabinet', 'Obtain 10 Proteins', new ProteinObtainRequirement(10), 0.04);
        AchievementHandler.addAchievement('I can\'t hold all these Proteins!', 'Obtain 50 Proteins', new ProteinObtainRequirement(50), 0.08);
        AchievementHandler.addAchievement('Essential nutrients', 'Obtain 100 Proteins', new ProteinObtainRequirement(100), 0.10);
        AchievementHandler.addAchievement('Putting the \'bulk\' in bulk-buy', 'Obtain 500 Proteins', new ProteinObtainRequirement(500), 0.15);
        AchievementHandler.addAchievement('Protein stockpile', 'Obtain 1,000 Proteins', new ProteinObtainRequirement(1000), 0.20);
        AchievementHandler.addAchievement('Fish, eggs, nuts, and cheese', 'Obtain 5,000 Proteins', new ProteinObtainRequirement(5000), 0.35);
        AchievementHandler.addAchievement('A literal mountain of muscle', 'Obtain 10,000 Proteins', new ProteinObtainRequirement(10000), 0.50);
        /*
         * REGIONAL
         */
        GameHelper.enumNumbers(GameConstants.Region).filter(r => r != GameConstants.Region.none && r <= GameConstants.MAX_AVAILABLE_REGION).forEach(region => {
            var _a, _b;
            // Routes
            Routes.getRoutesByRegion(region).forEach(route => {
                AchievementHandler.addAchievement(`${route.routeName} traveler`, `Defeat 100 Digimon on ${route.routeName}`, new RouteKillRequirement(GameConstants.ACHIEVEMENT_DEFEAT_ROUTE_VALUES[0], region, route.number), 1, region);
                AchievementHandler.addAchievement(`${route.routeName} explorer`, `Defeat 1,000 Digimon on ${route.routeName}`, new RouteKillRequirement(GameConstants.ACHIEVEMENT_DEFEAT_ROUTE_VALUES[1], region, route.number), 2, region);
                AchievementHandler.addAchievement(`${route.routeName} conqueror`, `Defeat 10,000 Digimon on ${route.routeName}`, new RouteKillRequirement(GameConstants.ACHIEVEMENT_DEFEAT_ROUTE_VALUES[2], region, route.number), 3, region);
            });
            // Gyms
            (_a = GameConstants.RegionGyms[region]) === null || _a === void 0 ? void 0 : _a.forEach(gym => {
                var _a, _b;
                const gymTitle = gym.includes('Elite') || gym.includes('Champion') ? gym : `${gym}`;
                if ((_b = (_a = GymList[gym]) === null || _a === void 0 ? void 0 : _a.flags) === null || _b === void 0 ? void 0 : _b.achievement) {
                    AchievementHandler.addAchievement(`${gym} Challenge regular`, `Clear ${gymTitle} 10 times`, new ClearGymRequirement(GameConstants.ACHIEVEMENT_DEFEAT_GYM_VALUES[0], GameConstants.getGymIndex(gym)), 1, region);
                    AchievementHandler.addAchievement(`${gym} Challenge ruler`, `Clear ${gymTitle} 100 times`, new ClearGymRequirement(GameConstants.ACHIEVEMENT_DEFEAT_GYM_VALUES[1], GameConstants.getGymIndex(gym)), 2, region);
                    AchievementHandler.addAchievement(`${gym} Challenge owner`, `Clear ${gymTitle} 1,000 times`, new ClearGymRequirement(GameConstants.ACHIEVEMENT_DEFEAT_GYM_VALUES[2], GameConstants.getGymIndex(gym)), 3, region);
                }
            });
            // Dungeons
            (_b = GameConstants.RegionDungeons[region]) === null || _b === void 0 ? void 0 : _b.forEach(dungeon => {
                AchievementHandler.addAchievement(`${dungeon} explorer`, `Clear ${dungeon} 10 times`, new ClearDungeonRequirement(GameConstants.ACHIEVEMENT_DEFEAT_DUNGEON_VALUES[0], GameConstants.getDungeonIndex(dungeon)), 0.8, region);
                AchievementHandler.addAchievement(`${dungeon} expert`, `Clear ${dungeon} 100 times`, new ClearDungeonRequirement(GameConstants.ACHIEVEMENT_DEFEAT_DUNGEON_VALUES[1], GameConstants.getDungeonIndex(dungeon)), 1.2, region);
                AchievementHandler.addAchievement(`${dungeon} hermit`, `Clear ${dungeon} 250 times`, new ClearDungeonRequirement(GameConstants.ACHIEVEMENT_DEFEAT_DUNGEON_VALUES[2], GameConstants.getDungeonIndex(dungeon)), 1.6, region);
                AchievementHandler.addAchievement(`${dungeon} dweller`, `Clear ${dungeon} 500 times`, new ClearDungeonRequirement(GameConstants.ACHIEVEMENT_DEFEAT_DUNGEON_VALUES[3], GameConstants.getDungeonIndex(dungeon)), 2.4, region);
            });
            // Unique Digimon
            const amt10 = Math.floor(PokemonHelper.calcUniquePokemonsByRegion(region) * .1);
            const amt50 = Math.floor(PokemonHelper.calcUniquePokemonsByRegion(region) * .5);
            const amtAll = Math.floor(PokemonHelper.calcUniquePokemonsByRegion(region));
            // Caught unique pokemon
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Tamer`, `Scan ${amt10} unique Digimon from ${GameConstants.camelCaseToString(GameConstants.Region[region])}`, new CaughtUniquePokemonsByRegionRequirement(region, amt10), 2, region);
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Ace`, `Scan ${amt50} unique Digimon from ${GameConstants.camelCaseToString(GameConstants.Region[region])}`, new CaughtUniquePokemonsByRegionRequirement(region, amt50), 4, region);
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Master`, `Complete the ${GameConstants.camelCaseToString(GameConstants.Region[region])} Digidex!`, new CaughtUniquePokemonsByRegionRequirement(region, amtAll), 6, region);
            // Caught unique shiny pokemon
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Dot Tamer`, `Scan ${amt10} unique Dot Digimon from ${GameConstants.camelCaseToString(GameConstants.Region[region])}`, new CaughtUniqueShinyPokemonsByRegionRequirement(region, amt10), 3, region);
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Dot Ace`, `Scan ${amt50} unique Dot Digimon from ${GameConstants.camelCaseToString(GameConstants.Region[region])}`, new CaughtUniqueShinyPokemonsByRegionRequirement(region, amt50), 6, region);
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Dot Master`, `Complete the ${GameConstants.camelCaseToString(GameConstants.Region[region])} Dot Digidex!`, new CaughtUniqueShinyPokemonsByRegionRequirement(region, amtAll), 9, region);
        });
        // load filters, filter the list & calculate number of tabs
        this.load();
        this.filterAchievementList(true);
        this.calculateNumberOfTabs();
        // subscribe to filters so that when the player changes a filter it automatically refilters the list
        Object.keys(this.filter).forEach(e => this.filter[e].subscribe(() => this.filterAchievementList()));
        multiplier.addBonus('exp', () => 1 + this.achievementBonus());
        multiplier.addBonus('money', () => 1 + this.achievementBonus());
        multiplier.addBonus('explorecoin', () => 1 + this.achievementBonus());
    }
    static load() {
        AchievementHandler.calculateMaxBonus();
        this.achievementListFiltered(this.achievementList.filter(a => a.region <= player.highestRegion() && a.achievable()));
        AchievementHandler.navigateIndex(Settings.getSetting('achievementsPage').value);
        AchievementHandler.filter.status(Settings.getSetting('achievementsStatus').value);
        AchievementHandler.filter.type(Settings.getSetting('achievementsType').value);
        AchievementHandler.filter.region(Settings.getSetting('achievementsRegion').value);
        // Cycle the pages to make sure they are upto date
        AchievementHandler.navigateRight();
        setTimeout(() => {
            AchievementHandler.navigateLeft();
            AchievementHandler.filterAchievementList();
        }, 1);
    }
}
AchievementHandler.achievementList = [];
AchievementHandler.navigateIndex = ko.observable(0);
AchievementHandler.maxBonus = ko.observableArray([]);
AchievementHandler.achievementListFiltered = ko.observableArray([]);
AchievementHandler.numberOfTabs = ko.observable(0);
AchievementHandler.filter = {
    status: ko.observable(-2).extend({ numeric: 0 }),
    type: ko.observable(-2).extend({ numeric: 0 }),
    region: ko.observable(-2).extend({ numeric: 0 }),
};
class AchievementTracker {
    constructor() {
        this.name = 'AchievementTracker';
        this.saveKey = 'achievementTracker';
        this.defaults = {
            'trackedAchievement': null,
        };
        this.trackedAchievement = ko.observable(this.defaults.trackedAchievement);
    }
    initialize() {
    }
    canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItemType.Holo_caster);
    }
    update(delta) {
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        if (!!json.trackedAchievementName) {
            const achievement = AchievementHandler.findByName(json.trackedAchievementName);
            if (!!achievement) {
                this.trackedAchievement(achievement);
            }
        }
    }
    toJSON() {
        return {
            trackedAchievementName: this.hasTrackedAchievement() ? this.trackedAchievement().name : null,
        };
    }
    trackAchievement(achievement) {
        this.trackedAchievement(achievement);
    }
    hasTrackedAchievement() {
        return this.trackedAchievement() !== null;
    }
}
///<reference path="../../declarations/requirements/AchievementRequirement.d.ts"/>
class CaughtUniquePokemonsByRegionRequirement extends AchievementRequirement {
    constructor(region, amount = 0, option = GameConstants.AchievementOption.more) {
        super(amount || PokemonHelper.calcUniquePokemonsByRegion(region), option, GameConstants.AchievementType['Caught Pokemon']);
        this.region = region;
    }
    getProgress() {
        return Math.min(new Set(App.game.party.caughtPokemon.filter(p => p.id > 0 && PokemonHelper.calcNativeRegion(p.name) === this.region).map(p => Math.floor(p.id))).size, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} unique Digimon need to be caught.`;
    }
}
///<reference path="../../declarations/requirements/AchievementRequirement.d.ts"/>
class CaughtUniqueShinyPokemonsByRegionRequirement extends AchievementRequirement {
    constructor(region, amount = 0, option = GameConstants.AchievementOption.more) {
        super(amount || PokemonHelper.calcUniquePokemonsByRegion(region), option, GameConstants.AchievementType['Shiny Pokemon']);
        this.region = region;
    }
    getProgress() {
        return Math.min(new Set(App.game.party.caughtPokemon.filter(p => p.id > 0 && p.shiny && PokemonHelper.calcNativeRegion(p.name) === this.region).map(p => Math.floor(p.id))).size, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} unique Digimon need to be caught.`;
    }
}
///<reference path="../../declarations/requirements/Requirement.d.ts"/>
class ItemOwnedRequirement extends Requirement {
    constructor(itemName, value = 1, option = GameConstants.AchievementOption.more) {
        super(value, option);
        this.itemName = itemName;
    }
    getProgress() {
        return Math.min(player.itemList[this.itemName](), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} ${ItemList[this.itemName].displayName} needs to be purchased first.`;
    }
}
///<reference path="../../declarations/requirements/Requirement.d.ts"/>
class ObtainedPokemonRequirement extends Requirement {
    constructor(pokemon, uncaught = false) {
        const option = uncaught ? GameConstants.AchievementOption.less : GameConstants.AchievementOption.more;
        super(1, option);
        this.pokemonID = pokemon.id;
    }
    getProgress() {
        var _a, _b;
        return Math.min((_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.digimonScanned[this.pokemonID](), this.requiredValue);
    }
    hint() {
        return this.option == GameConstants.AchievementOption.more ?
            `${pokemonMap[this.pokemonID].name} needs to be caught.` :
            `${pokemonMap[this.pokemonID].name} cannot be caught yet.`;
    }
}
///<reference path="../../declarations/requirements/Requirement.d.ts"/>
class QuestLineRequirement extends Requirement {
    constructor(questLineName, option = GameConstants.AchievementOption.more) {
        super(1, option);
        this.questLineName = questLineName;
    }
    getProgress() {
        return +(App.game.quests.getQuestLine(this.questLineName).state() == QuestLineState.ended);
    }
    hint() {
        return `The ${this.questLineName} quest line needs to be completed first.`;
    }
}
/// <reference path="../../declarations/enums/Badges.d.ts"/>
class BadgeCaseController {
    static getDisplayableBadges() {
        const region = player.highestRegion();
        const result = {};
        GameConstants.RegionGyms.slice(0, region + 1).forEach((region, index) => {
            result[GameConstants.Region[index].charAt(0).toUpperCase() + GameConstants.Region[index].slice(1)] = region
                .map(gym => BadgeEnums[GymList[gym].badgeReward])
                .filter(b => !b.endsWith('Data') && b != 'None');
        });
        return result;
    }
}
class BattleFrontier {
    constructor() {
        this.name = 'BattleFrontier';
        this.saveKey = 'battleFrontier';
        this.milestones = BattleFrontierMilestones;
        this.defaults = {};
    }
    initialize() { }
    update(delta) { }
    canAccess() {
        const deoxysQuest = App.game.quests.getQuestLine('Mystery of Deoxys');
        return deoxysQuest.state() == QuestLineState.ended || deoxysQuest.curQuest() >= 3;
    }
    enter() {
        if (!App.game.battleFrontier.canAccess()) {
            return Notifier.notify({
                title: '[Battle Frontier]',
                message: 'You must progress further in the "Mystery of Deoxys" quest before you can participate',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
        BattleFrontierBattle.enemyPokemon(null);
        App.game.gameState = GameConstants.GameState.battleFrontier;
    }
    start(useCheckpoint) {
        BattleFrontierRunner.start(useCheckpoint);
    }
    leave() {
        // Put the user back in the town
        App.game.gameState = GameConstants.GameState.town;
    }
    toJSON() {
        return {
            milestones: this.milestones.milestoneRewards.filter(m => m.obtained()).map(m => [m.stage, m.description]),
            checkpoint: BattleFrontierRunner.checkpoint(),
        };
    }
    fromJSON(json) {
        var _a;
        if (json == null) {
            return;
        }
        (_a = json.milestones) === null || _a === void 0 ? void 0 : _a.forEach(([stage, description]) => {
            var _a;
            (_a = this.milestones.milestoneRewards.find(m => m.stage == stage && m.description == description)) === null || _a === void 0 ? void 0 : _a.obtained(true);
        });
        BattleFrontierRunner.checkpoint(json.checkpoint);
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../Battle.ts" />
class BattleFrontierBattle extends Battle {
    // Override pokemon attack method so we can ignore the region multiplier
    static pokemonAttack() {
        var _a;
        // attack twice as fast if we have defeated this stage
        this.alternateAttack = !this.alternateAttack;
        if (this.alternateAttack && BattleFrontierRunner.stage() > App.game.statistics.colosseumHighestStageCompleted()) {
            return;
        }
        // Limit pokemon attack speed, Only allow 1 attack per 450ms
        const now = Date.now();
        if (this.lastPokemonAttack > now - 450) {
            return;
        }
        this.lastPokemonAttack = now;
        if (!((_a = this.enemyPokemon()) === null || _a === void 0 ? void 0 : _a.isAlive())) {
            return;
        }
        this.enemyPokemon().damage(App.game.party.calculatePokemonAttack(this.enemyPokemon().type1, this.enemyPokemon().type2, true));
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Award the player with exp, gems and go to the next pokemon
     */
    static defeatPokemon() {
        // This needs to stay as none so the stage number isn't adjusted
        App.game.breeding.progressEggsBattle(BattleFrontierRunner.stage(), GameConstants.Region.none);
        this.enemyPokemon().defeat(true);
        // Next pokemon
        GameHelper.incrementObservable(this.pokemonIndex);
        if (this.pokemonIndex() >= 3) {
            // Move on to next stage, reset timer
            BattleFrontierRunner.nextStage();
            this.pokemonIndex(0);
        }
        // If player still challenging Battle Frontier, keep generating Pokemon
        if (BattleFrontierRunner.started()) {
            // Create the next Pokemon to fight
            this.generateNewEnemy();
        }
        else {
            this.enemyPokemon(null);
        }
    }
    static generateNewEnemy() {
        const enemy = pokemonMap.randomRegion(player.highestRegion());
        // This needs to stay as none so the stage number isn't adjusted
        const health = PokemonFactory.routeHealth(BattleFrontierRunner.stage() + 10, GameConstants.Region.none);
        const level = Math.min(100, BattleFrontierRunner.stage());
        // Don't award money per pokemon defeated, award money at the end
        const money = 0;
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        // Give 1 extra gem per pokemon defeated after every 80 stages
        const gems = Math.ceil(BattleFrontierRunner.stage() / 80);
        const enemyPokemon = new BattlePokemon(enemy.name, enemy.id, enemy.type[0], enemy.type[1], health, level, 0, enemy.exp, new Amount(money, GameConstants.Currency.money), shiny, gems);
        this.enemyPokemon(enemyPokemon);
    }
}
BattleFrontierBattle.alternateAttack = false;
BattleFrontierBattle.pokemonIndex = ko.observable(0);
BattleFrontierBattle.totalPokemons = ko.observable(3);
// Looks like we don't need this, unless we want to put a random trainer name or similar
BattleFrontierBattle.trainer = ko.observable(0);
BattleFrontierBattle.counter = 0;
class BattleFrontierMilestone {
    constructor(stage, rewardFunction, _image, _description) {
        this.stage = stage;
        this.rewardFunction = rewardFunction;
        this._image = _image;
        this._description = _description;
        this.obtained = ko.observable(false);
    }
    gain() {
        if (!this.obtained()) {
            this.rewardFunction();
            this.obtained(true);
        }
    }
    get image() {
        return this._image;
    }
    get description() {
        return this._description;
    }
}
class BattleFrontierMilestoneItem extends BattleFrontierMilestone {
    constructor(stage, itemName, amount) {
        super(stage, () => {
            if (ItemList[itemName]) {
                ItemList[itemName].gain(amount);
            }
        });
        this.itemName = itemName;
        this.amount = amount;
    }
    get image() {
        return ItemList[this.itemName].image;
    }
    get description() {
        return `${this.amount} x ${ItemList[this.itemName].displayName}`;
    }
}
class BattleFrontierMilestonePokemon extends BattleFrontierMilestone {
    constructor(stage, pokemonName, image = 'assets/images/items/pokeball/Premierball.png') {
        super(stage, () => {
            App.game.party.gainPokemonById(pokemonMap[pokemonName].id);
        }, image, pokemonName);
    }
}
///<reference path="BattleFrontierMilestone.ts"/>
///<reference path="BattleFrontierMilestoneItem.ts"/>
class BattleFrontierMilestones {
    static addMilestone(milestone) {
        this.milestoneRewards.push(milestone);
        // Sort the milestones by lowest to highest stage incase they are added out of order
        this.milestoneRewards.sort((a, b) => a.stage - b.stage);
    }
    static nextMileStone() {
        // Get the next possible reward
        return this.milestoneRewards.find(r => !r.obtained());
    }
    static availableMilestones() {
        return BattleFrontierMilestones.milestoneRewards.filter(r => !r.obtained());
    }
    static nextMileStoneStage() {
        // Return the stage number the next reward is unlocked at
        const reward = this.nextMileStone();
        if (reward) {
            return reward.stage;
        }
        else {
            return Infinity;
        }
    }
    static nextMileStoneRewardDescription() {
        // Return the description of the next reward
        const reward = this.nextMileStone();
        if (reward) {
            return reward.description;
        }
        else {
            return 'Nothing';
        }
    }
    static gainReward(defeatedStage) {
        const reward = this.nextMileStone();
        if (reward && reward.stage == defeatedStage) {
            Notifier.notify({
                title: '[Battle Frontier]',
                message: `You've successfully defeated stage ${defeatedStage} and earned:\n<span>${reward.description}</span>!`,
                type: NotificationConstants.NotificationOption.info,
                setting: NotificationConstants.NotificationSetting.General.battle_frontier,
                timeout: 1e4,
            });
            reward.gain();
        }
    }
}
BattleFrontierMilestones.milestoneRewards = [];
// TODO: update rewards
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(5, 'Pokeball', 25));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(10, 'Pokeball', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(20, 'Greatball', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(30, 'Ultraball', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(35, 'xClick', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(40, 'xAttack', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(50, 'SmallRestore', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(100, 'Deoxys'));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(110, 'Guard Digizoid', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(120, 'Rush Digizoid', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(130, 'Sage Digizoid', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(140, 'Dreamy Digizoid', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(150, 'MediumRestore', 200));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(151, 'Deoxys (attack)'));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(160, 'Lucky_pill', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(170, 'Lucky_floppy', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(180, 'Item_magnet', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(190, 'Mystery_egg', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(200, 'LargeRestore', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(210, 'Rage Digizoid', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(220, 'Dreamy Digizoid', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(230, 'Vigor Digizoid', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(240, 'Rush Digizoid', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(250, 'Ultraball', 6400));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(251, 'Deoxys (defense)'));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(300, 'Guard Digizoid', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(386, 'Deoxys (speed)'));
/// <reference path="../../declarations/GameHelper.d.ts" />
class BattleFrontierRunner {
    constructor() { }
    static tick() {
        if (!this.started()) {
            return;
        }
        if (this.timeLeft() < 0) {
            this.battleLost();
        }
        this.timeLeft(this.timeLeft() - GameConstants.GYM_TICK);
        this.timeLeftPercentage(Math.floor(this.timeLeft() / GameConstants.GYM_TIME * 100));
    }
    static start(useCheckpoint) {
        this.started(true);
        this.stage(useCheckpoint ? this.checkpoint() : 1);
        this.highest(App.game.statistics.colosseumHighestStageCompleted());
        BattleFrontierBattle.pokemonIndex(0);
        BattleFrontierBattle.generateNewEnemy();
        BattleFrontierRunner.timeLeft(GameConstants.GYM_TIME);
        BattleFrontierRunner.timeLeftPercentage(100);
        App.game.gameState = GameConstants.GameState.battleFrontier;
    }
    static nextStage() {
        // Gain any rewards we should have earned for defeating this stage
        BattleFrontierMilestones.gainReward(this.stage());
        if (App.game.statistics.colosseumHighestStageCompleted() < this.stage()) {
            // Update our highest stage
            App.game.statistics.colosseumHighestStageCompleted(this.stage());
        }
        // Move on to the next stage
        GameHelper.incrementObservable(this.stage);
        GameHelper.incrementObservable(App.game.statistics.colosseumTotalStagesCompleted);
        BattleFrontierRunner.timeLeft(GameConstants.GYM_TIME);
        BattleFrontierRunner.timeLeftPercentage(100);
        this.checkpoint(this.stage());
    }
    static end() {
        BattleFrontierBattle.enemyPokemon(null);
        this.stage(1);
        this.started(false);
    }
    static battleLost() {
        // Current stage - 1 as the player didn't beat the current stage
        const stageBeaten = this.stage() - 1;
        // Give Battle Points and Money based on how far the user got
        const battleMultiplier = Math.max(stageBeaten / 100, 1);
        const battlePointsEarned = Math.round(stageBeaten * battleMultiplier);
        const moneyEarned = stageBeaten * 100 * battleMultiplier;
        Notifier.notify({
            title: 'Battle Frontier',
            message: `You managed to beat stage ${stageBeaten}.\nYou received ${battlePointsEarned} BP`,
            type: NotificationConstants.NotificationOption.success,
            setting: NotificationConstants.NotificationSetting.General.battle_frontier,
            timeout: 5 * GameConstants.MINUTE,
        });
        // Award battle points
        App.game.wallet.gainBattlePoints(battlePointsEarned);
        App.game.wallet.gainMoney(moneyEarned);
        const reward = BattleFrontierMilestones.nextMileStone();
        this.checkpoint(1);
        this.end();
    }
    static battleQuit() {
        Notifier.confirm({
            title: 'Battle Frontier',
            message: 'Are you sure you want to leave?\n\nYou can always return later and start off where you left.',
            type: NotificationConstants.NotificationOption.danger,
            confirm: 'leave',
        }).then(confirmed => {
            if (confirmed) {
                // Don't give any points, user quit the challenge
                Notifier.notify({
                    title: 'Battle Frontier',
                    message: `Checkpoint set for stage ${this.stage()}`,
                    type: NotificationConstants.NotificationOption.info,
                    timeout: 1 * GameConstants.MINUTE,
                });
                this.end();
            }
        });
    }
}
BattleFrontierRunner.timeLeft = ko.observable(GameConstants.GYM_TIME);
BattleFrontierRunner.timeLeftPercentage = ko.observable(100);
BattleFrontierRunner.stage = ko.observable(1); // Start at stage 1
BattleFrontierRunner.checkpoint = ko.observable(1); // Start at stage 1
BattleFrontierRunner.highest = ko.observable(1);
BattleFrontierRunner.counter = 0;
BattleFrontierRunner.started = ko.observable(false);
BattleFrontierRunner.timeLeftSeconds = ko.pureComputed(() => {
    return (Math.ceil(BattleFrontierRunner.timeLeft() / 100) / 10).toFixed(1);
});
BattleFrontierRunner.pokemonLeftImages = ko.pureComputed(() => {
    let str = '';
    for (let i = 0; i < 3; i++) {
        str += `<img class="pokeball-smallest" src="assets/images/pokeball/Pokeball.png"${BattleFrontierBattle.pokemonIndex() > i ? ' style="filter: saturate(0);"' : ''}>`;
    }
    return str;
});
BattleFrontierRunner.hasCheckpoint = ko.computed(() => {
    return BattleFrontierRunner.checkpoint() > 1;
});
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
/// <reference path="../../declarations/breeding/EggType.d.ts" />
var Currency = GameConstants.Currency;
class Breeding {
    constructor(multiplier) {
        this.multiplier = multiplier;
        this.name = 'Breeding';
        this.saveKey = 'breeding';
        this.defaults = {
            eggList: [ko.observable(new Egg()), ko.observable(new Egg()), ko.observable(new Egg()), ko.observable(new Egg())],
            eggSlots: 1,
            queueList: [],
            queueSlots: 0,
        };
        this.hatcheryHelpers = new HatcheryHelpers(this);
        this.hatchList = {};
        this._eggList = this.defaults.eggList;
        this._eggSlots = ko.observable(this.defaults.eggSlots);
        this.queueList = ko.observableArray(this.defaults.queueList);
        this.queueSlots = ko.observable(this.defaults.queueSlots);
        this._eggList.forEach((egg) => {
            egg.extend({ deferred: true });
        });
        BreedingController.filter.category(Settings.getSetting('breedingCategoryFilter').value);
        BreedingController.filter.region(Settings.getSetting('breedingRegionFilter').value);
        BreedingController.filter.type1(Settings.getSetting('breedingTypeFilter1').value);
        BreedingController.filter.type2(Settings.getSetting('breedingTypeFilter2').value);
        BreedingController.filter.shinyStatus(Settings.getSetting('breedingShinyFilter').value);
        BreedingController.displayValue(Settings.getSetting('breedingDisplayFilter').value);
    }
    initialize() {
        this.hatchList[EggType.Fire] = [
            ['Revolmon', 'Agumon', 'Gabumon', 'Candmon'],
            ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
            ['Burpmon', 'Burpmon'],
            ['Burpmon'],
            ['Burpmon', 'Burpmon'],
            ['Burpmon'],
            ['Burpmon'],
            ['Burpmon', 'Burpmon'],
        ];
        this.hatchList[EggType.Water] = [
            ['Muchomon', 'Gururumon', 'Gomamon', 'Modoki Betamon'],
            ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
            ['Burpmon', 'Burpmon', 'Burpmon'],
            ['Burpmon', 'Burpmon', 'Burpmon'],
            ['Burpmon', 'Burpmon'],
            ['Burpmon'],
            ['Burpmon', 'Burpmon'],
            ['Burpmon', 'Burpmon'],
        ];
        this.hatchList[EggType.Plant] = [
            ['Tentomon', 'Palmon', 'Floramon', 'Dokugumon'],
            ['Burpmon', 'Burpmon', 'Burpmon'],
            ['Burpmon', 'Burpmon', 'Burpmon'],
            ['Burpmon', 'Burpmon', 'Burpmon'],
            ['Burpmon', 'Burpmon'],
            ['Burpmon'],
            ['Burpmon', 'Burpmon'],
            ['Burpmon', 'Burpmon'],
        ];
        this.hatchList[EggType.Earth] = [
            ['Tuchidarumon', 'Deltamon', 'Goburimon', 'Caprimon'],
            ['Burpmon'],
            ['Burpmon', 'Burpmon'],
            ['Burpmon'],
            ['Burpmon', 'Burpmon'],
            [],
            ['Burpmon'],
            ['Burpmon'],
        ];
        this.hatchList[EggType.Electric] = [
            ['Tekkamon', 'Hagurumon', 'Geremon', 'Kokuwamon'],
            ['Burpmon', 'Burpmon', 'Burpmon'],
            ['Burpmon', 'Burpmon', 'Burpmon'],
            ['Burpmon', 'Burpmon'],
            ['Burpmon'],
            [],
            [],
            ['Burpmon', 'Burpmon'],
        ];
        this.hatchList[EggType.Wind] = [
            ['Akatorimon', 'Piyomon', 'Patamon'],
            [],
            ['Burpmon', 'Burpmon', 'Burpmon'],
            ['Burpmon', 'Burpmon', 'Burpmon'],
            ['Burpmon', 'Burpmon', 'Burpmon'],
            ['Burpmon'],
            ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
            ['Burpmon', 'Burpmon', 'Burpmon'],
        ];
        BreedingController.initialize();
    }
    update(delta) {
    }
    canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItemType.Mystery_egg);
    }
    fromJSON(json) {
        var _a, _b;
        if (json == null) {
            return;
        }
        this.eggSlots = (_a = json['eggSlots']) !== null && _a !== void 0 ? _a : this.defaults.eggSlots;
        if (json['eggList'] == null) {
            this._eggList = this.defaults.eggList;
        }
        else {
            const saveEggList = json['eggList'];
            for (let i = 0; i < this._eggList.length; i++) {
                if (saveEggList[i] != null) {
                    const egg = new Egg(null, null, null);
                    egg.fromJSON(saveEggList[i]);
                    this._eggList[i](egg);
                }
            }
        }
        this.queueSlots((_b = json['queueSlots']) !== null && _b !== void 0 ? _b : this.defaults.queueSlots);
        this.queueList(json['queueList'] ? json['queueList'] : this.defaults.queueList);
        this.hatcheryHelpers.fromJSON(json.hatcheryHelpers || []);
    }
    toJSON() {
        return {
            eggList: this.eggList.map(egg => egg() === null ? new Egg() : egg().toJSON()),
            eggSlots: this.eggSlots,
            queueList: this.queueList(),
            queueSlots: this.queueSlots(),
            hatcheryHelpers: this.hatcheryHelpers.toJSON(),
        };
    }
    canBreedPokemon() {
        return App.game.party.hasMaxLevelPokemon() && (this.hasFreeEggSlot() || this.hasFreeQueueSlot());
    }
    hasFreeEggSlot() {
        let counter = 0;
        for (const egg of this._eggList) {
            if (!egg().isNone()) {
                counter++;
            }
        }
        return counter < this._eggSlots();
    }
    hasFreeQueueSlot() {
        const slots = this.queueSlots();
        return slots && this.queueList().length < slots;
    }
    gainEgg(e) {
        if (e.isNone()) {
            return false;
        }
        for (let i = 0; i < this._eggList.length; i++) {
            if (this._eggList[i]().isNone()) {
                this._eggList[i](e);
                return true;
            }
        }
        console.error(`Error: Could not place ${EggType[e.type]} Egg`);
        return false;
    }
    gainRandomEgg() {
        return this.gainEgg(this.createRandomEgg());
    }
    progressEggsBattle(route, region) {
        route = MapHelper.normalizeRoute(route, region);
        return this.progressEggs(+Math.sqrt(route).toFixed(2));
    }
    progressEggs(amount) {
        amount *= this.getStepMultiplier();
        amount = Math.round(amount);
        let index = this.eggList.length;
        while (index-- > 0) {
            const helper = this.hatcheryHelpers.hired()[index];
            if (helper) {
                continue;
            }
            const egg = this.eggList[index]();
            egg.addSteps(amount, this.multiplier);
            if (this.queueList().length && egg.progress() >= 100) {
                this.hatchPokemonEgg(index);
            }
        }
        this.hatcheryHelpers.addSteps(amount, this.multiplier);
    }
    getStepMultiplier() {
        return this.multiplier.getBonus('eggStep');
    }
    addPokemonToHatchery(pokemon) {
        // If they have a free eggslot, add the pokemon to the egg now
        if (this.hasFreeEggSlot()) {
            return this.gainPokemonEgg(pokemon);
        }
        // If they have a free queue, add the pokemon to the queue now
        if (this.hasFreeQueueSlot()) {
            return this.addToQueue(pokemon);
        }
        let message = 'You don\'t have any free egg slots';
        if (this.queueSlots()) {
            message += '<br/>Your queue is full';
        }
        Notifier.notify({
            message,
            type: NotificationConstants.NotificationOption.warning,
        });
        return false;
    }
    addToQueue(pokemon) {
        const queueSize = this.queueList().length;
        if (queueSize < this.queueSlots()) {
            pokemon.breeding = true;
            this.queueList.push(pokemon.name);
            return true;
        }
        return false;
    }
    removeFromQueue(index) {
        const queueSize = this.queueList().length;
        if (queueSize > index) {
            const pokemonName = this.queueList.splice(index, 1)[0];
            App.game.party._caughtPokemon().find(p => p.name == pokemonName).breeding = false;
            return true;
        }
        return false;
    }
    gainPokemonEgg(pokemon) {
        if (!this.hasFreeEggSlot()) {
            Notifier.notify({
                message: 'You don\'t have any free egg slots',
                type: NotificationConstants.NotificationOption.warning,
            });
            return false;
        }
        const egg = this.createEgg(pokemon.name);
        if (pokemon instanceof PartyPokemon) {
            pokemon.breeding = true;
        }
        return this.gainEgg(egg);
    }
    hatchPokemonEgg(index) {
        const egg = this._eggList[index]();
        const hatched = egg.hatch();
        if (hatched) {
            this._eggList[index](new Egg());
            this.moveEggs();
            if (this.queueList().length) {
                const nextEgg = this.createEgg(this.queueList.shift());
                this.gainEgg(nextEgg);
                if (!this.queueList().length) {
                    Notifier.notify({
                        message: 'Hatchery queue is empty',
                        type: NotificationConstants.NotificationOption.success,
                        timeout: 1e4,
                        sound: NotificationConstants.NotificationSound.Hatchery.empty_queue,
                        setting: NotificationConstants.NotificationSetting.Hatchery.empty_queue,
                    });
                }
            }
        }
    }
    moveEggs() {
        const tempEggList = App.game.breeding._eggList.filter(egg => egg().type != EggType.None);
        this._eggList.forEach((egg, index) => {
            egg(tempEggList[index] ? tempEggList[index]() : new Egg());
        });
    }
    createEgg(pokemonName, type = EggType.Pokemon) {
        const dataPokemon = PokemonHelper.getPokemonByName(pokemonName);
        return new Egg(type, this.getSteps(dataPokemon.eggCycles), pokemonName);
    }
    createTypedEgg(type) {
        const hatchList = this.hatchList[type];
        const hatchable = hatchList.slice(0, player.highestRegion() + 1).filter(list => list.length);
        // highest region has 1/ratio chance, next highest has 1/(ratio ^ 2), etc.
        // Leftover is given to Kanto, making Kanto and Johto equal chance
        const ratio = 2;
        const possibleHatches = GameConstants.expRandomElement(hatchable, ratio);
        const pokemon = Rand.fromArray(possibleHatches);
        return this.createEgg(pokemon, type);
    }
    createRandomEgg() {
        const type = +Rand.fromArray(Object.keys(this.hatchList));
        const egg = this.createTypedEgg(type);
        egg.type = EggType.Mystery;
        return egg;
    }
    createFossilEgg(fossil) {
        const pokemonName = GameConstants.FossilToPokemon[fossil];
        const pokemonNativeRegion = PokemonHelper.calcNativeRegion(pokemonName);
        if (pokemonNativeRegion > player.highestRegion()) {
            Notifier.notify({
                message: 'You must progress further before you can uncover this fossil Digimon!',
                type: NotificationConstants.NotificationOption.warning,
                timeout: 5e3,
            });
            return new Egg();
        }
        return this.createEgg(pokemonName, EggType.Fossil);
    }
    getSteps(eggCycles) {
        if (eggCycles === undefined) {
            return 500;
        }
        else {
            return eggCycles * 40;
        }
    }
    calculateBaseForm(pokemonName) {
        const devolution = pokemonBabyPrevolutionMap[pokemonName];
        // Base form of Pokemon depends on which regions players unlocked
        if (!devolution || PokemonHelper.calcNativeRegion(devolution) > player.highestRegion()) {
            // No devolutions at all
            // No further devolutions in current unlocked regions
            return pokemonName;
        }
        else {
            // Recurse onto its devolution
            return this.calculateBaseForm(devolution);
        }
    }
    getEggSlotCost(slot) {
        return 500 * slot;
    }
    buyEggSlot() {
        const cost = this.nextEggSlotCost();
        if (App.game.wallet.loseAmount(cost)) {
            this.gainEggSlot();
        }
    }
    nextEggSlotCost() {
        return new Amount(this.getEggSlotCost(this.eggSlots + 1), Currency.farmPoint);
    }
    // Knockout getters/setters
    get eggSlots() {
        return this._eggSlots();
    }
    set eggSlots(value) {
        this._eggSlots(value);
    }
    gainEggSlot() {
        if (this.eggSlots === this.eggList.length) {
            console.error('Cannot gain another eggslot.');
            return;
        }
        this.eggSlots += 1;
    }
    gainQueueSlot(amt = 1) {
        GameHelper.incrementObservable(this.queueSlots, amt);
    }
    queueSlotsGainedFromRegion(region) {
        // bewtween 4 → 32 queue slots gained when completing a region
        return Math.min(32, Math.max(4, 4 * Math.pow(2, region - 1)));
    }
    get eggList() {
        return this._eggList;
    }
    set eggList(value) {
        this._eggList = value;
    }
    getAllCaughtStatus() {
        return GameHelper.enumNumbers(EggType).reduce((status, type) => {
            return this.hatchList[type]
                ? Math.min(status, this.getTypeCaughtStatus(type))
                : status;
        }, CaughtStatus.CaughtShiny);
    }
    getTypeCaughtStatus(type) {
        const hatchList = this.hatchList[type];
        if (!hatchList) {
            return CaughtStatus.NotCaught;
        }
        const hatchable = hatchList.slice(0, player.highestRegion() + 1).flat();
        return hatchable.reduce((status, pname) => {
            return Math.min(status, PartyController.getCaughtStatusByName(pname));
        }, CaughtStatus.CaughtShiny);
    }
    checkCloseModal() {
        if (Settings.getSetting('hideHatchery').value == 'queue' && !this.hasFreeEggSlot() && !this.hasFreeQueueSlot()) {
            $('#breedingModal').modal('hide');
        }
        if (Settings.getSetting('hideHatchery').value == 'egg' && !this.hasFreeEggSlot()) {
            $('#breedingModal').modal('hide');
        }
    }
}
///<reference path="../../declarations/enums/CaughtStatus.d.ts"/>
/// <reference path="../../declarations/breeding/EggType.d.ts" />
class BreedingController {
    static initialize() { }
    static openBreedingModal() {
        if (App.game.breeding.canAccess()) {
            $('#breedingModal').modal('show');
        }
        else {
            Notifier.notify({
                message: 'You do not have access to the Day Care yet.\n<i>Clear route 5 first</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static getEggImage(egg) {
        let eggType = EggType[egg.type].toLowerCase();
        if (eggType == 'pokemon') {
            const dataPokemon = PokemonHelper.getPokemonByName(egg.pokemon);
            eggType = String(PokemonType[dataPokemon.type1]).toLowerCase();
        }
        else if (eggType == 'fossil') {
            eggType = GameConstants.PokemonToFossil[egg.pokemon];
        }
        return `assets/images/breeding/${eggType}.png`;
    }
    static getEggCssClass(egg) {
        const animationType = Settings.getSetting('eggAnimation').observableValue();
        if (animationType === 'none') {
            return '';
        }
        if (egg.progress() >= 100) {
            return 'hatching';
        }
        return (animationType === 'almost' && egg.stepsRemaining() <= 50) ? 'hatchingSoon' : '';
    }
    static getEggSpots(pokemonName) {
        const pokemon = pokemonMap[pokemonName];
        const seed = pokemon.id * pokemon.type.reduce((a, b) => a * (b + 1), 1);
        SeededRand.seed(seed);
        SeededRand.seed(SeededRand.intBetween(0, 1000));
        return SeededRand.fromArray(this.spotTypes);
    }
    static visible(partyPokemon) {
        return ko.pureComputed(() => {
            // Only breedable Pokemon
            if (partyPokemon.breeding || partyPokemon.level < 100) {
                return false;
            }
            if (!BreedingController.filter.search().test(partyPokemon.name)) {
                return false;
            }
            // Check based on category
            if (BreedingController.filter.category() >= 0) {
                if (partyPokemon.category !== BreedingController.filter.category()) {
                    return false;
                }
            }
            // Check based on shiny status
            if (BreedingController.filter.shinyStatus() >= 0) {
                if (+partyPokemon.shiny !== BreedingController.filter.shinyStatus()) {
                    return false;
                }
            }
            // Check based on native region
            if (BreedingController.filter.region() > -2) {
                if (PokemonHelper.calcNativeRegion(partyPokemon.name) !== BreedingController.filter.region()) {
                    return false;
                }
            }
            // Check if either of the types match
            const type1 = BreedingController.filter.type1() > -2 ? BreedingController.filter.type1() : null;
            const type2 = BreedingController.filter.type2() > -2 ? BreedingController.filter.type2() : null;
            if (type1 !== null || type2 !== null) {
                const { type: types } = pokemonMap[partyPokemon.name];
                if ([type1, type2].includes(PokemonType.None)) {
                    const type = (type1 == PokemonType.None) ? type2 : type1;
                    if (!BreedingController.isPureType(partyPokemon, type)) {
                        return false;
                    }
                }
                else if ((type1 !== null && !types.includes(type1)) || (type2 !== null && !types.includes(type2))) {
                    return false;
                }
            }
            return true;
        });
    }
    static isPureType(pokemon, type) {
        const pokemonData = pokemonMap[pokemon.name];
        return ((type == null || pokemonData.type[0] === type) && (pokemonData.type[1] == undefined || pokemonData.type[1] == PokemonType.None));
    }
    static getDisplayValue(pokemon) {
        const pokemonData = pokemonMap[pokemon.name];
        switch (this.displayValue()) {
            case 'attack': return `Attack: ${pokemon.attack.toLocaleString('en-US')}`;
            case 'attackBonus': return `Attack Bonus: ${Math.floor(pokemon.baseAttack * (GameConstants.BREEDING_ATTACK_BONUS / 100) + pokemon.proteinsUsed()).toLocaleString('en-US')}`;
            case 'baseAttack': return `Base Attack: ${pokemon.baseAttack.toLocaleString('en-US')}`;
            case 'eggSteps': return `Egg Steps: ${App.game.breeding.getSteps(pokemonData.eggCycles).toLocaleString('en-US')}`;
            case 'timesHatched': return `Hatches: ${App.game.statistics.digimonHatched[pokemonData.id]().toLocaleString('en-US')}`;
            case 'breedingEfficiency': return `Efficiency: ${((pokemon.baseAttack * (GameConstants.BREEDING_ATTACK_BONUS / 100) + pokemon.proteinsUsed()) / pokemonMap[pokemon.name].eggCycles).toLocaleString('en-US', { maximumSignificantDigits: 2 })}`;
            case 'stepsPerAttack': return `Steps/Att: ${(App.game.breeding.getSteps(pokemonMap[pokemon.name].eggCycles) / (pokemon.baseAttack * (GameConstants.BREEDING_ATTACK_BONUS / 100) + pokemon.proteinsUsed())).toLocaleString('en-US', { maximumSignificantDigits: 2 })}`;
            case 'dexId': return `#${pokemon.id <= 0 ? '???' : Math.floor(pokemon.id).toString().padStart(3, '0')}`;
            case 'protiens': return `Proteins: ${pokemon.proteinsUsed()}`;
        }
    }
}
BreedingController.spotTypes = [
    `<g class="egg-spot">
          <path d="M33.5 104.3c4.4 4.9 9.3 7.3 6.7 9.6-2.6 2.4-8.3.4-12.7-4.4-4.5-4.9-6-10.8-3.4-13.2 2.6-2.3 5 3.2 9.4 8zm59.7 0c-4.5 4.9-9.4 7.3-6.8 9.6 2.6 2.4 8.4.4 12.8-4.4 4.4-4.9 6-10.8 3.3-13.2-2.6-2.3-4.9 3.2-9.3 8zm-1.6-14.8c-6.2 13.5-19 21-28.6 16.6-9.5-4.4-5-12.4 1.2-26 6.3-13.5 12-27.6 21.5-23.2 9.5 4.4 12.2 19 6 32.6zM74.29 37.558C66.497 46.286 70.6 55.4 62.4 55.4c-8.2 0-14.6-6.6-14.6-14.7S54.3 26 62.4 26c5.593.02 15.797 6.422 11.89 11.558z"/>
          <circle cx="35" cy="38" r="3"/>
          <circle cx="46" cy="23" r="1"/>
          <circle cx="40" cy="56" r="2"/>
          <circle cx="67" cy="113" r="2"/>
          <circle cx="59" cy="111" r="2"/>
          <circle cx="83" cy="30" r="3"/>
          <circle cx="93" cy="45" r="3"/>
          <circle cx="44" cy="91" r="4"/>
        </g>`,
    '<path class="egg-spot" fill-rule="evenodd" d="M46.23 117.564l-11.834-9.568-6.735 1.996-2.792-3.385-1.678-3.128 2.058-5.37-8.622-12.541 15.198.785 9.263-12.074 3.95 14.696 14.345 5.078-12.757 8.298zM94.642 78.967L87.3 82.332l-1.462 8.113-5.387-6.125-7.972 1.081 4.012-7.15-3.465-7.445 7.867 1.706 5.83-5.682.85 8.204zM64.436 58.62l-1.438 3.7 2.234 3.282-3.963-.223-2.431 3.139-1.013-3.839-3.736-1.342 3.338-2.15.121-3.967 3.076 2.51zM72.93 124.108l-12.863-7.728 15.24-6.015L78.995 94.4l10.43 12.637 12.201-1.068c-1.781 5.64-18.87 17.67-28.696 18.14zM23.89 37.914l8.54 4.054 8.181-4.736-1.217 9.375 7.032 6.317-9.291 1.74-3.835 8.64-4.526-8.3-9.402-.978 6.495-6.868zM80.06 61.697L76.364 38.23l-21.428-10.26 21.178-10.767L77.63 6.191c14.44 11.002 20.165 23.604 27.66 39.708l-8.85-1.41z"/>',
    '<path class="egg-spot" d="M40.95 26.323l5.938 11.344 5.318-11.344 5.943 11.344 5.314-11.344 5.947 11.344 5.31-11.344 5.95 11.344 5.306-11.344 5.956 11.344 5.3-11.344C93.314 22.008 77.276 1.254 62.799 1.35c-14.462.096-28.375 19.679-33.106 24.972l5.934 11.344zM85.875 115.645L79.937 104.3l-5.318 11.344-5.943-11.344-5.313 11.344-5.948-11.344-5.309 11.344-5.952-11.344-5.304 11.344-5.957-11.344-3.883 8.31 22.214 12.35 19.498-.032 23.073-11.84-4.597-8.788zM14.966 70.986l15.998-12 15.998 12 15.998-12 15.998 12 15.998-12 15.998 12 .064 15.418-16-12-16 12-16-12-16 12-16-12-16 12z"/>',
    '<path class="egg-spot" fill-rule="evenodd" d="M25.319 37.719s23.67-2.3 36.36-2.304c12.688-.003 39.727 2.239 39.727 2.239l5.453 14.088s-30.455-1.188-45.019-1.177c-14.564.01-42.364 1.242-42.364 1.242zM16.49 65.635s29.952 1.066 45.587 1.08c15.635.012 47.726-1.08 47.726-1.08l1.666 14.412s-33.12 2.575-49.154 2.575c-16.036 0-47.059-2.575-47.059-2.575zM18.827 94.849s28.351 2.626 43.196 2.637c14.845.01 45.875-2.572 45.875-2.572l-9.141 14.4s-25.023 3.322-36.917 3.329c-11.895.007-34.261-3.394-34.261-3.394zM40.886 13.262s13.83-1.689 21.343-1.7c7.513-.01 23.734 1.635 23.734 1.635l9.106 12.087s-22-1.805-32.625-1.794c-10.625.01-31.125 1.86-31.125 1.86z"/>',
    `<g class="egg-spot" transform="matrix(.23639 0 0 .224 -1.683 1.746)">
          <ellipse cx="235.48" cy="166.231" rx="14.106" ry="11.187"/>
          <ellipse cx="259.807" cy="181.801" rx="6.322" ry="5.355"/>
          <ellipse cx="200.449" cy="66.977" rx="8.268" ry="7.295"/>
          <ellipse cx="221.857" cy="79.144" rx="5.355" ry="2.919"/>
          <ellipse cx="328.405" cy="81.573" rx="8.758" ry="10.22"/>
          <ellipse cx="399.925" cy="198.343" rx="8.273" ry="7.301"/>
          <path d="M215.529 262.077c8.599 0 15.569-5.881 15.569-13.134 0-4.235-2.412-7.956-6.096-10.361-2.631-1.714-5.887-2.779-9.474-2.779-2.307 0-4.48.447-6.444 1.212-5.374 2.068-9.119 6.616-9.119 11.928-.006 7.252 6.965 13.134 15.564 13.134z"/>
          <ellipse cx="234.507" cy="275.7" rx="7.295" ry="6.812"/>
          <ellipse cx="325.487" cy="272.291" rx="12.65" ry="13.133"/>
          <ellipse cx="356.136" cy="280.075" rx="5.355" ry="4.376"/>
          <ellipse cx="306.024" cy="354.519" rx="13.623" ry="11.677"/>
          <ellipse cx="336.19" cy="376.41" rx="4.865" ry="6.328"/>
          <ellipse cx="244.238" cy="370.088" rx="7.295" ry="4.865"/>
          <ellipse cx="229.635" cy="400.254" rx="14.106" ry="12.65"/>
          <ellipse cx="121.146" cy="333.595" rx="6.812" ry="8.274"/>
          <ellipse cx="93.41" cy="333.595" rx="10.214" ry="14.106"/>
          <ellipse cx="218.448" cy="493.663" rx="14.596" ry="11.677"/>
          <ellipse cx="247.157" cy="509.722" rx="6.328" ry="5.349"/>
          <ellipse cx="335.7" cy="478.095" rx="10.221" ry="10.704"/>
          <path d="M272.53 552.049c116.903-2.87 202.886-90.113 207.546-204.955 2.416-59.518-16.62-146.823-53.094-216.254C401.308 81.977 347.556 0 276.025 0c-71.531 0-125.283 81.977-150.956 130.839-36.475 69.425-60.944 155.615-57.69 215.094 6.214 113.614 86.339 209.032 205.15 206.116zm-50.15-4.936c-.852-.22-1.727-.379-2.57-.605 5.868.855 11.976 2.037 18.365 2.57-5.47-.459-10.704-1.219-15.796-1.965zm123.297-10.408c-21.721 5.258-45.635 14.338-72.85 14.338 27.252 0 51.192-9.092 72.936-14.367a.321.321 0 00-.086.029zm17.765-6.816c-26.225 8.391-56.087 18.797-90.634 18.797-11.065 0-22.577-.6-34.51-1.604 11.933 1.004 23.444 1.488 34.51 1.488 35.557 0 66.204-10.769 92.948-19.625-.753.342-1.554.606-2.314.944zm-87.029 15.658c-10.667 0-21.108-.783-31.279-2.27 69.291-1.897 126.082-26.944 169.27-56.278-35.643 32.853-83.755 58.548-137.99 58.548zm-76.2-508.09c21.586 15.972 49.489 25.922 68.7 25.922 28.218 0 51.095-11.604 60.466-18.299 6.07-4.333 9.384-15.542 7.677-19.122 13.213 9.284 28.287 24.993 43.146 43.69-1.033 13.395-13.456 30.249-32.341 35.757a197.78 197.78 0 01-27.932 6.138c-27.615-1.273-69.175-8.256-107.841-24.866-10.349-4.449-27.368-12.98-38.47-19.98 9.28-11.175 17.924-21.897 26.596-29.24zm-35.315 40.31c.594-.79 1.188-1.615 1.781-2.386.637-.826 1.267-1.61 1.897-2.417 1.01-1.291 2.02-2.588 3.023-3.825 40.38 25.47 94.927 40.054 130.411 44.032 6.426.722 12.418 1.193 17.846 1.438 3.225.147 6.303.233 9.1.233 2.791 0 5.332-.074 7.65-.208a82.138 82.138 0 005.422-.465c6.279-.783 11.316-1.114 15.252-1.114 20.434 0 10.984 8.898-9.412 8.898a277.836 277.836 0 01-37.314 2.54c-52.265 0-106.567-18.083-147.406-44.381.588-.796 1.17-1.567 1.75-2.344zm-37.095 60.851c.569.092 7.346 1.83 7.934 1.83 6.444 0 10.512-8.12 10.512-15.103 0-2.907-6.768-7.607-8.292-9.743 3.231-5.63 7.228-9.327 10.44-14.394 41.23 29.302 100.744 54.387 167.403 54.387 31.023 0 68.843-8.126 105.777-19.271 9.92 19.205 18.121 42.515 25.89 63.28-37.149 11.304-95.962 25.049-158.618 27.864-63.342-14.816-124.934-42.624-169.677-69.21 3.155-6.811 5.259-13.086 8.63-19.64zm-28.952 69.78c.679-1.927 1.334-3.85 2.038-5.77.71-1.94 1.457-3.874 2.185-5.808 4.553-12.081 9.48-24.064 14.792-35.747 42.896 25.435 100.992 51.713 159.866 66.774a526.97 526.97 0 0021.99 5.147 504.921 504.921 0 0022.938 4.266c24.002 3.893 48.709 6.108 73.898 6.108 20.043 0 40.369-1.389 60.863-4.394 5.803 19.572 10.387 38.862 13.508 57.099-31.494 10.992-92.578 29.059-164.824 33.826-36.897-5.275-71.108-15.6-102.442-30.912 37.546 12.73 80.044 19.994 129.45 22.59.936.049 1.818.072 2.625.072 3.012 0 5.416-.324 7.16-.961 3.562-1.303 3.947-3.77 3.947-4.768 0-5.984-11.504-9.217-22.332-9.217-1.621 0-137.785-3.39-226.127-96.994.153-.441.312-.875.465-1.31zm-4.174 12.229c.208-.631.404-1.261.618-1.897.177-.532.336-1.06.514-1.591a509.278 509.278 0 011.512-4.413c84.309 88.055 211.649 97.032 227.192 97.032 18.539 0 26.482 8.824 11.225 8.824-.764 0-1.584-.023-2.467-.066-60.924-3.207-109.773-13.691-150.533-30.748a294.285 294.285 0 01-8.366-3.635 312.484 312.484 0 01-12.748-6.162c-24.413-12.461-50.851-29.614-70.196-47.234 1.034-3.366 2.135-6.732 3.249-10.11zM76.323 346.514c0-16.535-6.44-35.287-2.806-55.172.098-.525.184-1.047.282-1.572-8.058-1.359.288-1.604.288-1.604 3.22-16.873 11.037-36.578 16.44-54.43 25.968 23.415 59.353 43.69 91.507 57.153 30.674 17.854 66.904 32.033 109.665 39.762 2.252.41 4.498.826 6.787 1.201 2.484.402 5.031.74 7.559 1.102 18.744 2.654 38.611 4.174 59.822 4.174 33.115 0 69.314-3.514 108.9-11.336.348 4.15.586 8.195.734 12.148-41.365 50.361-81.941 83.637-144.17 102.584-84.823-2.504-185.466-20.049-254.396-79.113-.361-4.921-.612-9.872-.612-14.897zm53.581 82.933s-5.539 32.393 74.542 32.393c8.789 0 18.611-.393 29.578-1.256 37.864-2.986 69.646-8.646 97.228-17.006 1.525-.459 3.055-.918 4.555-1.396 1.475-.471 2.912-.967 4.363-1.449 58.066-19.5 97.039-51.941 135.459-98.146.025 1.303.1 2.656.1 3.934 0 32.027-7.705 61.965-21.385 88.307-.281.539-.557 1.076-.844 1.615-.287.545-.562 1.102-.857 1.646-7 12.863-15.471 24.799-25.184 35.668-48.996 38.732-116.632 66.636-193.64 66.636-1.48 0-2.999-.072-4.492-.084-40.839-9.223-76.839-35.965-103.381-65.041-5.314-24.291 3.958-45.821 3.958-45.821z"/>
        </g>`,
    `<g class="egg-spot" transform="matrix(.23247 0 0 .22628 -1.175 1.165)">
          <ellipse cx="235.48" cy="166.231" rx="14.106" ry="11.187"/>
          <ellipse cx="259.807" cy="181.801" rx="6.322" ry="5.355"/>
          <ellipse cx="200.449" cy="66.977" rx="8.268" ry="7.295"/>
          <ellipse cx="221.857" cy="79.144" rx="5.355" ry="2.919"/>
          <ellipse cx="328.405" cy="81.573" rx="8.758" ry="10.22"/>
          <ellipse cx="399.925" cy="198.343" rx="8.273" ry="7.301"/>
          <path d="M215.529 262.077c8.599 0 15.569-5.881 15.569-13.134 0-4.235-2.412-7.956-6.096-10.361-2.631-1.714-5.887-2.779-9.474-2.779-2.307 0-4.48.447-6.444 1.212-5.374 2.068-9.119 6.616-9.119 11.928-.006 7.252 6.965 13.134 15.564 13.134z"/>
          <ellipse cx="234.507" cy="275.7" rx="7.295" ry="6.812"/>
          <ellipse cx="325.487" cy="272.291" rx="12.65" ry="13.133"/>
          <ellipse cx="356.136" cy="280.075" rx="5.355" ry="4.376"/>
          <ellipse cx="306.024" cy="354.519" rx="13.623" ry="11.677"/>
          <ellipse cx="336.19" cy="376.41" rx="4.865" ry="6.328"/>
          <ellipse cx="244.238" cy="370.088" rx="7.295" ry="4.865"/>
          <ellipse cx="229.635" cy="400.254" rx="14.106" ry="12.65"/>
          <ellipse cx="121.146" cy="333.595" rx="6.812" ry="8.274"/>
          <ellipse cx="93.41" cy="333.595" rx="10.214" ry="14.106"/>
          <ellipse cx="218.448" cy="493.663" rx="14.596" ry="11.677"/>
          <ellipse cx="247.157" cy="509.722" rx="6.328" ry="5.349"/>
          <ellipse cx="335.7" cy="478.095" rx="10.221" ry="10.704"/>
          <path d="M274.533 549.808c118.845 0 206.087-107.5 211.94-203.176 3.639-59.455-23.017-146.361-59.491-215.792C401.308 81.977 347.556 0 276.025 0c-71.531 0-125.283 81.977-150.956 130.839-36.475 69.425-60.982 155.532-57.577 215.007 5.032 87.901 88.197 203.962 207.04 203.962zm-52.542-8.433c-.851-.221-1.726-.379-2.57-.605 5.869.855 11.977 2.037 18.366 2.57-5.471-.459-10.704-1.219-15.796-1.965zm123.686-4.67c-21.721 5.258-46.023 8.6-73.238 8.6 27.252 0 51.58-3.354 73.324-8.629a.321.321 0 00-.086.029zm17.765-6.816c-26.225 8.391-56.475 13.059-91.022 13.059-11.065 0-22.577-.6-34.511-1.604 11.934 1.004 23.445 1.488 34.511 1.488 35.557 0 66.592-5.031 93.336-13.887-.753.342-1.554.606-2.314.944zm-87.417 17.344c-10.667 0-21.797-6.556-31.968-8.044 69.291-1.896 127.159-22.856 170.347-52.19-35.643 32.853-84.143 60.234-138.379 60.234zM202.857 38.629c21.585 15.973 46.845 24.75 66.056 24.75 28.218 0 51.095-11.604 60.466-18.299 6.07-4.333 11.471-14.077 9.764-17.657 13.213 9.284 27.51 22.534 42.37 41.23-1.034 13.396-14.767 31.244-33.652 36.752a197.78 197.78 0 01-27.932 6.138c-27.615-1.273-69.175-8.256-107.841-24.866-10.349-4.449-25.113-13.446-36.215-20.447 9.279-11.175 18.312-20.257 26.984-27.6zm-35.704 38.672c.594-.79 1.188-1.616 1.78-2.387.638-.826 1.268-1.609 1.898-2.417 1.01-1.29 2.02-2.588 3.023-3.825 40.379 25.471 92.672 40.521 128.156 44.499 6.426.722 12.418 1.193 17.846 1.438 3.225.147 6.303.233 9.1.233 2.791 0 5.332-.074 7.65-.208a82.138 82.138 0 005.422-.465c6.279-.783 11.316-1.114 15.252-1.114 20.434 0 10.984 8.898-9.412 8.898a277.836 277.836 0 01-37.314 2.54c-52.265 0-104.312-18.55-145.151-44.848.588-.796 1.169-1.567 1.75-2.344zM130.77 137.09c.57.092 1.132.19 1.72.19 6.444 0 11.677-5.66 11.677-12.644 0-2.907-.942-5.557-2.466-7.693 3.231-5.63 6.289-11.134 9.502-16.2 41.23 29.301 97.938 54.853 164.597 54.853 31.023 0 72.264-5.68 109.198-16.826 9.92 19.205 18.898 39.646 26.666 60.411-37.148 11.304-86.848 38.148-162.653 26.954-63.342-14.816-123.618-42.577-168.361-69.163 3.155-6.81 6.748-13.328 10.12-19.882zm-31.09 71.524c.678-1.928 1.333-3.85 2.037-5.77.71-1.94 1.457-3.875 2.185-5.809 4.553-12.08 10.13-25.565 15.442-37.248 42.896 25.435 99.514 53 158.388 68.061a526.97 526.97 0 0021.99 5.147 504.921 504.921 0 0022.938 4.266c24.002 3.893 48.709 6.108 73.898 6.108 20.043 0 47.024-2.556 67.518-5.561 5.803 19.572 10.387 38.862 13.508 57.099-31.494 10.992-99.233 30.226-171.479 34.993-36.897-5.275-71.108-15.6-102.442-30.912 37.546 12.73 80.044 19.994 129.45 22.59.936.049 1.818.072 2.625.072 3.012 0 5.416-.324 7.16-.961 3.562-1.303 3.947-3.77 3.947-4.768 0-5.984-11.504-9.217-22.332-9.217-1.621 0-136.957-3.175-225.299-96.78.153-.44.312-.875.465-1.31zm-4.175 12.228c.208-.63.404-1.26.618-1.897.177-.532.336-1.059.514-1.59a509.278 509.278 0 011.512-4.414c84.31 88.055 210.821 96.818 226.364 96.818 18.539 0 26.482 8.824 11.225 8.824-.764 0-1.584-.023-2.467-.066-60.924-3.207-109.773-13.691-150.533-30.748a294.285 294.285 0 01-8.366-3.635 312.484 312.484 0 01-12.748-6.162c-24.413-12.461-50.023-29.4-69.368-47.02 1.034-3.366 2.135-6.732 3.25-10.11zM76.323 346.514c-.26-38.552 4.085-75.637 15.033-112.564 25.967 23.415 58.524 43.476 90.678 56.939 30.674 17.854 66.904 32.033 109.665 39.762 2.252.41 4.498.826 6.787 1.201 2.484.402 5.031.74 7.559 1.102 18.744 2.654 38.611 4.174 59.822 4.174 33.115 0 73.79-3.514 113.377-11.336.348 4.15-.677 8.195-.529 12.148-41.365 50.361-85.155 83.637-147.384 102.584-84.823-2.504-185.466-20.049-254.396-79.113-.361-4.921-.612-9.872-.612-14.897zM204.446 461.84c8.789 0 18.611-.393 29.578-1.256 37.864-2.986 69.646-8.646 97.228-17.006 1.525-.459 3.055-.918 4.555-1.396 1.475-.471 2.912-.967 4.363-1.449 58.066-19.5 100.253-51.941 138.673-98.146.025 1.303.1 2.656.1 3.934 0 32.027-10.919 61.965-24.599 88.307-.281.539-.557 1.076-.844 1.615-.287.545-.562 1.102-.857 1.646-7 12.863-15.471 24.799-25.184 35.668-48.996 38.732-117.709 62.549-194.717 62.549-1.48 0-2.999-.072-4.492-.084-40.839-9.223-75.762-31.878-102.304-60.954-2.38-29.645 73.993-13.431 78.5-13.428z"/>
        </g>`,
    `<g class="egg-spot">
          <path d="M38.755 40.315s2.728 2.396.637 4.348c-2.093 1.952-4.273-1.065-3.455-3.993.818-2.927 1.455-4.435 1.455-4.435-6.002 1.952-2.092 14.639 2.546 9.228 4.639-5.414-1.183-5.148-1.183-5.148zM79.225 38.807c-2.183-1.331-5.73.266-6.91 3.815-1.183 3.55 1.545 7.72 5.365 5.945-4.548 0-3.911-7.452-.455-8.073 3.455-.621 1.546 1.774.455 3.195 3.819-.623 3.728-3.55 1.545-4.882zM52.852 57.794c-4.82 2.396-3.912 8.963 1.727 8.874.728.089 1.727 0-.091-.976-1.82-.977-5.456-4.172-.182-5.591 5.275-1.42 4.457.976 3.82 2.395-.636 1.421-.274 2.485-.274 2.485 4.094-3.636-.18-9.58-5-7.187zM35.21 105.708c2.91-2.04 4.637-.355 4.637-.355-1.364-4.527-6.639-3.463-7.184.887-.546 4.348 3.91 5.766 5.911 4.791 2.001-.976.728-.976-.636-.798-1.365.178-5.64-2.483-2.729-4.525zM84.83 100.197c-2.002.975-.729.975.636.798 1.363-.177 5.638 2.485 2.728 4.525-2.911 2.04-4.638.355-4.638.355 1.365 4.524 6.639 3.46 7.184-.888.545-4.346-3.91-5.767-5.91-4.79z"/>
          <path d="M63.245 2.434c-16.684 0-28.671 16.657-34.66 27.777-8.507 15.8-15.209 35.886-13.673 49.356 2.077 18.224 10.936 32.017 25.464 40.416.695.353 1.399.692 2.115 1.011.165.071.332.14.497.21.441.19.885.375 1.333.554 5.916 2.355 11.978 3.834 18.834 3.834s13.193-1.663 19.109-4.018c.448-.178.892-.364 1.333-.554.166-.07.333-.138.497-.21 16.87-7.367 27.395-23.951 27.67-41.612.212-13.555-4.799-33.189-13.307-48.988C92.467 19.09 79.93 2.434 63.245 2.434zm-1.571 4.787s-.364.088-1.456.088c-1.09 0-2.82 1.685-1.273 4.346 1.546 2.664 4.91.534 5.093-.798.18-1.331 1.182-.444 1.363 0 .183 2.928-5 5.59-7.639.975-2.636-4.613 2.366-7.718 3.912-4.611zm2.364 115.435c-4.365.443-4.274-4.436-.365-4.88 0 0-.636 1.953-.91 2.485-.273.532 1.273.978 1.273.978s4.367.973.002 1.417zm22.43-5.062c-9.392-.498-17.257-8.627-26.29-8.534-13.479.137-8.88 7.755-16.67 10.212-12.938-5.582-22.557-16.812-27.685-30.06.24.048.496.068.77.052C21.2 88.983 22.48 72.136 30.825 74.1c8.347 1.965.289 21.058 17.267 25.41 16.98 4.353 25.18-10.95 36.548-9.966 7.428.642 17.128 4.1 22.959 3.443-3.55 10.57-11.135 19.28-21.13 24.606zm-55.169-47.11c-2.91.709-5.274-.178-7.003-2.485-1.727-2.306 1.546-4.614 3.002-4.88 1.456-.266 1.09.621-.636 2.485-1.73 1.863-.185 4.88 4.637 4.88zm38.923 19.342c-.818.71-4.911 1.684-6.73-1.952-1.82-3.638 4.178-8.757 7.001-4.348.91 1.419 0 1.153-1.727 0s-3.82.976-3.82 3.283 3.002 3.815 5.276 3.017zm28.231-33.413c-7.914 3.65 11.08 18.812-1.583 22.323-12.663 3.51-8.2-13.337-16.98-15.162-8.777-1.824-15.828 17.27-27.915 14.32-12.088-2.948-3.022-17.689-9.497-22.463-6.475-4.773-6.475 2.667-13.094 2.106-3.236-.275-7.606-3.04-9.156-6.738 2.247-6.614 5.077-13.241 8.335-19.29.582-1.082 1.165-2.11 1.746-3.113.222-.062.438-.108.674-.2 6.475-2.528 9.914-15.163 18.98-12.496s-6.046 12.917-3.743 24.288c2.302 11.372 19.715 11.23 20.146-1.124.433-12.353-.72-23.444 6.187-23.866 6.906-.42 6.763 19.234 16.98 19.234 2.988 0 5.066-3.063 6.41-4.695 6.118 11.368 11.94 26.766 13.959 38.291-4.123-3.049-5.137-14.327-11.449-11.415z"/>
        </g>`,
    '<path class="egg-spot" d="M63.187.81c-16.35 0-28.638 17.91-34.506 29.08-8.338 15.87-15.439 35.786-14.545 49.374 1.585 24.082 21.885 46.908 49.051 46.908s48.447-20.638 48.447-46.984c0-13.617-5.603-33.43-13.94-49.299C91.825 18.72 79.538.81 63.187.81zM43.395 119.606c-8.1-6.974-22.392-21.252-27.463-42.637.15-3.515.64-7.385 1.43-11.456 5.82 35.759 43.511 53.595 45.002 58.597.012.038.03.166.037.202a2.366 2.366 0 00-.037-.158c-6.804-.112-13.203-1.912-18.916-4.503-.018-.017-.035-.03-.053-.045zm18.842 5.528h-.025c.014-.023.023-.05.034-.074l.039-.009c-.016.027-.031.056-.048.083zm15.6-3.056c-.027.022.165-.18.138-.157-3.628 1.153-7.616 1.95-11.614 2.205-.853.516-1.757.504-2.566.504-.55 0-1.054.256-1.466.367.012-.03.021-.062.031-.095.266-.07.577-.164.905-.27h.529c.808 0 1.712-.01 2.566-.527-1.05.067-2.104.025-3.175.025 1.07 0 2.126-.046 3.175-.113 3.35-2.024 5.867-6.731-1.72-13.988C53.75 99.61 25.183 86.386 19.335 57.154c1.945-7.1 5.007-15.489 8.222-22.33.474 13.783 6.85 30.937 20.844 43.844 23.427 21.603 38.053 36.2 29.437 43.41zm20.856-13.38c-2.655 3.047-6.636 6.11-10.063 8.35 4.215-4.44 6.055-12.33-3.546-22.698-14.001-15.122-44.24-35.282-48.722-58.802-.778-4.081-1.945-8.936-1.88-12.562C38.33 16.87 42.092 12.46 45.608 9.32c-2.034 6.805-.331 16.317 6.153 25.668 14.412 20.787 54.015 48.988 46.931 73.71zm12.181-28.905c0 5.667-2.418 10.897-4.343 15.835 1.655-13.69-8.246-27.115-28.73-50.28C61.483 26.892 53.8 13.244 55.201 4.086c2.129-.912 4.052-1.39 5.711-1.606 1.33 7.816 8.03 20.74 25.57 36.987 10.764 9.97 19.361 18.978 23.042 27.21.818 4.506 1.35 9.363 1.35 13.116zM84.522 23.227C75.65 13.732 70.421 7.511 67.518 2.86 77.088 5.35 86.306 10.386 96.8 30.36c1.493 2.841 3.572 7.47 4.868 10.505-4.263-5.295-11.59-11.692-17.147-17.639z"/>',
    '<path class="egg-spot" d="M63.3 1.17c-16.811 0-29.443 18.438-35.476 29.428-8.57 15.612-13.581 34.995-13.581 48.393 0 25.923 21.13 46.336 49.059 46.336 27.928 0 47.805-20.306 47.805-46.23 0-13.397-3.757-32.888-12.328-48.499C92.744 19.608 80.111 1.17 63.3 1.17zm0 1.395c6.121 0 13.698 4.2 18.553 8.237-14.646 5.785-30.725 5.456-39.9 2.528C47.42 7.986 55.968 2.565 63.3 2.565zm47.085 64.241c.663 3.545 1.089 6.91 1.231 9.97a44.156 44.156 0 010 4.575 43.287 43.287 0 01-1.029 7.455c-.57.238-1.135.464-1.7.691a41.637 41.637 0 01-8.002 15.886c-17.289 8.375-52.141 18.235-83.214-16.063a97.862 97.862 0 01-2.018-2.297 43.634 43.634 0 01-.728-7.917c0-.755.021-1.534.06-2.331.053-1.15.155-2.347.283-3.575l.165.13c-.114 1.18-.103 2.337-.103 3.446 0 .796-.06 1.576-.06 2.33 0 .755.06 1.502.06 2.245 0 1.934.156 3.825.496 5.674.67.786 1.257 1.552 1.93 2.297-.821-3.27-1.355-6.688-1.355-10.222 0-1.53-.45-3.042-.298-4.721 15.25 11.905 45.384 34.125 92.785 15.118.565-.227.956-.453 1.526-.691.548-2.409.856-4.897.856-7.455 0-.743.06-1.49.06-2.244 0-.754-.06-1.535-.06-2.33 0-3.042-.392-6.384-1.046-9.904.052-.023.11-.046.16-.067zm.606.532c-.03.01-.05.022-.08.033.001.011.003.02.006.032-11.602 4.596-53.088 16.484-95.096-1.188a102.18 102.18 0 011.3-5.71c27.63 7.305 55.476 9.174 89.87-8.396 1.748 5.208 3.109 10.377 4 15.229zM24.594 39.5a117.77 117.77 0 013.348-6.75c16.27 3.792 40.06 4.126 67.047-6.31a102.394 102.394 0 013.213 5.45c2.267 4.13 4.323 8.536 6.13 13.02-13.997 4.945-45.311 10.116-79.738-5.41z"/>',
    `<g class="egg-spot">
          <path d="M42.381 32.138c-1.862-.684-4.343 1.02-5.541 3.807-1.2 2.786-.661 5.6 1.2 6.284 1.86.684 4.343-1.02 5.542-3.807 1.198-2.786.661-5.6-1.2-6.284zM56.099 36.168c-2.133-.303-4.292 2.04-4.823 5.23-.53 3.19.767 6.023 2.899 6.326 2.132.303 4.291-2.039 4.822-5.229.531-3.19-.767-6.023-2.898-6.327zM86.034 32.138c-1.862.684-2.4 3.498-1.201 6.284 1.199 2.787 3.68 4.491 5.542 3.807 1.862-.684 2.4-3.498 1.201-6.284-1.199-2.787-3.68-4.491-5.542-3.807zM72.317 36.168c-2.131.304-3.43 3.135-2.898 6.327.531 3.19 2.69 5.532 4.822 5.229 2.133-.303 3.43-3.135 2.898-6.327-.53-3.191-2.69-5.532-4.822-5.229zM41.069 79.936c-1.976-.217-3.96 2.03-4.434 5.02-.473 2.991.744 5.59 2.719 5.807 1.974.217 3.96-2.03 4.433-5.02.474-2.99-.742-5.59-2.718-5.807zM27.883 71.405c-1.983-.135-3.869 2.194-4.212 5.202-.344 3.007.984 5.553 2.967 5.688 1.983.134 3.868-2.195 4.212-5.202.344-3.008-.986-5.554-2.967-5.688zM56.453 84.26c-2.153.084-3.842 2.773-3.775 6.006.068 3.233 1.868 5.785 4.02 5.7 2.154-.085 3.843-2.773 3.775-6.006-.067-3.233-1.867-5.786-4.02-5.7zM87.459 79.936c-1.975.217-3.192 2.818-2.719 5.807.474 2.989 2.46 5.237 4.434 5.02 1.976-.217 3.193-2.818 2.718-5.807-.473-2.99-2.457-5.237-4.433-5.02zM97.678 77.093c.344 3.007 2.229 5.336 4.212 5.202 1.983-.135 3.311-2.68 2.967-5.688-.344-3.008-2.23-5.337-4.212-5.202-1.982.134-3.31 2.68-2.967 5.688zM72.075 84.26c-2.153-.086-3.953 2.467-4.02 5.7-.068 3.233 1.62 5.921 3.774 6.006 2.153.085 3.953-2.467 4.02-5.7.069-3.233-1.621-5.923-3.774-6.007z"/>
          <path d="M63.527 1.075c-16.46 0-28.827 18.564-34.733 29.63a121.073 121.073 0 00-3.753 7.718c-.098.082-.189.223-.255.491l-.045.179c-6.096 13.884-9.971 29.262-9.971 40.435 0 26.102 21.416 46.63 48.757 46.546 24.775-.075 48.53-21.578 48.757-46.546.122-13.488-5.486-33.258-13.874-48.974C92.506 19.487 79.987 1.075 63.527 1.075zm.151 1.475c8.983 0 18.427 7.344 24.427 14.699-5.366 4.738-15.089 8.438-24.519 8.557-9.625.12-18.953-4.651-23.986-9.825 5.94-7.135 15.306-13.43 24.078-13.43zm-.151 121.446c-19.364 0-36.096-12.163-43.23-27.998 7.829 9.72 24.715 19.52 43.279 19.52 18.324 0 34.684-8.959 42.636-18.541-6.923 15.631-23.475 27.02-42.685 27.02zm38.72-61.7l4.153-8.472c.828 2.69 1.67 5.738 2.283 8.35-1.024 1.095-1.74 3.398-1.111 5.579.431 1.494 1.427 3.034 2.456 3.972.358 2.765.888 5.69.888 8.105 0 2.825-1.26 5.274-1.774 7.937-6.299 10.95-24.583 22.795-45.566 22.795-21.08 0-39.988-12.181-46.22-23.174-.494-2.616-1.066-5.09-1.066-7.86 0-2.465.197-5.147.57-7.974 1.037-.998 2.082-2.457 2.469-3.801.634-2.199-.097-4.592-1.14-5.68.817-3.487 1.39-7.455 2.588-11.056l5.832 11.279c.255.74 1.09 1.203 1.865 1.03l6.654-1.476c.776-.172 1.749.225 2.173.886l5.502 8.572a1.404 1.404 0 001.963.407l6.716-4.452c.66-.437 1.67-.365 2.258.162l9.448 8.472c.587.527 1.544.53 2.136.009l9.614-8.488c.591-.522 1.607-.593 2.27-.16l6.805 4.464c.661.434 1.544.25 1.97-.41l5.543-8.576c.427-.66 1.401-1.056 2.176-.884l6.678 1.478c.774.168 1.61-.293 1.867-1.034zm-3.808-9.601c-.26.74-1.102 1.225-1.885 1.084l-5.323-.96c-.782-.14-1.741.293-2.145.967l-3.702 6.215a1.47 1.47 0 01-1.977.517l-5.877-3.314c-.69-.39-1.733-.284-2.329.233l-9.799 8.491c-.595.517-1.56.513-2.151-.01l-9.586-8.47c-.591-.522-1.63-.63-2.32-.242l-5.877 3.315a1.47 1.47 0 01-1.977-.519l-3.703-6.215c-.401-.674-1.361-1.107-2.144-.966l-5.323.96c-.782.14-1.626-.345-1.885-1.084l-5.444-11.778c1.3-3.074 2.788-6.235 4.296-9.125.951-.747 2.414-1.285 2.958-2.184.69-1.14.56-2.948.627-4.167a87.66 87.66 0 014.47-6.606c4.794 6.135 15.033 11.683 26.24 11.683 10.768 0 21.55-4.456 26.875-10.219 1.226 1.679 2.134 3.594 3.168 5.239-.112 1.374.277 3.272 1.124 4.672.789 1.302 2.11 2.514 3.326 3.172a124.128 124.128 0 014.346 9.419z"/>
        </g>`,
    `<g class="egg-spot" transform="matrix(.23542 0 0 .22728 -.969 1.67)">
          <ellipse cx="269.74" cy="104.67" rx="11.897" ry="16.169"/>
          <ellipse cx="109.885" cy="255.069" rx="10.067" ry="10.374"/>
          <ellipse cx="173.031" cy="270.932" rx="10.979" ry="12.203"/>
          <circle cx="256.318" cy="279.782" r="13.728"/>
          <ellipse cx="328.926" cy="275.204" rx="11.285" ry="12.204"/>
          <ellipse cx="385.365" cy="263.301" rx="10.985" ry="10.679"/>
          <ellipse cx="443.633" cy="247.138" rx="10.68" ry="12.815"/>
          <ellipse cx="116.599" cy="426.215" rx="11.897" ry="15.557"/>
          <ellipse cx="218.185" cy="446.956" rx="13.421" ry="15.558"/>
          <ellipse cx="343.571" cy="439.33" rx="11.897" ry="15.258"/>
          <ellipse cx="443.333" cy="417.672" rx="7.932" ry="11.291"/>
          <path d="M273.057 0c-70.778 0-122.373 76.64-147.771 124.982-29.056 60.924-62.074 159.143-59.872 218.029 4.08 109.096 90.066 203.115 207.649 203.115 117.584 0 204.702-115.153 206.515-204.054 1.202-58.917-27.641-146.779-57.15-212.628C397.018 81.102 343.834 0 273.057 0zM129.543 128.091c4.976-9.474 11.077-20.276 18.165-31.45-.24 1.186-.404 2.422-.404 3.726 0 7.417 4.094 13.427 9.149 13.427 5.055 0 9.149-6.01 9.149-13.427s-4.094-13.42-9.15-13.42c-1.021 0-1.988.3-2.906.758 7.289-10.826 15.465-21.75 24.456-31.965 6.07 10.251 19.063 34.946 25.544 35.809 9.149 1.224 53.69-43.317 69.554-42.705 15.863.606 45.147 39.045 56.744 36.61 11.592-2.442 8.489-45.436 14.59-49.096.478-.288 1.322-.367 2.319-.361 13.115 11.157 25 24.547 35.472 38.427-1.12-.532-2.338-.845-3.616-.845-5.393 0-9.762 5.19-9.762 11.592 0 6.4 4.369 11.59 9.762 11.59 5.392 0 9.76-5.188 9.76-11.59 0-.961-.127-1.88-.311-2.772 11.842 16.708 21.615 33.586 28.966 47.583 1.542 2.938 3.035 5.942 4.535 8.94-1.824 6.892-4.37 12.339-8.177 12.76-10.985 1.225-53.642-24.117-64.622-22.287-10.98 1.83-64.063 57.351-75.661 57.962-11.591.606-59.187-54.303-72.002-55.527-12.815-1.218-50.643 45.766-61.622 44.548-4.737-.526-15.612-15.877-20.966-25.852 3.544-7.637 7.203-15.147 11.034-22.435zm342.379 208.564c.067 2.29.17 4.615.17 6.83 0 48.084-19.089 90.753-48.343 124.003-9.302-7.771-19.284-15.061-24.345-15.35-10.979-.605-57.963 58.576-70.166 60.404-12.209 1.83-44.541-42.1-54.915-42.1-10.373 0-50.031 42.713-61.01 43.324-10.986.605-57.357-59.799-66.506-61.01-4.798-.643-14.443 6.768-23.868 15.367-25.379-28.578-43.165-64.488-47.382-104.734 6.867-8.715 15.876-17.407 20.607-17.407 9.762 0 50.031 61.016 65.894 62.234 15.863 1.217 40.882-50.645 54.915-50.037 14.033.611 64.676 55.525 78.097 56.139 13.428.605 53.69-57.969 62.234-61.018 8.543-3.047 45.147 42.1 56.133 41.488 10.979-.611 39.657-65.895 46.977-67.111 2.73-.458 7.983 4.045 11.508 8.978zm-4.634-64.883c-151.226 66.99-317.58 37.062-390.5 5.71C81.41 254.867 88.098 231 96.44 207.26c34.223 13.317 97.021 30.722 175.443 30.722 78.097 0 140.277-20.323 174.708-36.835 8.67 23.733 15.685 47.742 20.698 70.625z"/>
        </g>`,
    '<path class="egg-spot" d="M61.892 123.597c-3.004 0-3.004-6.067 0-6.067 4.507 0 4.507 6.067 0 6.067zM107.53 98.87c-5.809 5.263-12.104 9.592-19.742 12.159-1.843.618-2.627-2.31-.8-2.926 8.99-3.02 16.267-8.508 22.483-15.45a45.794 45.794 0 01-1.94 6.217zm2.594-29.112c.75 4.411 1.16 8.57 1.16 12.273 0 1.306-.066 2.592-.168 3.868-8.319 12.886-22.583 21.18-39.21 21.264-4.843.024-4.84-7.56 0-7.585 18.545-.095 33.88-12.313 38.218-29.82zm-7.511-26.22a144.69 144.69 0 012.95 8.16c-16.047 17.408-41.682 21.95-63.335 10.126-4.262-2.327-.47-8.875 3.791-6.548 19.716 10.766 43.202 5.612 56.594-11.738zm-12.18 33.292c-3.004 0-3.004-6.068 0-6.068 4.506 0 4.506 6.068 0 6.068zm-10.515 5.057c-3.004 0-3.004-6.067 0-6.067 4.507 0 4.507 6.067 0 6.067zm-13.52 1.516c-3.004 0-3.004-6.067 0-6.067 4.507 0 4.507 6.067 0 6.067zm13.52-38.93c4.506 0 4.506 6.066 0 6.066-3.004 0-3.004-6.067 0-6.067zm.374-36.032a51.532 51.532 0 014.284 4.256c-2.857 2.724-6.423 4.643-10.363 5.415-3.785.742-5.399-5.105-1.597-5.85 2.965-.58 5.569-1.878 7.676-3.821zm-.374 20.863c-4.506 0-4.506-6.066 0-6.066 3.004 0 3.004 6.066 0 6.066zM50.761 5.183c.696.196 1.399.37 2.111.513 3.207.639 16.318 2.212 19.47-2.56.85.392 1.68.827 2.486 1.304-2.084 3.173-6.677 4.57-10.83 4.925-5.653.482-11.02-.308-16.122-2.08a36.332 36.332 0 012.885-2.102zM61.892 19.95c-4.506 0-4.506-6.067 0-6.067 3.005 0 3.005 6.067 0 6.067zM39.51 15.902c8.533 6.87 18.806 9.936 29.71 8.974 2.788-.246 2.765 4.306 0 4.55-11.863 1.047-23.088-2.501-32.37-9.953a78.876 78.876 0 012.66-3.57zm-5.613 8.049c14.332 10.682 32.796 13.816 49.991 8.403 2.782-.876 3.963 3.517 1.2 4.388-18.404 5.794-38.091 2.339-53.491-8.898a105.886 105.886 0 012.3-3.893zm-4.62 8.25C40.312 40.972 53.68 45.351 67.91 44.904c3.877-.121 3.865 5.946 0 6.067-15.125.475-29.417-4.173-41.3-13.203.85-1.897 1.745-3.751 2.667-5.569zm-9.47 24.081c8.081 10.025 21.692 14.659 34.08 17.295 1.895.403 1.253 3.367-.646 2.964-12.477-2.655-25.89-7.346-34.403-16.76.307-1.17.63-2.337.968-3.499zm-4.165 22.003C28.32 86.51 42.837 92.115 57.92 93.318c17.233 1.374 36.935-.255 44.503-18.59.734-1.778 3.643-1 2.898.807-6.955 16.85-23.091 21.609-39.99 21.202-17.816-.43-34.804-5.602-49.82-14.959.005-1.122.056-2.295.132-3.493zm27.813 32.91c2.59.438 2.67 3.27 1.269 4.844 2.773.652 5.578 1.201 8.4 1.726 2.046.38 1.176 3.587-.858 3.208-8.042-1.496-14.683-3.464-21.82-7.866-.427-.262-.82-.53-1.227-.796-4.75-5.365-10.392-11.288-12.237-18.466 6.58 8.788 15.15 15.434 26.473 17.35z"/>',
    '<path class="egg-spot" d="M105.568 53.032c.12.79.139 1.573.057 2.346-.148 1.372-.596 2.605-1.33 3.624-1.087 1.507-2.505 2.24-4.068 2.427a4.075 4.075 0 01-1.973-.26c-1.248-.478-2.195-1.325-2.966-2.466a7.18 7.18 0 01-1.224-3.64c-.04-.742.068-1.44.362-2.104.539-1.21 1.67-2.096 3.045-2.155.838-.034 1.648.238 2.376.867.496.427.871.97 1.138 1.596.093.22.16.445.175.683.05.748-.392 1.397-1.042 1.496-.614.094-1.24-.322-1.52-.986-.038-.09-.075-.183-.122-.267-.145-.265-.359-.396-.625-.4a.949.949 0 00-.45.101c-.425.217-.652.574-.65 1.105 0 .413.077.812.236 1.198.346.84.877 1.452 1.62 1.862.344.188.706.286 1.09.283.202-.001.396-.044.592-.097a3.297 3.297 0 001.312-.681c.656-.562 1.074-1.347 1.26-2.298.196-1.003.111-2.037-.22-3.06a6.478 6.478 0 00-.847-1.711c-.713-1.022-1.626-1.74-2.689-2.087-1.3-.422-2.504-.342-3.608.097-.32.128-.623.29-.906.483-.51.345-.932.777-1.31 1.256-.83 1.053-1.29 2.232-1.428 3.583-.118 1.146.013 2.238.323 3.348a9.94 9.94 0 00.61 1.626c.73 1.521 1.69 2.772 3.076 3.729a7.606 7.606 0 003.699 1.348c.569.052 1.147.02 1.728-.087a6.924 6.924 0 002.496-.99c1.89-1.209 3.316-3.157 3.958-5.76.05-.208.086-.42.124-.631.447 1.579.862 3.166 1.245 4.76-.377.694-.792 1.36-1.278 1.963-1.192 1.478-2.597 2.536-4.106 3.2-1.16.51-2.32.751-3.467.766a8.222 8.222 0 01-1.26-.08 9.1 9.1 0 01-1.18-.243c-.743-.207-1.446-.5-2.116-.864-1.57-.85-2.814-2.008-3.855-3.432a14.198 14.198 0 01-2.325-4.903 12.596 12.596 0 01-.284-1.438 12.575 12.575 0 01-.12-1.536 10.844 10.844 0 01.532-3.568 9.976 9.976 0 011.687-3.125c.694-.873 1.527-1.59 2.574-2.094a6.948 6.948 0 011.458-.509 7.574 7.574 0 012.823-.101 7.926 7.926 0 013.371 1.341c1.598 1.106 2.804 2.688 3.513 4.6.233.61.39 1.242.488 1.885zM48.65 7.772c.266-.6.718-1.236 1.346-1.87 3.46-2.352 6.607-3.61 9.276-4.227a23.43 23.43 0 018.17.136c2.372.462 4.368 1.268 5.86 2.248 2.758 1.841 3.191 3.704 1.836 4.426-.833.475-2.168.562-4.04.475-1.276-.057-2.645-.194-4.111-.33a18.632 18.632 0 01-1.534-.197c-1.596-.288-2.852-.796-2.824-1.423.025-.586 1.347-1.114 3.186-1.036.246.012.494.026.734.034.746.025 1.219-.057 1.436-.268.126-.125.162-.269.09-.429-.217-.486-.992-.935-2.457-1.191a14.09 14.09 0 00-3.482-.161c-2.54.202-4.403.91-5.56 1.79-.537.409-.799.814-.813 1.189-.008.198.09.37.203.54.276.415.753.758 1.454 1.05 1.17.488 2.722.77 4.563 1.075 1.941.323 3.92.631 5.982 1.029 1.236.238 2.437.493 3.619.75 2.304.502 4.264.991 5.955 1.14 2.058.188 3.45-.02 4.178-.962.208-.273.338-.61.378-1.008.034-.332-.005-.709-.102-1.112 1.994 1.807 4.058 3.992 6.169 6.63-.22.68-.583 1.198-1.059 1.544-.415.304-.907.473-1.468.539-.966.115-2.086-.076-3.387-.442-1.503-.42-3.151-1.048-5.067-1.759-2.84-1.046-5.779-2.005-9.07-2.695a61.427 61.427 0 00-3.181-.578 69.678 69.678 0 00-3.906-.476c-2.302-.218-4.432-.311-6.396-.484-2.89-.24-4.855-.654-5.865-1.861-.434-.516-.494-1.219-.113-2.085zm-5.43 3.907c.073.38.198.726.376 1.03.29.498.742.856 1.3 1.12.83.39 1.867.561 3.104.61 2.932.115 6.292-.201 10.177-.08a61.17 61.17 0 015.552.41c.879.108 1.754.24 2.626.397 1.103.198 2.189.43 3.27.718 1.391.374 2.758.832 4.092 1.37 1.052.424 2.067.893 3.047 1.332.645.288 1.28.594 1.907.918 2.325 1.193 4.318 2.495 6.15 3.4 1.693.841 3.127 1.226 4.433.96a3.874 3.874 0 001.219-.47c.429-.252.816-.615 1.155-1.098.171-.247.328-.53.47-.838a102.238 102.238 0 014.147 6.774c-.33.893-.707 1.689-1.122 2.343-.57.918-1.197 1.562-1.841 1.977-1.986.747-3.914.22-5.51-.773-1.49-1.131-2.963-2.8-4.696-4.584-1.41-1.462-2.94-2.888-4.64-4.116a35.453 35.453 0 00-4.584-2.8 26.92 26.92 0 00-5.41-2.058c-.802-.21-1.612-.39-2.428-.54a38.275 38.275 0 00-3.081-.438 41.428 41.428 0 00-2.88-.187c-3.51-.104-6.83.255-10.105.907-2.386.474-4.531 1.06-6.482 1.377-1.495.242-2.789.279-3.878-.116a3.492 3.492 0 01-1.092-.636 3.673 3.673 0 01-.579-.654c1.803-2.408 3.574-4.473 5.304-6.255zM34.52 22.85c.125.138.259.268.4.389.35.298.733.514 1.12.706a5.096 5.096 0 002.037.52 6.888 6.888 0 001.749-.143c.974-.198 1.998-.59 3.119-1.092 1.553-.698 3.204-1.565 5.01-2.321a30.323 30.323 0 014.813-1.598 19.387 19.387 0 011.793-.35c.762-.105 1.276.077 1.52.483.313.547-.075 1.271-.77 1.8a2.354 2.354 0 00-.106.088c-.202.108-.398.22-.594.34-.016.002-.033.004-.047.01a3.611 3.611 0 01-.586.193c-.712.182-1.412.404-2.098.664-2.026.767-3.961 1.904-5.772 3.298-2.13 1.628-3.949 3.5-5.729 4.962-1.427 1.171-2.778 1.73-4.171 1.974-1.07.114-1.127.101-1.7.052-.264-.068-.534-.006-.797-.078-.464-.122-.928-.29-1.382-.613-.698-.496-1.369-1.221-1.973-2.224a106.056 106.056 0 014.164-7.06zM19.112 58.372c.272-.277.508-.614.705-1.023.174-.365.284-.755.326-1.155a1.3 1.3 0 00-.19-.85c.294-1.004.493-2.058.81-3.054.69.463 1.308 1.29 1.54 2.202.175.697.192 1.403.08 2.131a7.898 7.898 0 01-.247 1.112 7.455 7.455 0 01-1.16 2.327c-.768 1.026-1.649 1.736-2.744 2.042-.014.005-.029.003-.044.006.288-1.25.596-2.497.924-3.738zm-1.46 6.214a5.663 5.663 0 002.44-.818c1.26-.76 2.196-1.868 2.966-3.275.268-.491.497-1.002.683-1.528.377-1.056.6-2.12.624-3.27.028-1.358-.233-2.586-.817-3.74-.265-.525-.572-1.01-.963-1.42a5.056 5.056 0 00-.774-.654c-.057-.037-.117-.061-.175-.095.323-.945.655-1.887.998-2.825.268.147.61.337.85.524.822.64 1.443 1.462 1.932 2.42.532 1.042.89 2.14 1.083 3.322.2 1.219.21 2.402.068 3.603-.06.506-.148 1.008-.262 1.505-.109.472-.235.934-.39 1.386-.58 1.699-1.36 3.17-2.462 4.54-1.021 1.269-2.185 2.245-3.589 2.876-.6.269-1.219.464-1.862.57a6.2 6.2 0 01-.95.076c.176-1.049.378-2.116.6-3.197zm-1.355 8.803c.105-1.076.243-2.182.403-3.307.186.005.373.011.557.005.356-.014.712-.037 1.06-.087 2.067-.3 3.76-1.343 5.277-2.88 1.153-1.166 2.045-2.475 2.794-3.939.3-.589.569-1.194.803-1.811.244-.637.455-1.285.633-1.942a17.2 17.2 0 00.636-4.745c-.013-1.88-.297-3.675-1.021-5.44a9.662 9.662 0 00-1.263-2.213 8.576 8.576 0 00-.864-.966 9.362 9.362 0 00-.886-.751 9.394 9.394 0 00-.953-.621c.37-.96.75-1.914 1.14-2.865.352.184.775.432 1.093.658.196.14.376.298.565.447.04.032.085.064.127.095.301.29.602.582.903.87.03.04.06.08.094.116.266.27.493.57.716.874.346.475.651.977.913 1.5 1.196 2.408 1.623 4.892 1.707 7.49a21.403 21.403 0 01-.564 5.602 22.643 22.643 0 01-.462 1.673 22.314 22.314 0 01-1.956 4.46c-1.524 2.609-3.508 5.033-6.165 6.55a9.555 9.555 0 01-1.816.785 8.612 8.612 0 01-1.111.27c-.215.036-.43.07-.646.108-.038.005-.074.02-.11.03l-1.002.071c-.101-.007-.202-.021-.302-.021-.1 0-.2-.012-.3-.016zm17.34 40.672c-.02.022-.06.023-.08.042a45.521 45.521 0 01-6.603-6.128c.71.118 1.511.492 2.443 1.086.83.528 1.651 1.17 2.51 1.88.3.25.587.506.852.794.829.898 1.274 1.859.877 2.326zm9.526 5.068c-.025.194-.09.375-.172.55a48.278 48.278 0 01-5.208-2.72c.004-.02.012-.034.014-.053.097-.452.039-.958-.184-1.531-.37-.955-1.093-1.93-2.015-3.006-.974-1.136-2.019-2.225-3.131-3.358a79.192 79.192 0 00-1.995-1.974c-1.303-1.238-2.478-2.276-3.677-2.946-1.31-.735-2.415-1.002-3.389-.72a43.48 43.48 0 01-3.08-5.364c.36-.237.736-.422 1.134-.502.483-.098.978-.08 1.487.032.877.19 1.756.641 2.68 1.286 1.067.745 2.117 1.694 3.247 2.84 1.674 1.691 3.262 3.443 5.046 5.282.574.588 1.142 1.176 1.719 1.76.71.718 1.412 1.42 2.107 2.122 1.24 1.251 2.393 2.413 3.374 3.606 1.452 1.746 2.235 3.236 2.043 4.696zm10.29 2.402a5.025 5.025 0 01-.666 1.313 50.407 50.407 0 01-5.63-1.535c.178-.283.315-.589.406-.908.15-.521.133-1.06.004-1.605-.192-.807-.623-1.605-1.238-2.423-1.464-1.944-3.44-3.72-5.597-5.792-1.022-.98-2.044-1.95-3.077-2.96-.485-.473-.966-.95-1.443-1.43a77.103 77.103 0 01-1.787-1.846 65.996 65.996 0 01-2.206-2.51c-.568-.676-1.116-1.354-1.684-1.988-.374-.417-.745-.837-1.112-1.26-1.368-1.57-2.598-3.04-3.906-4.162-1.21-1.038-2.402-1.673-3.669-1.83a4.928 4.928 0 00-1.255.002c-.47.06-.937.207-1.401.448a4.91 4.91 0 00-.726.469 43.185 43.185 0 01-1.604-5.854c.433-.397.873-.74 1.311-1.013.723-.458 1.43-.72 2.108-.831.437-.071.87-.114 1.27-.032.054.012.111-.001.168-.002l1.31.345c.05.028.1.061.153.087.234.114.475.205.704.339.49.289.954.656 1.402 1.083 1.163 1.112 2.165 2.602 3.224 4.272.865 1.365 1.732 2.783 2.692 4.153a149.963 149.963 0 002.499 3.46 42.515 42.515 0 002.893 3.49c.438.472.883.933 1.335 1.389a81.2 81.2 0 001.716 1.682 90.53 90.53 0 001.636 1.512c2.016 1.82 4.043 3.452 6.16 5.124 1.544 1.216 2.99 2.349 4.162 3.566.899.933 1.566 1.877 1.874 2.907.114.382.168.772.164 1.17-.006.397-.07.791-.19 1.17zm10.806.326c-.251.685-.657 1.405-1.178 2.132a53.151 53.151 0 01-5.868-.399c.647-.992.95-1.99.957-2.908a5.972 5.972 0 00-.128-1.218 6.009 6.009 0 00-.69-1.851 7.364 7.364 0 00-.946-1.303c-.6-.664-1.343-1.267-2.201-1.849-1.196-.809-2.551-1.54-3.937-2.329a54.613 54.613 0 01-3.5-2.13 21.21 21.21 0 01-1.188-.841c-.485-.376-.659-.798-.545-1.234.16-.579.824-.89 1.537-.847l.113.003c.178.045.357.087.537.125.011.009.019.017.032.021.158.062.3.142.44.233.499.327 1.01.637 1.533.928 1.541.865 3.226 1.602 4.981 2.28 2.057.8 4.08 1.48 5.826 2.375 1.399.715 2.538 1.55 3.354 2.604.07.088.161.165.243.246l.583.986c.009.047.01.096.026.137.088.24.177.48.262.719.15.422.237.876.264 1.358.045.842-.107 1.766-.507 2.762zm19.873-35.936c-.082.902-.213 1.8-.393 2.69-.547 2.703-1.504 5.215-2.922 7.5-2.477 3.985-5.803 6.712-9.974 8.166a16.44 16.44 0 01-2.805.703c-.612.098-1.225.247-1.844.26-.082.002-.164.092-.244.092H63.9c-.087 0-.172-.086-.258-.092-.388-.031-.778-.081-1.164-.128a17.877 17.877 0 01-2.464-.493 16.808 16.808 0 01-5.847-2.875c-1.462-1.11-2.734-2.45-3.863-3.962a16.113 16.113 0 01-2.286-4.268 24.412 24.412 0 01-1.38-7.482 20.572 20.572 0 01.63-5.487c.809-3.12 2.255-5.825 4.342-8.106 1.524-1.664 3.277-2.946 5.262-3.84a14.113 14.113 0 014.742-1.215 14.015 14.015 0 013.595.202 14.84 14.84 0 013.286 1.03c2.484 1.104 4.546 2.826 6.149 5.197 1.726 2.553 2.674 5.433 2.88 8.61.056.847.037 1.693-.04 2.537a16.14 16.14 0 01-.447 2.617c-.523 2.018-1.4 3.822-2.66 5.396a13.154 13.154 0 01-4.369 3.532c-1.541.784-3.155 1.213-4.852 1.252a11.192 11.192 0 01-5.802-1.483 10.33 10.33 0 01-3.352-3.027c-1.347-1.903-2.052-4.078-2.225-6.475-.055-.77-.036-1.54.041-2.308a13.13 13.13 0 01.575-2.76c.52-1.593 1.306-2.996 2.423-4.16 1.645-1.72 3.622-2.58 5.865-2.724a6.11 6.11 0 012.835.5c1.793.768 3.147 2.1 4.092 3.945a8.965 8.965 0 01.834 5.738c-.208 1.117-.645 2.105-1.35 2.942-1.294 1.534-3.305 2.23-5.169 1.768-1.138-.282-2.075-.93-2.78-1.968-.48-.705-.765-1.504-.905-2.37a2.62 2.62 0 01-.006-.912c.178-.96.963-1.69 1.9-1.67.885.018 1.654.728 1.823 1.701.024.131.044.264.08.392.108.398.352.637.716.725.216.054.442.054.658.002.666-.162 1.115-.588 1.287-1.332.133-.58.142-1.166.018-1.75-.267-1.27-.916-2.244-1.908-2.938a3.175 3.175 0 00-1.508-.569 3.542 3.542 0 00-.853.036 4.98 4.98 0 00-1.956.678c-1.014.615-1.743 1.525-2.243 2.667-.529 1.204-.74 2.48-.688 3.814.03.8.16 1.578.4 2.33.467 1.467 1.256 2.667 2.438 3.528 1.441 1.05 3.035 1.516 4.757 1.472a7.224 7.224 0 001.491-.198c.887-.211 1.715-.589 2.506-1.074 1.736-1.064 3.033-2.585 3.83-4.605.674-1.708.884-3.498.728-5.345a12.402 12.402 0 00-.539-2.725c-.81-2.558-2.22-4.606-4.29-6.066-1.67-1.18-3.511-1.8-5.483-1.963a9.843 9.843 0 00-2.47.117 10.695 10.695 0 00-3.458 1.218c-2.588 1.45-4.5 3.636-5.767 6.515a14.91 14.91 0 00-1.153 4.299c-.084.703-.12 1.41-.11 2.118.013.896.1 1.784.241 2.666.183 1.148.454 2.268.837 3.353.303.857.67 1.68 1.16 2.43.322.493.67.97 1.04 1.431 1.379 1.712 3.004 3.048 4.911 3.958 1.765.84 3.617 1.244 5.53 1.33.632.028 1.264.02 1.895-.02a14.461 14.461 0 002.096-.291c1.362-.289 2.67-.78 3.88-1.458 2.708-1.517 4.806-3.749 6.31-6.662 1.337-2.594 2-5.4 2.097-8.376a22.672 22.672 0 00-.197-3.821 21.065 21.065 0 00-.812-3.613c-.936-2.912-2.412-5.438-4.481-7.521-2.732-2.753-5.962-4.288-9.621-4.738a23.378 23.378 0 00-1.864-.14 20.186 20.186 0 00-3.047.096c-.785.085-1.56.216-2.329.41a14.465 14.465 0 00-3.532 1.393c-1.566.872-2.938 2.03-4.155 3.42-1.05 1.2-1.952 2.524-2.74 3.941-.286.513-.55 1.041-.822 1.563-.348.666-.868 1.04-1.564 1.09-.924.067-1.736-.622-1.953-1.58-.014-.045-.048-.095-.048-.145v-.746c0-.016.025-.032.028-.049.042-.226.124-.437.225-.64.355-.72.734-1.427 1.137-2.122 1.17-2.01 2.524-3.847 4.143-5.437 1.898-1.866 4.045-3.26 6.452-4.162 3.056-.938 6.07-1.64 8.43-1.44.388.029.778.157 1.166.186.682.048 1.36.19 2.034.309 1.175.21 2.327.551 3.454.978 5.168 1.958 9.34 6.044 11.738 11.477 1.32 2.994 2.014 6.173 2.144 9.496a26.51 26.51 0 01-.09 3.515zm24.524-16.533c-1.764 1.572-3.66 2.566-5.556 3.037a11.568 11.568 0 01-4.341.23c-.117-.015-.239-.016-.357-.026l-1.167-.232c-.04-.016-.082-.036-.126-.05l-.746-.21a11.642 11.642 0 01-1.27-.444 12.552 12.552 0 01-2.036-1.07c-2.93-1.934-4.958-4.659-6.422-7.493a20.984 20.984 0 01-1.739-4.745 19.406 19.406 0 01-.484-3.106c-.1-1.405-.053-2.806.19-4.283.425-2.565 1.237-4.964 2.943-7.163.378-.484.8-.934 1.26-1.344.301-.267.604-.529.951-.754.045-.03.083-.067.124-.1l1.17-.72.163-.073c.238-.117.471-.244.718-.351.545-.236 1.11-.425 1.688-.566 1.538-.378 3.24-.432 5.085-.053 1.297.267 2.603.754 3.885 1.423a139.234 139.234 0 011.85 4.652 8.684 8.684 0 00-1.12-1c-.413-.3-.842-.578-1.287-.832-1.64-.93-3.32-1.41-4.937-1.45a8.988 8.988 0 00-4.015.836c-.39.179-.769.38-1.134.603a9.258 9.258 0 00-2.897 2.815c-1.072 1.638-1.631 3.372-1.882 5.238-.224 1.663-.147 3.22.154 4.814.128.686.295 1.364.5 2.031.2.656.44 1.3.718 1.929.698 1.573 1.58 3.016 2.788 4.36 1.59 1.768 3.448 3.077 5.838 3.705.403.106.819.186 1.234.257.681.115 1.375.182 2.089.178a10.054 10.054 0 001.679-.14 9.438 9.438 0 002.725-.908c1.26-.642 2.436-1.592 3.48-2.809.481-.56.919-1.171 1.323-1.815.27 1.27.52 2.53.731 3.763a16.752 16.752 0 01-1.77 1.866z"/>',
];
BreedingController.filter = {
    search: ko.observable(new RegExp('', 'i')),
    category: ko.observable(-1).extend({ numeric: 0 }),
    shinyStatus: ko.observable(-1).extend({ numeric: 0 }),
    // All = -2
    type1: ko.observable(-2).extend({ numeric: 0 }),
    type2: ko.observable(-2).extend({ numeric: 0 }),
    region: ko.observable(-2).extend({ numeric: 0 }),
};
// Value displayed at bottom of image
BreedingController.displayValue = ko.observable('attack');
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Saveable.d.ts" />
/// <reference path="../../declarations/breeding/EggType.d.ts" />
class Egg {
    constructor(type = EggType.None, totalSteps = 0, pokemon = 'Ohakadamon', steps = 0, shinyChance = GameConstants.SHINY_CHANCE_BREEDING, notified = false) {
        this.type = type;
        this.totalSteps = totalSteps;
        this.pokemon = pokemon;
        this.shinyChance = shinyChance;
        this.notified = notified;
        this.saveKey = 'egg';
        this.defaults = {};
        this.steps = ko.observable(steps);
        this.init();
    }
    init() {
        this.progress = ko.pureComputed(function () {
            return this.steps() / this.totalSteps * 100;
        }, this);
        this.progressText = ko.pureComputed(function () {
            return `${this.steps()} / ${this.totalSteps}`;
        }, this);
        this.stepsRemaining = ko.pureComputed(function () {
            return this.totalSteps - this.steps();
        }, this);
        if (this.pokemon) {
            const dataPokemon = PokemonHelper.getPokemonByName(this.pokemon);
            this.pokemonType1 = dataPokemon.type1;
            this.pokemonType2 = dataPokemon.type2 === PokemonType.None ? dataPokemon.type1 : dataPokemon.type2;
        }
        else {
            this.pokemonType1 = PokemonType['Normal'];
            this.pokemonType2 = PokemonType['Normal'];
        }
    }
    isNone() {
        return this.type === EggType.None;
    }
    updateShinyChance(steps, multiplier) {
        const stepsChance = GameConstants.SHINY_CHANCE_BREEDING / multiplier.getBonus('shiny');
        const newChance = ((this.shinyChance * this.steps()) + (stepsChance * steps)) / (this.steps() + steps);
        this.shinyChance = newChance;
    }
    addSteps(amount, multiplier) {
        if (this.isNone() || this.notified) {
            return;
        }
        if (!+amount) {
            amount = 1;
        }
        this.updateShinyChance(amount, multiplier);
        this.steps(this.steps() + amount);
        if (this.canHatch()) {
            if (this.type == EggType.Pokemon) {
                Notifier.notify({
                    message: `${this.pokemon} is ready to hatch!`,
                    type: NotificationConstants.NotificationOption.success,
                    sound: NotificationConstants.NotificationSound.Hatchery.ready_to_hatch,
                    setting: NotificationConstants.NotificationSetting.Hatchery.ready_to_hatch,
                });
            }
            else {
                Notifier.notify({
                    message: 'An egg is ready to hatch!',
                    type: NotificationConstants.NotificationOption.success,
                    sound: NotificationConstants.NotificationSound.Hatchery.ready_to_hatch,
                    setting: NotificationConstants.NotificationSetting.Hatchery.ready_to_hatch,
                });
            }
            this.notified = true;
        }
    }
    canHatch() {
        return !this.isNone() && this.steps() >= this.totalSteps;
    }
    hatch(efficiency = 100) {
        if (!this.canHatch()) {
            return false;
        }
        const shiny = PokemonFactory.generateShiny(this.shinyChance, true);
        const partyPokemon = App.game.party.caughtPokemon.find(p => p.name == this.pokemon);
        // If the party pokemon exist, increase it's damage output
        if (partyPokemon) {
            // Increase attack
            partyPokemon.attackBonusPercent += Math.max(1, Math.round(GameConstants.BREEDING_ATTACK_BONUS * (efficiency / 100)));
            partyPokemon.attackBonusAmount += Math.max(0, Math.round(partyPokemon.proteinsUsed() * (efficiency / 100)));
            // If breeding (not store egg), reset level, reset evolution check
            if (partyPokemon.breeding) {
                if (partyPokemon.evolutions !== undefined) {
                    partyPokemon.evolutions.forEach(evo => evo instanceof LevelEvolution ? evo.triggered = false : undefined);
                }
                partyPokemon.exp = 0;
                partyPokemon.level = 1;
                partyPokemon.breeding = false;
                partyPokemon.level = partyPokemon.calculateLevelFromExp();
                partyPokemon.checkForLevelEvolution();
            }
            // Recalculate current attack
            partyPokemon.attack = partyPokemon.calculateAttack();
        }
        const pokemonID = PokemonHelper.getPokemonByName(this.pokemon).id;
        App.game.party.gainPokemonById(pokemonID, shiny);
        if (shiny) {
            Notifier.notify({
                message: `👾 You hatched a Dot ${this.pokemon}! 👾`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.shiny_long,
                setting: NotificationConstants.NotificationSetting.Hatchery.hatched_shiny,
            });
            App.game.logbook.newLog(LogBookTypes.SHINY, `You hatched a Dot ${this.pokemon}!`);
            GameHelper.incrementObservable(App.game.statistics.dotDigimonHatched[pokemonID]);
            GameHelper.incrementObservable(App.game.statistics.totalDotDigimonHatched);
        }
        else {
            Notifier.notify({
                message: `You hatched ${GameHelper.anOrA(this.pokemon)} ${this.pokemon}!`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Hatchery.hatched,
            });
        }
        // Capture base form if not already caught. This helps players get Gen2 Pokemon that are base form of Gen1
        const baseForm = App.game.breeding.calculateBaseForm(this.pokemon);
        if (this.pokemon != baseForm && !App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(baseForm).id)) {
            Notifier.notify({
                message: `You also found ${GameHelper.anOrA(baseForm)} ${baseForm} nearby!`,
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.General.new_catch,
                setting: NotificationConstants.NotificationSetting.General.new_catch,
            });
            App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(baseForm).id);
        }
        // Update statistics
        GameHelper.incrementObservable(App.game.statistics.digimonHatched[pokemonID]);
        GameHelper.incrementObservable(App.game.statistics.totalDigimonHatched);
        App.game.oakItems.use(OakItemType.Egg_Holder);
        return true;
    }
    toJSON() {
        return {
            totalSteps: this.totalSteps,
            steps: this.steps(),
            shinyChance: this.shinyChance,
            pokemon: this.pokemon,
            type: this.type,
            notified: this.notified,
        };
    }
    fromJSON(json) {
        this.totalSteps = json['totalSteps'];
        this.steps = ko.observable(json['steps']);
        this.shinyChance = json['shinyChance'];
        this.pokemon = json['pokemon'];
        this.type = json['type'];
        this.notified = json['notified'];
        this.init();
    }
}
const HatcheryHelperSkills = [
    'energy',
    'efficiency',
    'accuracy',
    'cost',
];
const HatcheryHelperCalcHatchBonus = (hatched) => Math.min(50, Math.floor(Math.sqrt(hatched / 50) * 10) / 10);
const HatcheryHelperMinBonusMap = {};
// Generate our bonus amounts map
(() => {
    let bonus = -1;
    for (let hatched = 0; bonus < 50; hatched++) {
        const b = HatcheryHelperCalcHatchBonus(hatched);
        if (b > bonus) {
            HatcheryHelperMinBonusMap[b] = hatched;
            bonus = b;
        }
    }
})();
class HatcheryHelper {
    // public level: number;
    // public experience: number;
    constructor(name, cost, stepEfficiencyBase, // 1 - 200
    attackEfficiencyBase, unlockRequirement) {
        this.name = name;
        this.cost = cost;
        this.stepEfficiencyBase = stepEfficiencyBase;
        this.attackEfficiencyBase = attackEfficiencyBase;
        this.unlockRequirement = unlockRequirement;
        this.trainerSprite = 0;
        this.hired = ko.observable(false).extend({ boolean: null });
        this.sortOption = ko.observable(SortOptions.id).extend({ numeric: 0 });
        this.sortDirection = ko.observable(false).extend({ boolean: null });
        this.hatched = ko.observable(0).extend({ numeric: 0 });
        this.hatchBonus = ko.observable(0).extend({ numeric: 1 });
        this.stepEfficiency = ko.observable(0).extend({ numeric: 1 });
        this.attackEfficiency = ko.observable(0).extend({ numeric: 1 });
        this.prevBonus = ko.observable(0).extend({ numeric: 0 });
        this.nextBonus = ko.observable(1).extend({ numeric: 0 });
        SeededRand.seed(parseInt(this.name, 36));
        this.trainerSprite = SeededRand.intBetween(0, Profile.MAX_TRAINER - 1);
        this.tooltip = ko.pureComputed(() => `<strong>${this.name}</strong><br/>
            Cost: <img src="assets/images/currency/${GameConstants.Currency[this.cost.currency]}.svg" width="20px">&nbsp;${(this.cost.amount).toLocaleString('en-US')}/hatch<br/>
            Step Efficiency: ${this.stepEfficiency()}%<br/>
            Attack Efficiency: ${this.attackEfficiency()}%<br/>
            Hatched: ${this.hatched().toLocaleString('en-US')}<br/>`);
        // Update our bonus values
        this.updateBonus();
        // Update our bonus values whenever our hatched amount changes
        this.hatched.subscribe((hatched) => {
            if (hatched >= this.nextBonus() || hatched <= this.prevBonus()) {
                this.updateBonus();
            }
        });
    }
    updateBonus() {
        this.hatchBonus(HatcheryHelperCalcHatchBonus(this.hatched()));
        this.stepEfficiency(this.stepEfficiencyBase + this.hatchBonus());
        this.attackEfficiency(this.attackEfficiencyBase + this.hatchBonus());
        this.prevBonus(HatcheryHelperMinBonusMap[this.hatchBonus()] || 0);
        this.nextBonus(HatcheryHelperMinBonusMap[((this.hatchBonus() * 10) + 1) / 10] || 1);
    }
    isUnlocked() {
        var _a, _b;
        return (_b = (_a = this.unlockRequirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true;
    }
    hire() {
        // Check the player has enough Currency to hire this Hatchery Helper
        if (!App.game.wallet.hasAmount(this.cost)) {
            Notifier.notify({
                title: `[HATCHERY HELPER] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
                message: `You don't have enough ${GameConstants.camelCaseToString(GameConstants.Currency[this.cost.currency])} to hire me..\nCost: <img src="./assets/images/currency/${GameConstants.Currency[this.cost.currency]}.svg" height="24px"/> ${this.cost.amount.toLocaleString('en-US')}`,
                type: NotificationConstants.NotificationOption.warning,
                timeout: 30 * GameConstants.SECOND,
            });
            return;
        }
        // Hatchery helper is hired
        this.hired(true);
        Notifier.notify({
            title: `[HATCHERY HELPER] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: 'Thanks for hiring me,\nI won\'t let you down!',
            type: NotificationConstants.NotificationOption.success,
            timeout: 30 * GameConstants.SECOND,
        });
    }
    fire() {
        Notifier.notify({
            title: `[HATCHERY HELPER] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: 'Thanks for the work,\nLet me know when you\'re hiring again!',
            type: NotificationConstants.NotificationOption.info,
            timeout: 30 * GameConstants.SECOND,
        });
        this.hired(false);
        return;
    }
    charge() {
        // Charge the player if they can afford it, otherwise notify that they cannot
        if (!App.game.wallet.loseAmount(this.cost)) {
            Notifier.notify({
                title: `[HATCHERY HELPER] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
                message: `It looks like you are a little short on ${GameConstants.camelCaseToString(GameConstants.Currency[this.cost.currency])} right now..\nLet me know when you're hiring again!\nCost: <img src="./assets/images/currency/${GameConstants.Currency[this.cost.currency]}.svg" height="24px"/> ${this.cost.amount.toLocaleString('en-US')}`,
                type: NotificationConstants.NotificationOption.danger,
                timeout: 30 * GameConstants.MINUTE,
            });
            this.hired(false);
            return;
        }
    }
    toJSON() {
        return {
            name: this.name,
            hired: this.hired(),
            sortOption: this.sortOption(),
            sortDirection: this.sortDirection(),
            hatched: this.hatched(),
        };
    }
    fromJSON(json) {
        if (!json) {
            return;
        }
        this.hired(json.hired || false);
        this.sortOption(json.sortOption || 0);
        this.sortDirection(json.sortDirection || false);
        this.hatched(json.hatched || 0);
    }
}
class HatcheryHelpers {
    constructor(hatchery) {
        this.hatchery = hatchery;
        this.MAX_HIRES = 3;
        this.requirement = new HatchRequirement(100);
        this.available = ko.pureComputed(() => HatcheryHelpers.list.filter(f => f.isUnlocked()));
        this.hired = ko.pureComputed(() => HatcheryHelpers.list.filter(f => f.hired()));
        this.canHire = ko.pureComputed(() => this.hired().length < Math.min(this.MAX_HIRES, this.hatchery.eggSlots));
    }
    static add(helper) {
        this.list.push(helper);
    }
    isUnlocked() {
        return this.requirement.isCompleted();
    }
    addSteps(amount, multiplier) {
        // Add steps and attack based on efficiency
        this.hired().forEach((helper, index) => {
            // Calculate how many steps should be applied
            const steps = Math.max(1, Math.round(amount * (helper.stepEfficiency() / 100)));
            // Add steps to the egg we are managing
            const egg = this.hatchery.eggList[index]();
            egg.addSteps(steps, multiplier);
            // Check if the egg is ready to hatch
            if (egg.progress() >= 100 || egg.isNone()) {
                egg.hatch(helper.attackEfficiency());
                this.hatchery.eggList[index](new Egg());
                // Check if there's a pokemon we can chuck into an egg
                const pokemon = App.game.party.caughtPokemon
                    .sort(PartyController.compareBy(helper.sortOption(), helper.sortDirection()))
                    .find(p => BreedingController.visible(p)());
                if (pokemon) {
                    this.hatchery.gainPokemonEgg(pokemon);
                    // Charge the player when we put a pokemon in the hatchery
                    helper.charge();
                    // Increment our hatched counter
                    GameHelper.incrementObservable(helper.hatched, 1);
                }
            }
        });
    }
    toJSON() {
        return this.available().map(f => f.toJSON());
    }
    fromJSON(json) {
        if (!json || !json.length) {
            return;
        }
        HatcheryHelpers.list.forEach(f => {
            const data = json === null || json === void 0 ? void 0 : json.find(_f => _f.name == f.name);
            if (data) {
                f.fromJSON(data);
            }
        });
    }
}
HatcheryHelpers.list = [];
// Note: Mostly Gender-neutral names used as the trainer sprite is (seeded) randomly generated, or check the sprite
HatcheryHelpers.add(new HatcheryHelper('Sam', new Amount(1000, GameConstants.Currency.money), 10, 10, new HatchRequirement(100)));
HatcheryHelpers.add(new HatcheryHelper('Blake', new Amount(10000, GameConstants.Currency.money), 10, 20, new HatchRequirement(500)));
HatcheryHelpers.add(new HatcheryHelper('Jasmine', new Amount(50000, GameConstants.Currency.money), 15, 50, new ItemOwnedRequirement('HatcheryHelperJasmine')));
HatcheryHelpers.add(new HatcheryHelper('Parker', new Amount(1000, GameConstants.Currency.explorecoin), 15, 25, new HatchRequirement(1000)));
HatcheryHelpers.add(new HatcheryHelper('Dakota', new Amount(10000, GameConstants.Currency.explorecoin), 50, 50, new ItemOwnedRequirement('HatcheryHelperDakota')));
HatcheryHelpers.add(new HatcheryHelper('Justice', new Amount(10, GameConstants.Currency.farmPoint), 100, 50, new QuestRequirement(200)));
HatcheryHelpers.add(new HatcheryHelper('Carey', new Amount(20, GameConstants.Currency.farmPoint), 50, 125, new ItemOwnedRequirement('HatcheryHelperCarey')));
HatcheryHelpers.add(new HatcheryHelper('Aiden', new Amount(5, GameConstants.Currency.diamond), 100, 100, new UndergroundLayersMinedRequirement(100)));
HatcheryHelpers.add(new HatcheryHelper('Kris', new Amount(10, GameConstants.Currency.diamond), 150, 100, new ItemOwnedRequirement('HatcheryHelperKris')));
HatcheryHelpers.add(new HatcheryHelper('Noel', new Amount(25, GameConstants.Currency.battlePoint), 100, 200, new ItemOwnedRequirement('HatcheryHelperNoel')));
class Discord {
    constructor() {
        this.saveKey = 'discord';
        this.defaults = {
            ID: null,
        };
        this.ID = ko.observable(null);
        this.codes = [
            new DiscordPokemonCode(pokemonMap['Unown (D)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Unown (I)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Unown (S)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Unown (C)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Unown (O)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Unown (R)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Surfing Pikachu'], 1500, 'It\'s a Pikachu on a surfboard!'),
            new DiscordPokemonCode(pokemonMap['Rotom (discord)'], 10000, 'A Discord style Rotom!'),
        ];
        // Check if code provided by Discord, which means the user has logged in, and we need to get their details
        const search = new URLSearchParams(location.search);
        const discordID = search.get('discordID');
        if (discordID) {
            this.ID(discordID);
            Notifier.notify({
                message: 'Successfully logged in to Discord!',
                type: NotificationConstants.NotificationOption.success,
                timeout: GameConstants.MINUTE,
            });
            window.history.replaceState('', '', `${location.origin + location.pathname}`);
        }
    }
    get enabled() {
        // This was done like this so es/tslint doesn't throw errors
        try {
            return !!JSON.parse('false');
        }
        catch (e) {
            return false;
        }
    }
    login() {
        // This will be updated from our config values
        location.href = `false?action=login&redirect_uri=${encodeURIComponent(location.href.replace(location.search, ''))}`;
    }
    logout() {
        this.ID(this.defaults.id);
        // Save now
        Save.store(player);
    }
    calcCode(code) {
        const discordID = +App.game.discord.ID() || false;
        if (!discordID) {
            return;
        }
        // reverse the string (for names that are similar - forms)
        const codeSeed = code.name.split('').reverse()
            // map to the character code
            .map(l => l.charCodeAt(0))
            // multiply the numbers (should be random enough)
            .reduce((s, b) => s * (b / 10), 1);
        SeededRand.seed(discordID + codeSeed);
        const arr = [];
        for (let i = 0; i < 14; i++) {
            let int;
            while (int == undefined || int.length != 1) {
                int = SeededRand.intBetween(0, 35).toString(36);
            }
            arr.push(int);
        }
        arr[4] = '-';
        arr[9] = '-';
        return arr.join('').toUpperCase();
    }
    findCodeMatch(enteredCode) {
        return this.codes.find(code => enteredCode.toUpperCase() == this.calcCode(code));
    }
    enterCode(enteredCode) {
        // Discord integration disabled
        if (!this.enabled) {
            Notifier.notify({
                message: 'Discord integration not enabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        // User not logged in to Discord
        if (!this.ID()) {
            Notifier.notify({
                message: 'You must sign in to Discord before attempting this code',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        // Try find a matching code
        const code = this.findCodeMatch(enteredCode);
        // No code found
        if (!code) {
            Notifier.notify({
                message: `Invalid code ${enteredCode}`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        // Claim the code
        code.claim();
        return true;
    }
    loadCodes(codes) {
        codes.forEach(code => {
            const c = this.codes.find(c => c.name == code.name);
            if (c) {
                c.claimed = code.claimed;
            }
        });
    }
    fromJSON(json) {
        if (!json || !json.ID) {
            return;
        }
        this.ID(json.ID || this.defaults.ID);
        this.loadCodes(json.codes || []);
    }
    toJSON() {
        return {
            ID: this.ID(),
            codes: this.codes.filter(c => c.claimed),
        };
    }
}
class DiscordCode {
    // Image, Price and Description fields are not currently used on the website,
    // the data is there so the Discord bot and website can share the same dataset
    constructor(name, image, price, description, claimFunction = () => true) {
        this.name = name;
        this.image = image;
        this.price = price;
        this.description = description;
        this.claimFunction = claimFunction;
        this.claimed = false;
    }
    claim() {
        if (this.claimed) {
            Notifier.notify({
                title: `[Discord Code] ${this.name}`,
                message: 'Already claimed!',
                type: NotificationConstants.NotificationOption.warning,
            });
            return;
        }
        if (this.claimFunction()) {
            this.claimed = true;
            Notifier.notify({
                title: `[Discord Code] ${this.name}`,
                message: 'Successfully claimed!',
                type: NotificationConstants.NotificationOption.success,
            });
        }
    }
    toJSON() {
        return {
            name: this.name,
            image: this.image,
            price: this.price,
            description: this.description,
            claimed: this.claimed,
        };
    }
}
class DiscordPokemonCode extends DiscordCode {
    constructor(pokemon, price, description) {
        const image = `assets/images/digidex/${pokemon.id}.png`;
        const claimFunction = () => {
            const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SHOP);
            App.game.party.gainPokemonById(pokemon.id, shiny, true);
            // Notify that the code was activated successfully
            Notifier.notify({
                message: `You obtained a${shiny ? ' shiny' : ''} ${pokemon.name}!`,
                type: NotificationConstants.NotificationOption.success,
                timeout: 1e4,
            });
            return true;
        };
        super(pokemon.name, image, price, description, claimFunction);
    }
}
class DungeonBossPokemon {
    constructor(name, baseHealth, level, options) {
        this.name = name;
        this.baseHealth = baseHealth;
        this.level = level;
        this.options = options;
    }
}
class Trainer {
    constructor(trainerClass, team, name, subTrainerClass) {
        this.trainerClass = trainerClass;
        this.team = team;
        this.subTrainerClass = subTrainerClass;
        this.name = name ? `Hacker ${name}` : trainerClass;
    }
    get image() {
        const imageName = this.subTrainerClass ? `${this.trainerClass} ${this.subTrainerClass}` : this.trainerClass;
        return `assets/images/trainers/${imageName}.png`;
    }
    get ListImage() {
        const imageName = this.subTrainerClass ? `${this.trainerClass} ${this.subTrainerClass}` : this.trainerClass;
        return `assets/images/trainers/${imageName}.png`;
    }
}
///<reference path="../trainers/Trainer.ts"/>
class DungeonTrainer extends Trainer {
    constructor(trainerClass, team, options, name, subTrainerClass) {
        super(trainerClass, team, name, subTrainerClass);
        this.options = options;
    }
}
class GymPokemon {
    constructor(name, maxHealth, level) {
        this.name = name;
        this.maxHealth = maxHealth;
        this.level = level;
    }
}
///<reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="DungeonBossPokemon.ts"/>
///<reference path="../../declarations/requirements/GymBadgeRequirement.d.ts"/>
///<reference path="../../declarations/requirements/MultiRequirement.d.ts"/>
///<reference path="../../declarations/requirements/SeededDateRequirement.d.ts"/>
///<reference path="../../declarations/utilities/SeededDateRand.d.ts"/>
///<reference path="../achievements/ObtainedPokemonRequirement.ts"/>
///<reference path="./DungeonTrainer.ts"/>
///<reference path="../gym/GymPokemon.ts"/>
// Gain a gym badge after first completion of a dungeon
const DungeonGainGymBadge = (gym, badge) => {
    // Check that the player hasn't already obtained the badge
    if (!App.game.badgeCase.hasBadge(badge)) {
        // Set the set to our expected gym
        // This updates our modal values
        GymRunner.gymObservable(gym);
        GymBattle.gym = gym;
        // Give the player the badge
        App.game.badgeCase.gainBadge(badge);
        // Show the modal
        $('#receiveBadgeModal').modal('show');
    }
};
/**
 * Gym class.
 */
class Dungeon {
    constructor(name, enemyList, itemList, baseHealth, bossList, tokenCost, difficultyRoute, // Closest route in terms of difficulty, used for egg steps, dungeon tokens etc.
    rewardFunction = () => { }) {
        this.name = name;
        this.enemyList = enemyList;
        this.itemList = itemList;
        this.baseHealth = baseHealth;
        this.bossList = bossList;
        this.tokenCost = tokenCost;
        this.difficultyRoute = difficultyRoute;
        this.rewardFunction = rewardFunction;
    }
    isUnlocked() {
        // Player requires the Dungeon Ticket to access the dungeons
        if (!App.game.keyItems.hasKeyItem(KeyItemType.Dungeon_ticket)) {
            Notifier.notify({
                message: 'You need the Dungeon ticket to access dungeons',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        return true;
    }
    /**
     * Finds the possible Bosses in the dungeon
     * @param includeTrainers Whether to include Trainer Bosses. Defaults to true
     * @param ignoreRequirement Whether to check if requirements are met. Defaults to false
     */
    availableBosses(includeTrainers = true, ignoreRequirement = false) {
        // TODO: HLXII - We need this check as this method is called somewhere during initialization when App isn't initialized yet
        // the requirement.isCompleted call can sometimes use the App object, which will cause this to crash
        // Once App is moved to modules, this check might be able to be removed.
        if (!App.game) {
            return [];
        }
        if (includeTrainers) {
            return this.bossList.filter(boss => {
                var _a;
                return (!ignoreRequirement && ((_a = boss.options) === null || _a === void 0 ? void 0 : _a.requirement)) ? boss.options.requirement.isCompleted() : true;
            });
        }
        else {
            return this.bossList.filter(b => {
                var _a;
                if (b instanceof DungeonBossPokemon) {
                    return (!ignoreRequirement && ((_a = b.options) === null || _a === void 0 ? void 0 : _a.requirement)) ? b.options.requirement.isCompleted() : true;
                }
                return false;
            }).map(b => b);
        }
    }
    /**
     * Retreives the weights for all the possible bosses
     */
    get bossWeightList() {
        return this.availableBosses().map((boss) => {
            var _a, _b;
            return (_b = (_a = boss.options) === null || _a === void 0 ? void 0 : _a.weight) !== null && _b !== void 0 ? _b : 1;
        });
    }
    /**
     * Returns the possible enemies in the dungeon.
     * @param ignoreRequirement Whether to check if requirements are met. Defaults to false
     */
    availableMinions(ignoreRequirement = false) {
        return this.enemyList.filter((enemy) => {
            var _a;
            if (typeof enemy === 'string') {
                return true;
            }
            else {
                return (!ignoreRequirement && ((_a = enemy.options) === null || _a === void 0 ? void 0 : _a.requirement)) ? enemy.options.requirement.isCompleted() : true;
            }
        });
    }
    /**
     * Gets all available Pokemon in the dungeon
     */
    allAvailablePokemon() {
        const encounterInfo = [];
        // Handling minions
        this.enemyList.forEach((enemy) => {
            var _a;
            // Handling Pokemon
            if (typeof enemy === 'string' || enemy.hasOwnProperty('pokemon')) {
                let pokemonName;
                if (enemy.hasOwnProperty('pokemon')) {
                    // Check if requirements have been met
                    if ((_a = enemy.options) === null || _a === void 0 ? void 0 : _a.requirement) {
                        if (!enemy.options.requirement.isCompleted()) {
                            return;
                        }
                    }
                    pokemonName = enemy.pokemon;
                }
                else {
                    pokemonName = enemy;
                }
                encounterInfo.push(pokemonName);
                // Handling Trainers
            }
            else { /* We don't include Trainers */ }
        });
        // Handling Bosses
        this.bossList.forEach((boss) => {
            var _a;
            // Handling Pokemon
            if (boss instanceof DungeonBossPokemon) {
                if ((_a = boss.options) === null || _a === void 0 ? void 0 : _a.requirement) {
                    if (!boss.options.requirement.isCompleted()) {
                        return;
                    }
                }
                const pokemonName = boss.name;
                encounterInfo.push(pokemonName);
                // Handling Trainer
            }
            else { /* We don't include Trainers */ }
        });
        return encounterInfo;
    }
    /**
     * Retrieves the weights for all the possible enemies
     */
    get weightList() {
        return this.availableMinions().map((enemy) => {
            var _a, _b, _c;
            if (typeof enemy === 'string') {
                return 1;
            }
            else if (enemy.hasOwnProperty('pokemon')) {
                return (_a = enemy.options.weight) !== null && _a !== void 0 ? _a : 1;
            }
            else {
                return (_c = (_b = enemy.options) === null || _b === void 0 ? void 0 : _b.weight) !== null && _c !== void 0 ? _c : 1;
            }
        });
    }
    /**
     * Retrieves the weights for all the possible Loot, weight values are utilized as 10^Weight. Should use values in Dungeon Initialization from 0 (least likely) to 4 (most likely), anything > 4 is probably too much
     */
    get lootWeightList() {
        return this.itemList.map((loot) => {
            if (loot.requirement && !loot.requirement.isCompleted()) {
                return 0;
            }
            if (loot.weight < 2 && GameConstants.getDungeonRegion(this.name) < player.highestRegion() - 2) {
                return 0.1 * Math.max(0.5, loot.weight);
            }
            // Minimum of 1 times cleared for division
            const timesCleared = Math.min(500, Math.max(1, App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(this.name)]()));
            // Calculate total weight based on times cleared, minimum weight being original number specified
            return Math.max(loot.weight, Math.pow(15, loot.weight) / timesCleared) + 1 || 1;
        });
    }
    /**
     * Returns the possible minion Pokemon in the dungeon.
     * Filters out Trainers and collapses DetailedPokemon
     */
    get pokemonList() {
        // Filtering out Trainers
        return this.enemyList.filter((enemy) => {
            return !enemy.hasOwnProperty('name');
        }).map((enemy) => {
            // Collapsing DetailedPokemon
            if (typeof enemy === 'string') {
                return enemy;
            }
            else if (enemy.hasOwnProperty('pokemon')) {
                return enemy.pokemon;
            }
        });
    }
    /**
     * Returns the possible boss Pokemon in the dungeon.
     * Filters out Trainers
     */
    get bossPokemonList() {
        // Filtering out Trainers
        return this.bossList.filter((enemy) => {
            return enemy instanceof DungeonBossPokemon;
        }).map((enemy) => {
            return enemy.name;
        });
    }
    /**
     * Gets all possible Pokemon in the dungeon
     */
    get allPokemon() {
        return this.pokemonList.concat(this.bossPokemonList);
    }
    /**
     * Gets all non-boss Pokemon encounters in the dungeon
     * Used for generating the dungeon encounter list view
     */
    get normalEncounterList() {
        const encounterInfo = [];
        // Handling minions
        this.enemyList.forEach((enemy) => {
            // Handling Pokemon
            if (typeof enemy === 'string' || enemy.hasOwnProperty('pokemon')) {
                let pokemonName;
                if (enemy.hasOwnProperty('pokemon')) {
                    pokemonName = enemy.pokemon;
                }
                else {
                    pokemonName = enemy;
                }
                const encounter = {
                    image: `assets/images/${(App.game.party.alreadyCaughtPokemonByName(pokemonName, true) ? 'dot' : '')}digidex/${pokemonMap[pokemonName].id}.png`,
                    shiny: App.game.party.alreadyCaughtPokemonByName(pokemonName, true),
                    hidden: !App.game.party.alreadyCaughtPokemonByName(pokemonName),
                    lock: false,
                    lockMessage: '',
                };
                encounterInfo.push(encounter);
                // Handling Trainers
            }
            else { /* We don't display minion Trainers */ }
        });
        return encounterInfo;
    }
    /**
     * Gets all boss encounters in the dungeon
     * Used for generating the dungeon encounter list view
     */
    get bossEncounterList() {
        const encounterInfo = [];
        // Handling Bosses
        this.bossList.forEach((boss) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
            // Handling Pokemon
            if (boss instanceof DungeonBossPokemon) {
                const pokemonName = boss.name;
                const encounter = {
                    image: `assets/images/${(App.game.party.alreadyCaughtPokemonByName(pokemonName, true) ? 'dot' : '')}digidex/${pokemonMap[pokemonName].id}.png`,
                    shiny: App.game.party.alreadyCaughtPokemonByName(pokemonName, true),
                    hide: ((_a = boss.options) === null || _a === void 0 ? void 0 : _a.hide) ? (((_b = boss.options) === null || _b === void 0 ? void 0 : _b.requirement) ? !((_c = boss.options) === null || _c === void 0 ? void 0 : _c.requirement.isCompleted()) : (_d = boss.options) === null || _d === void 0 ? void 0 : _d.hide) : false,
                    hidden: !App.game.party.alreadyCaughtPokemonByName(pokemonName),
                    lock: ((_e = boss.options) === null || _e === void 0 ? void 0 : _e.requirement) ? !((_f = boss.options) === null || _f === void 0 ? void 0 : _f.requirement.isCompleted()) : false,
                    lockMessage: ((_g = boss.options) === null || _g === void 0 ? void 0 : _g.requirement) ? (_h = boss.options) === null || _h === void 0 ? void 0 : _h.requirement.hint() : '',
                };
                encounterInfo.push(encounter);
                // Handling Trainer
            }
            else {
                const encounter = {
                    image: boss.image,
                    shiny: false,
                    hide: ((_j = boss.options) === null || _j === void 0 ? void 0 : _j.hide) ? (((_k = boss.options) === null || _k === void 0 ? void 0 : _k.requirement) ? !((_l = boss.options) === null || _l === void 0 ? void 0 : _l.requirement.isCompleted()) : (_m = boss.options) === null || _m === void 0 ? void 0 : _m.hide) : false,
                    hidden: false,
                    lock: ((_o = boss.options) === null || _o === void 0 ? void 0 : _o.requirement) ? !((_p = boss.options) === null || _p === void 0 ? void 0 : _p.requirement.isCompleted()) : false,
                    lockMessage: ((_q = boss.options) === null || _q === void 0 ? void 0 : _q.requirement) ? (_r = boss.options) === null || _r === void 0 ? void 0 : _r.requirement.hint() : '',
                };
                encounterInfo.push(encounter);
            }
        });
        return encounterInfo;
    }
}
/**
 * Data list that contains all dungeons, accessible by name.
 */
const dungeonList = {};
// Kanto Dungeons
dungeonList['Coelamon Beach'] = new Dungeon('Coelamon Beach', [
    { pokemon: 'Tanemon', options: { weight: 2.67 } },
    { pokemon: 'Alraumon', options: { weight: 2.67 } },
    { pokemon: 'Betamon', options: { weight: 2.67 } },
    { pokemon: 'Ganimon', options: { weight: 2.67 } },
    { pokemon: 'Kunemon', options: { weight: 2.67 } },
    { pokemon: 'Mushmon', options: { weight: 2.67 } },
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Dokunemon', 52, 6),
        new GymPokemon('Dokunemon', 52, 6),
    ], { weight: 1 }, 'Rick'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Kokuwamon', 52, 7),
        new GymPokemon('Kokuwamon', 52, 7),
        new GymPokemon('Mushmon', 52, 7),
    ], { weight: 1 }, 'Doug'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Mushmon', 52, 7),
        new GymPokemon('Betamon', 52, 8),
    ], { weight: 1 }, 'Anthony'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Mushmon', 52, 7),
        new GymPokemon('Kokuwamon', 52, 7),
        new GymPokemon('Dokunemon', 52, 7),
    ], { weight: 1 }, 'Charlie'),
], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Health', weight: 3.5 },
    { loot: 'Pokeball', weight: 3 },
    { loot: 'SmallRestore', weight: 1.75 },
    { loot: 'Plant_egg', weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Coelamon Beach')) },
    { loot: 'Purity_Digimental', weight: 0 },
], 116, [
    new DungeonBossPokemon('Shellmon', 522, 7),
    new DungeonTrainer('Bug Catcher', [new GymPokemon('Mori Shellmon', 522, 9)], { weight: 1 }, 'Sammy'),
], 50, 2);
dungeonList['Lost Colosseum'] = new Dungeon('Lost Colosseum', [
    { pokemon: 'Fugamon', options: { weight: 2.67 } },
    { pokemon: 'Drimogemon', options: { weight: 2.67 } },
    { pokemon: 'Minotaurmon', options: { weight: 2.67 } },
    { pokemon: 'Ganimon', options: { weight: 2.67 } },
    { pokemon: 'Golemon', options: { weight: 2.67 } },
    { pokemon: 'Meramon', options: { weight: 2.67 } },
    new DungeonTrainer('Hiker', [
        new GymPokemon('Fugamon', 2487, 26),
        new GymPokemon('Minotaurmon', 2487, 26),
    ], { weight: 1 }, 'Macy'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Meramon', 2487, 25),
        new GymPokemon('Meramon', 2487, 25),
        new GymPokemon('Golemon', 2487, 25),
    ], { weight: 1 }, 'Zina'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Flare Lizarmon', 2487, 26),
        new GymPokemon('Drimogemon', 2487, 26),
    ], { weight: 1 }, 'Josephine'),
    new DungeonTrainer('Lass', [
        new GymPokemon('Drimogemon', 2487, 25),
        new GymPokemon('Drimogemon', 2487, 25),
        new GymPokemon('Nise Drimogemon', 2487, 25),
    ], { weight: 1 }, 'Nina'),
], [
    { loot: 'xClick', weight: 4 },
    { loot: 'Lucky_floppy', weight: 4 },
    { loot: 'Mystery_egg', weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Lost Colosseum')) },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Backup', weight: 0 },
], 5527, [new DungeonBossPokemon('Skull Greymon', 24871, 27)], 650, 11);
dungeonList['Mugendramon\'s Mill'] = new Dungeon('Mugendramon\'s Mill', ['Megadramon', 'Mamemon', 'Giromon', 'Gigadramon', 'Big Mamemon', 'Andromon', 'Thunderballmon', 'Tankmon', 'Monochromon', 'Mechanorimon'], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Security', weight: 3.5 },
    { loot: 'Guilmon Bread', weight: 1.75 },
    { loot: 'Earth_egg', weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Mugendramon\'s Mill')) },
    { loot: 'Ultraball', weight: 1 },
    { loot: 'Purity_Digimental', weight: 0 },
], 30196, [
    new DungeonBossPokemon('Metal Greymon Virus', 100130, 39),
    new DungeonBossPokemon('Mugendramon', 135882, 52),
], 1250, 21);
dungeonList['Andromon\'s Factory'] = new Dungeon('Andromon\'s Factory', [
    { pokemon: 'Toy Agumon', options: { weight: 8.8 } },
    { pokemon: 'Kokuwamon', options: { weight: 8.8 } },
    { pokemon: 'Hagurumon', options: { weight: 8.8 } },
    { pokemon: 'Goburimon', options: { weight: 8.8 } },
    { pokemon: 'Clear Agumon', options: { weight: 8.8 } },
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Goburimon', 231, 12),
        new GymPokemon('Shamamon', 231, 12),
    ], { weight: 1 }, 'Kent'),
    new DungeonTrainer('Lass', [new GymPokemon('Candmon', 231, 13)], { weight: 1 }, 'Iris'),
    new DungeonTrainer('Super Nerd', [
        new GymPokemon('Clear Agumon', 231, 12),
        new GymPokemon('Clockmon', 231, 12),
    ], { weight: 1 }, 'Jovan'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Mechanorimon', 231, 11),
        new GymPokemon('Hagurumon', 231, 11),
        new GymPokemon('Hagurumon', 231, 11),
    ], { weight: 1 }, 'Robby'),
    new DungeonTrainer('Lass', [
        new GymPokemon('Clockmon', 231, 12),
        new GymPokemon('Gottsumon', 231, 12),
    ], { weight: 1 }, 'Miriam'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Gottsumon', 231, 11),
        new GymPokemon('Gottsumon', 231, 11),
        new GymPokemon('Gottsumon', 231, 11),
    ], { weight: 1 }, 'Josh'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Guardromon', 231, 11),
        new GymPokemon('Gottsumon', 231, 11),
        new GymPokemon('Hagurumon', 231, 11),
    ], { weight: 1 }, 'Marcy'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Hagurumon', 231, 11),
        new GymPokemon('Goburimon', 231, 11),
        new GymPokemon('Goburimon', 231, 11),
    ], { weight: 1 }, 'Zane'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Hagurumon', 231, 12),
        new GymPokemon('Goburimon', 231, 12),
    ], { weight: 1 }, 'Jayce'),
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Goburimon', 231, 12),
        new GymPokemon('Goburimon', 231, 12),
    ], { weight: 1 }, 'Mac'),
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Toy Agumon', 231, 12),
        new GymPokemon('Toy Agumon', 231, 12),
    ], { weight: 1 }, 'Gregory'),
], [
    { loot: 'xClick', weight: 4 },
    { loot: 'Item_magnet', weight: 4 },
    { loot: 'SmallRestore', weight: 1.75 },
    { loot: 'Greatball', weight: 1 },
    { loot: 'Evil Mark', weight: 1 },
    { loot: 'Hono Fossil', weight: 0, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Andromon\'s Factory')) },
    { loot: 'Hikari Fossil', weight: 0, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Andromon\'s Factory')) },
    { loot: 'Hope_Digimental', weight: 0 },
], 514, [
    new DungeonBossPokemon('Andromon', 2313, 15),
    new DungeonBossPokemon('Guardromon', 2313, 14),
], 75, 4, () => {
    if (App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Mt. Moon')]() <= 1) {
        /*const item = Rand.boolean() ? 'Hikari Fossil' : 'Hono Fossil';
        Underground.gainMineItem(Underground.getMineItemByName(item).id, 1);
        Notifier.notify({
            message: `You were awarded a ${GameConstants.humanifyString(item)} for defeating the Super Nerd`,
            type: NotificationConstants.NotificationOption.success,
            setting: NotificationConstants.NotificationSetting.Items.dungeon_item_found,
        });*/
    }
});
dungeonList['Digivice Temple'] = new Dungeon('Digivice Temple', [
    { pokemon: 'Shamamon', options: { weight: 20 } },
    { pokemon: 'Minotaurmon', options: { weight: 20 } },
    { pokemon: 'Monochromon', options: { weight: 20 } },
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Kokuwamon', 843, 18),
        new GymPokemon('Kokuwamon', 843, 18),
    ], { weight: 1 }, 'Ashton'),
    new DungeonTrainer('PokéManiac', [new GymPokemon('Leomon', 843, 19)], { weight: 1 }, 'Winston'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Goburimon', 843, 18),
        new GymPokemon('Shamamon', 843, 18),
    ], { weight: 1 }, 'Martha'),
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Dokunemon', 843, 18),
        new GymPokemon('Dokunemon', 843, 18),
    ], { weight: 1 }, 'Steve'),
    new DungeonTrainer('Hiker', [new GymPokemon('Orgemon', 843, 19)], { weight: 1 }, 'Allyn'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Hagurumon', 843, 18),
        new GymPokemon('Hagurumon', 843, 18),
    ], { weight: 1 }, 'Erica'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Kunemon', 843, 17),
        new GymPokemon('Kunemon', 843, 17),
        new GymPokemon('Numemon', 843, 17),
        new GymPokemon('Numemon', 843, 17),
    ], { weight: 1 }, 'Lina'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Betamon', 843, 17),
        new GymPokemon('Betamon', 843, 17),
        new GymPokemon('Betamon', 843, 17),
    ], { weight: 1 }, 'Olivia'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Mushmon', 843, 18),
        new GymPokemon('Mushmon', 843, 18),
    ], { weight: 1 }, 'Lucy'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Geremon', 843, 17),
        new GymPokemon('Mushmon', 843, 17),
        new GymPokemon('Geremon', 843, 17),
    ], { weight: 1 }, 'Sofia'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Geremon', 843, 17),
        new GymPokemon('Jungle Mojyamon', 843, 17),
        new GymPokemon('Geremon', 843, 17),
    ], { weight: 1 }, 'Darcy'),
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Toy Agumon', 843, 17),
        new GymPokemon('Shamamon', 843, 17),
        new GymPokemon('Shakomon', 843, 17),
    ], { weight: 1 }, 'Cooper'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Shakomon', 843, 18),
        new GymPokemon('Shakomon', 843, 18),
    ], { weight: 1 }, 'Leah'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Palmon', 843, 17),
        new GymPokemon('Alraumon', 843, 17),
        new GymPokemon('Alraumon', 843, 17),
    ], { weight: 1 }, 'Dana'),
], [
    { loot: 'xClick', weight: 4 },
    { loot: 'eBook', weight: 3.5 },
    { loot: 'Pokeball', weight: 3 },
    { loot: 'Greatball', weight: 2 },
    { loot: 'Guilmon Bread', weight: 1.75 },
    { loot: 'MediumRestore', weight: 1 },
    { loot: 'Dreamy Digizoid', weight: 1 },
    { loot: 'Digicores', weight: 0 },
    { loot: 'Evil Mark', weight: 0 },
], 1874, [
    new DungeonBossPokemon('Centalmon', 8433, 19),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Dokunemon', 2100, 19),
        new GymPokemon('Dokunemon', 2100, 19),
        new GymPokemon('Goburimon', 2100, 19),
        new GymPokemon('Goburimon', 2100, 19),
    ], { weight: 1 }, 'Ariana'),
], 500, 7);
dungeonList['Etemon\'s Pyramid'] = new Dungeon('Etemon\'s Pyramid', [
    { pokemon: 'Insekimon', options: { weight: 20 } },
    { pokemon: 'Scumon', options: { weight: 20 } },
    { pokemon: 'Sand Yanmamon', options: { weight: 20 } },
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Tortamon', 3731, 30),
        new GymPokemon('Tortamon', 3731, 30),
    ], { weight: 1 }, 'Duke'),
    new DungeonTrainer('PokéManiac', [new GymPokemon('Starmon', 3731, 31)], { weight: 1 }, 'Cliff'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Revolmon', 3731, 30),
        new GymPokemon('Tyranomon', 3731, 30),
    ], { weight: 1 }, 'Clyde'),
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Andromon', 3731, 30),
        new GymPokemon('Blikmon', 3731, 30),
    ], { weight: 1 }, 'Vinny'),
    new DungeonTrainer('Hiker', [new GymPokemon('Nise Drimogemon', 3731, 31)], { weight: 1 }, 'Grace'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Monochromon', 3731, 30),
        new GymPokemon('Monochromon', 3731, 30),
    ], { weight: 1 }, 'Vika'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Guardromon', 3731, 29),
        new GymPokemon('Guardromon', 3731, 29),
        new GymPokemon('Guardromon', 3731, 29),
        new GymPokemon('Hyougamon', 3731, 29),
    ], { weight: 1 }, 'Sandy'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Greymon', 3731, 30),
        new GymPokemon('Yanmamon', 3731, 30),
        new GymPokemon('Yanmamon', 3731, 30),
    ], { weight: 1 }, 'Carla'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Yukidarumon', 3731, 30),
        new GymPokemon('Yukidarumon', 3731, 30),
    ], { weight: 1 }, 'Jenny'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Unimon', 3731, 29),
        new GymPokemon('Unimon', 3731, 29),
        new GymPokemon('Unimon', 3731, 29),
    ], { weight: 1 }, 'Kathrin'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Geremon', 3731, 29),
        new GymPokemon('Jungle Mojyamon', 3731, 29),
        new GymPokemon('Geremon', 3731, 29),
    ], { weight: 1 }, 'Mira'),
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Toy Agumon', 3731, 29),
        new GymPokemon('Monochromon', 3731, 29),
        new GymPokemon('Monochromon', 3731, 29),
    ], { weight: 1 }, 'Douglas'),
], [
    { loot: 'xClick', weight: 4 },
    { loot: 'eBook', weight: 3.5 },
    { loot: 'Pokeball', weight: 3 },
    { loot: 'Greatball', weight: 2 },
    { loot: 'Guilmon Bread', weight: 1.75 },
    { loot: 'MediumRestore', weight: 1 },
    { loot: 'Dreamy Digizoid', weight: 1 },
    { loot: 'Digicores', weight: 0 },
    { loot: 'Evil Mark', weight: 0 },
], 8292, [
    new DungeonBossPokemon('Nanomon', 37314, 32),
    new DungeonBossPokemon('Etemon', 41314, 34),
], 1300, 13);
dungeonList['Metal Seadramon\'s Lair'] = new Dungeon('Metal Seadramon\'s Lair', ['Gesomon', 'Hangyomon', 'Rukamon', 'Whamon', 'Anomalocarimon', 'Waru Seadramon', 'Mega Seadramon', 'Seadramon'], [
    { loot: 'Lucky_floppy', weight: 4 },
    { loot: 'Games', weight: 3.5 },
    { loot: 'eBook', weight: 3.5 },
    { loot: 'Water_egg', weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Metal Seadramon\'s Lair')) },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Sincerity_Digimental', weight: 0 },
    { loot: 'Greatball', weight: 0, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Metal Seadramon\'s Lair')) },
    { loot: 'Ultraball', weight: 0, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Metal Seadramon\'s Lair')) },
], 23860, [
    new DungeonBossPokemon('Whamon Perfect', 100000, 43),
    new DungeonBossPokemon('Metal Seadramon', 107370, 45),
], 1000, 20);
dungeonList['Devimon Battle'] = new Dungeon('Devimon Battle', [
    { pokemon: 'Tukaimon', options: { weight: 21.3 } },
    { pokemon: 'Bakemon', options: { weight: 21.3 } },
    { pokemon: 'Goburimon', options: { weight: 21.3 } },
    new DungeonTrainer('Channeler', [new GymPokemon('Bakemon', 1157, 21)], { weight: 1 }, 'Hope'),
    new DungeonTrainer('Channeler', [new GymPokemon('Bakemon', 1157, 21)], { weight: 1 }, 'Patricia'),
    new DungeonTrainer('Channeler', [new GymPokemon('Soulmon', 1157, 21)], { weight: 1 }, 'Carly'),
    new DungeonTrainer('Channeler', [
        new GymPokemon('Bakemon', 1157, 20),
        new GymPokemon('Soulmon', 1157, 20),
    ], { weight: 1 }, 'Laurel'),
    new DungeonTrainer('Channeler', [new GymPokemon('Bakemon', 1157, 21)], { weight: 1 }, 'Jody'),
    new DungeonTrainer('Channeler', [new GymPokemon('Bakemon', 1157, 21)], { weight: 1 }, 'Paula'),
    new DungeonTrainer('Channeler', [new GymPokemon('Soulmon', 1157, 21)], { weight: 1 }, 'Ruth'),
    new DungeonTrainer('Channeler', [new GymPokemon('Bakemon', 1157, 21)], { weight: 1 }, 'Tammy'),
    new DungeonTrainer('Channeler', [new GymPokemon('Bakemon', 1157, 21)], { weight: 1 }, 'Karina'),
    new DungeonTrainer('Channeler', [new GymPokemon('Bakemon', 1157, 21)], { weight: 1 }, 'Janae'),
    new DungeonTrainer('Channeler', [
        new GymPokemon('Tukaimon', 1157, 19),
        new GymPokemon('Tukaimon', 1157, 19),
        new GymPokemon('Goburimon', 1157, 19),
    ], { weight: 1 }, 'Angelica'),
    new DungeonTrainer('Channeler', [new GymPokemon('Bakemon', 1157, 21)], { weight: 1 }, 'Jennifer'),
    new DungeonTrainer('Channeler', [new GymPokemon('Bakemon', 1157, 21)], { weight: 1 }, 'Emilia'),
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Tukaimon', 1157, 19),
        new GymPokemon('Tukaimon', 1157, 19),
        new GymPokemon('Tukaimon', 1157, 19),
    ], { weight: 1 }, 'Ross'),
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Soulmon', 1157, 20),
        new GymPokemon('Soulmon', 1157, 20),
    ], { weight: 1 }, 'Chris'),
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Soulmon', 1157, 18),
        new GymPokemon('Soulmon', 1157, 18),
        new GymPokemon('Tukaimon', 1157, 19),
        new GymPokemon('Tukaimon', 1157, 19),
    ], { weight: 1 }, 'Alex'),
], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Security', weight: 3.5 },
    { loot: 'Greatball', weight: 2.5 },
    { loot: 'Earth_egg', weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Devimon Battle')) },
    { loot: 'MediumRestore', weight: 0.5 },
    { loot: 'Evil Mark', weight: 0.5 },
    { loot: 'Guilmon Bread', weight: 0.5 },
    { loot: 'Black Digitron', weight: 0 },
    { loot: 'Ultraball', weight: 0 },
    { loot: 'LargeRestore', weight: 0 },
    { loot: 'Soothe_bell', weight: 0, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Devimon Battle')) },
    { loot: 'Kindness_Digimental', weight: 0, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Devimon Battle')) },
], 2572, [new DungeonBossPokemon('Devimon', 11574, 23)], 750, 10);
dungeonList['VenomVamdemon Rampage'] = new Dungeon('VenomVamdemon Rampage', ['Saberdramon', 'Tuskmon', 'Tyranomon', 'Wizarmon', 'Blue Meramon', 'Fantomon', 'Gigadramon', 'Parrotmon', 'Skull Satamon', 'Metal Tyranomon'], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Light', weight: 3.5 },
    { loot: 'Guilmon Bread', weight: 1.75 },
    { loot: 'Water_egg', weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('VenomVamdemon Rampage')) },
    { loot: 'Ultraball', weight: 1 },
    { loot: 'Sincerity_Digimental', weight: 0 },
], 21024, [
    new DungeonBossPokemon('Skull Mammon', 86130, 43),
    new DungeonBossPokemon('Venom Vamdemon', 94608, 47),
], 1250, 19);
dungeonList['Pinochimon\'s House'] = new Dungeon('Pinochimon\'s House', ['Jyagamon', 'Ookuwamon', 'Pumpmon', 'Gerbemon', 'Vermillimon', 'Ex-Tyranomon', 'Delumon', 'Kiwimon', 'Floramon', 'Woodmon'], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Light', weight: 3.5 },
    { loot: 'Guilmon Bread', weight: 1.75 },
    { loot: 'Plant_egg', weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Pinochimon\'s House')) },
    { loot: 'Ultraball', weight: 1 },
    { loot: 'Purity_Digimental', weight: 0 },
], 26916, [
    new DungeonBossPokemon('Jyureimon', 111111, 47),
    new DungeonBossPokemon('Pinochimon', 121122, 50),
], 1250, 21);
dungeonList['Vamdemon\'s Castle'] = new Dungeon('Vamdemon\'s Castle', [
    { pokemon: 'Saberdramon', options: { weight: 3.5 } },
    { pokemon: 'Soulmon', options: { weight: 3.5 } },
    { pokemon: 'Musyamon', options: { weight: 3.5 } },
    { pokemon: 'Minotaurmon', options: { weight: 3.5 } },
    { pokemon: 'Igamon', options: { weight: 3.5 } },
    { pokemon: 'Numemon', options: { weight: 3.5 } },
    { pokemon: 'Gorimon', options: { weight: 3.5 } },
    { pokemon: 'Geremon', options: { weight: 3.5 } },
    new DungeonTrainer('Youngster', [
        new GymPokemon('Musyamon', 7195, 37),
        new GymPokemon('Numemon', 7195, 37),
        new GymPokemon('Numemon', 7195, 37),
    ], { weight: 1 }, 'Johnson'),
    new DungeonTrainer('Burglar', [
        new GymPokemon('Saberdramon', 7195, 38),
        new GymPokemon('Saberdramon', 7195, 38),
    ], { weight: 1 }, 'Arnie'),
    new DungeonTrainer('Burglar', [new GymPokemon('Igamon', 7195, 39)], { weight: 1 }, 'Simon'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Gorimon', 7195, 37),
        new GymPokemon('Fugamon', 7195, 37),
        new GymPokemon('Hanumon', 7195, 37),
    ], { weight: 1 }, 'Braydon', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Geremon', 7195, 38),
        new GymPokemon('Numemon', 7195, 38),
    ], { weight: 1 }, 'Ted', '(male)'),
    new DungeonTrainer('Burglar', [
        new GymPokemon('Scumon', 7195, 38),
        new GymPokemon('Scumon', 7195, 38),
    ], { weight: 1 }, 'Lewis'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Igamon', 7195, 38),
        new GymPokemon('Blue Meramon', 7195, 38),
    ], { weight: 1 }, 'Ivan', '(male)'),
], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Step', weight: 3.5 },
    { loot: 'Music', weight: 3 },
    { loot: 'Ultraball', weight: 1.75 },
    { loot: 'Mystery_egg', weight: 1.5, requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Vamdemon\'s Castle')) },
    { loot: 'Fire_egg', weight: 0.5, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Vamdemon\'s Castle')) },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Hope_Digimental', weight: 0 },
    { loot: 'Courage_Digimental', weight: 0 },
    { loot: 'Black Digitron', weight: 0, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Vamdemon\'s Castle')) },
], 15989, [new DungeonBossPokemon('Vamdemon', 71950, 40)], 1500, 16);
dungeonList['Piemon\'s Observatory'] = new Dungeon('Piemon\'s Observatory', [
    { pokemon: 'Waru Monzaemon', options: { weight: 8.8 } },
    { pokemon: 'Waru Seadramon', options: { weight: 8.8 } },
    { pokemon: 'Boltmon', options: { weight: 8.8 } },
    { pokemon: 'Skull Mammon', options: { weight: 8.8 } },
    { pokemon: 'Master Tyranomon', options: { weight: 8.8 } },
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Megadramon', 15168, 48),
        new GymPokemon('Mammon', 15168, 48),
        new GymPokemon('Mammon', 15168, 48),
        new GymPokemon('Waru Seadramon', 15168, 48),
        new GymPokemon('Waru Seadramon', 15168, 48),
    ], { weight: 1 }, 'Naomi', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Ookuwamon', 15168, 48),
        new GymPokemon('Pumpmon', 15168, 48),
        new GymPokemon('Skull Satamon', 15168, 48),
        new GymPokemon('Triceramon', 15168, 48),
        new GymPokemon('Metal Mamemon', 15168, 48),
    ], { weight: 1 }, 'Rolando', '(male)'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Metal Mamemon', 15168, 49),
        new GymPokemon('Mamemon', 15168, 49),
        new GymPokemon('Tyranomon', 15168, 49),
    ], { weight: 1 }, 'Daisuke'),
    new DungeonTrainer('Juggler', [
        new GymPokemon('Tyranomon', 15168, 48),
        new GymPokemon('Tyranomon', 15168, 48),
        new GymPokemon('Metal Tyranomon', 15168, 48),
        new GymPokemon('Metal Tyranomon', 15168, 48),
    ], { weight: 1 }, 'Nelson'),
    new DungeonTrainer('Tamer', [
        new GymPokemon('Lady Devimon', 15168, 50),
        new GymPokemon('Jyureimon', 15168, 50),
    ], { weight: 1 }, 'Vincent'),
    new DungeonTrainer('Juggler', [new GymPokemon('Boltmon', 15168, 50)], { weight: 1 }, 'Gregory'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Etemon', 15168, 48),
        new GymPokemon('Etemon', 15168, 48),
        new GymPokemon('Fantomon', 15168, 48),
        new GymPokemon('Fantomon', 15168, 48),
        new GymPokemon('Digitamamon', 15168, 48),
    ], { weight: 1 }, 'George', '(male)'),
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Brachimon', 15168, 48),
        new GymPokemon('Atlur Kabuterimon Blue', 15168, 48),
        new GymPokemon('Atlur Kabuterimon Red', 15168, 48),
    ], { weight: 1 }, 'Dawson'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Anomalocarimon', 15168, 48),
        new GymPokemon('Anomalocarimon', 15168, 48),
        new GymPokemon('Dagomon', 15168, 48),
        new GymPokemon('Dagomon', 15168, 48),
        new GymPokemon('Gesomon', 15168, 48),
    ], { weight: 1 }, 'Alexa', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Gigadramon', 15168, 48),
        new GymPokemon('Gigadramon', 15168, 48),
        new GymPokemon('Megadramon', 15168, 48),
        new GymPokemon('Megadramon', 15168, 48),
        new GymPokemon('Master Tyranomon', 15168, 48),
    ], { weight: 1 }, 'Colby', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Monzaemon', 15168, 48),
        new GymPokemon('Monzaemon', 15168, 48),
        new GymPokemon('Monzaemon', 15168, 48),
        new GymPokemon('Waru Monzaemon', 15168, 48),
        new GymPokemon('Waru Monzaemon', 15168, 48),
    ], { weight: 1 }, 'Caroline', '(female)'),
], [
    { loot: 'xClick', weight: 3.75 },
    { loot: 'Lucky_pill', weight: 3.75 },
    { loot: 'Ultraball', weight: 1.75 },
    { loot: 'SmallRestore', weight: 1.75 },
    { loot: 'Evil Mark', weight: 1 },
    { loot: 'Wind_egg', weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Piemon\'s Observatory')) },
    { loot: 'Purity_Digimental', weight: 0 },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Digicores', weight: 0 },
], 33708, [
    new DungeonBossPokemon('King Etemon', 122975, 45),
    new DungeonBossPokemon('Piemon', 151686, 51),
    new DungeonTrainer('Backpacker (female)', [
        new GymPokemon('Angewomon', 61488, 45),
        new GymPokemon('Lady Devimon', 61488, 45),
    ], { weight: 1 }, 'Tyra'),
], 2000, 23);
dungeonList['Our War Game'] = new Dungeon('Our War Game', ['Kuramon', 'Tsumemon', 'Keramon', 'Chrysalimon'], [
    { loot: 'Pokeball', weight: 4 },
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Lucky_floppy', weight: 4 },
    { loot: 'Greatball', weight: 3 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'LargeRestore', weight: 1 },
    { loot: 'Gold Digizoid', weight: 0, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Our War Game')) },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(500, GameConstants.getDungeonIndex('Our War Game')) },
    { loot: 'Fate_Digimental', weight: 0, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Our War Game')) },
], 39421, [
    new DungeonBossPokemon('Infermon', 177394, 54),
    new DungeonBossPokemon('Diablomon', 255512, 100),
], 2500, 23);
// Johto Dungeons
dungeonList['Sprout Tower'] = new Dungeon('Sprout Tower', [
    { pokemon: 'Burpmon', options: { weight: 8 } },
    { pokemon: 'Burpmon', options: { weight: 8 } },
    { pokemon: 'Burpmon', options: { weight: 8 } },
    new DungeonTrainer('Sage', [
        new GymPokemon('Burpmon', 2500, 3),
        new GymPokemon('Burpmon', 2500, 3),
        new GymPokemon('Burpmon', 2500, 3),
    ], { weight: 1 }, 'Nico'),
    new DungeonTrainer('Sage', [
        new GymPokemon('Burpmon', 2500, 3),
        new GymPokemon('Burpmon', 2500, 3),
        new GymPokemon('Burpmon', 2500, 3),
    ], { weight: 1 }, 'Chow'),
    new DungeonTrainer('Sage', [
        new GymPokemon('Burpmon', 2500, 3),
        new GymPokemon('Burpmon', 2500, 3),
        new GymPokemon('Burpmon', 2500, 3),
    ], { weight: 1 }, 'Edmond'),
    new DungeonTrainer('Sage', [new GymPokemon('Burpmon', 2500, 6)], { weight: 1 }, 'Jin'),
    new DungeonTrainer('Sage', [new GymPokemon('Burpmon', 2500, 6)], { weight: 1 }, 'Neal'),
    new DungeonTrainer('Sage', [
        new GymPokemon('Burpmon', 2500, 7),
        new GymPokemon('Burpmon', 2500, 7),
    ], { weight: 1 }, 'Troy'),
], [
    { loot: 'xClick', weight: 4 },
    { loot: 'Lucky_floppy', weight: 3.5 },
    { loot: 'Lucky_pill', weight: 3.5 },
    { loot: 'Jungle Plate', weight: 2 },
    { loot: 'SmallRestore', weight: 1.75 },
    { loot: 'Plant_egg', weight: 1 },
], 56735, [
    new DungeonTrainer('Sage', [
        new GymPokemon('Burpmon', 86000, 7),
        new GymPokemon('Burpmon', 86000, 7),
        new GymPokemon('Burpmon', 87000, 10),
    ], { weight: 1 }, 'Li'),
], 2500, 31);
// All Unown except "E?!"
SeededRand.seed(1337);
const AlphUnownList = SeededRand.shuffleArray('ABCDFGHIJKLMNOPQRSTUVWXYZ'.split(''));
dungeonList['Ruins of Alph'] = new Dungeon('Ruins of Alph', [
    { pokemon: 'Burpmon', options: { weight: 0.6 } },
    { pokemon: 'Burpmon', options: { weight: 0.6 } },
    { pokemon: 'Burpmon', options: { weight: 0.6 } },
    { pokemon: 'Burpmon', options: { weight: 0.6 } },
    { pokemon: 'Burpmon', options: { weight: 0.6 } },
    { pokemon: 'Burpmon', options: { weight: 0.6 } },
    { pokemon: 'Burpmon', options: { weight: 0.6 } },
    new DungeonTrainer('Psychic', [new GymPokemon('Burpmon', 3000, 26)], { weight: 1 }, 'Nathan', '(male)'),
], [
    { loot: 'Chat', weight: 4 },
    { loot: 'Greatball', weight: 3.5 },
    { loot: 'Health', weight: 3.5 },
    { loot: 'Finance', weight: 3.5 },
    { loot: 'eBook', weight: 2.5 },
    { loot: 'SmallRestore', weight: 1.75 },
    { loot: 'Evil Mark', weight: 1 },
    { loot: 'Hope_Digimental', weight: 0.5 },
    { loot: 'LargeRestore', weight: 0 },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Gold Digizoid', weight: 0 },
    { loot: 'Hono Fossil', weight: 0 },
    { loot: 'Hikari Fossil', weight: 0 },
], 60600, [
    new DungeonBossPokemon('Burpmon', 800000, 50, {
        hide: true,
        requirement: new ObtainedPokemonRequirement(pokemonMap['Burpmon'], true),
    }),
    ...AlphUnownList.map((char) => new DungeonBossPokemon(`Unown (${char})`, 280000, 14, {
        hide: true,
        requirement: new SeededDateRequirement(() => SeededDateRand.fromArray(AlphUnownList) == char),
    })),
], 3000, 32);
dungeonList['Union Cave'] = new Dungeon('Union Cave', [
    { pokemon: 'Burpmon', options: { weight: 1.5 } },
    { pokemon: 'Burpmon', options: { weight: 1.5 } },
    { pokemon: 'Burpmon', options: { weight: 1.5 } },
    { pokemon: 'Burpmon', options: { weight: 1.5 } },
    { pokemon: 'Burpmon', options: { weight: 1.5 } },
    { pokemon: 'Burpmon', options: { weight: 1.5 } },
    { pokemon: 'Burpmon', options: { weight: 1.5 } },
    { pokemon: 'Burpmon', options: { weight: 1.5 } },
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 2000, 4),
        new GymPokemon('Burpmon', 3000, 6),
        new GymPokemon('Burpmon', 4000, 8),
    ], { weight: 1 }, 'Russell'),
    new DungeonTrainer('Firebreather', [
        new GymPokemon('Burpmon', 3000, 6),
        new GymPokemon('Burpmon', 3000, 6),
    ], { weight: 1 }, 'Bill'),
    new DungeonTrainer('PokéManiac', [new GymPokemon('Burpmon', 3000, 10)], { weight: 1 }, 'Larry'),
], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'xClick', weight: 4 },
    { loot: 'Burpmon', weight: 3.5 },
    { loot: 'Greatball', weight: 3 },
    { loot: 'SmallRestore', weight: 1.75 },
    { loot: 'Guilmon Bread', weight: 1.75 },
    { loot: 'LargeRestore', weight: 1 },
    { loot: 'Ultraball', weight: 0 },
], 63600, [
    new DungeonTrainer('Hiker', [new GymPokemon('Burpmon', 300000, 11)], { weight: 1 }, 'Daniel'),
    new DungeonTrainer('Firebreather', [new GymPokemon('Burpmon', 300000, 9)], { weight: 1 }, 'Ray'),
], 3000, 32);
dungeonList['Burpmon Well'] = new Dungeon('Burpmon Well', [
    { pokemon: 'Burpmon', options: { weight: 6 } },
    { pokemon: 'Burpmon', options: { weight: 6 } },
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 3500, 9),
        new GymPokemon('Burpmon', 3500, 9),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 3500, 9),
        new GymPokemon('Burpmon', 3500, 11),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 3500, 7),
        new GymPokemon('Burpmon', 3500, 9),
        new GymPokemon('Burpmon', 3500, 9),
    ], { weight: 1 }, undefined, '(male)'),
], [
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Item_magnet', weight: 3.75 },
    { loot: 'Greatball', weight: 2 },
    { loot: 'Deep Plate', weight: 2 },
    { loot: 'Kings_rock', weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Burpmon Well')) },
    { loot: 'Water_egg', weight: 0.5 },
    { loot: 'MediumRestore', weight: 0.5 },
], 67900, [
    new DungeonTrainer('Rocket Executive', [new GymPokemon('Burpmon', 320000, 14)], { weight: 1 }, 'Proton', '(proton)'),
], 3500, 33);
dungeonList['Ilex Forest'] = new Dungeon('Ilex Forest', [
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Burpmon', 4000, 8),
        new GymPokemon('Burpmon', 4000, 10),
    ], { weight: 1 }, 'Wayne'),
], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Lucky_pill', weight: 3.75 },
    { loot: 'Code Plate', weight: 2 },
    { loot: 'Guilmon Bread', weight: 1.75 },
    { loot: 'MediumRestore', weight: 1 },
    { loot: 'Empire Plate', weight: 0 },
], 82200, [
    new DungeonBossPokemon('Burpmon', 340000, 30),
    new DungeonBossPokemon('Burpmon', 340000, 30),
    new DungeonBossPokemon('Burpmon', 340000, 30),
    new DungeonBossPokemon('Burpmon', 800000, 50, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion) }),
], 4000, 34);
dungeonList['Burned Tower'] = new Dungeon('Burned Tower', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'Item_magnet', weight: 4 },
    { loot: 'xAttack', weight: 3.75 },
    { loot: 'Roar Plate', weight: 2 },
    { loot: 'Ultraball', weight: 1.75 },
    { loot: 'Guilmon Bread', weight: 1.25 },
    { loot: 'Electric_egg', weight: 0 },
    { loot: 'Water_egg', weight: 0 },
    { loot: 'Fire_egg', weight: 0 },
], 88500, [new DungeonBossPokemon('Burpmon', 360000, 35), new DungeonBossPokemon('Burpmon', 320000, 35), new DungeonBossPokemon('Burpmon', 610000, 50)], 4500, 37);
dungeonList['Tin Tower'] = new Dungeon('Tin Tower', ['Burpmon', 'Burpmon'], [
    { loot: 'xClick', weight: 4 },
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'Nightmare Plate', weight: 2 },
    { loot: 'Roar Plate', weight: 2 },
    { loot: 'Guardian Plate', weight: 2 },
    { loot: 'MediumRestore', weight: 1.75 },
    { loot: 'Fire_egg', weight: 1 },
    { loot: 'Broken Digivice', weight: 0 },
], 88500, [
    new DungeonBossPokemon('Burpmon', 380000, 35),
    new DungeonBossPokemon('Burpmon', 380000, 35),
    new DungeonBossPokemon('Burpmon', 1410000, 100, { requirement: new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Burpmon),
            new ObtainedPokemonRequirement(pokemonMap.Burpmon),
            new ObtainedPokemonRequirement(pokemonMap.Burpmon),
        ]) }),
], 4500, 37);
dungeonList['Whirl Islands'] = new Dungeon('Whirl Islands', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'Lucky_floppy', weight: 4 },
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'Trojan Plate', weight: 2 },
    { loot: 'Guardian Plate', weight: 2 },
    { loot: 'Guilmon Bread', weight: 1.75 },
    { loot: 'Water_egg', weight: 1 },
    { loot: 'Broken Digivice', weight: 0 },
], 92800, [new DungeonBossPokemon('Burpmon', 400000, 40), new DungeonBossPokemon('Burpmon', 400000, 40), new DungeonBossPokemon('Burpmon', 1410000, 100)], 5000, 41);
dungeonList['Mt Mortar'] = new Dungeon('Mt Mortar', [
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Burpmon', 5500, 17),
        new GymPokemon('Burpmon', 5500, 17),
    ], { weight: 1 }, 'Miller'),
    new DungeonTrainer('Super Nerd', [new GymPokemon('Burpmon', 5500, 19)], { weight: 1 }, 'Markus'),
    new DungeonTrainer('Super Nerd', [new GymPokemon('Burpmon', 5500, 39)], { weight: 1 }, 'Hugh'),
], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Burpmon', weight: 3.25 },
    { loot: 'Simple Plate', weight: 2 },
    { loot: 'Nature Plate', weight: 2 },
    { loot: 'Nature Plate', weight: 2 },
    { loot: 'Nightmare Plate', weight: 2 },
    { loot: 'Ultraball', weight: 1.75 },
    { loot: 'LargeRestore', weight: 1.75 },
    { loot: 'Guilmon Bread', weight: 1.75 },
    { loot: 'Earth_egg', weight: 1 },
    { loot: 'Dragon_scale', weight: 0.75, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Mt Mortar')) },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Protector', weight: 0, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Mt Mortar')) },
], 104100, [
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Burpmon', 210000, 34),
        new GymPokemon('Burpmon', 210000, 34),
    ], { weight: 1 }, 'Kiyo'),
    new DungeonBossPokemon('Burpmon', 420000, 45, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt Mortar')) }),
], 5500, 42);
dungeonList['Team Rockets Hideout'] = new Dungeon('Team Rockets Hideout', [
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    { pokemon: 'Burpmon', options: { weight: 0.5 } },
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5500, 16),
        new GymPokemon('Burpmon', 5500, 16),
        new GymPokemon('Burpmon', 5500, 16),
        new GymPokemon('Burpmon', 5500, 16),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Burpmon', 5500, 20),
        new GymPokemon('Burpmon', 5500, 20),
        new GymPokemon('Burpmon', 5500, 20),
    ], { weight: 1 }, 'Jed', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5500, 17),
        new GymPokemon('Burpmon', 5500, 19),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5500, 16),
        new GymPokemon('Burpmon', 5500, 17),
        new GymPokemon('Burpmon', 5500, 18),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5500, 18),
        new GymPokemon('Burpmon', 5500, 18),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Burpmon', 5500, 18)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5500, 17),
        new GymPokemon('Burpmon', 5500, 17),
        new GymPokemon('Burpmon', 5500, 17),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5500, 18),
        new GymPokemon('Burpmon', 5500, 18),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Burpmon', 5500, 19)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Burpmon', 5500, 22),
        new GymPokemon('Burpmon', 5500, 22),
    ], { weight: 1 }, 'Ross', '(male)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Burpmon', 5500, 24)], { weight: 1 }, 'Mitch', '(male)'),
], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Burpmon', weight: 3.5 },
    { loot: 'Release Plate', weight: 2 },
    { loot: 'Deep Plate', weight: 2 },
    { loot: 'Ultraball', weight: 1.75 },
    { loot: 'Guilmon Bread', weight: 1.75 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Team Rockets Hideout')) },
], 104100, [
    new DungeonTrainer('Rocket Executive', [
        new GymPokemon('Burpmon', 140000, 22),
        new GymPokemon('Burpmon', 140000, 22),
        new GymPokemon('Burpmon', 140000, 24),
    ], { weight: 1 }, 'Petrel', '(petrel)'),
    new DungeonTrainer('Rocket Executive', [
        new GymPokemon('Burpmon', 140000, 23),
        new GymPokemon('Burpmon', 140000, 23),
        new GymPokemon('Burpmon', 140000, 25),
    ], { weight: 1 }, 'Ariana', '(ariana)'),
], 5500, 43);
dungeonList['Radio Tower'] = new Dungeon('Radio Tower', [
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Burpmon', 5750, 27)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5750, 23),
        new GymPokemon('Burpmon', 5750, 23),
        new GymPokemon('Burpmon', 5750, 25),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5750, 24),
        new GymPokemon('Burpmon', 5750, 24),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Burglar', [
        new GymPokemon('Burpmon', 5500, 26),
        new GymPokemon('Burpmon', 5500, 24),
    ], { weight: 1 }, 'Eddie'),
    new DungeonTrainer('Burglar', [
        new GymPokemon('Burpmon', 5500, 23),
        new GymPokemon('Burpmon', 5500, 25),
        new GymPokemon('Burpmon', 5500, 23),
    ], { weight: 1 }, 'Duncan'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5750, 25),
        new GymPokemon('Burpmon', 5750, 25),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5750, 24),
        new GymPokemon('Burpmon', 5750, 24),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5750, 26),
        new GymPokemon('Burpmon', 5750, 23),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5750, 25),
        new GymPokemon('Burpmon', 5750, 25),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5750, 24),
        new GymPokemon('Burpmon', 5750, 24),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Burpmon', 5750, 26)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5750, 21),
        new GymPokemon('Burpmon', 5750, 21),
        new GymPokemon('Burpmon', 5750, 21),
        new GymPokemon('Burpmon', 5750, 21),
        new GymPokemon('Burpmon', 5750, 21),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5750, 23),
        new GymPokemon('Burpmon', 5750, 23),
        new GymPokemon('Burpmon', 5750, 25),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5750, 26),
        new GymPokemon('Burpmon', 5750, 26),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5750, 23),
        new GymPokemon('Burpmon', 5750, 23),
        new GymPokemon('Burpmon', 5750, 23),
        new GymPokemon('Burpmon', 5750, 23),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Burpmon', 5500, 27),
        new GymPokemon('Burpmon', 5500, 27),
        new GymPokemon('Burpmon', 5500, 27),
    ], { weight: 1 }, 'Marc', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Burpmon', 5750, 26)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5750, 24),
        new GymPokemon('Burpmon', 5750, 26),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5750, 22),
        new GymPokemon('Burpmon', 5750, 24),
        new GymPokemon('Burpmon', 5750, 22),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Burpmon', 5750, 30)], { weight: 1 }, 'Rich', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Burpmon', 5750, 21),
        new GymPokemon('Burpmon', 5750, 23),
        new GymPokemon('Burpmon', 5750, 21),
        new GymPokemon('Burpmon', 5750, 24),
    ], { weight: 1 }, undefined, '(female)'),
], [
    { loot: 'xClick', weight: 3.75 },
    { loot: 'Lucky_pill', weight: 3.75 },
    { loot: 'Games', weight: 2 },
    { loot: 'Security', weight: 2 },
    { loot: 'Step', weight: 2 },
    { loot: 'eBook', weight: 2 },
    { loot: 'Health', weight: 2 },
    { loot: 'Light', weight: 2 },
    { loot: 'Music', weight: 2 },
    { loot: 'Backup', weight: 2 },
    { loot: 'Sleep', weight: 2 },
    { loot: 'Calendar', weight: 2 },
    { loot: 'Weather', weight: 2 },
    { loot: 'Ultraball', weight: 1.75 },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Hacking', weight: 0, requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Radio Tower')) },
], 112000, [
    new DungeonTrainer('Rocket Executive', [
        new GymPokemon('Burpmon', 143000, 33),
        new GymPokemon('Burpmon', 143000, 32),
        new GymPokemon('Burpmon', 144000, 35),
    ], { weight: 1 }, 'Archer', '(archer)'),
    new DungeonTrainer('Rocket Executive', [new GymPokemon('Burpmon', 430000, 36)], { weight: 1 }, 'Proton', '(proton)'),
    new DungeonTrainer('Rocket Executive', [
        new GymPokemon('Burpmon', 71000, 30),
        new GymPokemon('Burpmon', 71000, 30),
        new GymPokemon('Burpmon', 71000, 30),
        new GymPokemon('Burpmon', 71000, 30),
        new GymPokemon('Burpmon', 72000, 32),
        new GymPokemon('Burpmon', 71000, 30),
    ], { weight: 1 }, 'Petrel', '(petrel)'),
    new DungeonTrainer('Rocket Executive', [
        new GymPokemon('Burpmon', 143000, 32),
        new GymPokemon('Burpmon', 143000, 32),
        new GymPokemon('Burpmon', 144000, 32),
    ], { weight: 1 }, 'Ariana', '(ariana)'),
], 5750, 43);
dungeonList['Ice Path'] = new Dungeon('Ice Path', ['Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xClick', weight: 3.5 },
    { loot: 'Lucky_pill', weight: 3.5 },
    { loot: 'Intel_floppy', weight: 3.5 },
    { loot: 'Guardian Plate', weight: 2 },
    { loot: 'Guilmon Bread', weight: 1 },
    { loot: 'Wind_egg', weight: 0.5 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(450, GameConstants.getDungeonIndex('Ice Path')) },
], 120400, [new DungeonBossPokemon('Burpmon', 440000, 50)], 6000, 44);
dungeonList['Dark Cave'] = new Dungeon('Dark Cave', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'Pokeball', weight: 4 },
    { loot: 'Item_magnet', weight: 4 },
    { loot: 'Release Plate', weight: 2 },
    { loot: 'SmallRestore', weight: 1.5 },
    { loot: 'Guilmon Bread', weight: 1 },
    { loot: 'Evil Mark', weight: 1 },
    { loot: 'LargeRestore', weight: 0.5 },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Digicores', weight: 0 },
], 127000, [new DungeonBossPokemon('Burpmon', 460000, 55)], 6500, 45);
dungeonList['Victory Road Johto'] = new Dungeon('Victory Road Johto', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'Item_magnet', weight: 4 },
    { loot: 'Burpmon', weight: 3.25 },
    { loot: 'Nature Plate', weight: 2 },
    { loot: 'Ultraball', weight: 1.75 },
    { loot: 'SmallRestore', weight: 1.5 },
    { loot: 'LargeRestore', weight: 1 },
    { loot: 'Dragon_scale', weight: 0 },
    { loot: 'Broken Digivice', weight: 0 },
], 128500, [
    new DungeonBossPokemon('Burpmon', 500000, 55),
    new DungeonBossPokemon('Burpmon', 500000, 55),
], 7000, 46);
dungeonList['Mt Silver'] = new Dungeon('Mt Silver', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'Intel_floppy', weight: 3.75 },
    { loot: 'Lucky_pill', weight: 3.75 },
    { loot: 'Cure Plate', weight: 2 },
    { loot: 'Empire Plate', weight: 2 },
    { loot: 'Ultraball', weight: 1.75 },
    { loot: 'LargeRestore', weight: 1.75 },
    { loot: 'Guilmon Bread', weight: 1.5 },
    { loot: 'Evil Mark', weight: 1 },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Digicores', weight: 0 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(450, GameConstants.getDungeonIndex('Mt Silver')) },
    { loot: 'Light_Digimental', weight: 0, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Mt Silver')) },
], 130500, [new DungeonBossPokemon('Burpmon', 840000, 60)], 10000, 28);
// Hoenn Dungeons
dungeonList['Petalburg Woods'] = new Dungeon('Petalburg Woods', [
    { pokemon: 'Burpmon', options: { weight: 1.33 } },
    { pokemon: 'Burpmon', options: { weight: 1.33 } },
    { pokemon: 'Burpmon', options: { weight: 1.33 } },
    { pokemon: 'Burpmon', options: { weight: 1.33 } },
    { pokemon: 'Burpmon', options: { weight: 1.33 } },
    { pokemon: 'Burpmon', options: { weight: 1.33 } },
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Burpmon', 12000, 3),
        new GymPokemon('Burpmon', 12000, 3),
        new GymPokemon('Burpmon', 12000, 3),
        new GymPokemon('Burpmon', 12000, 3),
    ], { weight: 1 }, 'Lyle'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Burpmon', 12000, 6),
        new GymPokemon('Burpmon', 12000, 6),
    ], { weight: 1 }, 'James'),
], [
    { loot: 'Pokeball', weight: 3.75 },
    { loot: 'Intel_floppy', weight: 3.75 },
    { loot: 'Greatball', weight: 3 },
    { loot: 'Jungle Plate', weight: 2 },
    { loot: 'Code Plate', weight: 2 },
    { loot: 'Simple Plate', weight: 2 },
    { loot: 'SmallRestore', weight: 1.75 },
    { loot: 'Plant_egg', weight: 1 },
], 380000, [
    new DungeonBossPokemon('Burpmon', 860000, 10, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Petalburg Woods')) }),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Burpmon', 860000, 9)], { weight: 1 }, undefined, '(male)'),
], 12000, 101);
dungeonList['Rusturf Tunnel'] = new Dungeon('Rusturf Tunnel', [
    { pokemon: 'Burpmon', options: { weight: 4 } },
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 14000, 16),
        new GymPokemon('Burpmon', 14000, 16),
        new GymPokemon('Burpmon', 14000, 16),
    ], { weight: 1 }, 'Mike'),
], [
    { loot: 'xClick', weight: 3.75 },
    { loot: 'Pokeball', weight: 3.75 },
    { loot: 'Lucky_pill', weight: 3.75 },
    { loot: 'Nature Plate', weight: 2 },
    { loot: 'Simple Plate', weight: 2 },
    { loot: 'Nature Plate', weight: 2 },
    { loot: 'Guilmon Bread', weight: 1 },
    { loot: 'Evil Mark', weight: 0.5 },
    { loot: 'XAntibody', weight: 0.5 },
    { loot: 'Digicores', weight: 0 },
], 400000, [
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Burpmon', 900000, 11)], { weight: 1 }, undefined, '(male)'),
], 14000, 101);
dungeonList['Granite Cave'] = new Dungeon('Granite Cave', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'Pokeball', weight: 3.75 },
    { loot: 'xAttack', weight: 3.75 },
    { loot: 'Lucky_pill', weight: 3.75 },
    { loot: 'Simple Plate', weight: 2 },
    { loot: 'Nature Plate', weight: 2 },
    { loot: 'Empty Tag', weight: 1.75 },
    { loot: 'Guilmon Bread', weight: 1.75 },
    { loot: 'MediumRestore', weight: 1 },
    { loot: 'Evil Mark', weight: 1 },
    { loot: 'XAntibody', weight: 1 },
    { loot: 'Digicores', weight: 0 },
], 410000, [new DungeonBossPokemon('Burpmon', 960000, 20), new DungeonBossPokemon('Burpmon', 660000, 20)], 16000, 101);
dungeonList['Fiery Path'] = new Dungeon('Fiery Path', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xAttack', weight: 3.75 },
    { loot: 'Item_magnet', weight: 3.75 },
    { loot: 'Roar Plate', weight: 2 },
    { loot: 'Nightmare Plate', weight: 2 },
    { loot: 'Wind_egg', weight: 1.5 },
    { loot: 'Fire_egg', weight: 1.5 },
    { loot: 'Courage_Digimental', weight: 1 },
], 424000, [new DungeonBossPokemon('Burpmon', 1200000, 20)], 17000, 101);
dungeonList['Meteor Falls'] = new Dungeon('Meteor Falls', [
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    new DungeonTrainer('Old Couple', [
        new GymPokemon('Burpmon', 18000, 39),
        new GymPokemon('Burpmon', 18000, 39),
    ], { weight: 1 }, 'John and Jay'),
], [
    { loot: 'Lucky_floppy', weight: 4 },
    { loot: 'Pokeball', weight: 3.5 },
    { loot: 'Greatball', weight: 3 },
    { loot: 'Nature Plate', weight: 2 },
    { loot: 'Simple Plate', weight: 2 },
    { loot: 'Guardian Plate', weight: 2 },
    { loot: 'Nightmare Plate', weight: 2 },
    { loot: 'Mystery_egg', weight: 1.5 },
    { loot: 'Evil Mark', weight: 1 },
    { loot: 'Hope_Digimental', weight: 0 },
], 443000, [
    new DungeonBossPokemon('Burpmon', 1240000, 20),
    new DungeonBossPokemon('Burpmon', 1240000, 20),
    new DungeonTrainer('Dragon Tamer', [
        new GymPokemon('Burpmon', 640000, 37),
        new GymPokemon('Burpmon', 640000, 37),
    ], { weight: 1 }, 'Nicolas'),
], 18000, 101);
dungeonList['Mt. Chimney Crater'] = new Dungeon('Mt. Chimney Crater', [
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Burpmon', 20000, 20)], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Burpmon', 20000, 20)], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Magma Admin', [
        new GymPokemon('Burpmon', 18000, 18),
        new GymPokemon('Burpmon', 20000, 20),
        new GymPokemon('Burpmon', 22000, 22),
        new GymPokemon('Burpmon', 22000, 22),
    ], { weight: 1 }, 'Tabitha'),
], [
    { loot: 'xAttack', weight: 3.75 },
    { loot: 'Intel_floppy', weight: 3.5 },
    { loot: 'Roar Plate', weight: 2 },
    { loot: 'Fire_egg', weight: 1.5 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Mt. Chimney Crater')) },
], 460000, [
    new DungeonTrainer('Magma Leader', [
        new GymPokemon('Burpmon', 450000, 24),
        new GymPokemon('Burpmon', 450000, 24),
        new GymPokemon('Burpmon', 470000, 25),
    ], { weight: 1 }, 'Maxie'),
], 20000, 101);
dungeonList['Jagged Pass'] = new Dungeon('Jagged Pass', [
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 22000, 20),
        new GymPokemon('Burpmon', 22000, 20),
    ], { weight: 1 }, 'Eric'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Burpmon', 22000, 19),
        new GymPokemon('Burpmon', 22000, 19),
        new GymPokemon('Burpmon', 22000, 19),
    ], { weight: 1 }, 'Diana'),
    new DungeonTrainer('Picnicker', [new GymPokemon('Burpmon', 22000, 21)], { weight: 1 }, 'Autumn'),
    new DungeonTrainer('Triathlete', [new GymPokemon('Burpmon', 22000, 21)], { weight: 1 }, 'Julio', '(malecycling)'),
    new DungeonTrainer('Camper', [
        new GymPokemon('Burpmon', 22000, 20),
        new GymPokemon('Burpmon', 22000, 20),
    ], { weight: 1 }, 'Ethan'),
], [
    { loot: 'xClick', weight: 3.5 },
    { loot: 'Lucky_pill', weight: 3.5 },
    { loot: 'Greatball', weight: 2.5 },
    { loot: 'Release Plate', weight: 2 },
    { loot: 'Nature Plate', weight: 2 },
    { loot: 'Hope_Digimental', weight: 1 },
], 460000, [
    new DungeonTrainer('Team Magma Grunt', [
        new GymPokemon('Burpmon', 700000, 22),
        new GymPokemon('Burpmon', 700000, 22),
    ], { weight: 1 }, undefined, '(male)'),
], 22000, 101);
dungeonList['New Mauville'] = new Dungeon('New Mauville', ['Burpmon', 'Burpmon'], [
    { loot: 'Lucky_floppy', weight: 4 },
    { loot: 'Games', weight: 3.75 },
    { loot: 'Burpmon', weight: 3.25 },
    { loot: 'Security', weight: 3 },
    { loot: 'Ultraball', weight: 3 },
    { loot: 'Empire Plate', weight: 2.5 },
    { loot: 'Knowledge_Digimental', weight: 2 },
    { loot: 'Metal_coat', weight: 2 },
    { loot: 'Electric_egg', weight: 1.5 },
], 460000, [
    new DungeonBossPokemon('Burpmon', 1650000, 20),
    new DungeonBossPokemon('Burpmon', 1650000, 20),
], 24000, 101);
dungeonList['Weather Institute'] = new Dungeon('Weather Institute', [
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Burpmon', 39000, 28)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Burpmon', 39000, 27),
        new GymPokemon('Burpmon', 39000, 27),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Burpmon', 39000, 27),
        new GymPokemon('Burpmon', 39000, 27),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Burpmon', 39000, 27),
        new GymPokemon('Burpmon', 39000, 27),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Burpmon', 39000, 26),
        new GymPokemon('Burpmon', 39000, 26),
        new GymPokemon('Burpmon', 39000, 26),
    ], { weight: 1 }, undefined, '(male)'),
], [
    { loot: 'xAttack', weight: 3.75 },
    { loot: 'Lucky_pill', weight: 3.5 },
    { loot: 'Rage Digizoid', weight: 2.25 },
    { loot: 'Rush Digizoid', weight: 2.25 },
    { loot: 'Vigor Digizoid', weight: 2.25 },
    { loot: 'Guard Digizoid', weight: 2.25 },
    { loot: 'Deep Plate', weight: 2 },
    { loot: 'Love_Digimental', weight: 1 },
], 470000, [
    new DungeonTrainer('Aqua Admin', [
        new GymPokemon('Burpmon', 910000, 28),
        new GymPokemon('Burpmon', 910000, 28),
    ], { weight: 1 }, 'Shelly', '(shelly)'),
    new DungeonBossPokemon('Burpmon', 1820000, 20, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Weather Institute')) }),
], 26000, 101);
//TODO
dungeonList['Mt. Pyre'] = new Dungeon('Mt. Pyre', [
    { pokemon: 'Burpmon', options: { weight: 12 } },
    { pokemon: 'Burpmon', options: { weight: 12 } },
    { pokemon: 'Burpmon', options: { weight: 12 } },
    { pokemon: 'Burpmon', options: { weight: 12 } },
    { pokemon: 'Burpmon', options: { weight: 12 } },
    new DungeonTrainer('PokéManiac', [new GymPokemon('Burpmon', 28000, 31)], { weight: 1 }, 'Mark'),
    new DungeonTrainer('Hex Maniac', [new GymPokemon('Burpmon', 28000, 31)], { weight: 1 }, 'Leah', '(hoenn)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Burpmon', 28000, 31)], { weight: 1 }, 'Zander'),
    new DungeonTrainer('Young Couple', [
        new GymPokemon('Burpmon', 28000, 31),
        new GymPokemon('Burpmon', 28000, 31),
    ], { weight: 1 }, 'Dez & Luke'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Burpmon', 28000, 26),
        new GymPokemon('Burpmon', 28000, 26),
        new GymPokemon('Burpmon', 28000, 26),
    ], { weight: 1 }, 'Kayla', '(female)'),
    new DungeonTrainer('Pokémon Breeder', [
        new GymPokemon('Burpmon', 15000, 26),
        new GymPokemon('Burpmon', 15000, 26),
        new GymPokemon('Burpmon', 15000, 26),
        new GymPokemon('Burpmon', 15000, 26),
        new GymPokemon('Burpmon', 15000, 26),
        new GymPokemon('Burpmon', 15000, 26),
    ], { weight: 1 }, 'Gabrielle', '(female)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Burpmon', 28000, 26),
        new GymPokemon('Burpmon', 28000, 26),
        new GymPokemon('Burpmon', 28000, 26),
    ], { weight: 1 }, 'William', '(male)'),
    new DungeonTrainer('Hex Maniac', [new GymPokemon('Burpmon', 28000, 32)], { weight: 1 }, 'Tasha', '(hoenn)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Burpmon', 28000, 32)], { weight: 1 }, 'Atsushi'),
    new DungeonTrainer('Hex Maniac', [new GymPokemon('Burpmon', 28000, 32)], { weight: 1 }, 'Valerie', '(hoenn)'),
    new DungeonTrainer('Psychic', [new GymPokemon('Burpmon', 28000, 32)], { weight: 1 }, 'Cedric', '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Burpmon', 28000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Burpmon', 28000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Burpmon', 28000, 30),
        new GymPokemon('Burpmon', 28000, 30),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Burpmon', 28000, 30),
        new GymPokemon('Burpmon', 28000, 30),
    ], { weight: 1 }, undefined, '(female)'),
], [
    { loot: 'xAttack', weight: 3.75 },
    { loot: 'Lucky_floppy', weight: 3.75 },
    { loot: 'Ultraball', weight: 2.5 },
    { loot: 'Nightmare Plate', weight: 2 },
    { loot: 'Cure Plate', weight: 2 },
    { loot: 'Trojan Plate', weight: 2 },
    { loot: 'Fate_Digimental', weight: 0.5, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Mt. Pyre')) },
    { loot: 'Miracles_Digimental', weight: 0.5, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Mt. Pyre')) },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Mt. Pyre')) },
], 480000, [
    new DungeonBossPokemon('Burpmon', 1880000, 20),
    new DungeonBossPokemon('Burpmon', 1890000, 20),
    new DungeonBossPokemon('Burpmon', 1880000, 20),
], 28000, 101);
dungeonList['Magma Hideout'] = new Dungeon('Magma Hideout', [
    { pokemon: 'Burpmon', options: { weight: 12 } },
    { pokemon: 'Burpmon', options: { weight: 12 } },
    { pokemon: 'Burpmon', options: { weight: 12 } },
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Burpmon', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Burpmon', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Burpmon', 29000, 29)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Magma Grunt', [
        new GymPokemon('Burpmon', 29000, 28),
        new GymPokemon('Burpmon', 29000, 28),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Burpmon', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Burpmon', 29000, 29)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Burpmon', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Burpmon', 29000, 29)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Burpmon', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Magma Admin', [
        new GymPokemon('Burpmon', 6000, 26),
        new GymPokemon('Burpmon', 8000, 28),
        new GymPokemon('Burpmon', 10000, 30),
        new GymPokemon('Burpmon', 13000, 33),
    ], { weight: 1 }, 'Tabitha'),
], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Music', weight: 3.5 },
    { loot: 'Light', weight: 3 },
    { loot: 'Fire_egg', weight: 0.5 },
], 490000, [
    new DungeonTrainer('Magma Leader', [
        new GymPokemon('Burpmon', 630000, 37),
        new GymPokemon('Burpmon', 640000, 38),
        new GymPokemon('Burpmon', 650000, 39),
    ], { weight: 1 }, 'Maxie'),
], 29000, 101);
dungeonList['Aqua Hideout'] = new Dungeon('Aqua Hideout', [
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Burpmon', 30000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Burpmon', 30000, 32)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Burpmon', 30000, 31),
        new GymPokemon('Burpmon', 30000, 31),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Burpmon', 30000, 31),
        new GymPokemon('Burpmon', 30000, 31),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Burpmon', 30000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Burpmon', 30000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Burpmon', 30000, 32)], { weight: 1 }, undefined, '(female)'),
], [
    { loot: 'Intel_floppy', weight: 3.75 },
    { loot: 'Pokeball', weight: 3.5 },
    { loot: 'Burpmon', weight: 3.25 },
    { loot: 'Release Plate', weight: 2.5 },
    { loot: 'Deep Plate', weight: 2.5 },
    { loot: 'Duskball', weight: 2 },
    { loot: 'Broken Digivice', weight: 0 },
], 490000, [
    new DungeonTrainer('Aqua Admin', [
        new GymPokemon('Burpmon', 900000, 34),
        new GymPokemon('Burpmon', 900000, 34),
    ], { weight: 1 }, 'Matt', '(matt)'),
], 30000, 101);
dungeonList['Shoal Cave'] = new Dungeon('Shoal Cave', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xClick', weight: 4 },
    { loot: 'Lucky_floppy', weight: 3.75 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'Evil Mark', weight: 2 },
    { loot: 'Water_egg', weight: 2 },
    { loot: 'Guardian Plate', weight: 2 },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Digicores', weight: 0 },
], 490000, [new DungeonBossPokemon('Burpmon', 1900000, 20)], 30000, 101);
dungeonList['Cave of Origin'] = new Dungeon('Cave of Origin', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xAttack', weight: 3.75 },
    { loot: 'Travel', weight: 3.25 },
    { loot: 'Alarm', weight: 3.25 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'Mystery_egg', weight: 1 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Cave of Origin')) },
    { loot: 'Hacking', weight: 0, requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Cave of Origin')) },
    { loot: 'Monitoring', weight: 0, requirement: new ClearDungeonRequirement(1500, GameConstants.getDungeonIndex('Cave of Origin')) },
    { loot: 'MindControl', weight: 0, requirement: new ClearDungeonRequirement(1500, GameConstants.getDungeonIndex('Cave of Origin')) },
], 590000, [
    new DungeonBossPokemon('Burpmon', 2000000, 50),
    new DungeonBossPokemon('Burpmon', 4700000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion) }),
    new DungeonBossPokemon('Burpmon', 4700000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion) }),
], 34000, 101);
dungeonList['Seafloor Cavern'] = new Dungeon('Seafloor Cavern', [
    { pokemon: 'Burpmon', options: { weight: 4.8 } },
    { pokemon: 'Burpmon', options: { weight: 4.8 } },
    { pokemon: 'Burpmon', options: { weight: 4.8 } },
    { pokemon: 'Burpmon', options: { weight: 4.8 } },
    { pokemon: 'Burpmon', options: { weight: 4.8 } },
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Burpmon', 32000, 36)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Burpmon', 32000, 36)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Burpmon', 32000, 36)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Burpmon', 32000, 36)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Burpmon', 32000, 35),
        new GymPokemon('Burpmon', 32000, 35),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Aqua Admin', [
        new GymPokemon('Burpmon', 32000, 37),
        new GymPokemon('Burpmon', 32000, 37),
    ], { weight: 1 }, 'Shelly', '(shelly)'),
], [
    { loot: 'Item_magnet', weight: 4 },
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Step', weight: 3 },
    { loot: 'Wallpaper', weight: 2.5 },
    { loot: 'Deep Plate', weight: 2 },
    { loot: 'Nature Plate', weight: 2 },
    { loot: 'Digicores', weight: 0 },
], 530000, [
    new DungeonTrainer('Aqua Leader', [
        new GymPokemon('Burpmon', 700000, 41),
        new GymPokemon('Burpmon', 700000, 41),
        new GymPokemon('Burpmon', 900000, 43),
    ], { weight: 1 }, 'Archie'),
], 32000, 101);
dungeonList['Sky Pillar'] = new Dungeon('Sky Pillar', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Greatball', weight: 3.5 },
    { loot: 'Ultraball', weight: 2.5 },
    { loot: 'Nightmare Plate', weight: 2 },
    { loot: 'Guardian Plate', weight: 2 },
    { loot: 'Trojan Plate', weight: 2 },
    { loot: 'Dragon_scale', weight: 2 },
    { loot: 'Simulation', weight: 0, requirement: new ClearDungeonRequirement(1750, GameConstants.getDungeonIndex('Sky Pillar')) },
], 720000, [
    new DungeonBossPokemon('Burpmon', 3200000, 20),
    new DungeonBossPokemon('Burpmon', 5824002, 100),
], 34000, 101);
dungeonList['Sealed Chamber'] = new Dungeon('Sealed Chamber', ['Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xClick', weight: 3.5 },
    { loot: 'Intel_floppy', weight: 3.5 },
    { loot: 'Nature Plate', weight: 2 },
    { loot: 'Guardian Plate', weight: 2 },
    { loot: 'Simple Plate', weight: 2 },
    { loot: 'XAntibody', weight: 1 },
    { loot: 'Tsuchi Fossil', weight: 0, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Sealed Chamber')) },
    { loot: 'Kori Fossil', weight: 0, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Sealed Chamber')) },
], 500000, [
    new DungeonBossPokemon('Burpmon', 4500000, 20),
    new DungeonBossPokemon('Burpmon', 4500000, 20),
    new DungeonBossPokemon('Burpmon', 4500000, 20),
], 36000, 101);
dungeonList['Victory Road Hoenn'] = new Dungeon('Victory Road Hoenn', [
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Burpmon', 37000, 43),
        new GymPokemon('Burpmon', 37000, 43),
    ], { weight: 1 }, 'Albert', '(male)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Burpmon', 37000, 45)], { weight: 1 }, 'Hope', '(female)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Burpmon', 37000, 45)], { weight: 1 }, 'Shannon', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Burpmon', 37000, 42),
        new GymPokemon('Burpmon', 37000, 42),
        new GymPokemon('Burpmon', 37000, 42),
    ], { weight: 1 }, 'Samuel', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Burpmon', 37000, 42),
        new GymPokemon('Burpmon', 37000, 42),
        new GymPokemon('Burpmon', 37000, 42),
    ], { weight: 1 }, 'Julie', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Burpmon', 37000, 43),
        new GymPokemon('Burpmon', 37000, 43),
    ], { weight: 1 }, 'Dianne', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Burpmon', 37000, 43),
        new GymPokemon('Burpmon', 37000, 43),
    ], { weight: 1 }, 'Felix', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Burpmon', 37000, 43),
        new GymPokemon('Burpmon', 37000, 43),
    ], { weight: 1 }, 'Caroline', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Burpmon', 30000, 42),
        new GymPokemon('Burpmon', 30000, 42),
        new GymPokemon('Burpmon', 30000, 42),
        new GymPokemon('Burpmon', 30000, 42),
    ], { weight: 1 }, 'Vito', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Burpmon', 37000, 42),
        new GymPokemon('Burpmon', 37000, 42),
        new GymPokemon('Burpmon', 37000, 42),
    ], { weight: 1 }, 'Michelle', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Burpmon', 37000, 43),
        new GymPokemon('Burpmon', 37000, 43),
    ], { weight: 1 }, 'Mitchell', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Burpmon', 37000, 43),
        new GymPokemon('Burpmon', 37000, 43),
    ], { weight: 1 }, 'Halle', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Burpmon', 37000, 43),
        new GymPokemon('Burpmon', 37000, 43),
    ], { weight: 1 }, 'Edgar', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Burpmon', 37000, 43),
        new GymPokemon('Burpmon', 37000, 43),
    ], { weight: 1 }, 'Katelynn', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Burpmon', 37000, 43),
        new GymPokemon('Burpmon', 37000, 43),
    ], { weight: 1 }, 'Quincy', '(male)'),
], [
    { loot: 'xAttack', weight: 3.75 },
    { loot: 'Lucky_pill', weight: 3.75 },
    { loot: 'Ultraball', weight: 2.5 },
    { loot: 'Trojan Plate', weight: 2 },
    { loot: 'Roar Plate', weight: 2 },
    { loot: 'Light_Digimental', weight: 0, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Victory Road Hoenn')) },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Victory Road Hoenn')) },
], 560000, [
    new DungeonTrainer('PKMN Trainer', [
        new GymPokemon('Burpmon', 680000, 44),
        new GymPokemon('Burpmon', 670000, 43),
        new GymPokemon('Burpmon', 680000, 44),
        new GymPokemon('Burpmon', 650000, 41),
        new GymPokemon('Burpmon', 690000, 45),
    ], { weight: 1 }, 'Wally', '(wally)'),
], 37000, 101);
// Sinnoh
dungeonList['Oreburgh Gate'] = new Dungeon('Oreburgh Gate', [
    { pokemon: 'Burpmon', options: { weight: 1.1 } },
    { pokemon: 'Burpmon', options: { weight: 1.1 } },
    { pokemon: 'Burpmon', options: { weight: 1.1 } },
    { pokemon: 'Burpmon', options: { weight: 1.1 } },
    { pokemon: 'Burpmon', options: { weight: 1.1 } },
    { pokemon: 'Burpmon', options: { weight: 1.1 } },
    { pokemon: 'Burpmon', options: { weight: 1.1 } },
    new DungeonTrainer('Camper', [
        new GymPokemon('Burpmon', 720600, 7),
        new GymPokemon('Burpmon', 720600, 7),
    ], { weight: 1 }, 'Curtis'),
    new DungeonTrainer('Picnicker', [new GymPokemon('Burpmon', 720600, 9)], { weight: 1 }, 'Diana'),
], [
    { loot: 'xAttack', weight: 3.75 },
    { loot: 'Item_magnet', weight: 3.5 },
    { loot: 'Nature Plate', weight: 2.5 },
    { loot: 'Cure Plate', weight: 2.5 },
    { loot: 'Exercise', weight: 1, requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Oreburgh Gate')) },
    { loot: 'Puzzle', weight: 0, requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Oreburgh Gate')) },
], 720600, [
    new DungeonBossPokemon('Burpmon', 3703000, 14),
    new DungeonBossPokemon('Burpmon', 3703000, 14),
], 39000, 203);
dungeonList['Valley Windworks'] = new Dungeon('Valley Windworks', [
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Burpmon', 756000, 13)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Burpmon', 756000, 13)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 756000, 11),
        new GymPokemon('Burpmon', 756000, 11),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Burpmon', 756000, 13)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 756000, 11),
        new GymPokemon('Burpmon', 756000, 11),
    ], { weight: 1 }, undefined, '(male)'),
], [
    { loot: 'Lucky_floppy', weight: 4 },
    { loot: 'Pokeball', weight: 3.5 },
    { loot: 'Greatball', weight: 3.5 },
    { loot: 'Nature Plate', weight: 2.75 },
    { loot: 'SmallRestore', weight: 1.75 },
    { loot: 'Library', weight: 0, requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Ravaged Path')) },
], 756000, [
    new DungeonTrainer('Commander', [
        new GymPokemon('Burpmon', 1901500, 15),
        new GymPokemon('Burpmon', 1901500, 17),
    ], { weight: 1 }, 'Mars', '(mars)'),
    new DungeonBossPokemon('Burpmon', 3803000, 14, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Valley Windworks')) }),
], 43000, 204);
dungeonList['Eterna Forest'] = new Dungeon('Eterna Forest', [
    { pokemon: 'Burpmon', options: { weight: 1.8 } },
    { pokemon: 'Burpmon', options: { weight: 1.8 } },
    { pokemon: 'Burpmon', options: { weight: 1.8 } },
    { pokemon: 'Burpmon', options: { weight: 1.8 } },
    { pokemon: 'Burpmon', options: { weight: 1.8 } },
    { pokemon: 'Burpmon', options: { weight: 1.8 } },
    { pokemon: 'Burpmon', options: { weight: 1.8 } },
    { pokemon: 'Burpmon', options: { weight: 1.8 } },
    { pokemon: 'Burpmon', options: { weight: 1.8 } },
    new DungeonTrainer('Bookworms', [
        new GymPokemon('Burpmon', 812000, 9),
        new GymPokemon('Burpmon', 812000, 11),
        new GymPokemon('Burpmon', 812000, 13),
        new GymPokemon('Burpmon', 812000, 14),
    ], { weight: 1 }, 'Jack & Briana'),
    new DungeonTrainer('Melded Minds', [
        new GymPokemon('Burpmon', 812000, 15),
        new GymPokemon('Burpmon', 812000, 15),
    ], { weight: 1 }, 'Linsey & Elijah', '(both)'),
    new DungeonTrainer('Bug Buds', [
        new GymPokemon('Burpmon', 812000, 9),
        new GymPokemon('Burpmon', 812000, 11),
        new GymPokemon('Burpmon', 812000, 13),
        new GymPokemon('Burpmon', 812000, 12),
        new GymPokemon('Burpmon', 812000, 12),
    ], { weight: 1 }, 'Philip & Donald'),
    new DungeonTrainer('Melded Minds', [
        new GymPokemon('Burpmon', 812000, 15),
        new GymPokemon('Burpmon', 812000, 15),
    ], { weight: 1 }, 'Kody & Rachael', '(both)'),
], [
    { loot: 'Games', weight: 4 },
    { loot: 'Chat', weight: 4 },
    { loot: 'Greatball', weight: 3.5 },
    { loot: 'Security', weight: 3 },
    { loot: 'Step', weight: 3 },
    { loot: 'Code Plate', weight: 2.75 },
    { loot: 'Jungle Plate', weight: 2.75 },
    { loot: 'SmallRestore', weight: 1.75 },
    { loot: 'Soothe_bell', weight: 0 },
], 812000, [
    new DungeonBossPokemon('Burpmon', 3950000, 30),
    new DungeonBossPokemon('Burpmon', 3950000, 30),
], 48000, 205);
dungeonList['Old Chateau'] = new Dungeon('Old Chateau', ['Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xClick', weight: 4 },
    { loot: 'Item_magnet', weight: 4 },
    { loot: 'Release Plate', weight: 2.75 },
    { loot: 'Nightmare Plate', weight: 2.75 },
    { loot: 'Empire Plate', weight: 2.75 },
    { loot: 'Action', weight: 2, requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Old Chateau')) },
    { loot: 'Holy Ring', weight: 1.75 },
], 853000, [new DungeonBossPokemon('Burpmon', 4200000, 100)], 52500, 205);
dungeonList['Team Galactic Eterna Building'] = new Dungeon('Team Galactic Eterna Building', [
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 877000, 17),
        new GymPokemon('Burpmon', 877000, 17),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 877000, 16),
        new GymPokemon('Burpmon', 877000, 18),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Burpmon', 877000, 19)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Burpmon', 877000, 19)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 877000, 16),
        new GymPokemon('Burpmon', 877000, 16),
        new GymPokemon('Burpmon', 877000, 16),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Burpmon', 877000, 20)], { weight: 1 }, 'Travon', '(male)'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 877000, [
    new DungeonTrainer('Commander', [
        new GymPokemon('Burpmon', 2150000, 21),
        new GymPokemon('Burpmon', 2150000, 23),
    ], { weight: 1 }, 'Jupiter', '(jupiter)'),
    new DungeonBossPokemon('Burpmon', 4300000, 100, { requirement: new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Burpmon),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building')),
        ]) }),
    new DungeonBossPokemon('Burpmon', 4300000, 100, { requirement: new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Burpmon),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building')),
        ]) }),
    new DungeonBossPokemon('Burpmon', 4300000, 100, { requirement: new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Burpmon),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building')),
        ]) }),
    new DungeonBossPokemon('Burpmon', 4300000, 100, { requirement: new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Burpmon),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building')),
        ]) }),
    new DungeonBossPokemon('Burpmon', 4300000, 100, { requirement: new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Burpmon),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building')),
        ]) }),
], 54250, 205);
dungeonList['Wayward Cave'] = new Dungeon('Wayward Cave', [
    { pokemon: 'Burpmon', options: { weight: 6.7 } },
    { pokemon: 'Burpmon', options: { weight: 6.7 } },
    { pokemon: 'Burpmon', options: { weight: 6.7 } },
    new DungeonTrainer('Mountain Men', [
        new GymPokemon('Burpmon', 903000, 20),
        new GymPokemon('Burpmon', 903000, 20),
        new GymPokemon('Burpmon', 903000, 22),
    ], { weight: 1 }, 'Reginald & Lorenzo'),
    new DungeonTrainer('Siblings', [
        new GymPokemon('Burpmon', 903000, 22),
        new GymPokemon('Burpmon', 903000, 17),
        new GymPokemon('Burpmon', 903000, 20),
        new GymPokemon('Burpmon', 903000, 20),
    ], { weight: 1 }, 'Cassidy & Wayne'),
    new DungeonTrainer('Burpmonre Friends', [
        new GymPokemon('Burpmon', 903000, 22),
        new GymPokemon('Burpmon', 903000, 22),
    ], { weight: 1 }, 'Tori & Diego'),
    new DungeonTrainer('Burpmonre Friends', [
        new GymPokemon('Burpmon', 903000, 22),
        new GymPokemon('Burpmon', 903000, 20),
        new GymPokemon('Burpmon', 903000, 20),
    ], { weight: 1 }, 'Ana & Parker'),
    new DungeonTrainer('Amateur Archaeologists', [
        new GymPokemon('Burpmon', 903000, 22),
        new GymPokemon('Burpmon', 903000, 19),
        new GymPokemon('Burpmon', 903000, 21),
    ], { weight: 1 }, 'Terry & Gerald'),
], [
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Step', weight: 3.75 },
    { loot: 'Security', weight: 3.5 },
    { loot: 'Greatball', weight: 3 },
    { loot: 'Nature Plate', weight: 2.75 },
    { loot: 'Nightmare Plate', weight: 2.75 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'SmallRestore', weight: 2 },
    { loot: 'MediumRestore', weight: 1.75 },
    { loot: 'Fate_Digimental', weight: 0 },
], 903000, [new DungeonBossPokemon('Burpmon', 4400000, 100)], 56500, 206);
dungeonList['Mt. Coronet South'] = new Dungeon('Mt. Coronet South', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xAttack', weight: 3.75 },
    { loot: 'Lucky_floppy', weight: 3.5 },
    { loot: 'Nature Plate', weight: 2.5 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'Light_Digimental', weight: 0 },
    { loot: 'Hope_Digimental', weight: 0 },
], 951500, [
    new DungeonBossPokemon('Burpmon', 4000000, 35),
    new DungeonBossPokemon('Burpmon', 4000000, 50),
    new DungeonBossPokemon('Burpmon', 4000000, 50),
], 60500, 207);
// All Unown except "FHP?!"
SeededRand.seed(420);
const SolaceonUnownList = SeededRand.shuffleArray('ABCDEGIJKLMNOQRSTUVWXYZ'.split(''));
dungeonList['Solaceon Ruins'] = new Dungeon('Solaceon Ruins', [
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    new DungeonTrainer('Ruin Maniac', [
        new GymPokemon('Burpmon', 960000, 19),
        new GymPokemon('Burpmon', 960000, 21),
        new GymPokemon('Burpmon', 960000, 23),
    ], { weight: 1 }, 'Karl'),
], [
    { loot: 'Lucky_floppy', weight: 3.75 },
    { loot: 'Games', weight: 3.25 },
    { loot: 'Trojan Plate', weight: 2.5 },
    { loot: 'Guardian Plate', weight: 2.5 },
    { loot: 'Courage_Digimental', weight: 0 },
    { loot: 'Sincerity_Digimental', weight: 0 },
    { loot: 'Knowledge_Digimental', weight: 0 },
], 960000, [
    ...SolaceonUnownList.map((char) => new DungeonBossPokemon(`Unown (${char})`, 4100000, 30, {
        hide: true,
        requirement: new SeededDateRequirement(() => SeededDateRand.fromArray(SolaceonUnownList) == char),
    })),
], 62500, 209);
dungeonList['Iron Island'] = new Dungeon('Iron Island', [
    { pokemon: 'Burpmon', options: { weight: 3.3 } },
    { pokemon: 'Burpmon', options: { weight: 3.3 } },
    { pokemon: 'Burpmon', options: { weight: 3.3 } },
    { pokemon: 'Burpmon', options: { weight: 3.3 } },
    { pokemon: 'Burpmon', options: { weight: 3.3 } },
    { pokemon: 'Burpmon', options: { weight: 3.3 } },
    { pokemon: 'Burpmon', options: { weight: 3.3 } },
    { pokemon: 'Burpmon', options: { weight: 3.3 } },
    { pokemon: 'Burpmon', options: { weight: 3.3 } },
    { pokemon: 'Burpmon', options: { weight: 3.3 } },
    { pokemon: 'Burpmon', options: { weight: 3.3 } },
    new DungeonTrainer('Camper', [
        new GymPokemon('Burpmon', 983000, 34),
        new GymPokemon('Burpmon', 983000, 36),
    ], { weight: 1 }, 'Lawrence'),
    new DungeonTrainer('Picnicker', [new GymPokemon('Burpmon', 983000, 37)], { weight: 1 }, 'Summer'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Burpmon', 983000, 34),
        new GymPokemon('Burpmon', 983000, 36),
    ], { weight: 1 }, 'Noel'),
    new DungeonTrainer('Worker', [new GymPokemon('Burpmon', 983000, 37)], { weight: 1 }, 'Braden'),
    new DungeonTrainer('Mountain Men', [
        new GymPokemon('Burpmon', 983000, 35),
        new GymPokemon('Burpmon', 983000, 33),
        new GymPokemon('Burpmon', 983000, 34),
        new GymPokemon('Burpmon', 983000, 35),
        new GymPokemon('Burpmon', 983000, 35),
    ], { weight: 1 }, 'Damon & Maurice'),
    new DungeonTrainer('Crush Kin', [
        new GymPokemon('Burpmon', 983000, 38),
        new GymPokemon('Burpmon', 983000, 38),
    ], { weight: 1 }, 'Kendal & Tyler'),
    new DungeonTrainer('Co-workers', [
        new GymPokemon('Burpmon', 983000, 33),
        new GymPokemon('Burpmon', 983000, 33),
        new GymPokemon('Burpmon', 983000, 36),
        new GymPokemon('Burpmon', 983000, 34),
        new GymPokemon('Burpmon', 983000, 34),
        new GymPokemon('Burpmon', 983000, 34),
    ], { weight: 1 }, 'Brendon & Quentin'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Burpmon', 983000, 35),
        new GymPokemon('Burpmon', 983000, 36),
        new GymPokemon('Burpmon', 983000, 38),
        new GymPokemon('Burpmon', 983000, 38),
        new GymPokemon('Burpmon', 983000, 35),
        new GymPokemon('Burpmon', 983000, 36),
    ], { weight: 1 }, 'Jonah & Brenda'),
], [
    { loot: 'Item_magnet', weight: 3.75 },
    { loot: 'Pokeball', weight: 3.5 },
    { loot: 'Simple Plate', weight: 2.5 },
    { loot: 'Ultraball', weight: 2.25 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'Duskball', weight: 1.75 },
    { loot: 'Evil Mark', weight: 1.5 },
    { loot: 'Miracles_Digimental', weight: 0 },
    { loot: 'Metal_coat', weight: 0 },
    { loot: 'Protector', weight: 0 },
], 983000, [
    new DungeonTrainer('Galactic Grunts', [
        new GymPokemon('Burpmon', 701667, 34),
        new GymPokemon('Burpmon', 701667, 34),
        new GymPokemon('Burpmon', 701667, 34),
        new GymPokemon('Burpmon', 701667, 34),
        new GymPokemon('Burpmon', 701667, 34),
        new GymPokemon('Burpmon', 701667, 34),
    ], { weight: 1 }, undefined, '(male)'),
], 66500, 218);
dungeonList['Lake Valor'] = new Dungeon('Lake Valor', [
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1015000, 35),
        new GymPokemon('Burpmon', 1015000, 35),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Burpmon', 1015000, 37)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1015000, 33),
        new GymPokemon('Burpmon', 1015000, 33),
        new GymPokemon('Burpmon', 1015000, 33),
        new GymPokemon('Burpmon', 1015000, 33),
    ], { weight: 1 }, undefined, '(male)'),
], [
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Finance', weight: 3.75 },
    { loot: 'Trojan Plate', weight: 2.5 },
    { loot: 'Electric_egg', weight: 1 },
    { loot: 'Knowledge_Digimental', weight: 0 },
], 1015000, [
    new DungeonTrainer('Commander', [
        new GymPokemon('Burpmon', 1533334, 38),
        new GymPokemon('Burpmon', 1533334, 38),
        new GymPokemon('Burpmon', 1533334, 40),
    ], { weight: 1 }, 'Saturn', '(saturn)'),
    new DungeonBossPokemon('Burpmon', 10060000, 50, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Distortion World')) }),
], 69500, 218);
dungeonList['Lake Verity'] = new Dungeon('Lake Verity', [
    { pokemon: 'Burpmon', options: { weight: 2.7 } },
    { pokemon: 'Burpmon', options: { weight: 2.7 } },
    { pokemon: 'Burpmon', options: { weight: 2.7 } },
    { pokemon: 'Burpmon', options: { weight: 2.7 } },
    { pokemon: 'Burpmon', options: { weight: 2.7 } },
    { pokemon: 'Burpmon', options: { weight: 2.7 } },
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1068735, 33),
        new GymPokemon('Burpmon', 1068735, 33),
        new GymPokemon('Burpmon', 1068735, 36),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Burpmon', 1068735, 37)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1068735, 35),
        new GymPokemon('Burpmon', 1068735, 35),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1068735, 34),
        new GymPokemon('Burpmon', 1068735, 36),
    ], { weight: 1 }, undefined, '(female)'),
], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Finance', weight: 3.75 },
    { loot: 'Trojan Plate', weight: 2.5 },
    { loot: 'Fire_egg', weight: 1 },
    { loot: 'Courage_Digimental', weight: 0 },
], 1068735, [
    new DungeonTrainer('Commander', [
        new GymPokemon('Burpmon', 1606667, 38),
        new GymPokemon('Burpmon', 1606667, 38),
        new GymPokemon('Burpmon', 1606667, 40),
    ], { weight: 1 }, 'Mars', '(mars)'),
], 72500, 218);
dungeonList['Mt. Coronet North'] = new Dungeon('Mt. Coronet North', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xClick', weight: 4 },
    { loot: 'Greatball', weight: 3.5 },
    { loot: 'Nature Plate', weight: 2.5 },
    { loot: 'Nightmare Plate', weight: 2.5 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'Sage Digizoid', weight: 1.75 },
    { loot: 'LargeRestore', weight: 1.75 },
    { loot: 'Evil Mark', weight: 1.5 },
    { loot: 'Love_Digimental', weight: 0 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Mt. Coronet North')) },
    { loot: 'Broken Digivice', weight: 0 },
], 1111500, [
    new DungeonBossPokemon('Burpmon', 4960000, 35),
    new DungeonBossPokemon('Burpmon', 4960000, 50),
    new DungeonBossPokemon('Burpmon', 4960000, 50),
], 74500, 218);
dungeonList['Lake Acuity'] = new Dungeon('Lake Acuity', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'Lucky_pill', weight: 4 },
    { loot: 'Finance', weight: 3.75 },
    { loot: 'Guardian Plate', weight: 2.5 },
    { loot: 'Trojan Plate', weight: 2.5 },
], 1261800, [
    new DungeonTrainer('Commander', [
        new GymPokemon('Burpmon', 1690000, 38),
        new GymPokemon('Burpmon', 1690000, 38),
        new GymPokemon('Burpmon', 1690000, 40),
    ], { weight: 1 }, 'Jupiter', '(jupiter)'),
    new DungeonBossPokemon('Burpmon', 10070000, 50, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Distortion World')) }),
], 78000, 217);
dungeonList['Team Galactic HQ'] = new Dungeon('Team Galactic HQ', [
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Burpmon', 1295400, 41)], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1295400, 37),
        new GymPokemon('Burpmon', 1295400, 38),
        new GymPokemon('Burpmon', 1295400, 39),
    ], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Burpmon', 1295400, 40),
        new GymPokemon('Burpmon', 1295400, 40),
    ], { weight: 2 }, 'Frederick', '(male)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Burpmon', 1295400, 41)], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1295400, 41),
        new GymPokemon('Burpmon', 1295400, 41),
    ], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1295400, 40),
        new GymPokemon('Burpmon', 1295400, 38),
    ], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1295400, 39),
        new GymPokemon('Burpmon', 1295400, 39),
    ], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Burpmon', 1295400, 42)], { weight: 2 }, 'Darrius', '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1295400, 38),
        new GymPokemon('Burpmon', 1295400, 40),
    ], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1295400, 38),
        new GymPokemon('Burpmon', 1295400, 38),
        new GymPokemon('Burpmon', 1295400, 38),
    ], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Commander', [
        new GymPokemon('Burpmon', 1295400, 42),
        new GymPokemon('Burpmon', 1295400, 42),
        new GymPokemon('Burpmon', 1295400, 42),
    ], { weight: 1 }, 'Saturn', '(saturn)'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 1295400, [
    new DungeonTrainer('Galactic Boss', [
        new GymPokemon('Burpmon', 1725000, 44),
        new GymPokemon('Burpmon', 1725000, 44),
        new GymPokemon('Burpmon', 1725000, 46),
    ], { weight: 1 }, 'Cyrus', '(cyrus)'),
], 82500, 217);
dungeonList['Spear Pillar'] = new Dungeon('Spear Pillar', [
    { pokemon: 'Burpmon', options: { weight: 3 } },
    { pokemon: 'Burpmon', options: { weight: 3 } },
    { pokemon: 'Burpmon', options: { weight: 3 } },
    { pokemon: 'Burpmon', options: { weight: 3 } },
    { pokemon: 'Burpmon', options: { weight: 3 } },
    { pokemon: 'Burpmon', options: { weight: 3 } },
    { pokemon: 'Burpmon', options: { weight: 3 } },
    { pokemon: 'Burpmon', options: { weight: 3 } },
    { pokemon: 'Burpmon', options: { weight: 3 } },
    { pokemon: 'Burpmon', options: { weight: 3 } },
    { pokemon: 'Burpmon', options: { weight: 3 } },
    { pokemon: 'Burpmon', options: { weight: 3 } },
    { pokemon: 'Burpmon', options: { weight: 3 } },
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Burpmon', 1322100, 43)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Burpmon', 1322100, 43)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1322100, 40),
        new GymPokemon('Burpmon', 1322100, 40),
        new GymPokemon('Burpmon', 1322100, 40),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1322100, 42),
        new GymPokemon('Burpmon', 1322100, 40),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Burpmon', 1322100, 43)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1322100, 39),
        new GymPokemon('Burpmon', 1322100, 42),
        new GymPokemon('Burpmon', 1322100, 39),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1322100, 38),
        new GymPokemon('Burpmon', 1322100, 42),
        new GymPokemon('Burpmon', 1322100, 40),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1322100, 40),
        new GymPokemon('Burpmon', 1322100, 42),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1322100, 41),
        new GymPokemon('Burpmon', 1322100, 41),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Burpmon', 1322100, 39),
        new GymPokemon('Burpmon', 1322100, 40),
        new GymPokemon('Burpmon', 1322100, 41),
    ], { weight: 1 }, undefined, '(female)'),
], [
    { loot: 'xClick', weight: 4 },
    { loot: 'Item_magnet', weight: 3.75 },
    { loot: 'Simple Plate', weight: 2.5 },
    { loot: 'Nightmare Plate', weight: 2.5 },
    { loot: 'Deep Plate', weight: 2.5 },
], 1322100, [
    new DungeonTrainer('Commanders', [
        new GymPokemon('Burpmon', 880000, 44),
        new GymPokemon('Burpmon', 880000, 44),
        new GymPokemon('Burpmon', 880000, 46),
        new GymPokemon('Burpmon', 880000, 44),
        new GymPokemon('Burpmon', 880000, 44),
        new GymPokemon('Burpmon', 880000, 46),
    ], { weight: 1 }, 'Mars & Jupiter', '(marsjupiter)'),
    new DungeonBossPokemon('Burpmon', 11880000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion) }),
    new DungeonBossPokemon('Burpmon', 11880000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion) }),
], 84500, 217);
dungeonList['Distortion World'] = new Dungeon('Distortion World', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xClick', weight: 4 },
    { loot: 'Ultraball', weight: 3.5 },
    { loot: 'Burpmon', weight: 3 },
    { loot: 'Nightmare Plate', weight: 2.5 },
    { loot: 'Nightmare Plate', weight: 2.5 },
    { loot: 'Black Digitron', weight: 1.75 },
    { loot: 'Holy Ring', weight: 1.75 },
    { loot: 'Reaper_cloth', weight: 0 },
], 1350400, [
    new DungeonTrainer('Galactic Boss', [
        new GymPokemon('Burpmon', 1128000, 45),
        new GymPokemon('Burpmon', 1128000, 47),
        new GymPokemon('Burpmon', 1128000, 46),
        new GymPokemon('Burpmon', 1128000, 46),
        new GymPokemon('Burpmon', 1128000, 47),
    ], { weight: 1 }, 'Cyrus', '(cyrus)'),
    new DungeonBossPokemon('Burpmon', 11880000, 45, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion) }),
], 86500, 217);
dungeonList['Victory Road Sinnoh'] = new Dungeon('Victory Road Sinnoh', [
    { pokemon: 'Burpmon', options: { weight: 9.3 } },
    { pokemon: 'Burpmon', options: { weight: 9.3 } },
    { pokemon: 'Burpmon', options: { weight: 9.3 } },
    { pokemon: 'Burpmon', options: { weight: 9.3 } },
    { pokemon: 'Burpmon', options: { weight: 9.3 } },
    { pokemon: 'Burpmon', options: { weight: 9.3 } },
    new DungeonTrainer('Psychic', [
        new GymPokemon('Burpmon', 1503000, 43),
        new GymPokemon('Burpmon', 1503000, 46),
        new GymPokemon('Burpmon', 1503000, 46),
    ], { weight: 1 }, 'Bryce', '(male)'),
    new DungeonTrainer('Bird Keeper', [
        new GymPokemon('Burpmon', 1503000, 45),
        new GymPokemon('Burpmon', 1503000, 47),
    ], { weight: 1 }, 'Hana'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 1503000, 45),
        new GymPokemon('Burpmon', 1503000, 46),
        new GymPokemon('Burpmon', 1503000, 48),
    ], { weight: 1 }, 'Mariah', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 1503000, 45),
        new GymPokemon('Burpmon', 1503000, 46),
        new GymPokemon('Burpmon', 1503000, 48),
    ], { weight: 1 }, 'Omar', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 1503000, 47),
        new GymPokemon('Burpmon', 1503000, 48),
    ], { weight: 1 }, 'Sydney', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 1503000, 47),
        new GymPokemon('Burpmon', 1503000, 47),
    ], { weight: 1 }, 'Clayton', '(male)'),
    new DungeonTrainer('Double Team', [
        new GymPokemon('Burpmon', 1503000, 50),
        new GymPokemon('Burpmon', 1503000, 50),
    ], { weight: 1 }, 'Al & Kay'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Burpmon', 1503000, 48)], { weight: 1 }, 'Miles'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Burpmon', 1503000, 44),
        new GymPokemon('Burpmon', 1503000, 45),
        new GymPokemon('Burpmon', 1503000, 46),
    ], { weight: 1 }, 'Valencia', '(female)'),
    new DungeonTrainer('Double Team', [
        new GymPokemon('Burpmon', 1503000, 50),
        new GymPokemon('Burpmon', 1503000, 50),
    ], { weight: 1 }, 'Pat & Jo'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 1503000, 47),
        new GymPokemon('Burpmon', 1503000, 48),
    ], { weight: 1 }, 'Henry', '(male)'),
    new DungeonTrainer('Dragon Tamer', [
        new GymPokemon('Burpmon', 1503000, 45),
        new GymPokemon('Burpmon', 1503000, 47),
    ], { weight: 1 }, 'Ondrej'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 1503000, 46),
        new GymPokemon('Burpmon', 1503000, 46),
        new GymPokemon('Burpmon', 1503000, 46),
    ], { weight: 1 }, 'Edgar', '(male)'),
    new DungeonTrainer('Dragon Tamer', [
        new GymPokemon('Burpmon', 1503000, 43),
        new GymPokemon('Burpmon', 1503000, 45),
        new GymPokemon('Burpmon', 1503000, 47),
    ], { weight: 1 }, 'Clinton'),
], [
    { loot: 'Lucky_floppy', weight: 4 },
    { loot: 'Chat', weight: 3.75 },
    { loot: 'Burpmon', weight: 3.25 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'Razor_claw', weight: 0 },
    { loot: 'Fate_Digimental', weight: 0 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Victory Road Sinnoh')) },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Digicores', weight: 0 },
], 1503000, [
    new DungeonBossPokemon('Burpmon', 7000000, 100),
    new DungeonBossPokemon('Burpmon', 7000000, 100),
], 89500, 223);
dungeonList['Sendoff Spring'] = new Dungeon('Sendoff Spring', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2603000, [
    new DungeonBossPokemon('Burpmon', 10000000, 100),
    new DungeonBossPokemon('Burpmon', 10000000, 100),
    new DungeonBossPokemon('Burpmon', 10000000, 100),
], 96500, 230);
dungeonList['Hall of Origin'] = new Dungeon('Hall of Origin', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'Item_magnet', weight: 4 },
    { loot: 'Games', weight: 3.75 },
    { loot: 'Burpmon', weight: 3.5 },
    { loot: 'Nightmare Plate', weight: 2.5 },
    { loot: 'Release Plate', weight: 2.5 },
    { loot: 'Nature Plate', weight: 2.5 },
    { loot: 'Cure Plate', weight: 2.5 },
    { loot: 'Roar Plate', weight: 2.5 },
    { loot: 'Guardian Plate', weight: 2.5 },
    { loot: 'Code Plate', weight: 2.5 },
    { loot: 'Simple Plate', weight: 2.5 },
    { loot: 'Jungle Plate', weight: 2.5 },
    { loot: 'Trojan Plate', weight: 2.5 },
    { loot: 'Buster Plate', weight: 2.5 },
    { loot: 'Guardian Plate', weight: 2.5 },
    { loot: 'Deep Plate', weight: 2.5 },
    { loot: 'Nightmare Plate', weight: 2.5 },
    { loot: 'Nature Plate', weight: 2.5 },
    { loot: 'Jungle Plate', weight: 2.5 },
    { loot: 'Empire Plate', weight: 2.5 },
], 2653000, [
    new DungeonBossPokemon('Burpmon', 13000000, 100),
    new DungeonBossPokemon('Burpmon', 10000000, 100),
    new DungeonBossPokemon('Burpmon', 10000000, 100),
    new DungeonBossPokemon('Burpmon', 10000000, 100),
    new DungeonBossPokemon('Burpmon', 10000000, 100),
], 106500, 230);
dungeonList['Fullmoon Island'] = new Dungeon('Fullmoon Island', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xClick', weight: 4 },
    { loot: 'eBook', weight: 3.75 },
    { loot: 'Trojan Plate', weight: 2.5 },
    { loot: 'Light_Digimental', weight: 0 },
], 2603000, [new DungeonBossPokemon('Burpmon', 11000000, 100)], 96500, 230);
dungeonList['Newmoon Island'] = new Dungeon('Newmoon Island', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'Lucky_pill', weight: 4 },
    { loot: 'eBook', weight: 3.75 },
    { loot: 'Release Plate', weight: 2.5 },
    { loot: 'Fate_Digimental', weight: 0 },
], 2603000, [new DungeonBossPokemon('Burpmon', 11000000, 100)], 96500, 230);
dungeonList['Flower Paradise'] = new Dungeon('Flower Paradise', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Sleep', weight: 3.5 },
    { loot: 'Calendar', weight: 3.5 },
    { loot: 'Jungle Plate', weight: 2.5 },
    { loot: 'Guardian Plate', weight: 2.25 },
    { loot: 'Plant_egg', weight: 1 },
    { loot: 'Purity_Digimental', weight: 0 },
], 2603000, [
    new DungeonBossPokemon('Burpmon', 9900000, 50),
    new DungeonBossPokemon('Burpmon', 11000000, 50),
    new DungeonBossPokemon('Burpmon', 11000000, 50),
    new DungeonBossPokemon('Burpmon', 11000000, 50, { requirement: new ObtainedPokemonRequirement(pokemonMap['Burpmon']) }),
], 96500, 230);
dungeonList['Snowpoint Temple'] = new Dungeon('Snowpoint Temple', ['Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Light', weight: 3.75 },
    { loot: 'Guardian Plate', weight: 2.5 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Snowpoint Temple')) },
], 2603000, [
    new DungeonBossPokemon('Burpmon', 10000000, 100),
    new DungeonBossPokemon('Burpmon', 11000000, 100),
], 96500, 230);
dungeonList['Stark Mountain'] = new Dungeon('Stark Mountain', [
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    new DungeonTrainer('Dragon Tamer', [new GymPokemon('Burpmon', 2603000, 60)], { weight: 1 }, 'Darien'),
    new DungeonTrainer('Commander', [
        new GymPokemon('Burpmon', 2603000, 58),
        new GymPokemon('Burpmon', 2603000, 58),
        new GymPokemon('Burpmon', 2603000, 60),
    ], { weight: 1 }, 'Mars', '(mars)'),
    new DungeonTrainer('Commander', [
        new GymPokemon('Burpmon', 2603000, 58),
        new GymPokemon('Burpmon', 2603000, 58),
        new GymPokemon('Burpmon', 2603000, 60),
    ], { weight: 1 }, 'Jupiter', '(jupiter)'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Burpmon', 2603000, 58),
        new GymPokemon('Burpmon', 2603000, 59),
        new GymPokemon('Burpmon', 2603000, 58),
        new GymPokemon('Burpmon', 2603000, 58),
        new GymPokemon('Burpmon', 2603000, 59),
        new GymPokemon('Burpmon', 2603000, 58),
    ], { weight: 1 }, 'Keenan & Kassandra'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Burpmon', 2603000, 58),
        new GymPokemon('Burpmon', 2603000, 61),
        new GymPokemon('Burpmon', 2603000, 61),
    ], { weight: 1 }, 'Stefan & Jasmin'),
    new DungeonTrainer('Fight & Flight', [
        new GymPokemon('Burpmon', 2603000, 55),
        new GymPokemon('Burpmon', 2603000, 57),
        new GymPokemon('Burpmon', 2603000, 59),
        new GymPokemon('Burpmon', 2603000, 58),
        new GymPokemon('Burpmon', 2603000, 58),
    ], { weight: 1 }, 'Krystal & Ray'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Burpmon', 2603000, 59),
        new GymPokemon('Burpmon', 2603000, 60),
        new GymPokemon('Burpmon', 2603000, 58),
        new GymPokemon('Burpmon', 2603000, 59),
        new GymPokemon('Burpmon', 2603000, 58),
    ], { weight: 1 }, 'Abel & Monique'),
    new DungeonTrainer('Melded Minds', [
        new GymPokemon('Burpmon', 2603000, 57),
        new GymPokemon('Burpmon', 2603000, 59),
        new GymPokemon('Burpmon', 2603000, 57),
        new GymPokemon('Burpmon', 2603000, 59),
    ], { weight: 1 }, 'Chelsey & Sterling', '(both)'),
    new DungeonTrainer('Dragon Warriors', [
        new GymPokemon('Burpmon', 2603000, 57),
        new GymPokemon('Burpmon', 2603000, 58),
        new GymPokemon('Burpmon', 2603000, 59),
        new GymPokemon('Burpmon', 2603000, 57),
        new GymPokemon('Burpmon', 2603000, 57),
        new GymPokemon('Burpmon', 2603000, 57),
    ], { weight: 1 }, 'Harlan & Kenny'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Burpmon', 2603000, 58),
        new GymPokemon('Burpmon', 2603000, 59),
        new GymPokemon('Burpmon', 2603000, 58),
        new GymPokemon('Burpmon', 2603000, 58),
        new GymPokemon('Burpmon', 2603000, 59),
        new GymPokemon('Burpmon', 2603000, 58),
    ], { weight: 1 }, 'Skylar & Narasha'),
    new DungeonTrainer('Hidden Dragons', [
        new GymPokemon('Burpmon', 2603000, 57),
        new GymPokemon('Burpmon', 2603000, 57),
        new GymPokemon('Burpmon', 2603000, 57),
        new GymPokemon('Burpmon', 2603000, 60),
    ], { weight: 1 }, 'Drake & Jarrett'),
], [
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Step', weight: 3.75 },
    { loot: 'Roar Plate', weight: 2.5 },
    { loot: 'Simple Plate', weight: 2.5 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'Evil Mark', weight: 1.75 },
    { loot: 'LargeRestore', weight: 1.25 },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Courage_Digimental', weight: 0 },
    { loot: 'Kaze Fossil', weight: 0, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Stark Mountain')) },
    { loot: 'Hagane Fossil', weight: 0, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Stark Mountain')) },
], 2603000, [
    new DungeonBossPokemon('Burpmon', 10000000, 100),
    new DungeonBossPokemon('Burpmon', 11000000, 100),
], 96500, 230);
// Unova
// TODO: Balancing of dungeon Pokemon HP & rewards.
dungeonList['Floccesy Ranch'] = new Dungeon('Floccesy Ranch', [
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    new DungeonTrainer('Lass', [
        new GymPokemon('Burpmon', 126500, 6),
        new GymPokemon('Burpmon', 126500, 6),
    ], { weight: 1 }, 'Molly'),
    new DungeonTrainer('Janitor', [
        new GymPokemon('Burpmon', 126500, 6),
        new GymPokemon('Burpmon', 126500, 6),
    ], { weight: 1 }, 'Orville'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Burpmon', 126500, 6),
        new GymPokemon('Burpmon', 126500, 6),
    ], { weight: 1 }, 'Kenny'),
], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Pokeball', weight: 4 },
    { loot: 'Games', weight: 3.5 },
    { loot: 'eBook', weight: 2.5 },
    { loot: 'Health', weight: 2.5 },
], 2503000, [new DungeonBossPokemon('Burpmon', 13000000, 100)], 126500, 20);
dungeonList['Liberty Garden'] = new Dungeon('Liberty Garden', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Music', weight: 3.75 },
    { loot: 'Greatball', weight: 3 },
    { loot: 'Roar Plate', weight: 2.5 },
    { loot: 'Trojan Plate', weight: 2.5 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'Fire_egg', weight: 1 },
], 2703000, [
    new DungeonBossPokemon('Burpmon', 14000000, 100),
    new DungeonBossPokemon('Burpmon', 14000000, 100),
    new DungeonBossPokemon('Burpmon', 14000000, 100),
], 136500, 20);
dungeonList['Castelia Sewers'] = new Dungeon('Castelia Sewers', [
    { pokemon: 'Burpmon', options: { weight: 5.6 } },
    { pokemon: 'Burpmon', options: { weight: 5.6 } },
    { pokemon: 'Burpmon', options: { weight: 5.6 } },
    { pokemon: 'Burpmon', options: { weight: 5.6 } },
    { pokemon: 'Burpmon', options: { weight: 5.6 } },
    new DungeonTrainer('Janitor', [
        new GymPokemon('Burpmon', 146500, 16),
        new GymPokemon('Burpmon', 146500, 16),
    ], { weight: 1 }, 'Felix'),
    new DungeonTrainer('Doctor', [new GymPokemon('Burpmon', 146500, 17)], { weight: 1 }, 'Heath'),
    new DungeonTrainer('Worker', [new GymPokemon('Burpmon', 146500, 17)], { weight: 1 }, 'Zack'),
    new DungeonTrainer('Worker', [new GymPokemon('Burpmon', 146500, 17)], { weight: 1 }, 'Scott'),
    new DungeonTrainer('Scientist', [new GymPokemon('Burpmon', 146500, 17)], { weight: 1 }, 'Caroline', '(female)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Burpmon', 146500, 17)], { weight: 1 }, 'Clarke', '(male)'),
    new DungeonTrainer('Janitor', [
        new GymPokemon('Burpmon', 146500, 31),
        new GymPokemon('Burpmon', 146500, 31),
    ], { weight: 1 }, 'Brady'),
], [
    { loot: 'xClick', weight: 4 },
    { loot: 'xAttack', weight: 3.75 },
    { loot: 'Jungle Plate', weight: 2.5 },
    { loot: 'Trojan Plate', weight: 2.5 },
    { loot: 'SmallRestore', weight: 2 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'MediumRestore', weight: 1.75 },
    { loot: 'Black Digitron', weight: 1.5 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Digicores', weight: 0 },
], 2603000, [
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Burpmon', 15000000, 16)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Burpmon', 15000000, 16)], { weight: 1 }, undefined, '(female)'),
], 146500, 4);
dungeonList['Relic Passage'] = new Dungeon('Relic Passage', [
    { pokemon: 'Burpmon', options: { weight: 8 } },
    { pokemon: 'Burpmon', options: { weight: 8 } },
    { pokemon: 'Burpmon', options: { weight: 8 } },
    { pokemon: 'Burpmon', options: { weight: 8 } },
    { pokemon: 'Burpmon', options: { weight: 8 } },
    new DungeonTrainer('Scientist', [new GymPokemon('Burpmon', 176500, 18)], { weight: 1 }, 'Terrance', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Burpmon', 176500, 17),
        new GymPokemon('Burpmon', 176500, 17),
    ], { weight: 1 }, 'Hackingina', '(female)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Burpmon', 176500, 18)], { weight: 1 }, 'Kendall', '(male)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Burpmon', 176500, 32)], { weight: 1 }, 'Eileen', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 176500, 31),
        new GymPokemon('Burpmon', 176500, 31),
    ], { weight: 1 }, 'Keith'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Burpmon', 176500, 32)], { weight: 1 }, 'Randall', '(male)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 176500, 31),
        new GymPokemon('Burpmon', 176500, 31),
    ], { weight: 1 }, 'Tobias'),
    new DungeonTrainer('Psychic', [new GymPokemon('Burpmon', 176500, 33)], { weight: 1 }, 'Tully', '(male)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Burpmon', 176500, 32)], { weight: 1 }, 'Annie', '(female)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Burpmon', 176500, 32),
        new GymPokemon('Burpmon', 176500, 32),
    ], { weight: 1 }, 'Ena', '(female)'),
], [
    { loot: 'Lucky_pill', weight: 4 },
    { loot: 'Item_magnet', weight: 3.75 },
    { loot: 'Nature Plate', weight: 2.5 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'XAntibody', weight: 2 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Relic Passage')) },
], 3203000, [
    new DungeonBossPokemon('Burpmon', 21000000, 100),
    new DungeonBossPokemon('Burpmon', 21000000, 100),
], 156500, 5);
dungeonList['Relic Castle'] = new Dungeon('Relic Castle', [
    { pokemon: 'Burpmon', options: { weight: 1.33 } },
    { pokemon: 'Burpmon', options: { weight: 1.33 } },
    { pokemon: 'Burpmon', options: { weight: 1.33 } },
    { pokemon: 'Burpmon', options: { weight: 1.33 } },
    { pokemon: 'Burpmon', options: { weight: 1.33 } },
    { pokemon: 'Burpmon', options: { weight: 1.33 } },
    new DungeonTrainer('Psychic', [new GymPokemon('Burpmon', 156500, 23)], { weight: 1 }, 'Dua', '(female)'),
    new DungeonTrainer('Psychic', [new GymPokemon('Burpmon', 156500, 23)], { weight: 1 }, 'Low', '(male)'),
], [
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Sleep', weight: 3.75 },
    { loot: 'Greatball', weight: 3.25 },
    { loot: 'Nature Plate', weight: 2.5 },
    { loot: 'Code Plate', weight: 2.25 },
    { loot: 'Roar Plate', weight: 2.25 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'MediumRestore', weight: 1.75 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Love_Digimental', weight: 0 },
    { loot: 'Digicores', weight: 0 },
    { loot: 'Burpmon', weight: 0, requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Relic Castle')) },
    { loot: 'Mizu Fossil', weight: 0, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Relic Castle')) },
    { loot: 'Ikazuchi Fossil', weight: 0, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Relic Castle')) },
], 2803000, [
    new DungeonTrainer('Psychic', [new GymPokemon('Burpmon', 16000000, 23)], { weight: 1 }, 'Perry', '(male)'),
    new DungeonBossPokemon('Burpmon', 21000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Relic Passage')) }),
], 166500, 25);
dungeonList['Lostlorn Forest'] = new Dungeon('Lostlorn Forest', [
    { pokemon: 'Burpmon', options: { weight: 2.67 } },
    { pokemon: 'Burpmon', options: { weight: 2.67 } },
    { pokemon: 'Burpmon', options: { weight: 2.67 } },
    { pokemon: 'Burpmon', options: { weight: 2.67 } },
    { pokemon: 'Burpmon', options: { weight: 2.67 } },
    { pokemon: 'Burpmon', options: { weight: 2.67 } },
    new DungeonTrainer('Pokémon Breeder', [
        new GymPokemon('Burpmon', 166500, 24),
        new GymPokemon('Burpmon', 166500, 24),
    ], { weight: 1 }, 'Galen', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Burpmon', 166500, 26)], { weight: 1 }, 'Serenity', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Burpmon', 166500, 26)], { weight: 1 }, 'Forrest', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 166500, 51),
        new GymPokemon('Burpmon', 166500, 51),
        new GymPokemon('Burpmon', 166500, 51),
        new GymPokemon('Burpmon', 166500, 51),
        new GymPokemon('Burpmon', 166500, 51),
    ], { weight: 1 }, 'Murphy', '(male)'),
], [
    { loot: 'Weather', weight: 4 },
    { loot: 'xClick', weight: 3.75 },
    { loot: 'Greatball', weight: 3.75 },
    { loot: 'Burpmon', weight: 3.5 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'Plant_egg', weight: 1 },
    { loot: 'Purity_Digimental', weight: 0 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Lostlorn Forest')) },
    { loot: 'Burpmon', weight: 0, requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Lostlorn Forest')) },
], 3003000, [
    new DungeonBossPokemon('Burpmon', 18000000, 100),
    new DungeonBossPokemon('Burpmon', 18000000, 100),
    new DungeonBossPokemon('Burpmon', 19000000, 100),
], 176500, 16);
dungeonList['Chargestone Cave'] = new Dungeon('Chargestone Cave', [
    { pokemon: 'Burpmon', options: { weight: 8.8 } },
    { pokemon: 'Burpmon', options: { weight: 8.8 } },
    { pokemon: 'Burpmon', options: { weight: 8.8 } },
    { pokemon: 'Burpmon', options: { weight: 8.8 } },
    { pokemon: 'Burpmon', options: { weight: 8.8 } },
    new DungeonTrainer('Guitarist', [new GymPokemon('Burpmon', 186500, 30)], { weight: 1 }, 'Anna'),
    new DungeonTrainer('Scientist', [new GymPokemon('Burpmon', 186500, 30)], { weight: 1 }, 'Ronald', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 186500, 33),
        new GymPokemon('Burpmon', 186500, 33),
        new GymPokemon('Burpmon', 186500, 33),
    ], { weight: 1 }, 'Corky', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Burpmon', 186500, 34)], { weight: 1 }, 'Louis', '(male)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 186500, 32),
        new GymPokemon('Burpmon', 186500, 32),
    ], { weight: 1 }, 'Otto'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Burpmon', 186500, 33),
        new GymPokemon('Burpmon', 186500, 33),
    ], { weight: 1 }, 'Briana', '(female)'),
    new DungeonTrainer('Doctor', [
        new GymPokemon('Burpmon', 186500, 32),
        new GymPokemon('Burpmon', 186500, 32),
    ], { weight: 1 }, 'Kit'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Burpmon', 186500, 32),
        new GymPokemon('Burpmon', 186500, 32),
    ], { weight: 1 }, 'Hackingi', '(female)'),
    new DungeonTrainer('Guitarist', [new GymPokemon('Burpmon', 186500, 33)], { weight: 1 }, 'Beverly'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 186500, 32),
        new GymPokemon('Burpmon', 186500, 32),
    ], { weight: 1 }, 'Jeremy'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 186500, 33),
        new GymPokemon('Burpmon', 186500, 33),
        new GymPokemon('Burpmon', 186500, 33),
    ], { weight: 1 }, 'Vicki', '(female)'),
], [
    { loot: 'Lucky_pill', weight: 4 },
    { loot: 'Item_magnet', weight: 4 },
    { loot: 'Calendar', weight: 3.75 },
    { loot: 'Empire Plate', weight: 2.5 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'Evil Mark', weight: 1.75 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Electric_egg', weight: 1 },
    { loot: 'Knowledge_Digimental', weight: 0 },
    { loot: 'Metal_coat', weight: 0 },
], 3403000, [
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 12000000, 34),
        new GymPokemon('Burpmon', 12000000, 34),
    ], { weight: 1 }, 'Mary', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 12000000, 34),
        new GymPokemon('Burpmon', 12000000, 34),
    ], { weight: 1 }, 'Shaye', '(male)'),
    new DungeonBossPokemon('Burpmon', 22000000, 100),
    new DungeonBossPokemon('Burpmon', 22000000, 100),
], 186500, 6);
dungeonList['Mistralton Cave'] = new Dungeon('Mistralton Cave', [
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    new DungeonTrainer('Hiker', [new GymPokemon('Burpmon', 196500, 32)], { weight: 1 }, 'Shelby'),
    new DungeonTrainer('Hiker', [new GymPokemon('Burpmon', 196500, 32)], { weight: 1 }, 'Jebediah'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 196500, 33),
        new GymPokemon('Burpmon', 196500, 33),
    ], { weight: 1 }, 'Geoff', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 196500, 33),
        new GymPokemon('Burpmon', 196500, 33),
    ], { weight: 1 }, 'Belle', '(female)'),
], [
    { loot: 'xClick', weight: 4 },
    { loot: 'Greatball', weight: 3.75 },
    { loot: 'Nightmare Plate', weight: 2.5 },
    { loot: 'Cure Plate', weight: 2.5 },
    { loot: 'Simple Plate', weight: 2.5 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'XAntibody', weight: 2 },
    { loot: 'Duskball', weight: 2 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Fate_Digimental', weight: 0 },
], 3603000, [
    new DungeonBossPokemon('Burpmon', 23000000, 100),
    new DungeonBossPokemon('Burpmon', 24000000, 100),
    new DungeonBossPokemon('Burpmon', 25000000, 100),
], 196500, 6);
dungeonList['Celestial Tower'] = new Dungeon('Celestial Tower', [
    { pokemon: 'Burpmon', options: { weight: 8 } },
    { pokemon: 'Burpmon', options: { weight: 8 } },
    { pokemon: 'Burpmon', options: { weight: 8 } },
    { pokemon: 'Burpmon', options: { weight: 8 } },
    new DungeonTrainer('Psychic', [new GymPokemon('Burpmon', 206500, 36)], { weight: 1 }, 'Joyce', '(female)'),
    new DungeonTrainer('School Kid', [new GymPokemon('Burpmon', 206500, 35)], { weight: 1 }, 'Alberta', '(female)'),
    new DungeonTrainer('Pokéfan', [new GymPokemon('Burpmon', 206500, 35)], { weight: 1 }, 'Jude', '(male)'),
    new DungeonTrainer('Pokéfan', [new GymPokemon('Burpmon', 206500, 35)], { weight: 1 }, 'Georgia', '(female)'),
    new DungeonTrainer('Psychic', [new GymPokemon('Burpmon', 206500, 36)], { weight: 1 }, 'Micki', '(male)'),
    new DungeonTrainer('Nurse', [new GymPokemon('Burpmon', 206500, 35)], { weight: 1 }, 'Dixie'),
    new DungeonTrainer('Socialite', [new GymPokemon('Burpmon', 206500, 35)], { weight: 1 }, 'Grace'),
    new DungeonTrainer('Gentleman', [new GymPokemon('Burpmon', 206500, 35)], { weight: 1 }, 'Daniel'),
], [
    { loot: 'Lucky_pill', weight: 4 },
    { loot: 'Intel_floppy', weight: 3.75 },
    { loot: 'Nightmare Plate', weight: 2.5 },
    { loot: 'Trojan Plate', weight: 2.5 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'LargeRestore', weight: 1.5 },
], 3803000, [
    new DungeonBossPokemon('Burpmon', 25000000, 100),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Burpmon', 14000000, 35),
        new GymPokemon('Burpmon', 14000000, 35),
    ], { weight: 1 }, 'Bryce', '(male)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Burpmon', 14000000, 35),
        new GymPokemon('Burpmon', 14000000, 35),
    ], { weight: 1 }, 'Sarah', '(female)'),
], 206500, 7);
dungeonList['Reversal Mountain'] = new Dungeon('Reversal Mountain', [
    { pokemon: 'Burpmon', options: { weight: 5.2 } },
    { pokemon: 'Burpmon', options: { weight: 5.2 } },
    { pokemon: 'Burpmon', options: { weight: 5.2 } },
    { pokemon: 'Burpmon', options: { weight: 5.2 } },
    { pokemon: 'Burpmon', options: { weight: 5.2 } },
    { pokemon: 'Burpmon', options: { weight: 5.2 } },
    { pokemon: 'Burpmon', options: { weight: 5.2 } },
    { pokemon: 'Burpmon', options: { weight: 5.2 } },
    { pokemon: 'Burpmon', options: { weight: 5.2 } },
    { pokemon: 'Burpmon', options: { weight: 5.2 } },
    new DungeonTrainer('Cyclist', [new GymPokemon('Burpmon', 226500, 37)], { weight: 1 }, 'Jeremiah', '(male)'),
    new DungeonTrainer('Cyclist', [new GymPokemon('Burpmon', 226500, 37)], { weight: 1 }, 'Adalaide', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 226500, 37),
        new GymPokemon('Burpmon', 226500, 37),
    ], { weight: 1 }, 'Markus'),
    new DungeonTrainer('Backpacker', [
        new GymPokemon('Burpmon', 226500, 37),
        new GymPokemon('Burpmon', 226500, 37),
    ], { weight: 1 }, 'Kiyo', '(male)'),
    new DungeonTrainer('Doctor', [new GymPokemon('Burpmon', 226500, 38)], { weight: 1 }, 'Derek'),
    new DungeonTrainer('Backpacker', [
        new GymPokemon('Burpmon', 226500, 37),
        new GymPokemon('Burpmon', 226500, 37),
    ], { weight: 1 }, 'Kumiko', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 226500, 37),
        new GymPokemon('Burpmon', 226500, 37),
    ], { weight: 1 }, 'Jared'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 226500, 39),
        new GymPokemon('Burpmon', 226500, 39),
    ], { weight: 1 }, 'Ray', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 226500, 37),
        new GymPokemon('Burpmon', 226500, 37),
    ], { weight: 1 }, 'Cora', '(female)'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Burpmon', 226500, 37),
        new GymPokemon('Burpmon', 226500, 37),
        new GymPokemon('Burpmon', 226500, 37),
    ], { weight: 1 }, 'Corey'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Burpmon', 226500, 37),
        new GymPokemon('Burpmon', 226500, 37),
        new GymPokemon('Burpmon', 226500, 37),
    ], { weight: 1 }, 'Chan'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Burpmon', 226500, 38),
        new GymPokemon('Burpmon', 226500, 38),
    ], { weight: 1 }, 'Eliza', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Burpmon', 226500, 38),
        new GymPokemon('Burpmon', 226500, 38),
    ], { weight: 1 }, 'Lewis', '(male)'),
], [
    { loot: 'Item_magnet', weight: 4 },
    { loot: 'Games', weight: 3.75 },
    { loot: 'Ultraball', weight: 3 },
    { loot: 'Simple Plate', weight: 2.5 },
    { loot: 'Roar Plate', weight: 2.5 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'LargeRestore', weight: 1.75 },
    { loot: 'Evil Mark', weight: 1.75 },
    { loot: 'Fire_egg', weight: 1 },
], 4003000, [
    new DungeonBossPokemon('Burpmon', 24000000, 100),
    new DungeonBossPokemon('Burpmon', 26000000, 100),
    new DungeonBossPokemon('Burpmon', 30000000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion) }),
], 226500, 14);
dungeonList['Team Plasma Assault'] = new Dungeon('Team Plasma Assault', [
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 241500, 44),
        new GymPokemon('Burpmon', 241500, 44),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 241500, 44),
        new GymPokemon('Burpmon', 241500, 44),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 241500, 44),
        new GymPokemon('Burpmon', 241500, 44),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma', [
        new GymPokemon('Burpmon', 241500, 46),
        new GymPokemon('Burpmon', 241500, 46),
        new GymPokemon('Burpmon', 241500, 46),
    ], { weight: 1 }, 'Shadow', '(shadow)'),
], [
    { loot: 'xClick', weight: 4 },
    { loot: 'Greatball', weight: 3.75 },
    { loot: 'Nightmare Plate', weight: 2.5 },
    { loot: 'Guardian Plate', weight: 2.5 },
    { loot: 'Ultraball', weight: 2 },
], 4603000, [
    new DungeonTrainer('Team Plasma', [
        new GymPokemon('Burpmon', 11000000, 46),
        new GymPokemon('Burpmon', 11000000, 46),
        new GymPokemon('Burpmon', 12000000, 48),
    ], { weight: 1 }, 'Zinzolin', '(zinzolin)'),
], 241500, 20);
dungeonList['Seaside Cave'] = new Dungeon('Seaside Cave', [
    { pokemon: 'Burpmon', options: { weight: 3.5 } },
    { pokemon: 'Burpmon', options: { weight: 3.5 } },
    { pokemon: 'Burpmon', options: { weight: 3.5 } },
    { pokemon: 'Burpmon', options: { weight: 3.5 } },
    { pokemon: 'Burpmon', options: { weight: 3.5 } },
    { pokemon: 'Burpmon', options: { weight: 3.5 } },
    { pokemon: 'Burpmon', options: { weight: 3.5 } },
    { pokemon: 'Burpmon', options: { weight: 3.5 } },
    new DungeonTrainer('Battle Girl', [new GymPokemon('Burpmon', 246500, 47)], { weight: 1 }, 'Tia'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Burpmon', 246500, 46),
        new GymPokemon('Burpmon', 246500, 46),
    ], { weight: 1 }, 'Johan', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Burpmon', 246500, 46),
        new GymPokemon('Burpmon', 246500, 46),
    ], { weight: 1 }, 'Mikiko', '(female)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Burpmon', 246500, 47)], { weight: 1 }, 'Drago'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Burpmon', 246500, 44),
        new GymPokemon('Burpmon', 246500, 44),
        new GymPokemon('Burpmon', 246500, 44),
        new GymPokemon('Burpmon', 246500, 44),
    ], { weight: 1 }, 'Rocky'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Burpmon', 246500, 47)], { weight: 1 }, 'Maki'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Burpmon', 246500, 47)], { weight: 1 }, 'Rich'),
], [
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Lucky_pill', weight: 4 },
    { loot: 'Games', weight: 3.75 },
    { loot: 'Code Plate', weight: 2.5 },
    { loot: 'Nature Plate', weight: 2.5 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Seaside Cave')) },
    { loot: 'Digicores', weight: 0 },
], 4203000, [
    new DungeonBossPokemon('Burpmon', 28000000, 100),
    new DungeonBossPokemon('Burpmon', 28000000, 100),
], 246500, 21);
dungeonList['Plasma Frigate'] = new Dungeon('Plasma Frigate', [
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 257500, 46),
        new GymPokemon('Burpmon', 257500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 257500, 46),
        new GymPokemon('Burpmon', 257500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 257500, 46),
        new GymPokemon('Burpmon', 257500, 46),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Burpmon', 257500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Burpmon', 257500, 47)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Burpmon', 257500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 257500, 46),
        new GymPokemon('Burpmon', 257500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 257500, 45),
        new GymPokemon('Burpmon', 257500, 45),
        new GymPokemon('Burpmon', 257500, 45),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 257500, 46),
        new GymPokemon('Burpmon', 257500, 46),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Burpmon', 257500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 257500, 46),
        new GymPokemon('Burpmon', 257500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 257500, 45),
        new GymPokemon('Burpmon', 257500, 45),
        new GymPokemon('Burpmon', 257500, 45),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 257500, 45),
        new GymPokemon('Burpmon', 257500, 45),
        new GymPokemon('Burpmon', 257500, 45),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Burpmon', 257500, 47)], { weight: 1 }, undefined, '(female)'),
], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Pokeball', weight: 4 },
    { loot: 'Simple Plate', weight: 2.5 },
    { loot: 'Empire Plate', weight: 2.5 },
    { loot: 'Guardian Plate', weight: 2.5 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'Magmarizer', weight: 0 },
    { loot: 'Electirizer', weight: 0 },
    { loot: 'Broken Digivice', weight: 0 },
], 4603000, [
    new DungeonTrainer('Team Plasma', [
        new GymPokemon('Burpmon', 12000000, 48),
        new GymPokemon('Burpmon', 12000000, 48),
        new GymPokemon('Burpmon', 13000000, 50),
    ], { weight: 1 }, 'Zinzolin', '(zinzolin)'),
], 257500, 20);
dungeonList['Giant Chasm'] = new Dungeon('Giant Chasm', [
    { pokemon: 'Burpmon', options: { weight: 5.33 } },
    { pokemon: 'Burpmon', options: { weight: 5.33 } },
    { pokemon: 'Burpmon', options: { weight: 5.33 } },
    { pokemon: 'Burpmon', options: { weight: 5.33 } },
    { pokemon: 'Burpmon', options: { weight: 5.33 } },
    { pokemon: 'Burpmon', options: { weight: 5.33 } },
    { pokemon: 'Burpmon', options: { weight: 5.33 } },
    { pokemon: 'Burpmon', options: { weight: 5.33 } },
    { pokemon: 'Burpmon', options: { weight: 5.33 } },
    { pokemon: 'Burpmon', options: { weight: 5.33 } },
    { pokemon: 'Burpmon', options: { weight: 5.33 } },
    { pokemon: 'Burpmon', options: { weight: 5.33 } },
    { pokemon: 'Burpmon', options: { weight: 5.33 } },
    { pokemon: 'Burpmon', options: { weight: 5.33 } },
    { pokemon: 'Burpmon', options: { weight: 5.33 } },
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 266500, 46),
        new GymPokemon('Burpmon', 266500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 266500, 46),
        new GymPokemon('Burpmon', 266500, 46),
        new GymPokemon('Burpmon', 266500, 46),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 266500, 46),
        new GymPokemon('Burpmon', 266500, 46),
        new GymPokemon('Burpmon', 266500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 266500, 45),
        new GymPokemon('Burpmon', 266500, 45),
        new GymPokemon('Burpmon', 266500, 45),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Burpmon', 266500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Doctor', [new GymPokemon('Burpmon', 266500, 49)], { weight: 1 }, 'Julius'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Burpmon', 266500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Burpmon', 266500, 47)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 266500, 46),
        new GymPokemon('Burpmon', 266500, 46),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 266500, 46),
        new GymPokemon('Burpmon', 266500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 266500, 47),
        new GymPokemon('Burpmon', 266500, 47),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 266500, 47),
        new GymPokemon('Burpmon', 266500, 47),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Burpmon', 266500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 266500, 45),
        new GymPokemon('Burpmon', 266500, 45),
        new GymPokemon('Burpmon', 266500, 45),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Burpmon', 266500, 46),
        new GymPokemon('Burpmon', 266500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma', [
        new GymPokemon('Burpmon', 266500, 49),
        new GymPokemon('Burpmon', 266500, 49),
        new GymPokemon('Burpmon', 266500, 51),
    ], { weight: 1 }, 'Zinzolin', '(zinzolin)'),
    new DungeonTrainer('Team Plasma', [
        new GymPokemon('Burpmon', 266500, 50),
        new GymPokemon('Burpmon', 266500, 50),
        new GymPokemon('Burpmon', 266500, 50),
        new GymPokemon('Burpmon', 266500, 50),
        new GymPokemon('Burpmon', 266500, 52),
    ], { weight: 1 }, 'Colress', '(colress)'),
    new DungeonTrainer('Team Plasma', [
        new GymPokemon('Burpmon', 266500, 49),
        new GymPokemon('Burpmon', 266500, 49),
        new GymPokemon('Burpmon', 266500, 51),
    ], { weight: 1 }, 'Shadow', '(shadow)'),
    new DungeonTrainer('Team Plasma', [
        new GymPokemon('Burpmon', 266500, 49),
        new GymPokemon('Burpmon', 266500, 49),
        new GymPokemon('Burpmon', 266500, 51),
    ], { weight: 1 }, 'Shadow', '(shadow)'),
    new DungeonTrainer('Team Plasma', [
        new GymPokemon('Burpmon', 266500, 49),
        new GymPokemon('Burpmon', 266500, 49),
        new GymPokemon('Burpmon', 266500, 51),
    ], { weight: 1 }, 'Shadow', '(shadow)'),
], [
    { loot: 'Lucky_floppy', weight: 4 },
    { loot: 'Light', weight: 3.75 },
    { loot: 'Burpmon', weight: 3.25 },
    { loot: 'Guardian Plate', weight: 2.5 },
    { loot: 'Nightmare Plate', weight: 2.25 },
    { loot: 'Release Plate', weight: 2.25 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'Evil Mark', weight: 1.75 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Razor_claw', weight: 0 },
    { loot: 'Hope_Digimental', weight: 0 },
    { loot: 'Love_Digimental', weight: 0 },
], 4403000, [
    new DungeonTrainer('Team Plasma', [
        new GymPokemon('Burpmon', 6000000, 50),
        new GymPokemon('Burpmon', 6000000, 50),
        new GymPokemon('Burpmon', 6000000, 50),
        new GymPokemon('Burpmon', 6000000, 50),
        new GymPokemon('Burpmon', 6000000, 50),
        new GymPokemon('Burpmon', 6500000, 52),
    ], { weight: 1 }, 'Ghetsis', '(ghetsis)'),
    new DungeonBossPokemon('Burpmon', 30000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Giant Chasm')) }),
    new DungeonBossPokemon('Burpmon', 32000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Giant Chasm')) }),
    new DungeonBossPokemon('Burpmon', 32000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Giant Chasm')) }),
    new DungeonBossPokemon('Burpmon', 35000000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion) }),
], 266500, 22);
dungeonList['Cave of Being'] = new Dungeon('Cave of Being', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xClick', weight: 4 },
    { loot: 'xAttack', weight: 4 },
    { loot: 'Lucky_pill', weight: 4 },
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Item_magnet', weight: 4 },
    { loot: 'Lucky_floppy', weight: 4 },
    { loot: 'Trojan Plate', weight: 2.5 },
    { loot: 'Fire_egg', weight: 1 },
    { loot: 'Water_egg', weight: 1 },
    { loot: 'Plant_egg', weight: 1 },
    { loot: 'Electric_egg', weight: 1 },
    { loot: 'Earth_egg', weight: 1 },
    { loot: 'Wind_egg', weight: 1 },
], 4603000, [
    new DungeonBossPokemon('Burpmon', 35000000, 100),
    new DungeonBossPokemon('Burpmon', 35000000, 100),
    new DungeonBossPokemon('Burpmon', 35000000, 100),
], 286500, 20);
dungeonList['Abundant Shrine'] = new Dungeon('Abundant Shrine', [
    { pokemon: 'Burpmon', options: { weight: 1.45 } },
    { pokemon: 'Burpmon', options: { weight: 1.45 } },
    { pokemon: 'Burpmon', options: { weight: 1.45 } },
    { pokemon: 'Burpmon', options: { weight: 1.45 } },
    { pokemon: 'Burpmon', options: { weight: 1.45 } },
    { pokemon: 'Burpmon', options: { weight: 1.45 } },
    { pokemon: 'Burpmon', options: { weight: 1.45 } },
    { pokemon: 'Burpmon', options: { weight: 1.45 } },
    { pokemon: 'Burpmon', options: { weight: 1.45 } },
    { pokemon: 'Burpmon', options: { weight: 1.45 } },
    { pokemon: 'Burpmon', options: { weight: 1.45 } },
    new DungeonTrainer('Youngster', [
        new GymPokemon('Burpmon', 306500, 39),
        new GymPokemon('Burpmon', 306500, 39),
    ], { weight: 1 }, 'Wes'),
    new DungeonTrainer('Twins', [
        new GymPokemon('Burpmon', 306500, 38),
        new GymPokemon('Burpmon', 306500, 38),
    ], { weight: 1 }, 'Rae & Ula'),
    new DungeonTrainer('Lass', [
        new GymPokemon('Burpmon', 306500, 39),
        new GymPokemon('Burpmon', 306500, 39),
    ], { weight: 1 }, 'Lurleen'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Burpmon', 306500, 37),
        new GymPokemon('Burpmon', 306500, 37),
        new GymPokemon('Burpmon', 306500, 37),
        new GymPokemon('Burpmon', 306500, 37),
    ], { weight: 1 }, 'Jaye'),
], [
    { loot: 'xClick', weight: 4 },
    { loot: 'Sleep', weight: 3.75 },
    { loot: 'Ultraball', weight: 3.5 },
    { loot: 'Burpmon', weight: 3.5 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Earth_egg', weight: 1 },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Razor_fang', weight: 0 },
    { loot: 'Miracles_Digimental', weight: 0 },
], 4803000, [
    new DungeonBossPokemon('Burpmon', 38000000, 100),
    new DungeonBossPokemon('Burpmon', 38000000, 100),
    new DungeonBossPokemon('Burpmon', 42000000, 100),
], 306500, 14);
dungeonList['Victory Road Unova'] = new Dungeon('Victory Road Unova', [
    { pokemon: 'Burpmon', options: { weight: 6.67 } },
    { pokemon: 'Burpmon', options: { weight: 6.67 } },
    { pokemon: 'Burpmon', options: { weight: 6.67 } },
    { pokemon: 'Burpmon', options: { weight: 6.67 } },
    { pokemon: 'Burpmon', options: { weight: 6.67 } },
    { pokemon: 'Burpmon', options: { weight: 6.67 } },
    { pokemon: 'Burpmon', options: { weight: 6.67 } },
    { pokemon: 'Burpmon', options: { weight: 6.67 } },
    { pokemon: 'Burpmon', options: { weight: 6.67 } },
    { pokemon: 'Burpmon', options: { weight: 6.67 } },
    { pokemon: 'Burpmon', options: { weight: 6.67 } },
    { pokemon: 'Burpmon', options: { weight: 6.67 } },
    { pokemon: 'Burpmon', options: { weight: 6.67 } },
    { pokemon: 'Burpmon', options: { weight: 6.67 } },
    { pokemon: 'Burpmon', options: { weight: 6.67 } },
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 326500, 55),
        new GymPokemon('Burpmon', 326500, 55),
    ], { weight: 1 }, 'Billy', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 326500, 55),
        new GymPokemon('Burpmon', 326500, 55),
    ], { weight: 1 }, 'Jamie', '(female)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Burpmon', 326500, 54),
        new GymPokemon('Burpmon', 326500, 54),
    ], { weight: 1 }, 'Alia', '(female)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Burpmon', 326500, 54),
        new GymPokemon('Burpmon', 326500, 54),
    ], { weight: 1 }, 'Al', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 326500, 55),
        new GymPokemon('Burpmon', 326500, 55),
    ], { weight: 1 }, 'Claude', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 326500, 55),
        new GymPokemon('Burpmon', 326500, 55),
    ], { weight: 1 }, 'Cecile', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 326500, 55),
        new GymPokemon('Burpmon', 326500, 55),
    ], { weight: 1 }, 'Chandra', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 326500, 55),
        new GymPokemon('Burpmon', 326500, 55),
    ], { weight: 1 }, 'Beckett', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 326500, 55),
        new GymPokemon('Burpmon', 326500, 55),
    ], { weight: 1 }, 'Shelly', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 326500, 55),
        new GymPokemon('Burpmon', 326500, 55),
    ], { weight: 1 }, 'Cathy', '(female)'),
    new DungeonTrainer('Doctor', [new GymPokemon('Burpmon', 326500, 54)], { weight: 1 }, 'Logan'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Burpmon', 326500, 54)], { weight: 1 }, 'Mae', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 326500, 55),
        new GymPokemon('Burpmon', 326500, 55),
    ], { weight: 1 }, 'Pierce', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 326500, 55),
        new GymPokemon('Burpmon', 326500, 55),
    ], { weight: 1 }, 'Burpmonham', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 326500, 55),
        new GymPokemon('Burpmon', 326500, 55),
    ], { weight: 1 }, 'Shanta', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 326500, 55),
        new GymPokemon('Burpmon', 326500, 55),
    ], { weight: 1 }, 'Webster', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Burpmon', 326500, 54),
        new GymPokemon('Burpmon', 326500, 54),
    ], { weight: 1 }, 'Eddie', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Burpmon', 326500, 54),
        new GymPokemon('Burpmon', 326500, 54),
    ], { weight: 1 }, 'Elle', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 326500, 54),
        new GymPokemon('Burpmon', 326500, 54),
        new GymPokemon('Burpmon', 326500, 54),
    ], { weight: 1 }, 'Hugo', '(male)'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Burpmon', 326500, 54),
        new GymPokemon('Burpmon', 326500, 54),
    ], { weight: 1 }, 'Martell'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Burpmon', 326500, 54),
        new GymPokemon('Burpmon', 326500, 54),
    ], { weight: 1 }, 'Chalina'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 326500, 55),
        new GymPokemon('Burpmon', 326500, 55),
    ], { weight: 1 }, 'Elmer', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 326500, 55),
        new GymPokemon('Burpmon', 326500, 55),
    ], { weight: 1 }, 'Caroll', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 326500, 54),
        new GymPokemon('Burpmon', 326500, 54),
        new GymPokemon('Burpmon', 326500, 54),
    ], { weight: 1 }, 'Portia', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 326500, 54),
        new GymPokemon('Burpmon', 326500, 54),
        new GymPokemon('Burpmon', 326500, 54),
    ], { weight: 1 }, 'Sterling', '(male)'),
], [
    { loot: 'xClick', weight: 4 },
    { loot: 'xAttack', weight: 4 },
    { loot: 'Burpmon', weight: 3.25 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'Evil Mark', weight: 1.75 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Fate_Digimental', weight: 0 },
    { loot: 'Dragon_scale', weight: 0 },
    { loot: 'Broken Digivice', weight: 0 },
], 5003000, [
    new DungeonBossPokemon('Burpmon', 44000000, 100),
    new DungeonBossPokemon('Burpmon', 45000000, 100),
    new DungeonBossPokemon('Burpmon', 45000000, 100),
    new DungeonBossPokemon('Burpmon', 44000000, 100),
], 326500, 23);
dungeonList['Twist Mountain'] = new Dungeon('Twist Mountain', [
    { pokemon: 'Burpmon', options: { weight: 10.4 } },
    { pokemon: 'Burpmon', options: { weight: 10.4 } },
    { pokemon: 'Burpmon', options: { weight: 10.4 } },
    { pokemon: 'Burpmon', options: { weight: 10.4 } },
    { pokemon: 'Burpmon', options: { weight: 10.4 } },
    new DungeonTrainer('Worker', [
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
    ], { weight: 1 }, 'Cairn'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 356500, 64),
        new GymPokemon('Burpmon', 356500, 64),
        new GymPokemon('Burpmon', 356500, 64),
    ], { weight: 1 }, 'Carter', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 356500, 63),
        new GymPokemon('Burpmon', 356500, 63),
        new GymPokemon('Burpmon', 356500, 63),
        new GymPokemon('Burpmon', 356500, 63),
    ], { weight: 1 }, 'Julia', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 356500, 61),
        new GymPokemon('Burpmon', 356500, 61),
    ], { weight: 1 }, 'Wade'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
    ], { weight: 1 }, 'Gus'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Burpmon', 356500, 61),
        new GymPokemon('Burpmon', 356500, 61),
    ], { weight: 1 }, 'Patton', '(ice)'),
    new DungeonTrainer('Nurse', [new GymPokemon('Burpmon', 356500, 62)], { weight: 1 }, 'Carol'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 356500, 64),
        new GymPokemon('Burpmon', 356500, 64),
        new GymPokemon('Burpmon', 356500, 64),
    ], { weight: 1 }, 'Chloris', '(female)'),
    new DungeonTrainer('Worker', [new GymPokemon('Burpmon', 356500, 62)], { weight: 1 }, 'Cliff'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 356500, 61),
        new GymPokemon('Burpmon', 356500, 61),
    ], { weight: 1 }, 'Hunter'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Burpmon', 356500, 61),
        new GymPokemon('Burpmon', 356500, 61),
    ], { weight: 1 }, 'Victor', '(ice)'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
    ], { weight: 1 }, 'Ryan', '(ice)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 356500, 63),
        new GymPokemon('Burpmon', 356500, 63),
        new GymPokemon('Burpmon', 356500, 63),
        new GymPokemon('Burpmon', 356500, 63),
    ], { weight: 1 }, 'Zach', '(male)'),
], [
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Lucky_floppy', weight: 4 },
    { loot: 'Greatball', weight: 3.75 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'Duskball', weight: 2 },
    { loot: 'Black Digitron', weight: 1.75 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Hono Fossil', weight: 0 },
    { loot: 'Hikari Fossil', weight: 0 },
    { loot: 'Gold Digizoid', weight: 0 },
    { loot: 'Tsuchi Fossil', weight: 0 },
    { loot: 'Kori Fossil', weight: 0 },
    { loot: 'Kaze Fossil', weight: 0 },
    { loot: 'Hagane Fossil', weight: 0 },
    { loot: 'Hope_Digimental', weight: 0 },
    { loot: 'Fate_Digimental', weight: 0 },
    { loot: 'Metal_coat', weight: 0 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Twist Mountain')) },
], 5203000, [
    new DungeonBossPokemon('Burpmon', 48000000, 100),
    new DungeonBossPokemon('Burpmon', 48000000, 100),
    new DungeonBossPokemon('Burpmon', 48000000, 100),
    new DungeonBossPokemon('Burpmon', 50000000, 100),
], 356500, 7);
dungeonList['Dragonspiral Tower'] = new Dungeon('Dragonspiral Tower', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Security', weight: 3.5 },
    { loot: 'Light', weight: 3.5 },
    { loot: 'Nightmare Plate', weight: 2.5 },
    { loot: 'Empire Plate', weight: 2.5 },
    { loot: 'Roar Plate', weight: 2.5 },
    { loot: 'Guardian Plate', weight: 2 },
    { loot: 'Nightmare Plate', weight: 2 },
    { loot: 'Deep Plate', weight: 2 },
    { loot: 'Simple Plate', weight: 2 },
    { loot: 'Evil Mark', weight: 1.75 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Electric_egg', weight: 1 },
    { loot: 'Fire_egg', weight: 1 },
    { loot: 'Miracles_Digimental', weight: 0 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Dragonspiral Tower')) },
    { loot: 'Digicores', weight: 0 },
], 5203000, [
    new DungeonBossPokemon('Burpmon', 48000000, 100),
    new DungeonBossPokemon('Burpmon', 48000000, 100),
    new DungeonBossPokemon('Burpmon', 50000000, 100),
], 356500, 7);
dungeonList['Moor of Icirrus'] = new Dungeon('Moor of Icirrus', [
    { pokemon: 'Burpmon', options: { weight: 2.67 } },
    { pokemon: 'Burpmon', options: { weight: 2.67 } },
    { pokemon: 'Burpmon', options: { weight: 2.67 } },
    { pokemon: 'Burpmon', options: { weight: 2.67 } },
    { pokemon: 'Burpmon', options: { weight: 2.67 } },
    { pokemon: 'Burpmon', options: { weight: 2.67 } },
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Burpmon', 356500, 62),
        new GymPokemon('Burpmon', 356500, 62),
        new GymPokemon('Burpmon', 356500, 62),
    ], { weight: 1 }, 'Elaine', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Burpmon', 356500, 62),
        new GymPokemon('Burpmon', 356500, 62),
        new GymPokemon('Burpmon', 356500, 62),
    ], { weight: 1 }, 'Parker', '(male)'),
    new DungeonTrainer('Fisherman', [
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
    ], { weight: 1 }, 'Eustace'),
    new DungeonTrainer('Fisherman', [
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
    ], { weight: 1 }, 'Arnold'),
], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Lucky_pill', weight: 4 },
    { loot: 'Greatball', weight: 3 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Hacking', weight: 0, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Moor of Icirrus')) },
    { loot: 'Digicores', weight: 0 },
    { loot: 'Light_Digimental', weight: 0 },
], 5203000, [
    new DungeonBossPokemon('Burpmon', 50000000, 100),
    new DungeonBossPokemon('Burpmon', 48000000, 100),
    new DungeonBossPokemon('Burpmon', 48000000, 100),
], 356500, 8);
dungeonList['Pledge Grove'] = new Dungeon('Pledge Grove', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Lucky_pill', weight: 3.75 },
    { loot: 'Ultraball', weight: 3.5 },
    { loot: 'Deep Plate', weight: 2.5 },
    { loot: 'Cure Plate', weight: 2.5 },
    { loot: 'Courage_Digimental', weight: 0 },
    { loot: 'Sincerity_Digimental', weight: 0 },
    { loot: 'Purity_Digimental', weight: 0 },
    { loot: 'Knowledge_Digimental', weight: 0 },
    { loot: 'Kindness_Digimental', weight: 0 },
    { loot: 'Love_Digimental', weight: 0 },
    { loot: 'Soothe_bell', weight: 0 },
], 5203000, [new DungeonBossPokemon('Burpmon', 52000000, 100)], 356500, 8);
dungeonList['Pinwheel Forest'] = new Dungeon('Pinwheel Forest', [
    { pokemon: 'Burpmon', options: { weight: 6.57 } },
    { pokemon: 'Burpmon', options: { weight: 6.57 } },
    { pokemon: 'Burpmon', options: { weight: 6.57 } },
    { pokemon: 'Burpmon', options: { weight: 6.57 } },
    { pokemon: 'Burpmon', options: { weight: 6.57 } },
    { pokemon: 'Burpmon', options: { weight: 6.57 } },
    { pokemon: 'Burpmon', options: { weight: 6.57 } },
    { pokemon: 'Burpmon', options: { weight: 6.57 } },
    { pokemon: 'Burpmon', options: { weight: 6.57 } },
    { pokemon: 'Burpmon', options: { weight: 6.57 } },
    { pokemon: 'Burpmon', options: { weight: 6.57 } },
    { pokemon: 'Burpmon', options: { weight: 6.57 } },
    { pokemon: 'Burpmon', options: { weight: 6.57 } },
    { pokemon: 'Burpmon', options: { weight: 6.57 } },
    new DungeonTrainer('Preschooler', [
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
    ], { weight: 1 }, 'Jojo', '(male)'),
    new DungeonTrainer('Nursery Aide', [
        new GymPokemon('Burpmon', 356500, 61),
        new GymPokemon('Burpmon', 356500, 61),
    ], { weight: 1 }, 'Ethel'),
    new DungeonTrainer('Preschooler', [
        new GymPokemon('Burpmon', 356500, 59),
        new GymPokemon('Burpmon', 356500, 59),
        new GymPokemon('Burpmon', 356500, 59),
    ], { weight: 1 }, 'Samantha', '(female)'),
    new DungeonTrainer('Preschooler', [
        new GymPokemon('Burpmon', 356500, 59),
        new GymPokemon('Burpmon', 356500, 59),
        new GymPokemon('Burpmon', 356500, 59),
    ], { weight: 1 }, 'José', '(male)'),
    new DungeonTrainer('Twins', [
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
    ], { weight: 1 }, 'Ally & Amy'),
    new DungeonTrainer('Nursery Aide', [
        new GymPokemon('Burpmon', 356500, 61),
        new GymPokemon('Burpmon', 356500, 61),
    ], { weight: 1 }, 'Rosalyn'),
    new DungeonTrainer('Preschooler', [
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
    ], { weight: 1 }, 'Ike', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Burpmon', 356500, 62),
        new GymPokemon('Burpmon', 356500, 62),
        new GymPokemon('Burpmon', 356500, 62),
    ], { weight: 1 }, 'Hillary', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Burpmon', 356500, 62),
        new GymPokemon('Burpmon', 356500, 62),
        new GymPokemon('Burpmon', 356500, 62),
    ], { weight: 1 }, 'Dwayne', '(male)'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
    ], { weight: 1 }, 'Keita'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Burpmon', 356500, 62),
        new GymPokemon('Burpmon', 356500, 62),
        new GymPokemon('Burpmon', 356500, 62),
    ], { weight: 1 }, 'Ralph', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 356500, 64),
        new GymPokemon('Burpmon', 356500, 64),
        new GymPokemon('Burpmon', 356500, 64),
    ], { weight: 1 }, 'Rosaline', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 356500, 64),
        new GymPokemon('Burpmon', 356500, 64),
        new GymPokemon('Burpmon', 356500, 64),
    ], { weight: 1 }, 'Sinan', '(male)'),
    new DungeonTrainer('Lass', [
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
    ], { weight: 1 }, 'Helia'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
    ], { weight: 1 }, 'Henley'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Burpmon', 356500, 62),
        new GymPokemon('Burpmon', 356500, 62),
        new GymPokemon('Burpmon', 356500, 62),
    ], { weight: 1 }, 'Melita', '(female)'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
    ], { weight: 1 }, 'Nicholas'),
    new DungeonTrainer('School Kid', [
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
    ], { weight: 1 }, 'Millie', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 356500, 63),
        new GymPokemon('Burpmon', 356500, 63),
        new GymPokemon('Burpmon', 356500, 63),
    ], { weight: 1 }, 'Kelsey', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 356500, 63),
        new GymPokemon('Burpmon', 356500, 63),
        new GymPokemon('Burpmon', 356500, 63),
    ], { weight: 1 }, 'Kathrine', '(female)'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Burpmon', 356500, 61),
        new GymPokemon('Burpmon', 356500, 61),
        new GymPokemon('Burpmon', 356500, 61),
    ], { weight: 1 }, 'Kentaro'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Burpmon', 356500, 61),
        new GymPokemon('Burpmon', 356500, 61),
        new GymPokemon('Burpmon', 356500, 61),
    ], { weight: 1 }, 'Lee'),
    new DungeonTrainer('School Kid', [
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
        new GymPokemon('Burpmon', 356500, 60),
    ], { weight: 1 }, 'Keston', '(male)'),
], [
    { loot: 'Security', weight: 4 },
    { loot: 'Health', weight: 4 },
    { loot: 'Finance', weight: 4 },
    { loot: 'Burpmon', weight: 3.5 },
    { loot: 'Greatball', weight: 3.5 },
    { loot: 'Jungle Plate', weight: 2.5 },
    { loot: 'Cure Plate', weight: 2.5 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'MediumRestore', weight: 1.75 },
    { loot: 'Evil Mark', weight: 1.75 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Hope_Digimental', weight: 0 },
    { loot: 'Upgrade', weight: 0 },
    { loot: 'Love_Digimental', weight: 0 },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Protein', weight: 0 },
    { loot: 'Hacking', weight: 0, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Pinwheel Forest')) },
], 5203000, [
    new DungeonBossPokemon('Burpmon', 48000000, 100),
    new DungeonBossPokemon('Burpmon', 48000000, 100),
    new DungeonBossPokemon('Burpmon', 48000000, 100),
], 356500, 3);
dungeonList['Dreamyard'] = new Dungeon('Dreamyard', [
    { pokemon: 'Burpmon', options: { weight: 4.67 } },
    { pokemon: 'Burpmon', options: { weight: 4.67 } },
    { pokemon: 'Burpmon', options: { weight: 4.67 } },
    { pokemon: 'Burpmon', options: { weight: 4.67 } },
    { pokemon: 'Burpmon', options: { weight: 4.67 } },
    { pokemon: 'Burpmon', options: { weight: 4.67 } },
    new DungeonTrainer('Psychic', [
        new GymPokemon('Burpmon', 356500, 62),
        new GymPokemon('Burpmon', 356500, 62),
    ], { weight: 1 }, 'Nandor', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Burpmon', 356500, 63),
        new GymPokemon('Burpmon', 356500, 63),
    ], { weight: 1 }, 'Athena', '(female)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Burpmon', 356500, 62),
        new GymPokemon('Burpmon', 356500, 62),
    ], { weight: 1 }, 'Olesia', '(female)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Burpmon', 356500, 63),
        new GymPokemon('Burpmon', 356500, 63),
    ], { weight: 1 }, 'Franklin', '(male)'),
    new DungeonTrainer('School Kid', [
        new GymPokemon('Burpmon', 356500, 63),
        new GymPokemon('Burpmon', 356500, 63),
    ], { weight: 1 }, 'William', '(male)'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Burpmon', 356500, 63),
        new GymPokemon('Burpmon', 356500, 63),
    ], { weight: 1 }, 'Keita'),
    new DungeonTrainer('School Kid', [
        new GymPokemon('Burpmon', 356500, 63),
        new GymPokemon('Burpmon', 356500, 63),
    ], { weight: 1 }, 'Rita', '(female)'),
], [
    { loot: 'xClick', weight: 4 },
    { loot: 'Pokeball', weight: 4 },
    { loot: 'Trojan Plate', weight: 2.75 },
    { loot: 'Nightmare Plate', weight: 2.5 },
    { loot: 'SmallRestore', weight: 2 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Reaper_cloth', weight: 0 },
    { loot: 'Hope_Digimental', weight: 0 },
    { loot: 'Light_Digimental', weight: 0 },
], 5203000, [
    new DungeonBossPokemon('Burpmon', 48000000, 100),
    new DungeonBossPokemon('Burpmon', 48000000, 100),
    new DungeonBossPokemon('Burpmon', 48000000, 100),
    new DungeonBossPokemon('Burpmon', 48000000, 100),
], 356500, 3);
dungeonList['P2 Laboratory'] = new Dungeon('P2 Laboratory', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xClick', weight: 4 },
    { loot: 'xAttack', weight: 3.5 },
    { loot: 'Intel_floppy', weight: 3.5 },
    { loot: 'Burpmon', weight: 3.25 },
    { loot: 'Simple Plate', weight: 2.75 },
    { loot: 'Code Plate', weight: 2.75 },
    { loot: 'Empire Plate', weight: 2.5 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'Dubious_disc', weight: 0 },
], 5403000, [
    new DungeonBossPokemon('Burpmon', 58000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Burpmon', 62000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Burpmon', 62000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Burpmon', 62000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Burpmon', 62000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Burpmon', 58000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Burpmon', 62000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonTrainer('Team Plasma', [
        new GymPokemon('Burpmon', 10000000, 72),
        new GymPokemon('Burpmon', 10000000, 72),
        new GymPokemon('Burpmon', 10000000, 72),
        new GymPokemon('Burpmon', 10000000, 72),
        new GymPokemon('Burpmon', 10000000, 72),
        new GymPokemon('Burpmon', 11000000, 74),
    ], { weight: 1 }, 'Colress', '(colress)'),
], 396500, 18);
// Kalos
// TODO: Balancing of dungeon Pokemon HP & rewards.
dungeonList['Santalune Forest'] = new Dungeon('Santalune Forest', [
    { pokemon: 'Burpmon', options: { weight: 0.88 } },
    { pokemon: 'Burpmon', options: { weight: 0.88 } },
    { pokemon: 'Burpmon', options: { weight: 0.88 } },
    { pokemon: 'Burpmon', options: { weight: 0.88 } },
    { pokemon: 'Burpmon', options: { weight: 0.88 } },
    { pokemon: 'Burpmon', options: { weight: 0.88 } },
    { pokemon: 'Burpmon', options: { weight: 0.88 } },
    { pokemon: 'Burpmon', options: { weight: 0.88 } },
    { pokemon: 'Burpmon', options: { weight: 0.88 } },
    new DungeonTrainer('Youngster', [
        new GymPokemon('Burpmon', 5803000, 3),
        new GymPokemon('Burpmon', 5803000, 3),
    ], { weight: 1 }, 'Joey'),
    new DungeonTrainer('Lass', [new GymPokemon('Burpmon', 5803000, 5)], { weight: 1 }, 'Anna'),
], [
    { loot: 'Pokeball', weight: 4 },
    { loot: 'Lucky_floppy', weight: 3.75 },
    { loot: 'Code Plate', weight: 2.75 },
    { loot: 'Cure Plate', weight: 2.5 },
    { loot: 'SmallRestore', weight: 2 },
    { loot: 'Earth_egg', weight: 1 },
], 5803020, [
    new DungeonTrainer('Lass', [
        new GymPokemon('Burpmon', 24303000, 2),
        new GymPokemon('Burpmon', 27303000, 4),
    ], { weight: 1 }, 'Lise'),
    new DungeonBossPokemon('Burpmon', 51738600, 4),
], 400000, 2);
dungeonList['Parfum Palace'] = new Dungeon('Parfum Palace', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'Chat', weight: 4 },
    { loot: 'Lucky_floppy', weight: 4 },
    { loot: 'xAttack', weight: 4 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'MediumRestore', weight: 1.75 },
], 6303405, [new DungeonBossPokemon('Burpmon', 56375930, 50)], 445000, 6);
dungeonList['Connecting Cave'] = new Dungeon('Connecting Cave', [
    { pokemon: 'Burpmon', options: { weight: 1.33 } },
    { pokemon: 'Burpmon', options: { weight: 1.33 } },
    { pokemon: 'Burpmon', options: { weight: 1.33 } },
], [
    { loot: 'Item_magnet', weight: 4 },
    { loot: 'Pokeball', weight: 3.75 },
    { loot: 'Health', weight: 3 },
    { loot: 'Jungle Plate', weight: 2.75 },
    { loot: 'Guardian Plate', weight: 2.75 },
    { loot: 'XAntibody', weight: 2 },
    { loot: 'Rage Digizoid', weight: 2 },
], 6503370, [
    new DungeonTrainer('Pokémon Breeder', [
        new GymPokemon('Burpmon', 13374965, 12),
        new GymPokemon('Burpmon', 14465837, 12),
        new GymPokemon('Burpmon', 17438602, 12),
        new GymPokemon('Burpmon', 19365784, 12),
    ], { weight: 1 }, 'Mercy', '(female)'),
    new DungeonBossPokemon('Burpmon', 59867590, 20),
], 475000, 7);
dungeonList['Glittering Cave'] = new Dungeon('Glittering Cave', [
    { pokemon: 'Burpmon', options: { weight: .88 } },
    { pokemon: 'Burpmon', options: { weight: .88 } },
    { pokemon: 'Burpmon', options: { weight: .88 } },
    { pokemon: 'Burpmon', options: { weight: .88 } },
    { pokemon: 'Burpmon', options: { weight: .88 } },
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Burpmon', 7037592, 18),
        new GymPokemon('Burpmon', 7037592, 18),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Burpmon', 7037592, 18),
        new GymPokemon('Burpmon', 7037592, 18),
    ], { weight: 1 }, undefined, '(female)'),
], [
    { loot: 'xClick', weight: 4 },
    { loot: 'xAttack', weight: 4 },
    { loot: 'XAntibody', weight: 2 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'Gold Digizoid', weight: 0.5 },
    { loot: 'Kaze Fossil', weight: 0.5 },
    { loot: 'Hagane Fossil', weight: 0.5 },
    { loot: 'Hikari Fossil', weight: 0.5 },
    { loot: 'Hono Fossil', weight: 0.5 },
    { loot: 'Mizu Fossil', weight: 0.5 },
    { loot: 'Ikazuchi Fossil', weight: 0.5 },
    { loot: 'Kori Fossil', weight: 0.5 },
    { loot: 'Tsuchi Fossil', weight: 0.5 },
    { loot: 'Yami Fossil', weight: 0, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Glittering Cave')) },
    { loot: 'Ki Fossil', weight: 0, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Glittering Cave')) },
], 7037500, [
    new DungeonTrainer('Team Flare Grunt Duo', [
        new GymPokemon('Burpmon', 33084827, 20),
        new GymPokemon('Burpmon', 31937395, 20),
    ], { weight: 1 }, undefined),
    new DungeonBossPokemon('Burpmon', 63749659, 20),
    new DungeonBossPokemon('Burpmon', 61285398, 20),
], 505000, 9);
dungeonList['Reflection Cave'] = new Dungeon('Reflection Cave', [
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    new DungeonTrainer('Backpacker', [new GymPokemon('Burpmon', 7353000, 26)], { weight: 1 }, 'Lane', '(male)'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Burpmon', 7353000, 25),
        new GymPokemon('Burpmon', 7353000, 26),
    ], { weight: 1 }, 'Hedvig'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 7353000, 23),
        new GymPokemon('Burpmon', 7353000, 23),
        new GymPokemon('Burpmon', 7353000, 24),
    ], { weight: 1 }, 'Dunstan'),
    new DungeonTrainer('Tourist', [new GymPokemon('Burpmon', 7353000, 26)], { weight: 1 }, 'Monami', '(female)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Burpmon', 7353000, 28)], { weight: 1 }, 'Igor'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Burpmon', 7353000, 24),
        new GymPokemon('Burpmon', 7353000, 24),
    ], { weight: 1 }, 'Franz', '(male)'),
    new DungeonTrainer('Tourist', [new GymPokemon('Burpmon', 7353000, 26)], { weight: 1 }, 'Haruto', '(male)'),
    new DungeonTrainer('Honeymooners', [
        new GymPokemon('Burpmon', 7353000, 26),
        new GymPokemon('Burpmon', 7353000, 26),
    ], { weight: 1 }, 'Yuu & Ami'),
], [
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Lucky_pill', weight: 4 },
    { loot: 'Cure Plate', weight: 2.75 },
    { loot: 'Nature Plate', weight: 2.75 },
    { loot: 'Trojan Plate', weight: 2.75 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Hope_Digimental', weight: 0 },
], 7353000, [
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 33468400, 26),
        new GymPokemon('Burpmon', 37474200, 25),
    ], { weight: 1 }, 'Emil', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 20365400, 24),
        new GymPokemon('Burpmon', 23366400, 24),
        new GymPokemon('Burpmon', 25476400, 25),
    ], { weight: 1 }, 'Monique', '(female)'),
    new DungeonBossPokemon('Burpmon', 69694200, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion) }),
], 555000, 11);
//Tower of Mastery?
dungeonList['Kalos Power Plant'] = new Dungeon('Kalos Power Plant', [
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Burpmon', 7903570, 32),
        new GymPokemon('Burpmon', 7903570, 32),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Burpmon', 7903570, 32),
        new GymPokemon('Burpmon', 7903570, 32),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Burpmon', 7903570, 34)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Burpmon', 7903570, 32),
        new GymPokemon('Burpmon', 7903570, 32),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Burpmon', 7903570, 33),
        new GymPokemon('Burpmon', 7903570, 31),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Burpmon', 7903570, 31),
        new GymPokemon('Burpmon', 7903570, 31),
        new GymPokemon('Burpmon', 7903570, 31),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Burpmon', 7903570, 34)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Burpmon', 7903570, 31),
        new GymPokemon('Burpmon', 7903570, 33),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Burpmon', 7903570, 36)], { weight: 8 }, undefined, '(male)'),
], [
    { loot: 'Item_magnet', weight: 4 },
    { loot: 'xAttack', weight: 4 },
    { loot: 'Empire Plate', weight: 2.75 },
    { loot: 'Release Plate', weight: 2.5 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Knowledge_Digimental', weight: 0 },
], 7903570, [
    new DungeonTrainer('Team Flare Aliana', [new GymPokemon('Burpmon', 75384400, 38)], { weight: 1 }),
    new DungeonBossPokemon('Burpmon', 83945700, 100, {
        requirement: new MultiRequirement([
            new ClearDungeonRequirement(5, GameConstants.getDungeonIndex('Kalos Power Plant')),
            new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion),
        ])
    }),
], 575000, 13);
dungeonList['Sea Spirit\'s Den'] = new Dungeon('Sea Spirit\'s Den', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'xClick', weight: 4 },
    { loot: 'Step', weight: 3.75 },
    { loot: 'Roar Plate', weight: 2.75 },
    { loot: 'Guardian Plate', weight: 2.75 },
    { loot: 'Guardian Plate', weight: 2.75 },
    { loot: 'Empire Plate', weight: 2.75 },
    { loot: 'Trojan Plate', weight: 2.75 },
    { loot: 'XAntibody', weight: 2 },
    { loot: 'Rage Digizoid', weight: 2 },
    { loot: 'Fire_egg', weight: 1 },
    { loot: 'Electric_egg', weight: 1 },
], 7543000, [new DungeonBossPokemon('Burpmon', 92375000, 100)], 600000, 23);
dungeonList['Pokéball Factory'] = new Dungeon('Pokéball Factory', [
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Burpmon', 8173950, 37)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Burpmon', 8173950, 36),
        new GymPokemon('Burpmon', 8173950, 36),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Burpmon', 8173950, 36),
        new GymPokemon('Burpmon', 8173950, 36),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Burpmon', 8173950, 37)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [
        new GymPokemon('Burpmon', 8173950, 37),
        new GymPokemon('Burpmon', 8173950, 38),
    ], { weight: 4 }, undefined, '(female)'),
], [
    { loot: 'Pokeball', weight: 4 },
    { loot: 'Greatball', weight: 3.5 },
    { loot: 'Ultraball', weight: 2.5 },
    { loot: 'Duskball', weight: 2 },
    { loot: 'Quickball', weight: 2 },
    { loot: 'Fastball', weight: 2 },
    { loot: 'Timerball', weight: 2 },
    { loot: 'Luxuryball', weight: 2 },
], 8173950, [
    new DungeonTrainer('Team Flare Celosia', [new GymPokemon('Burpmon', 79385030, 41)], { weight: 1 }),
    new DungeonTrainer('Team Flare Bryony', [new GymPokemon('Burpmon', 79284730, 41)], { weight: 1 }),
], 615000, 14);
dungeonList['Lost Hotel'] = new Dungeon('Lost Hotel', [
    { pokemon: 'Burpmon', options: { weight: 2.6 } },
    { pokemon: 'Burpmon', options: { weight: 2.6 } },
    { pokemon: 'Burpmon', options: { weight: 2.6 } },
    { pokemon: 'Burpmon', options: { weight: 2.6 } },
    { pokemon: 'Burpmon', options: { weight: 2.6 } },
    new DungeonTrainer('Punk Guy', [
        new GymPokemon('Burpmon', 8375300, 39),
        new GymPokemon('Burpmon', 8375300, 39),
        new GymPokemon('Burpmon', 8375300, 39),
    ], { weight: 1 }, 'Sid'),
    new DungeonTrainer('Punk Guy', [
        new GymPokemon('Burpmon', 8375300, 40),
        new GymPokemon('Burpmon', 8375300, 40),
    ], { weight: 1 }, 'Jacques'),
    new DungeonTrainer('Punk Guy', [new GymPokemon('Burpmon', 8375300, 42)], { weight: 1 }, 'Slater'),
    new DungeonTrainer('Punk Girl', [
        new GymPokemon('Burpmon', 8375300, 40),
        new GymPokemon('Burpmon', 8375300, 40),
    ], { weight: 1 }, 'Jeanne'),
    new DungeonTrainer('Punk Girl', [
        new GymPokemon('Burpmon', 8375300, 40),
        new GymPokemon('Burpmon', 8375300, 40),
    ], { weight: 1 }, 'Cecile'),
], [
    { loot: 'xClick', weight: 4 },
    { loot: 'Lucky_floppy', weight: 4 },
    { loot: 'Burpmon', weight: 3.5 },
    { loot: 'Release Plate', weight: 2.75 },
    { loot: 'Burpmon', weight: 2.5 },
    { loot: 'Burpmon', weight: 0 },
    { loot: 'Burpmon', weight: 0 },
    { loot: 'Burpmon', weight: 0 },
    { loot: 'Burpmon', weight: 0 },
    { loot: 'Burpmon', weight: 0 },
    { loot: 'Protector', weight: 0 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Lost Hotel')) },
], 8375300, [
    new DungeonTrainer('Punk Couple', [
        new GymPokemon('Burpmon', 42664500, 42),
        new GymPokemon('Burpmon', 42765500, 42),
    ], { weight: 2 }, 'Zoya & Asa'),
    new DungeonBossPokemon('Burpmon', 82376500, 38),
], 635000, 15);
dungeonList['Frost Cavern'] = new Dungeon('Frost Cavern', [
    { pokemon: 'Burpmon', options: { weight: 4.61 } },
    { pokemon: 'Burpmon', options: { weight: 4.61 } },
    { pokemon: 'Burpmon', options: { weight: 4.61 } },
    { pokemon: 'Burpmon', options: { weight: 4.61 } },
    { pokemon: 'Burpmon', options: { weight: 4.61 } },
    { pokemon: 'Burpmon', options: { weight: 4.61 } },
    { pokemon: 'Burpmon', options: { weight: 4.61 } },
    { pokemon: 'Burpmon', options: { weight: 4.61 } },
    { pokemon: 'Burpmon', options: { weight: 4.61 } },
    { pokemon: 'Burpmon', options: { weight: 4.61 } },
    { pokemon: 'Burpmon', options: { weight: 4.61 } },
    { pokemon: 'Burpmon', options: { weight: 4.61 } },
    { pokemon: 'Burpmon', options: { weight: 4.61 } },
    new DungeonTrainer('Hiker', [new GymPokemon('Burpmon', 8537490, 44)], { weight: 1 }, 'Ross'),
    new DungeonTrainer('Sky Trainer', [
        new GymPokemon('Burpmon', 8537490, 41),
        new GymPokemon('Burpmon', 8537490, 44),
    ], { weight: 1 }, 'Celso', '(male)'),
    new DungeonTrainer('Sky Trainer', [new GymPokemon('Burpmon', 8537490, 45)], { weight: 1 }, 'Era', '(female)'),
    new DungeonTrainer('Artist', [new GymPokemon('Burpmon', 8537490, 44)], { weight: 1 }, 'Salvador', '(male)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Burpmon', 8537490, 46)], { weight: 1 }, 'Cordelia', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 8537490, 42),
        new GymPokemon('Burpmon', 8537490, 42),
        new GymPokemon('Burpmon', 8537490, 43),
    ], { weight: 1 }, 'Neil', '(male)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 8537490, 40),
        new GymPokemon('Burpmon', 8537490, 41),
        new GymPokemon('Burpmon', 8537490, 42),
    ], { weight: 1 }, 'Alain'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 8537490, 42),
        new GymPokemon('Burpmon', 8537490, 42),
    ], { weight: 1 }, 'Delmon'),
    new DungeonTrainer('Brains & Brawn', [
        new GymPokemon('Burpmon', 8537490, 44),
        new GymPokemon('Burpmon', 8537490, 46),
    ], { weight: 1 }, 'Eoin & Wolf'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Burpmon', 8537490, 43),
        new GymPokemon('Burpmon', 8537490, 44),
    ], { weight: 1 }, 'Alonzo'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Burpmon', 8537490, 43),
        new GymPokemon('Burpmon', 8537490, 44),
    ], { weight: 1 }, 'Kinsey'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Burpmon', 8537490, 46)], { weight: 1 }, 'Kenji'),
    new DungeonTrainer('Hiker', [new GymPokemon('Burpmon', 8537490, 44)], { weight: 1 }, 'Brent'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Burpmon', 8537490, 46)], { weight: 1 }, 'Gabrielle'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Burpmon', 8537490, 42),
        new GymPokemon('Burpmon', 8537490, 42),
    ], { weight: 1 }, undefined, '(female)'),
], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'xClick', weight: 4 },
    { loot: 'Chat', weight: 4 },
    { loot: 'Guardian Plate', weight: 2.75 },
    { loot: 'Jungle Plate', weight: 2.5 },
    { loot: 'Code Plate', weight: 2.25 },
    { loot: 'Simple Plate', weight: 2.25 },
    { loot: 'Duskball', weight: 2 },
    { loot: 'MediumRestore', weight: 1.75 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Digicores', weight: 0 },
], 8537490, [
    new DungeonTrainer('Team Flare Mable', [new GymPokemon('Burpmon', 87365830, 48)], { weight: 1 }),
    new DungeonBossPokemon('Burpmon', 85376500, 50),
], 665500, 15);
dungeonList['Team Flare Secret HQ'] = new Dungeon('Team Flare Secret HQ', [
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Burpmon', 8739480, 50)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Burpmon', 8739480, 48)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Burpmon', 8739480, 50)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Burpmon', 8739480, 48)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Burpmon', 8739480, 50)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Burpmon', 8739480, 48)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [
        new GymPokemon('Burpmon', 8739480, 47),
        new GymPokemon('Burpmon', 8739480, 48),
    ], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [
        new GymPokemon('Burpmon', 8739480, 47),
        new GymPokemon('Burpmon', 8739480, 48),
    ], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Burpmon', 8739480, 50)], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Burpmon', 8739480, 50)], { weight: 2 }, undefined, '(male)'),
], [
    { loot: 'Item_magnet', weight: 4 },
    { loot: 'xAttack', weight: 4 },
    { loot: 'Buster Plate', weight: 2.75 },
    { loot: 'Release Plate', weight: 2.75 },
    { loot: 'Guardian Plate', weight: 2.75 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Team Flare Secret HQ')) },
], 8739480, [
    new DungeonTrainer('Team Flare Lysandre', [
        new GymPokemon('Burpmon', 22464940, 49),
        new GymPokemon('Burpmon', 22564950, 49),
        new GymPokemon('Burpmon', 23375580, 51),
        new GymPokemon('Burpmon', 27385730, 53),
    ], { weight: 2 }),
    new DungeonBossPokemon('Burpmon', 93659460, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Flare Secret HQ')) }),
    new DungeonBossPokemon('Burpmon', 93659450, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Flare Secret HQ')) }),
], 675000, 16);
dungeonList['Terminus Cave'] = new Dungeon('Terminus Cave', [
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    new DungeonTrainer('Worker', [
        new GymPokemon('Burpmon', 8924330, 46),
        new GymPokemon('Burpmon', 8924330, 47),
        new GymPokemon('Burpmon', 8924330, 48),
    ], { weight: 1 }, 'Narek'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 8924330, 48),
        new GymPokemon('Burpmon', 8924330, 48),
    ], { weight: 1 }, 'Bergin'),
    new DungeonTrainer('Hiker', [new GymPokemon('Burpmon', 8924330, 50)], { weight: 1 }, 'Aaron'),
    new DungeonTrainer('Worker', [new GymPokemon('Burpmon', 8924330, 50)], { weight: 1 }, 'Dimitri'),
    new DungeonTrainer('Worker', [new GymPokemon('Burpmon', 8924330, 50)], { weight: 1 }, 'Yusif'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Burpmon', 8924330, 49),
        new GymPokemon('Burpmon', 8924330, 50),
    ], { weight: 1 }, 'Andrea'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Burpmon', 8924330, 49),
        new GymPokemon('Burpmon', 8924330, 50),
    ], { weight: 1 }, 'Gunnar'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Burpmon', 8924330, 48),
        new GymPokemon('Burpmon', 8924330, 51),
    ], { weight: 1 }, 'Hailey'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Burpmon', 8924330, 52)], { weight: 1 }, 'Ricardo'),
], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'Pokeball', weight: 3.75 },
    { loot: 'Simple Plate', weight: 2.75 },
    { loot: 'Nature Plate', weight: 2.75 },
    { loot: 'Nightmare Plate', weight: 2.75 },
    { loot: 'Duskball', weight: 2 },
    { loot: 'Vigor Digizoid', weight: 2 },
    { loot: 'Evil Mark', weight: 1.75 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Dragon_scale', weight: 0 },
    { loot: 'Hope_Digimental', weight: 0 },
    { loot: 'Fate_Digimental', weight: 0 },
    { loot: 'Reaper_cloth', weight: 0 },
], 8924330, [
    new DungeonTrainer('Pokémon Rangers', [
        new GymPokemon('Burpmon', 46659450, 51),
        new GymPokemon('Burpmon', 46654990, 51),
    ], { weight: 3 }, 'Fern & Lee'),
    new DungeonBossPokemon('Burpmon', 92485360, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion) }),
], 700000, 18);
dungeonList['Pokémon Village'] = new Dungeon('Pokémon Village', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [
    { loot: 'Intel_floppy', weight: 4 },
    { loot: 'Step', weight: 3.5 },
    { loot: 'Security', weight: 3.5 },
    { loot: 'Burpmon', weight: 3.25 },
    { loot: 'Burpmon', weight: 3.25 },
    { loot: 'Calendar', weight: 3 },
    { loot: 'Backup', weight: 3 },
    { loot: 'Buster Plate', weight: 2.75 },
    { loot: 'LargeRestore', weight: 1.5 },
], 9003000, [
    new DungeonBossPokemon('Burpmon', 94836530, 50),
    new DungeonBossPokemon('Burpmon', 95743340, 50),
], 725000, 20);
dungeonList['Victory Road Kalos'] = new Dungeon('Victory Road Kalos', [
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    { pokemon: 'Burpmon', options: { weight: 3.27 } },
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 3500000, 56),
        new GymPokemon('Burpmon', 3500000, 56),
        new GymPokemon('Burpmon', 3500000, 57),
    ], { weight: 1 }, 'Robbie', '(male)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Burpmon', 3500000, 60)], { weight: 1 }, 'Alanza', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 3500000, 56),
        new GymPokemon('Burpmon', 3500000, 56),
        new GymPokemon('Burpmon', 3500000, 57),
    ], { weight: 1 }, 'Bence', '(male)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Burpmon', 3500000, 60)], { weight: 1 }, 'Markus'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Burpmon', 3500000, 57),
        new GymPokemon('Burpmon', 3500000, 58),
    ], { weight: 1 }, 'Veronique'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Burpmon', 3500000, 58)], { weight: 1 }, 'Farid', '(male)'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Burpmon', 3500000, 60)], { weight: 1 }, 'Sigrid'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Burpmon', 3500000, 57),
        new GymPokemon('Burpmon', 3500000, 58),
    ], { weight: 1 }, 'Ander'),
    new DungeonTrainer('Psychic', [new GymPokemon('Burpmon', 3500000, 58)], { weight: 1 }, 'William', '(male)'),
    new DungeonTrainer('Brains & Brawn', [
        new GymPokemon('Burpmon', 3500000, 58),
        new GymPokemon('Burpmon', 3500000, 60),
    ], { weight: 1 }, 'Arman & Hugo'),
    new DungeonTrainer('Fairy Tale Girl', [
        new GymPokemon('Burpmon', 3500000, 56),
        new GymPokemon('Burpmon', 3500000, 56),
    ], { weight: 1 }, 'Corinne'),
    new DungeonTrainer('Hex Maniac', [new GymPokemon('Burpmon', 3500000, 58)], { weight: 1 }, 'Raziah', '(kalos)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Burpmon', 3500000, 57),
        new GymPokemon('Burpmon', 3500000, 57),
    ], { weight: 1 }, 'Petra', '(female)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Burpmon', 3500000, 61)], { weight: 1 }, 'Inga', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Burpmon', 3500000, 59)], { weight: 1 }, 'Ralf', '(male)'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Burpmon', 3500000, 57),
        new GymPokemon('Burpmon', 3500000, 59),
    ], { weight: 1 }, 'Gerard'),
    new DungeonTrainer('Artist', [new GymPokemon('Burpmon', 3500000, 58)], { weight: 1 }, 'Vincent', '(male)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 3500000, 56),
        new GymPokemon('Burpmon', 3500000, 56),
    ], { weight: 1 }, 'Corwin'),
], [
    { loot: 'xAttack', weight: 4 },
    { loot: 'xClick', weight: 4 },
    { loot: 'Ultraball', weight: 2 },
    { loot: 'Rush Digizoid', weight: 2 },
    { loot: 'Guilmon Bread', weight: 2 },
    { loot: 'Duskball', weight: 2 },
    { loot: 'XAntibody', weight: 2 },
    { loot: 'Rage Digizoid', weight: 2 },
    { loot: 'Evil Mark', weight: 1.75 },
    { loot: 'LargeRestore', weight: 1.5 },
    { loot: 'Broken Digivice', weight: 0 },
    { loot: 'Protein', weight: 0, requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Victory Road Kalos')) },
    { loot: 'Digicores', weight: 0 },
], 9003000, [
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 48593850, 57),
        new GymPokemon('Burpmon', 49355840, 58),
    ], { weight: 1 }, 'Michele', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 48329640, 57),
        new GymPokemon('Burpmon', 49355820, 59),
    ], { weight: 1 }, 'Timeo', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 48395740, 57),
        new GymPokemon('Burpmon', 49265840, 59),
    ], { weight: 1 }, 'Catrina', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 32395730, 55),
        new GymPokemon('Burpmon', 33254840, 55),
        new GymPokemon('Burpmon', 35385940, 57),
    ], { weight: 1 }, 'Gilles', '(male)'),
], 750500, 21);
//Unknown Dungeon? Contains Burpmon.
// Alola
// TODO: Balancing of dungeon Pokemon HP & rewards.
dungeonList['Trainers\' School'] = new Dungeon('Trainers\' School', [
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    new DungeonTrainer('Youth Athlete', [new GymPokemon('Burpmon', 11407338, 7)], { weight: 1 }, 'Hiromi', '(female)'),
    new DungeonTrainer('Preschooler', [new GymPokemon('Burpmon', 11407338, 7)], { weight: 1 }, 'Mia', '(female)'),
    new DungeonTrainer('Youngster', [new GymPokemon('Burpmon', 11407338, 7)], { weight: 1 }, 'Joey'),
    new DungeonTrainer('Rising Star', [new GymPokemon('Burpmon', 11407338, 8)], { weight: 1 }, 'Joseph', '(male)'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 11407338, [
    new DungeonTrainer('Teacher', [
        new GymPokemon('Burpmon', 19012230, 10),
        new GymPokemon('Burpmon', 19012230, 10),
        new GymPokemon('Burpmon', 19012230, 10),
    ], { weight: 1 }, 'Emily'),
], 757500, 18);
dungeonList['Hau\'oli Cemetery'] = new Dungeon('Hau\'oli Cemetery', [
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    new DungeonTrainer('Pokémon Breeder', [new GymPokemon('Burpmon', 11587450, 9)], { weight: 1 }, 'Ikue', '(female)'),
    new DungeonTrainer('Office Worker', [new GymPokemon('Burpmon', 11587450, 9)], { weight: 1 }, 'Jeremy', '(male)'),
    new DungeonTrainer('Preschooler', [new GymPokemon('Burpmon', 11587450, 8)], { weight: 1 }, 'Malia', '(female)'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 11587450, [
    new DungeonBossPokemon('Burpmon', 28968625, 9),
    new DungeonBossPokemon('Burpmon', 28968625, 9),
], 800000, 2);
dungeonList['Verdant Cavern'] = new Dungeon('Verdant Cavern', [
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    { pokemon: 'Burpmon', options: { weight: 0.8 } },
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Burpmon', 11595673, 11)], { weight: 1 }, undefined, '(male)'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 11595673, [
    new DungeonBossPokemon('Burpmon', 57978365, 12),
    new DungeonBossPokemon('Burpmon', 57978365, 12),
    new DungeonBossPokemon('Burpmon', 82543791, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
    new DungeonBossPokemon('Burpmon', 82543791, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
], 805000, 2, () => DungeonGainGymBadge(GymList['Ilima\'s Trial'], BadgeEnums.NormaliumZ));
dungeonList['Melemele Meadow'] = new Dungeon('Melemele Meadow', [
    { pokemon: 'Burpmon', options: { weight: 0.66 } },
    { pokemon: 'Burpmon', options: { weight: 0.66 } },
    { pokemon: 'Burpmon', options: { weight: 0.66 } },
    { pokemon: 'Burpmon', options: { weight: 0.66 } },
    { pokemon: 'Burpmon', options: { weight: 0.66 } },
    { pokemon: 'Burpmon', options: { weight: 0.66 } },
    new DungeonTrainer('Actor', [new GymPokemon('Burpmon', 11769270, 12)], { weight: 1 }, 'Meredith'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 11769270, [
    new DungeonBossPokemon('Burpmon', 58846350, 12),
    new DungeonBossPokemon('Burpmon', 58846350, 12),
], 825000, 3);
dungeonList['Seaward Cave'] = new Dungeon('Seaward Cave', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 11845338, [
    new DungeonBossPokemon('Burpmon', 59226690, 12),
    new DungeonBossPokemon('Burpmon', 59226690, 17),
], 830000, 3);
dungeonList['Ten Carat Hill'] = new Dungeon('Ten Carat Hill', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 11897821, [
    new DungeonBossPokemon('Burpmon', 59489105, 14),
    new DungeonBossPokemon('Burpmon', 59489105, 14),
    new DungeonBossPokemon('Burpmon', 59489105, 14),
], 835000, 3);
dungeonList['Burpmon Valley'] = new Dungeon('Burpmon Valley', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 11952804, [
    new DungeonBossPokemon('Burpmon', 59764020, 15),
    new DungeonBossPokemon('Burpmon', 59764020, 15),
    new DungeonBossPokemon('Burpmon', 59764020, 15),
    new DungeonBossPokemon('Burpmon', 59764020, 15),
    new DungeonBossPokemon('Burpmon', 59764020, 15),
    new DungeonBossPokemon('Burpmon', 59764020, 15),
], 850000, 4);
dungeonList['Paniola Ranch'] = new Dungeon('Paniola Ranch', [
    { pokemon: 'Burpmon', options: { weight: 6.66 } },
    { pokemon: 'Burpmon', options: { weight: 6.66 } },
    { pokemon: 'Burpmon', options: { weight: 6.66 } },
    new DungeonTrainer('Madame', [new GymPokemon('Burpmon', 12161328, 15)], { weight: 1 }, 'Elizabeth'),
    new DungeonTrainer('Pokémon Breeder', [new GymPokemon('Burpmon', 12161328, 15)], { weight: 1 }, 'Wesley', '(male)'),
    new DungeonTrainer('Pokémon Breeder', [new GymPokemon('Burpmon', 12161328, 15)], { weight: 1 }, 'Glenn', '(male)'),
    new DungeonTrainer('Gentleman', [new GymPokemon('Burpmon', 12161328, 15)], { weight: 1 }, 'Gerald'),
    new DungeonTrainer('Rising Star', [
        new GymPokemon('Burpmon', 12161328, 15),
        new GymPokemon('Burpmon', 12161328, 16),
    ], { weight: 1 }, 'Micah', '(male)'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 12111328, [
    new DungeonBossPokemon('Burpmon', 30278320, 15),
    new DungeonBossPokemon('Burpmon', 30278320, 15),
], 855000, 4);
dungeonList['Brooklet Hill'] = new Dungeon('Brooklet Hill', [
    { pokemon: 'Burpmon', options: { weight: 1.43 } },
    { pokemon: 'Burpmon', options: { weight: 1.43 } },
    { pokemon: 'Burpmon', options: { weight: 1.43 } },
    { pokemon: 'Burpmon', options: { weight: 1.43 } },
    { pokemon: 'Burpmon', options: { weight: 1.43 } },
    { pokemon: 'Burpmon', options: { weight: 1.43 } },
    { pokemon: 'Burpmon', options: { weight: 1.43 } },
    { pokemon: 'Burpmon', options: { weight: 1.43 } },
    { pokemon: 'Burpmon', options: { weight: 1.43 } },
    { pokemon: 'Burpmon', options: { weight: 1.43 } },
    { pokemon: 'Burpmon', options: { weight: 1.43 } },
    { pokemon: 'Burpmon', options: { weight: 1.43 } },
    { pokemon: 'Burpmon', options: { weight: 1.43 } },
    { pokemon: 'Burpmon', options: { weight: 1.43 } },
    new DungeonTrainer('Fisherman', [new GymPokemon('Burpmon', 12138060, 16)], { weight: 1 }, 'Hal'),
    new DungeonTrainer('Fisherman', [
        new GymPokemon('Burpmon', 12138060, 16),
        new GymPokemon('Burpmon', 12138060, 16),
    ], { weight: 1 }, 'Ernest'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Burpmon', 12138060, 16)], { weight: 1 }, 'Mikiko', '(female)'),
    new DungeonTrainer('Fisherman', [new GymPokemon('Burpmon', 12138060, 16)], { weight: 1 }, 'Herbert'),
    new DungeonTrainer('Fisherman', [
        new GymPokemon('Burpmon', 12138060, 16),
        new GymPokemon('Burpmon', 12138060, 16),
        new GymPokemon('Burpmon', 12138060, 16),
    ], { weight: 1 }, 'Carl'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 12138060, [
    new DungeonBossPokemon('Burpmon', 60690300, 20),
    new DungeonBossPokemon('Burpmon', 60690300, 20),
    new DungeonBossPokemon('Burpmon', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
    new DungeonBossPokemon('Burpmon', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
], 875000, 5, () => DungeonGainGymBadge(GymList['Lana\'s Trial'], BadgeEnums.WateriumZ));
dungeonList['Wela Volcano Park'] = new Dungeon('Wela Volcano Park', [
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    { pokemon: 'Burpmon', options: { weight: 2 } },
    new DungeonTrainer('Sightseer', [new GymPokemon('Burpmon', 12896392, 19)], { weight: 1 }, 'Mariah', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 12896392, 20),
        new GymPokemon('Burpmon', 12896392, 21),
    ], { weight: 1 }, 'Jim', '(male)'),
    new DungeonTrainer('Hiker', [new GymPokemon('Burpmon', 12896392, 19)], { weight: 1 }, 'Calhoun'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 12896392, [
    new DungeonBossPokemon('Burpmon', 64481960, 22),
    new DungeonBossPokemon('Burpmon', 64481960, 22),
    new DungeonBossPokemon('Burpmon', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
    new DungeonBossPokemon('Burpmon', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
], 900000, 7, () => DungeonGainGymBadge(GymList['Kiawe\'s Trial'], BadgeEnums.FiriumZ));
dungeonList['Lush Jungle'] = new Dungeon('Lush Jungle', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 13090332, [
    new DungeonBossPokemon('Burpmon', 65451660, 24),
    new DungeonBossPokemon('Burpmon', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
], 925000, 8, () => DungeonGainGymBadge(GymList['Mallow\'s Trial'], BadgeEnums.GrassiumZ));
dungeonList['Burpmon\'s Tunnel'] = new Dungeon('Burpmon\'s Tunnel', [
    { pokemon: 'Burpmon', options: { weight: 10 } },
    { pokemon: 'Burpmon', options: { weight: 10 } },
    new DungeonTrainer('Worker', [new GymPokemon('Burpmon', 13215839, 22)], { weight: 1 }, 'Frank'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Burpmon', 13215839, 22),
        new GymPokemon('Burpmon', 13215839, 22),
    ], { weight: 1 }, 'Jeff'),
    new DungeonTrainer('Worker', [new GymPokemon('Burpmon', 13215839, 22)], { weight: 1 }, 'Vaclav'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Burpmon', 13215839, 23)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Burpmon', 13215839, 23)], { weight: 1 }, undefined, '(male)'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 13215839, [new DungeonBossPokemon('Burpmon', 66079195, 23)], 930000, 8);
dungeonList['Memorial Hill'] = new Dungeon('Memorial Hill', [
    { pokemon: 'Burpmon', options: { weight: 10 } },
    { pokemon: 'Burpmon', options: { weight: 10 } },
    { pokemon: 'Burpmon', options: { weight: 10 } },
    new DungeonTrainer('Preschooler', [
        new GymPokemon('Burpmon', 13286024, 23),
        new GymPokemon('Burpmon', 13286024, 23),
    ], { weight: 1 }, 'Liam', '(male)'),
    new DungeonTrainer('Gentleman', [new GymPokemon('Burpmon', 13286024, 24)], { weight: 1 }, 'Smith'),
    new DungeonTrainer('Madame', [
        new GymPokemon('Burpmon', 13286024, 24),
        new GymPokemon('Burpmon', 13286024, 24),
    ], { weight: 1 }, 'Sayuri'),
    new DungeonTrainer('Punk Girl', [new GymPokemon('Burpmon', 13286024, 24)], { weight: 1 }, 'Melissa'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 13286024, [
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Burpmon', 66430120, 24)], { weight: 1 }, undefined, '(male)'),
], 950000, 9);
dungeonList['Malie Garden'] = new Dungeon('Malie Garden', [
    { pokemon: 'Burpmon', options: { weight: 1.14 } },
    { pokemon: 'Burpmon', options: { weight: 1.14 } },
    { pokemon: 'Burpmon', options: { weight: 1.14 } },
    { pokemon: 'Burpmon', options: { weight: 1.14 } },
    { pokemon: 'Burpmon', options: { weight: 1.14 } },
    { pokemon: 'Burpmon', options: { weight: 1.14 } },
    { pokemon: 'Burpmon', options: { weight: 1.14 } },
    { pokemon: 'Burpmon', options: { weight: 1.14 } },
    { pokemon: 'Burpmon', options: { weight: 1.14 } },
    { pokemon: 'Burpmon', options: { weight: 1.14 } },
    { pokemon: 'Burpmon', options: { weight: 1.14 } },
    { pokemon: 'Burpmon', options: { weight: 1.14 } },
    { pokemon: 'Burpmon', options: { weight: 1.14 } },
    { pokemon: 'Burpmon', options: { weight: 1.14 } },
    new DungeonTrainer('Sightseer', [new GymPokemon('Burpmon', 13483476, 28)], { weight: 1 }, 'Mitch', '(male)'),
    new DungeonTrainer('Preschooler', [new GymPokemon('Burpmon', 13483476, 27)], { weight: 1 }, 'Nancy', '(female)'),
    new DungeonTrainer('Sightseer', [new GymPokemon('Burpmon', 13483476, 28)], { weight: 1 }, 'Akali', '(female)'),
    new DungeonTrainer('Tourist Couple', [
        new GymPokemon('Burpmon', 13483476, 28),
        new GymPokemon('Burpmon', 13483476, 28),
    ], { weight: 1 }, 'Landon and Yukiro'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 13483476, [
    new DungeonTrainer('Team Skull Boss', [
        new GymPokemon('Burpmon', 33708690, 34),
        new GymPokemon('Burpmon', 33708690, 34),
    ], { weight: 1 }, 'Guzma', '(guzma)'),
], 975000, 21);
dungeonList['Hokulani Observatory'] = new Dungeon('Hokulani Observatory', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 13883676, [
    new DungeonBossPokemon('Burpmon', 69418380, 29),
    new DungeonBossPokemon('Burpmon', 69418380, 33),
    new DungeonBossPokemon('Burpmon', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
    new DungeonBossPokemon('Burpmon', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
], 1000000, 22, () => DungeonGainGymBadge(GymList['Sophocles\' Trial'], BadgeEnums.ElectriumZ));
dungeonList['Thrifty Megamart'] = new Dungeon('Thrifty Megamart', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 14705422, [
    new DungeonBossPokemon('Burpmon', 73527110, 35),
    new DungeonBossPokemon('Burpmon', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
], 1025000, 14, () => DungeonGainGymBadge(GymList['Acerola\'s Trial'], BadgeEnums.GhostiumZ));
dungeonList['Ula\'ula Meadow'] = new Dungeon('Ula\'ula Meadow', [
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    new DungeonTrainer('Dancer', [new GymPokemon('Burpmon', 15127052, 36)], { weight: 1 }, 'Mireille', '(female)'),
    new DungeonTrainer('Office Worker', [
        new GymPokemon('Burpmon', 15127052, 36),
        new GymPokemon('Burpmon', 15127052, 36),
    ], { weight: 1 }, 'Michelle', '(female)'),
    new DungeonTrainer('Lass', [
        new GymPokemon('Burpmon', 15127052, 35),
        new GymPokemon('Burpmon', 15127052, 35),
    ], { weight: 1 }, 'Rylee'),
    new DungeonTrainer('Golfer', [
        new GymPokemon('Burpmon', 15127052, 39),
        new GymPokemon('Burpmon', 15127052, 39),
    ], { weight: 1 }, 'Dean', '(male)'),
    new DungeonTrainer('Actor', [new GymPokemon('Burpmon', 15127052, 36)], { weight: 1 }, 'Meredith'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 15127052, [
    new DungeonBossPokemon('Burpmon', 75635260, 36),
    new DungeonBossPokemon('Burpmon', 75635260, 36),
], 1050000, 16);
dungeonList['Po Town'] = new Dungeon('Po Town', [
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Burpmon', 15340576, 36)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Burpmon', 15340576, 36)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Burpmon', 15340576, 37)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Burpmon', 15340576, 37),
        new GymPokemon('Burpmon', 15340576, 37),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Burpmon', 15340576, 37),
        new GymPokemon('Burpmon', 15340576, 37),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Burpmon', 15340576, 37),
        new GymPokemon('Burpmon', 15340576, 37),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Burpmon', 15340576, 40)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Office Worker', [
        new GymPokemon('Burpmon', 15340576, 40),
        new GymPokemon('Burpmon', 15340576, 40),
    ], { weight: 1 }, 'Royce', '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Burpmon', 15340576, 38)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Burpmon', 15340576, 38),
        new GymPokemon('Burpmon', 15340576, 38),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Burpmon', 15340576, 38),
        new GymPokemon('Burpmon', 15340576, 38),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Burpmon', 15340576, 38)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Burpmon', 15340576, 38)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Burpmon', 15340576, 38)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Burpmon', 15340576, 38),
        new GymPokemon('Burpmon', 15340576, 38),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Burpmon', 15340576, 38),
        new GymPokemon('Burpmon', 15340576, 38),
        new GymPokemon('Burpmon', 15340576, 38),
    ], { weight: 1 }, undefined, '(female)'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 15340576, [
    new DungeonTrainer('Team Skull Boss', [
        new GymPokemon('Burpmon', 25567627, 41),
        new GymPokemon('Burpmon', 25567627, 41),
        new GymPokemon('Burpmon', 25567627, 41),
    ], { weight: 1 }, 'Guzma', '(guzma)'),
], 1075000, 17);
dungeonList['Aether Foundation'] = new Dungeon('Aether Foundation', [
    new DungeonTrainer('Aether Foundation Employee', [
        new GymPokemon('Burpmon', 15619682, 40),
        new GymPokemon('Burpmon', 15619682, 40),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Aether Foundation Employee', [
        new GymPokemon('Burpmon', 15619682, 40),
        new GymPokemon('Burpmon', 15619682, 40),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Aether Foundation Employee', [
        new GymPokemon('Burpmon', 15619682, 40),
        new GymPokemon('Burpmon', 15619682, 40),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Aether Foundation Employee', [
        new GymPokemon('Burpmon', 15619682, 40),
        new GymPokemon('Burpmon', 15619682, 40),
        new GymPokemon('Burpmon', 15619682, 40),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Aether Foundation Employee', [new GymPokemon('Burpmon', 15619682, 40)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Aether Foundation Employee', [new GymPokemon('Burpmon', 15619682, 41)], { weight: 1 }, undefined, '(masked)'),
    new DungeonTrainer('Aether Foundation Employees', [
        new GymPokemon('Burpmon', 15619682, 41),
        new GymPokemon('Burpmon', 15619682, 41),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Aether Foundation Employees', [
        new GymPokemon('Burpmon', 15619682, 42),
        new GymPokemon('Burpmon', 15619682, 42),
        new GymPokemon('Burpmon', 15619682, 42),
        new GymPokemon('Burpmon', 15619682, 42),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Aether Branch Chief', [
        new GymPokemon('Burpmon', 15619682, 44),
        new GymPokemon('Burpmon', 15619682, 44),
        new GymPokemon('Burpmon', 15619682, 44),
    ], { weight: 1 }, 'Faba', '(faba)'),
    new DungeonTrainer('Aether Foundation Employee', [new GymPokemon('Burpmon', 15619682, 41)], { weight: 1 }, undefined, '(masked)'),
    new DungeonTrainer('Aether Foundation Employee', [new GymPokemon('Burpmon', 15619682, 41)], { weight: 1 }, undefined, '(masked)'),
    new DungeonTrainer('Aether Foundation Employee', [new GymPokemon('Burpmon', 15619682, 41)], { weight: 1 }, undefined, '(masked)'),
    new DungeonTrainer('Aether Foundation Employees', [
        new GymPokemon('Burpmon', 15619682, 41),
        new GymPokemon('Burpmon', 15619682, 41),
    ], { weight: 1 }, undefined, '(both)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Burpmon', 15619682, 42)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Burpmon', 15619682, 42)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Boss', [
        new GymPokemon('Burpmon', 15619682, 45),
        new GymPokemon('Burpmon', 15619682, 45),
        new GymPokemon('Burpmon', 15619682, 45),
        new GymPokemon('Burpmon', 15619682, 45),
    ], { weight: 1 }, 'Guzma', '(guzma)'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 15619682, [
    new DungeonTrainer('Aether President', [
        new GymPokemon('Burpmon', 15619682, 47),
        new GymPokemon('Burpmon', 15619682, 47),
        new GymPokemon('Burpmon', 15619682, 47),
        new GymPokemon('Burpmon', 15619682, 47),
        new GymPokemon('Burpmon', 15619682, 47),
    ], { weight: 1 }, 'Lusamine', '(lusamine)'),
], 1080000, 17);
dungeonList['Burpmon Island Hill'] = new Dungeon('Burpmon Island Hill', ['Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 15773066, [
    new DungeonBossPokemon('Burpmon', 78865330, 45),
    new DungeonBossPokemon('Burpmon', 78865330, 45),
], 1100000, 24);
dungeonList['Vast Poni Canyon'] = new Dungeon('Vast Poni Canyon', [
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 15992044, 47),
        new GymPokemon('Burpmon', 15992044, 47),
    ], { weight: 1 }, 'Harry', '(male)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Burpmon', 15992044, 45)], { weight: 1 }, 'Perdy', '(female)'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Burpmon', 15992044, 47),
        new GymPokemon('Burpmon', 15992044, 47),
    ], { weight: 1 }, 'Kent and Aimee'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 15992044, 46),
        new GymPokemon('Burpmon', 15992044, 46),
    ], { weight: 1 }, 'Zachary'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 15992044, 48),
        new GymPokemon('Burpmon', 15992044, 48),
        new GymPokemon('Burpmon', 15992044, 48),
    ], { weight: 1 }, 'Lynn', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 15992044, 47),
        new GymPokemon('Burpmon', 15992044, 47),
    ], { weight: 1 }, 'Junko', '(female)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Burpmon', 15992044, 46)], { weight: 1 }, 'Ikaika', '(male)'),
    new DungeonTrainer('Punk Girl', [new GymPokemon('Burpmon', 15992044, 46)], { weight: 1 }, 'Anna'),
    new DungeonTrainer('Punk Guy', [
        new GymPokemon('Burpmon', 15992044, 46),
        new GymPokemon('Burpmon', 15992044, 46),
    ], { weight: 1 }, 'Adam'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Burpmon', 15992044, 47)], { weight: 1 }, 'Curtis'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Burpmon', 15992044, 46)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 15992044, 47),
        new GymPokemon('Burpmon', 15992044, 48),
    ], { weight: 1 }, 'Hiroshi', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 15992044, 48),
        new GymPokemon('Burpmon', 15992044, 48),
        new GymPokemon('Burpmon', 15992044, 48),
    ], { weight: 1 }, 'Heather', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 15992044, 48),
        new GymPokemon('Burpmon', 15992044, 48),
        new GymPokemon('Burpmon', 15992044, 48),
        new GymPokemon('Burpmon', 15992044, 48),
    ], { weight: 1 }, 'Eric', '(male)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Burpmon', 15992044, 47)], { weight: 1 }, 'Terry'),
    new DungeonTrainer('Surfer', [new GymPokemon('Burpmon', 15992044, 47)], { weight: 1 }, 'Joshah'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 15992044, [
    new DungeonBossPokemon('Burpmon', 79960220, 49),
    new DungeonBossPokemon('Burpmon', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
], 1125000, 25, () => DungeonGainGymBadge(GymList['Vast Poni Canyon Trial'], BadgeEnums.DragoniumZ));
dungeonList['Mina\'s Houseboat'] = new Dungeon('Mina\'s Houseboat', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 16217412, [new DungeonBossPokemon('Burpmon', 81087060, 55)], 1150000, 25, () => DungeonGainGymBadge(GymList['Mina\'s Trial'], BadgeEnums.FairiumZ));
dungeonList['Mount Lanakila'] = new Dungeon('Mount Lanakila', [
    { pokemon: 'Burpmon', options: { weight: 8.67 } },
    { pokemon: 'Burpmon', options: { weight: 8.67 } },
    { pokemon: 'Burpmon', options: { weight: 8.67 } },
    { pokemon: 'Burpmon', options: { weight: 8.67 } },
    { pokemon: 'Burpmon', options: { weight: 8.67 } },
    { pokemon: 'Burpmon', options: { weight: 8.67 } },
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 16212850, 51),
        new GymPokemon('Burpmon', 16212850, 52),
    ], { weight: 1 }, 'Seth', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 16212850, 51),
        new GymPokemon('Burpmon', 16212850, 52),
    ], { weight: 1 }, 'Kailee', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 16212850, 52),
        new GymPokemon('Burpmon', 16212850, 52),
    ], { weight: 1 }, 'Alonsa', '(female)'),
    new DungeonTrainer('Worker', [new GymPokemon('Burpmon', 16212850, 50)], { weight: 1 }, 'Ovid'),
    new DungeonTrainer('Sparring Partners', [
        new GymPokemon('Burpmon', 16212850, 51),
        new GymPokemon('Burpmon', 16212850, 51),
        new GymPokemon('Burpmon', 16212850, 51),
    ], { weight: 1 }, 'Alon and Eimar'),
    new DungeonTrainer('Sparring Partners', [
        new GymPokemon('Burpmon', 16212850, 51),
        new GymPokemon('Burpmon', 16212850, 51),
        new GymPokemon('Burpmon', 16212850, 51),
    ], { weight: 1 }, 'Craig and Jason'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Burpmon', 16212850, 51)], { weight: 1 }, 'Peren', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 16212850, 53),
        new GymPokemon('Burpmon', 16212850, 53),
        new GymPokemon('Burpmon', 16212850, 53),
    ], { weight: 1 }, 'Ella', '(female)'),
    new DungeonTrainer('Collector', [new GymPokemon('Burpmon', 16212850, 51)], { weight: 1 }, 'Minty'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Burpmon', 16212850, 52),
        new GymPokemon('Burpmon', 16212850, 53),
    ], { weight: 1 }, 'Jada', '(female)'),
    new DungeonTrainer('Master & Apprentice', [
        new GymPokemon('Burpmon', 16212850, 52),
        new GymPokemon('Burpmon', 16212850, 53),
        new GymPokemon('Burpmon', 16212850, 53),
        new GymPokemon('Burpmon', 16212850, 53),
        new GymPokemon('Burpmon', 16212850, 53),
    ], { weight: 1 }, 'Breon and Kaimana'),
    new DungeonTrainer('Hiker', [new GymPokemon('Burpmon', 16212850, 51)], { weight: 1 }, 'Anuhea'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 16212850, 65),
        new GymPokemon('Burpmon', 16212850, 65),
        new GymPokemon('Burpmon', 16212850, 65),
        new GymPokemon('Burpmon', 16212850, 65),
        new GymPokemon('Burpmon', 16212850, 65),
    ], { weight: 1 }, 'Aristo', '(male)'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 16312850, [
    new DungeonBossPokemon('Burpmon', 81064250, 50),
    new DungeonBossPokemon('Burpmon', 81064250, 50),
    new DungeonBossPokemon('Burpmon', 81064250, 50),
    new DungeonBossPokemon('Burpmon', 83527125, 65),
], 1175000, 26);
dungeonList['Lake of the Sunne and Moone'] = new Dungeon('Lake of the Sunne and Moone', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 16435490, [
    new DungeonBossPokemon('Burpmon', 82177450, 70),
    new DungeonBossPokemon('Burpmon', 90673816, 100, { requirement: new ObtainedPokemonRequirement(pokemonMap.Burpmon) }),
    new DungeonBossPokemon('Burpmon', 90673816, 100, { requirement: new ObtainedPokemonRequirement(pokemonMap.Burpmon) }),
], 1200000, 27);
dungeonList['Ruins of Conflict'] = new Dungeon('Ruins of Conflict', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 16435490, [
    new DungeonBossPokemon('Burpmon', 82177450, 55),
    new DungeonBossPokemon('Burpmon', 82177450, 55),
    new DungeonBossPokemon('Burpmon', 82543791, 60),
], 1200000, 27);
dungeonList['Ruins of Life'] = new Dungeon('Ruins of Life', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 16435490, [
    new DungeonBossPokemon('Burpmon', 82177450, 55),
    new DungeonBossPokemon('Burpmon', 82177450, 55),
    new DungeonBossPokemon('Burpmon', 82543791, 60),
], 1200000, 27);
dungeonList['Ruins of Abundance'] = new Dungeon('Ruins of Abundance', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 16435490, [
    new DungeonBossPokemon('Burpmon', 82177450, 55),
    new DungeonBossPokemon('Burpmon', 82177450, 55),
    new DungeonBossPokemon('Burpmon', 82543791, 60),
], 1200000, 27);
dungeonList['Ruins of Hope'] = new Dungeon('Ruins of Hope', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 16435490, [
    new DungeonBossPokemon('Burpmon', 82177450, 55),
    new DungeonBossPokemon('Burpmon', 82177450, 55),
    new DungeonBossPokemon('Burpmon', 82543791, 60),
], 1200000, 27);
dungeonList['Poni Meadow'] = new Dungeon('Poni Meadow', [
    { pokemon: 'Burpmon', options: { weight: 0.57 } },
    { pokemon: 'Burpmon', options: { weight: 0.57 } },
    { pokemon: 'Burpmon', options: { weight: 0.57 } },
    { pokemon: 'Burpmon', options: { weight: 0.57 } },
    { pokemon: 'Burpmon', options: { weight: 0.57 } },
    { pokemon: 'Burpmon', options: { weight: 0.57 } },
    { pokemon: 'Burpmon', options: { weight: 0.57 } },
    new DungeonTrainer('Actor', [new GymPokemon('Burpmon', 16659968, 57)], { weight: 1 }, 'Meredith'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 16659968, [
    new DungeonBossPokemon('Burpmon', 83299840, 70),
    new DungeonBossPokemon('Burpmon', 83299840, 70),
], 1225000, 28);
dungeonList['Resolution Cave'] = new Dungeon('Resolution Cave', [
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    { pokemon: 'Burpmon', options: { weight: 4 } },
    new DungeonTrainer('Veteran', [
        new GymPokemon('Burpmon', 17114462, 61),
        new GymPokemon('Burpmon', 17114462, 61),
    ], { weight: 1 }, 'Leticia', '(female)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Burpmon', 17114462, 59)], { weight: 1 }, 'Maria', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Burpmon', 17114462, 59),
        new GymPokemon('Burpmon', 17114462, 59),
    ], { weight: 1 }, 'Travis'),
], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 17114462, [
    new DungeonBossPokemon('Burpmon', 85572310, 59),
    new DungeonBossPokemon('Burpmon', 85572310, 59),
    new DungeonBossPokemon('Burpmon', 90673816, 70),
], 1250000, 30);
//Galar Dungeons
dungeonList['SHackingbering Weald'] = new Dungeon('SHackingbering Weald', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [new DungeonBossPokemon('Burpmon', 8000000, 70)], 96500, 201);
dungeonList['Inner SHackingbering Weald'] = new Dungeon('Inner SHackingbering Weald', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
], 96500, 201);
dungeonList['Galar Mine'] = new Dungeon('Galar Mine', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
], 96500, 201);
dungeonList['Galar Mine No. 2'] = new Dungeon('Galar Mine No. 2', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
], 96500, 201);
dungeonList['Rose Tower'] = new Dungeon('Rose Tower', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
], 96500, 201);
dungeonList['Glimwood Tangle'] = new Dungeon('Glimwood Tangle', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
], 96500, 201);
dungeonList['Watchtower Ruins'] = new Dungeon('Watchtower Ruins', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
], 96500, 201);
dungeonList['Lake of Outrage'] = new Dungeon('Lake of Outrage', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
], 96500, 201);
dungeonList['Dusty Bowl'] = new Dungeon('Dusty Bowl', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
], 96500, 201);
//Isle of Armor
dungeonList['Master Dojo Trial'] = new Dungeon('Master Dojo Trial', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [new DungeonBossPokemon('Burpmon', 8000000, 70)], 96500, 201);
dungeonList['Tower of Darkness'] = new Dungeon('Tower of Darkness', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [new DungeonBossPokemon('Burpmon', 8000000, 70)], 96500, 201);
dungeonList['Tower of Water'] = new Dungeon('Tower of Water', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [new DungeonBossPokemon('Burpmon', 8000000, 70)], 96500, 201);
//Crown Tundra
dungeonList['Rock Peak Ruins'] = new Dungeon('Rock Peak Ruins', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
], 96500, 201);
dungeonList['Iron Ruins'] = new Dungeon('Iron Ruins', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
], 96500, 201);
dungeonList['Iceberg Ruins'] = new Dungeon('Iceberg Ruins', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
], 96500, 201);
dungeonList['Split-Decision Ruins'] = new Dungeon('Split-Decision Ruins', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70),
], 96500, 201);
dungeonList['Dyna Tree Hill'] = new Dungeon('Dyna Tree Hill', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [new DungeonBossPokemon('Burpmon', 8000000, 70)], 96500, 201);
dungeonList['Crown Shrine'] = new Dungeon('Crown Shrine', ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], [{ loot: 'xClick', weight: 4 }, { loot: 'Item_magnet', weight: 4 }], 2203000, [
    new DungeonBossPokemon('Burpmon', 8000000, 70),
    new DungeonBossPokemon('Burpmon', 8000000, 70, {
        requirement: new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Burpmon),
            new ObtainedPokemonRequirement(pokemonMap.Burpmon),
        ])
    }),
], 96500, 201);
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../Battle.ts" />
class DungeonBattle extends Battle {
    /**
     * Award the player with money and exp, and throw a Pokéball if applicable
     */
    static defeatPokemon() {
        const enemyPokemon = this.enemyPokemon();
        // Handle Trainer Pokemon defeat
        if (this.trainer()) {
            this.defeatTrainerPokemon();
            return;
        }
        DungeonRunner.fighting(false);
        if (DungeonRunner.fightingBoss()) {
            DungeonRunner.fightingBoss(false);
            DungeonRunner.defeatedBoss(true);
        }
        enemyPokemon.defeat();
        App.game.breeding.progressEggsBattle(DungeonRunner.dungeon.difficultyRoute, player.region);
        player.lowerItemMultipliers(MultiplierDecreaser.Battle);
        // Clearing Dungeon tile
        DungeonRunner.map.currentTile().type(GameConstants.DungeonTile.empty);
        DungeonRunner.map.currentTile().calculateCssClass();
        // Attempting to catch Pokemon
        const isShiny = enemyPokemon.shiny;
        const pokeBall = App.game.pokeballs.calculatePokeballToUse(enemyPokemon.id, isShiny);
        if (pokeBall !== GameConstants.Pokeball.None) {
            this.prepareCatch(enemyPokemon, pokeBall);
            setTimeout(() => {
                this.attemptCatch(enemyPokemon);
                if (DungeonRunner.defeatedBoss()) {
                    DungeonRunner.dungeonWon();
                }
            }, App.game.pokeballs.calculateCatchTime(pokeBall));
        }
        else if (DungeonRunner.defeatedBoss()) {
            DungeonRunner.dungeonWon();
        }
    }
    /**
     * Handles defeating a trainer Pokemon
     */
    static defeatTrainerPokemon() {
        this.enemyPokemon().defeat(true);
        GameHelper.incrementObservable(this.trainerPokemonIndex);
        App.game.breeding.progressEggsBattle(DungeonRunner.dungeon.difficultyRoute, player.region);
        player.lowerItemMultipliers(MultiplierDecreaser.Battle);
        // No Pokemon left, trainer defeated
        if (this.trainerPokemonIndex() >= this.trainer().team.length) {
            // rewards for defeating trainer
            if (this.trainer().options.reward) {
                // Custom reward amount on defeat
                App.game.wallet.addAmount(this.trainer().options.reward);
            }
            else {
                const dungeonCost = DungeonRunner.dungeon.tokenCost;
                // Reward back 50% or 100% (boss) of the total dungeon DT cost as money (excludes achievement multiplier)
                const money = Math.round(dungeonCost * (DungeonRunner.fightingBoss() ? 1 : 0.5));
                App.game.wallet.gainMoney(money, true);
                // Reward back 4% or 10% (boss) of the total dungeon DT cost (excludes achievement multiplier)
                const tokens = Math.round(dungeonCost * (DungeonRunner.fightingBoss() ? 0.1 : 0.04));
                App.game.wallet.gainDungeonTokens(tokens, true);
            }
            DungeonRunner.fighting(false);
            this.trainer(null);
            this.trainerPokemonIndex(0);
            // Clearing Dungeon tile
            DungeonRunner.map.currentTile().type(GameConstants.DungeonTile.empty);
            DungeonRunner.map.currentTile().calculateCssClass();
            // Update boss
            if (DungeonRunner.fightingBoss()) {
                DungeonRunner.fightingBoss(false);
                DungeonRunner.defeatedBoss(true);
                DungeonRunner.dungeonWon();
            }
            // Generate next trainer Pokemon
        }
        else {
            this.generateTrainerPokemon();
        }
    }
    static generateNewEnemy() {
        this.catching(false);
        this.counter = 0;
        // Finding enemy from enemyList
        const enemy = Rand.fromWeightedArray(DungeonRunner.dungeon.availableMinions(), DungeonRunner.dungeon.weightList);
        // Pokemon
        if (typeof enemy === 'string' || enemy.hasOwnProperty('pokemon')) {
            const pokemon = (typeof enemy === 'string') ? enemy : enemy.pokemon;
            const enemyPokemon = PokemonFactory.generateDungeonPokemon(pokemon, DungeonRunner.chestsOpened, DungeonRunner.dungeon.baseHealth, DungeonRunner.dungeonLevel());
            this.enemyPokemon(enemyPokemon);
            GameHelper.incrementObservable(App.game.statistics.digimonEncountered[enemyPokemon.id]);
            GameHelper.incrementObservable(App.game.statistics.totalDigimonEncountered);
            if (enemyPokemon.shiny) {
                GameHelper.incrementObservable(App.game.statistics.dotDigimonEncountered[enemyPokemon.id]);
                GameHelper.incrementObservable(App.game.statistics.totalDotDigimonEncountered);
                App.game.logbook.newLog(LogBookTypes.SHINY, `[${player.town().dungeon.name}] You encountered a Dot ${this.enemyPokemon().name}.`);
            }
            else if (!App.game.party.alreadyCaughtPokemon(this.enemyPokemon().id)) {
                App.game.logbook.newLog(LogBookTypes.NEW, `[${player.town().dungeon.name}] You encountered a wild ${this.enemyPokemon().name}.`);
            }
            // Trainer
        }
        else {
            const trainer = enemy;
            this.trainer(trainer);
            this.trainerPokemonIndex(0);
            this.generateTrainerPokemon();
        }
        DungeonRunner.fighting(true);
    }
    static generateNewLootEnemy(pokemon) {
        this.catching(false);
        this.counter = 0;
        const enemyPokemon = PokemonFactory.generateDungeonPokemon(pokemon, DungeonRunner.chestsOpened, DungeonRunner.dungeon.baseHealth * 2, DungeonRunner.dungeonLevel());
        this.enemyPokemon(enemyPokemon);
        GameHelper.incrementObservable(App.game.statistics.digimonEncountered[enemyPokemon.id]);
        GameHelper.incrementObservable(App.game.statistics.totalDigimonEncountered);
        if (enemyPokemon.shiny) {
            GameHelper.incrementObservable(App.game.statistics.dotDigimonEncountered[enemyPokemon.id]);
            GameHelper.incrementObservable(App.game.statistics.totalDotDigimonEncountered);
            App.game.logbook.newLog(LogBookTypes.SHINY, `[${player.town().dungeon.name}] You encountered a Dot ${this.enemyPokemon().name}.`);
        }
        else if (!App.game.party.alreadyCaughtPokemon(this.enemyPokemon().id)) {
            App.game.logbook.newLog(LogBookTypes.NEW, `[${player.town().dungeon.name}] You encountered a wild ${this.enemyPokemon().name}.`);
        }
        DungeonRunner.fighting(true);
    }
    /**
     * Handles generating the enemy Trainer Pokemon
     */
    static generateTrainerPokemon() {
        this.counter = 0;
        const pokemon = this.trainer().team[this.trainerPokemonIndex()];
        const baseHealth = DungeonRunner.fightingBoss() ? pokemon.maxHealth : DungeonRunner.dungeon.baseHealth;
        const level = DungeonRunner.fightingBoss() ? pokemon.level : DungeonRunner.dungeonLevel();
        const enemyPokemon = PokemonFactory.generateDungeonTrainerPokemon(pokemon, DungeonRunner.chestsOpened, baseHealth, level);
        this.enemyPokemon(enemyPokemon);
    }
    static generateNewBoss() {
        DungeonRunner.fighting(true);
        this.catching(false);
        this.counter = 0;
        // Finding boss from bossList
        const enemy = Rand.fromWeightedArray(DungeonRunner.dungeon.availableBosses(), DungeonRunner.dungeon.bossWeightList);
        // Pokemon
        if (enemy instanceof DungeonBossPokemon) {
            this.enemyPokemon(PokemonFactory.generateDungeonBoss(enemy, DungeonRunner.chestsOpened));
            GameHelper.incrementObservable(App.game.statistics.digimonEncountered[this.enemyPokemon().id]);
            GameHelper.incrementObservable(App.game.statistics.totalDigimonEncountered);
            if (this.enemyPokemon().shiny) {
                GameHelper.incrementObservable(App.game.statistics.dotDigimonEncountered[this.enemyPokemon().id]);
                GameHelper.incrementObservable(App.game.statistics.totalDotDigimonEncountered);
                App.game.logbook.newLog(LogBookTypes.SHINY, `[${player.town().dungeon.name}] You encountered a Dot ${this.enemyPokemon().name}.`);
            }
            else if (!App.game.party.alreadyCaughtPokemon(this.enemyPokemon().id)) {
                App.game.logbook.newLog(LogBookTypes.NEW, `[${player.town().dungeon.name}] You encountered a wild ${this.enemyPokemon().name}.`);
            }
        }
        else {
            this.trainer(enemy);
            this.trainerPokemonIndex(0);
            this.generateTrainerPokemon();
        }
    }
}
DungeonBattle.trainer = ko.observable(null);
DungeonBattle.trainerPokemonIndex = ko.observable(0);
DungeonBattle.remainingTrainerPokemon = ko.pureComputed(() => {
    if (!DungeonBattle.trainer()) {
        return 0;
    }
    return DungeonBattle.trainer().team.length - DungeonBattle.trainerPokemonIndex();
});
DungeonBattle.defeatedTrainerPokemon = ko.pureComputed(() => {
    if (!DungeonBattle.trainer()) {
        return 0;
    }
    return DungeonBattle.trainerPokemonIndex();
});
class DungeonMap {
    constructor(size, flash = false) {
        this.size = size;
        this.flash = flash;
        this.board = ko.observable(this.generateMap());
        this.playerPosition = ko.observable(new Point(Math.floor(size / 2), size - 1));
        this.playerMoved = ko.observable(false);
        // Move the boss if it spawns on the player.
        if (this.currentTile().type() == GameConstants.DungeonTile.boss) {
            this.currentTile().type(GameConstants.DungeonTile.entrance);
            const newX = Rand.intBetween(0, size - 1);
            const newY = Rand.intBetween(0, size - 2); // Don't allow it to be on the bottom row
            this.board()[newY][newX].type(GameConstants.DungeonTile.boss);
            this.board()[newY][newX].calculateCssClass();
        }
        this.currentTile().type(GameConstants.DungeonTile.entrance);
        this.currentTile().isVisible = true;
        this.currentTile().isVisited = true;
        this.currentTile().hasPlayer = true;
        if (this.flash) {
            this.nearbyTiles(this.playerPosition()).forEach(t => t.isVisible = true);
        }
    }
    moveToCoordinates(x, y) {
        if (this.moveToTile(new Point(x, y))) {
            this.playerMoved(true);
        }
    }
    moveUp() {
        this.moveToCoordinates(this.playerPosition().x, this.playerPosition().y - 1);
    }
    moveRight() {
        this.moveToCoordinates(this.playerPosition().x + 1, this.playerPosition().y);
    }
    moveDown() {
        this.moveToCoordinates(this.playerPosition().x, this.playerPosition().y + 1);
    }
    moveLeft() {
        this.moveToCoordinates(this.playerPosition().x - 1, this.playerPosition().y);
    }
    moveToTile(point) {
        if (this.hasAccesToTile(point)) {
            this.currentTile().hasPlayer = false;
            this.playerPosition(point);
            if (this.flash) {
                this.nearbyTiles(point).forEach(t => t.isVisible = true);
            }
            this.currentTile().hasPlayer = true;
            this.currentTile().isVisible = true;
            this.currentTile().isVisited = true;
            if (this.currentTile().type() == GameConstants.DungeonTile.enemy) {
                DungeonBattle.generateNewEnemy();
            }
            return true;
        }
        return false;
    }
    showChestTiles() {
        for (let i = 0; i < this.board().length; i++) {
            for (let j = 0; j < this.board()[i].length; j++) {
                if (this.board()[i][j].type() == GameConstants.DungeonTile.chest) {
                    this.board()[i][j].isVisible = true;
                }
            }
        }
    }
    showAllTiles() {
        for (let i = 0; i < this.board().length; i++) {
            for (let j = 0; j < this.board()[i].length; j++) {
                this.board()[i][j].isVisible = true;
            }
        }
    }
    currentTile() {
        return this.board()[this.playerPosition().y][this.playerPosition().x];
    }
    nearbyTiles(point) {
        var _a, _b, _c, _d;
        const tiles = [];
        tiles.push((_a = this.board()[point.y - 1]) === null || _a === void 0 ? void 0 : _a[point.x]);
        tiles.push((_b = this.board()[point.y + 1]) === null || _b === void 0 ? void 0 : _b[point.x]);
        tiles.push((_c = this.board()[point.y]) === null || _c === void 0 ? void 0 : _c[point.x - 1]);
        tiles.push((_d = this.board()[point.y]) === null || _d === void 0 ? void 0 : _d[point.x + 1]);
        return tiles.filter(t => t);
    }
    hasAccesToTile(point) {
        // If player fighting/catching they cannot move right now
        if (DungeonRunner.fighting() || DungeonBattle.catching()) {
            return false;
        }
        // If tile out of bounds, it's invalid
        if (point.x < 0 || point.x >= this.size || point.y < 0 || point.y >= this.size) {
            return false;
        }
        //If any of the adjacent Tiles is visited, it's a valid Tile.
        return this.nearbyTiles(point).some(t => t.isVisited);
    }
    generateMap() {
        // Fill mapList with required Tiles
        const mapList = [];
        // Boss
        mapList.push(new DungeonTile(GameConstants.DungeonTile.boss));
        // Chests (leave 1 space for enemy and 1 space for empty tile)
        for (let i = 0; i < this.size && mapList.length < this.size * this.size - 2; i++) {
            mapList.push(new DungeonTile(GameConstants.DungeonTile.chest));
        }
        // Enemy Pokemon (leave 1 space for empty tile)
        for (let i = 0; i < this.size * 2 + 3 && mapList.length < this.size * this.size - 1; i++) {
            mapList.push(new DungeonTile(GameConstants.DungeonTile.enemy));
        }
        // Fill with empty tiles
        for (let i = mapList.length; i < this.size * this.size; i++) {
            mapList.push(new DungeonTile(GameConstants.DungeonTile.empty));
        }
        // Shuffle the tiles randomly
        this.shuffle(mapList);
        // Make sure the player tile is empty
        while (mapList[mapList.length - Math.floor(this.size / 2) - 1].type() != GameConstants.DungeonTile.empty) {
            this.shuffle(mapList);
        }
        // Create a 2d array
        const map = [];
        while (mapList.length) {
            map.push(mapList.splice(0, this.size));
        }
        return map;
    }
    /**
     * Shuffles array in place.
     * @param {Array} a items The array containing the items.
     */
    shuffle(a) {
        let j, x, i;
        for (i = a.length; i; i--) {
            j = Rand.floor(i);
            x = a[i - 1];
            a[i - 1] = a[j];
            a[j] = x;
        }
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
class DungeonRunner {
    static initializeDungeon(dungeon) {
        if (!dungeon.isUnlocked()) {
            return false;
        }
        DungeonRunner.dungeon = dungeon;
        if (!DungeonRunner.hasEnoughTokens()) {
            Notifier.notify({
                message: 'You don\'t have enough scan coins',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        App.game.wallet.loseAmount(new Amount(DungeonRunner.dungeon.tokenCost, GameConstants.Currency.explorecoin));
        // Reset any trainers/pokemon if there was one previously
        DungeonBattle.trainer(null);
        DungeonBattle.trainerPokemonIndex(0);
        DungeonBattle.enemyPokemon(null);
        DungeonRunner.timeLeft(GameConstants.DUNGEON_TIME * FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.H_Ice_Spirit));
        DungeonRunner.timeLeftPercentage(100);
        // Dungeon size increases with each region
        let dungeonSize = GameConstants.BASE_DUNGEON_SIZE + player.region;
        // Decrease dungeon size by 1 for every 10, 100, 1000 etc completes
        dungeonSize -= Math.max(0, App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(DungeonRunner.dungeon.name)]().toString().length - 1);
        const flash = App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(DungeonRunner.dungeon.name)]() >= 200;
        // Dungeon size minimum of MIN_DUNGEON_SIZE
        DungeonRunner.map = new DungeonMap(Math.max(GameConstants.MIN_DUNGEON_SIZE, dungeonSize), flash);
        DungeonRunner.chestsOpened = 0;
        DungeonRunner.currentTileType = ko.pureComputed(() => {
            return DungeonRunner.map.currentTile().type;
        });
        DungeonRunner.fightingBoss(false);
        DungeonRunner.defeatedBoss(false);
        DungeonRunner.dungeonFinished(false);
        App.game.gameState = GameConstants.GameState.dungeon;
    }
    static tick() {
        if (this.timeLeft() <= 0) {
            if (this.defeatedBoss()) {
                this.dungeonWon();
            }
            else {
                this.dungeonLost();
            }
        }
        if (this.map.playerMoved()) {
            this.timeLeft(this.timeLeft() - GameConstants.DUNGEON_TICK);
            this.timeLeftPercentage(Math.floor(this.timeLeft() / GameConstants.DUNGEON_TIME * 100));
        }
    }
    /**
     * Handles the click event in the dungeon view
     */
    static handleClick() {
        if (DungeonRunner.fighting() && !DungeonBattle.catching()) {
            DungeonBattle.clickAttack();
        }
        else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.entrance) {
            DungeonRunner.dungeonLeave();
        }
        else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.chest) {
            DungeonRunner.openChest();
        }
        else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.boss && !DungeonRunner.fightingBoss()) {
            DungeonRunner.startBossFight();
        }
    }
    static lootInput() {
        const generatedLoot = Rand.fromWeightedArray(DungeonRunner.dungeon.itemList, DungeonRunner.dungeon.lootWeightList);
        return generatedLoot;
    }
    static openChest() {
        if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTile.chest) {
            return;
        }
        DungeonRunner.chestsOpened++;
        const loot = DungeonRunner.lootInput();
        let amount = loot.amount || 1;
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.Item_magnet)()) {
            // Decreasing chance for rarer items (62.5% → 12.5%)
            const magnetChance = 0.5 / (4 / (loot.weight + 1));
            if (Rand.chance(magnetChance)) {
                // Gain more items in higher regions
                amount += Math.max(1, Math.round(Math.max(loot.weight, 2) / 8 * (GameConstants.getDungeonRegion(DungeonRunner.dungeon.name) + 1)));
            }
        }
        DungeonRunner.gainLoot(loot.loot, amount);
        DungeonRunner.map.currentTile().type(GameConstants.DungeonTile.empty);
        DungeonRunner.map.currentTile().calculateCssClass();
        if (DungeonRunner.chestsOpened == Math.floor(DungeonRunner.map.size / 3)) {
            DungeonRunner.map.showChestTiles();
        }
        if (DungeonRunner.chestsOpened == Math.ceil(DungeonRunner.map.size / 2)) {
            DungeonRunner.map.showAllTiles();
        }
    }
    static gainLoot(input, amount) {
        if (typeof BerryType[input] == 'number') {
            Notifier.notify({
                message: `Found ${amount} × ${GameConstants.humanifyString(input)} Berry in a dungeon chest`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Items.dungeon_item_found,
            });
            return App.game.farming.gainBerry(BerryType[GameConstants.humanifyString(input)], amount, false);
        }
        else if (ItemList[input] instanceof PokeballItem) {
            Notifier.notify({
                message: `Found ${amount} × ${GameConstants.humanifyString(input)} in a dungeon chest`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Items.dungeon_item_found,
            });
            return App.game.pokeballs.gainPokeballs(GameConstants.Pokeball[GameConstants.humanifyString(input)], amount, false);
        }
        else if (Underground.getMineItemByName(input) instanceof UndergroundItem) {
            Notifier.notify({
                message: `Found ${amount} × ${GameConstants.humanifyString(input)} in a dungeon chest`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Items.dungeon_item_found,
            });
            return Underground.gainMineItem(Underground.getMineItemByName(input).id, amount);
        }
        else if (PokemonHelper.getPokemonByName(input).name != 'Ohakadamon') {
            Notifier.notify({
                message: `Found ${1} × ${GameConstants.humanifyString(input)} in a dungeon chest`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Items.dungeon_item_found,
            });
            return DungeonBattle.generateNewLootEnemy(input);
        }
        else if (ItemList[input] instanceof EvolutionStone || EggItem || BattleItem || Vitamin || EnergyRestore) {
            Notifier.notify({
                message: `Found ${amount} × ${GameConstants.humanifyString(input)} in a dungeon chest`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Items.dungeon_item_found,
            });
            return player.gainItem(ItemList[input].name, amount);
        }
        else {
            return player.gainItem(ItemList['xAttack'], 1);
        }
    }
    static startBossFight() {
        if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTile.boss || DungeonRunner.fightingBoss()) {
            return;
        }
        DungeonRunner.fightingBoss(true);
        DungeonBattle.generateNewBoss();
    }
    static dungeonLeave() {
        if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTile.entrance || DungeonRunner.dungeonFinished() || !DungeonRunner.map.playerMoved()) {
            return;
        }
        DungeonRunner.dungeonFinished(true);
        DungeonRunner.fighting(false);
        DungeonRunner.fightingBoss(false);
        MapHelper.moveToTown(DungeonRunner.dungeon.name);
    }
    static dungeonLost() {
        if (!DungeonRunner.dungeonFinished()) {
            DungeonRunner.dungeonFinished(true);
            DungeonRunner.fighting(false);
            DungeonRunner.fightingBoss(false);
            MapHelper.moveToTown(DungeonRunner.dungeon.name);
            Notifier.notify({
                message: 'You could not complete the dungeon in time',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    static dungeonWon() {
        if (!DungeonRunner.dungeonFinished()) {
            DungeonRunner.dungeonFinished(true);
            GameHelper.incrementObservable(App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(DungeonRunner.dungeon.name)]);
            MapHelper.moveToTown(DungeonRunner.dungeon.name);
            DungeonRunner.dungeon.rewardFunction();
            // TODO award loot with a special screen
            Notifier.notify({
                message: 'You have successfully completed the dungeon',
                type: NotificationConstants.NotificationOption.success,
            });
        }
    }
    static dungeonCompleted(dungeon, includeShiny) {
        const possiblePokemon = dungeon.allAvailablePokemon();
        return RouteHelper.listCompleted(possiblePokemon, includeShiny);
    }
    static isAchievementsComplete(dungeon) {
        const dungeonIndex = GameConstants.getDungeonIndex(dungeon.name);
        return AchievementHandler.achievementList.every(achievement => {
            return !(achievement.property instanceof ClearDungeonRequirement && achievement.property.dungeonIndex === dungeonIndex && !achievement.isCompleted());
        });
    }
    static isThereQuestAtLocation(dungeon) {
        return App.game.quests.currentQuests().some(q => {
            return q instanceof DefeatDungeonQuest && q.dungeon == dungeon.name;
        });
    }
    static hasEnoughTokens() {
        return App.game.wallet.hasAmount(new Amount(DungeonRunner.dungeon.tokenCost, GameConstants.Currency.explorecoin));
    }
    static dungeonLevel() {
        return PokemonFactory.routeLevel(this.dungeon.difficultyRoute, player.region);
    }
}
DungeonRunner.timeLeft = ko.observable(GameConstants.DUNGEON_TIME);
DungeonRunner.timeLeftPercentage = ko.observable(100);
DungeonRunner.fighting = ko.observable(false);
DungeonRunner.fightingBoss = ko.observable(false);
DungeonRunner.defeatedBoss = ko.observable(false);
DungeonRunner.dungeonFinished = ko.observable(false);
DungeonRunner.timeLeftSeconds = ko.pureComputed(() => {
    return (Math.ceil(DungeonRunner.timeLeft() / 100) / 10).toFixed(1);
});
class DungeonTile {
    constructor(type) {
        this._isVisible = false;
        this._isVisited = false;
        this._hasPlayer = false;
        this.type = ko.observable(type);
        this.cssClass = ko.observable('');
        this.calculateCssClass();
    }
    get isVisible() {
        return this._isVisible;
    }
    set isVisible(val) {
        this._isVisible = val;
        this.calculateCssClass();
    }
    get isVisited() {
        return this._isVisited;
    }
    set isVisited(val) {
        this._isVisited = val;
        this.calculateCssClass();
    }
    get hasPlayer() {
        return this._hasPlayer;
    }
    set hasPlayer(val) {
        this._hasPlayer = val;
        this.calculateCssClass();
    }
    calculateCssClass() {
        if (!this.isVisible) {
            this.cssClass('tile tile-invisible');
            return;
        }
        if (this.hasPlayer) {
            this.cssClass('tile tile-player');
            return;
        }
        // Base tile class
        const css = ['tile'];
        // If player visited tile add the class
        if (this.isVisited) {
            css.push('tile-visited');
        }
        // Add the tile type class
        css.push(`tile-${GameConstants.DungeonTile[this.type()]}`);
        // Join all the classes
        this.cssClass(css.join(' '));
    }
}
class Point {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
class EffectEngineRunner {
    static initialize(multiplier) {
        GameHelper.enumStrings(GameConstants.BattleItemType).forEach((itemName) => {
            const item = ItemList[itemName];
            if (item.multiplierType) {
                multiplier.addBonus(item.multiplierType, () => this.isActive(itemName)() ? item.multiplyBy : 1);
            }
        });
    }
    static tick() {
        this.counter = 0;
        const timeToReduce = 1;
        for (const itemName in GameConstants.BattleItemType) {
            const timeRemaining = player.effectList[itemName]();
            if (timeRemaining > 0) {
                player.effectList[itemName](Math.max(0, timeRemaining - timeToReduce));
                this.updateFormattedTimeLeft(itemName);
            }
            if (player.effectList[itemName]() == 5) {
                Notifier.notify({
                    message: `The ${GameConstants.humanifyString(itemName)}'s effect is about to wear off!`,
                    type: NotificationConstants.NotificationOption.warning,
                    sound: NotificationConstants.NotificationSound.General.battle_item_timer,
                    setting: NotificationConstants.NotificationSetting.Items.battle_item_timer,
                });
            }
        }
    }
    static incrementMultiplier() {
        this.multIndex((this.multIndex() + 1) % this.multipliers.length);
    }
    static decrementMultiplier() {
        this.multIndex((this.multIndex() + this.multipliers.length - 1) % this.multipliers.length);
    }
    static getEffect(itemName) {
        if (!player) {
            return 0;
        }
        return player.effectList[itemName]();
    }
    static addEffect(itemName, amount) {
        player.effectList[itemName](Math.max(0, player.effectList[itemName]() + (GameConstants.ITEM_USE_TIME * amount)));
        this.updateFormattedTimeLeft(itemName);
    }
    static updateFormattedTimeLeft(itemName) {
        const times = GameConstants.formatTime(player.effectList[itemName]()).split(':');
        if (+times[0] > 99) {
            return player.effectTimer[itemName]('99h+');
        }
        else if (+times[0] > 0) {
            return player.effectTimer[itemName](`${+times[0]}h`);
        }
        times.shift();
        player.effectTimer[itemName](times.join(':'));
    }
    static getDungeonTokenMultiplier() {
        return this.isActive(GameConstants.BattleItemType.Intel_floppy)() ? 1.5 : 1;
    }
    static isActive(itemName) {
        return ko.pureComputed(() => {
            if (!player) {
                return false;
            }
            return !!player.effectList[itemName]();
        });
    }
}
EffectEngineRunner.counter = 0;
EffectEngineRunner.multipliers = ['×1', '×10', '×100', '×1000', 'All'];
EffectEngineRunner.multIndex = ko.observable(0);
EffectEngineRunner.amountToUse = ko.pureComputed(() => {
    // Either the digits specified, or All (Infinity)
    return Number(EffectEngineRunner.multipliers[EffectEngineRunner.multIndex()].replace(/\D/g, '')) || Infinity;
});
/// <reference path="../../declarations/enums/BerryType.d.ts"/>
/// <reference path="../../declarations/enums/FlavorType.d.ts"/>
/// <reference path="../../declarations/enums/BerryColor.d.ts"/>
class Berry {
    constructor(type, growthTime, harvestAmount, replantRate, farmValue, exp, flavors, color, description, aura, wander) {
        this.type = type;
        this.growthTime = growthTime;
        this.harvestAmount = harvestAmount;
        this.replantRate = replantRate;
        this.farmValue = farmValue;
        this.exp = exp;
        this.color = color;
        this.description = description;
        this.aura = aura;
        this.flavors = [];
        for (let i = 0; i < 5; i++) {
            this.flavors.push({ type: i, value: flavors[i] });
        }
        this.wander = wander ? Berry.baseWander.concat(wander) : Berry.baseWander;
    }
    get descriptionHTML() {
        return this.description.join('<br/>');
    }
}
Berry.baseWander = [
    'Platinum Scumon', 'Golemon PS',
    'Burpmon', 'Burpmon',
    'Burpmon', 'Burpmon',
    'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon',
    'Burpmon', 'Burpmon',
    'Burpmon', 'Burpmon',
];
class BerryDeal {
    constructor(berry, berryAmount, item, itemAmount) {
        this.berries = [];
        berry.forEach((berry, idx) => {
            this.berries.push({ berryType: berry, amount: berryAmount[idx] });
        });
        this.item = { itemType: item, amount: itemAmount };
    }
    static randomBerry(berryList) {
        return SeededRand.fromArray(berryList);
    }
    static randomBattleItem() {
        const battleItem = SeededRand.fromArray(GameHelper.enumStrings(GameConstants.BattleItemType));
        return ItemList[battleItem];
    }
    static randomEvoItem() {
        const evoItem = SeededRand.fromArray(GameHelper.enumStrings(GameConstants.StoneType).filter(name => !(['None', 'Black_DNA', 'White_DNA']).includes(name)));
        return ItemList[evoItem];
    }
    static randomUndergroundItem() {
        return SeededRand.fromArray(UndergroundItem.list);
    }
    static randomPokeballDeal() {
        const firstGen = Farming.getGeneration(0);
        const secondGen = Farming.getGeneration(1);
        const thirdGen = Farming.getGeneration(2);
        return SeededRand.fromArray([
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Fastball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Quickball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Timerball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Duskball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
                this.randomBerry(thirdGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
                SeededRand.intBetween(5, 10),
            ], ItemList.Luxuryball, 1),
        ]);
    }
    static getDeals(region) {
        return BerryDeal.list[region];
    }
    static generateDeals(date) {
        SeededRand.seedWithDate(date);
        const berryMasterRegions = [GameConstants.Region.johto, GameConstants.Region.hoenn, GameConstants.Region.sinnoh];
        // Removing old deals
        for (const region of berryMasterRegions) {
            if (!BerryDeal.list[region]) {
                BerryDeal.list[region] = ko.observableArray();
            }
            else {
                BerryDeal.list[region].removeAll();
            }
        }
        BerryDeal.list[GameConstants.Region.johto].push(...this.generateJohtoDeals());
        BerryDeal.list[GameConstants.Region.hoenn].push(...this.generateHoennDeals());
        BerryDeal.list[GameConstants.Region.sinnoh].push(...this.generateSinnohDeals());
    }
    static generateJohtoDeals() {
        const firstGen = Farming.getGeneration(0);
        const secondGen = Farming.getGeneration(1);
        const thirdGen = Farming.getGeneration(2);
        const list = [];
        list.push(new BerryDeal([
            this.randomBerry(firstGen),
            this.randomBerry(secondGen),
        ], [
            SeededRand.intBetween(30, 70),
            SeededRand.intBetween(10, 30),
        ], this.randomBattleItem(), SeededRand.intBetween(3, 7)));
        list.push(new BerryDeal([
            this.randomBerry(firstGen),
            this.randomBerry(secondGen),
            this.randomBerry(thirdGen),
        ], [
            SeededRand.intBetween(70, 130),
            SeededRand.intBetween(30, 70),
            SeededRand.intBetween(10, 30),
        ], this.randomEvoItem(), SeededRand.intBetween(1, 3)));
        list.push(this.randomPokeballDeal());
        return list;
    }
    static generateHoennDeals() {
        const thirdGen = Farming.getGeneration(2);
        const fourthGen = Farming.getGeneration(3);
        const temp = [];
        const maxTries = 30;
        let i = 0;
        while (i < maxTries && temp.length < 3) {
            const deal = new BerryDeal([
                this.randomBerry(thirdGen),
                this.randomBerry(fourthGen),
            ], [
                SeededRand.intBetween(30, 70),
                SeededRand.intBetween(10, 30),
            ], this.randomUndergroundItem(), SeededRand.intBetween(1, 3));
            if (temp.every(madeDeal => madeDeal.item.name !== deal.item.itemType.name)) {
                temp.push(deal);
            }
            i++;
        }
        return temp;
    }
    static generateSinnohDeals() {
        const firstGen = Farming.getGeneration(0);
        const secondGen = Farming.getGeneration(1);
        const thirdGen = Farming.getGeneration(2);
        const fourthGen = Farming.getGeneration(3);
        const fifthGen = Farming.getGeneration(4);
        const list = [];
        list.push(new BerryDeal([
            this.randomBerry(firstGen),
            this.randomBerry(secondGen),
            this.randomBerry(thirdGen),
            this.randomBerry(fourthGen),
            this.randomBerry(fifthGen),
        ], [
            SeededRand.intBetween(500, 1000),
            SeededRand.intBetween(200, 500),
            SeededRand.intBetween(100, 200),
            SeededRand.intBetween(50, 100),
            SeededRand.intBetween(10, 50),
        ], ItemList['Masterball'], 1));
        list.push(new BerryDeal([
            this.randomBerry(fourthGen),
            this.randomBerry(fifthGen),
        ], [
            SeededRand.intBetween(50, 100),
            SeededRand.intBetween(10, 50),
        ], ItemList['Protein'], 1));
        return [SeededRand.fromArray(list)];
    }
    static canUse(region, i) {
        const deal = BerryDeal.list[region].peek()[i];
        return deal.berries.every((value) => App.game.farming.berryList[value.berryType]() >= value.amount);
    }
    static use(region, i, tradeTimes = 1) {
        const deal = BerryDeal.list[region].peek()[i];
        if (BerryDeal.canUse(region, i)) {
            const trades = deal.berries.map(berry => {
                const amt = App.game.farming.berryList[berry.berryType]();
                const maxTrades = Math.floor(amt / berry.amount);
                return maxTrades;
            });
            const maxTrades = trades.reduce((a, b) => Math.min(a, b), tradeTimes);
            deal.berries.forEach((value) => GameHelper.incrementObservable(App.game.farming.berryList[value.berryType], -value.amount * maxTrades));
            if (deal.item.itemType instanceof UndergroundItem) {
                Underground.gainMineItem(deal.item.itemType.id, deal.item.amount * maxTrades);
            }
            else {
                deal.item.itemType.gain(deal.item.amount * maxTrades);
            }
            GameHelper.incrementObservable(App.game.statistics.diskDailyDealTrades);
        }
    }
}
BerryDeal.list = {};
/// <reference path="../../declarations/enums/MulchType.d.ts"/>
class FarmController {
    static initialize() {
        this.berryListFiltered(Array.from(Array(GameHelper.enumLength(BerryType) - 1).keys()));
        this.numberOfTabs = ko.pureComputed(() => {
            return Math.floor(App.game.farming.highestUnlockedBerry() / this.BERRIES_PER_PAGE);
        });
        this.berryListEnd = ko.pureComputed(() => {
            var _a;
            const highestMutation = App.game.farming.mutations.slice().reverse().find(mut => mut._hintSeen() && !App.game.farming.unlockedBerries[mut.mutatedBerry]());
            const highestMutationHint = (_a = highestMutation === null || highestMutation === void 0 ? void 0 : highestMutation.mutatedBerry) !== null && _a !== void 0 ? _a : 0;
            return Math.max(App.game.farming.highestUnlockedBerry(), highestMutationHint);
        });
        this.navigateIndex(0);
    }
    static openFarmModal() {
        if (App.game.farming.canAccess()) {
            $('#farmModal').modal('show');
        }
        else {
            Notifier.notify({
                message: `You need the ${GameConstants.humanifyString(KeyItemType[KeyItemType.Employee_Pass])} to access this location`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static getImage(index) {
        const plot = App.game.farming.plotList[index];
        if (plot.berry === BerryType.None) {
            return '';
        }
        if (plot.stage() === PlotStage.Seed) {
            return 'assets/images/farm/AllTreeSeed.png';
        }
        return `assets/images/farm/${BerryType[plot.berry]}Tree${PlotStage[plot.stage()]}.png`;
    }
    static calculateCssClass() {
        if (this.selectedShovel()) {
            return 'ShovelSelected';
        }
        if (this.selectedMulchShovel()) {
            return 'MulchShovelSelected';
        }
        if (this.berryListVisible()) {
            return 'BerrySelected';
        }
        return 'MulchSelected';
    }
    static calcMulchClass(plot) {
        if (plot.mulch === MulchType.None) {
            return '';
        }
        return MulchType[plot.mulch];
    }
    static plotClick(index) {
        const plot = App.game.farming.plotList[index];
        // Unlocking Plot
        if (!plot.isUnlocked) {
            App.game.farming.unlockPlot(index);
            // Handle Shovel
        }
        else if (this.selectedShovel()) {
            App.game.farming.shovel(index);
            //Handle Mulch Shovel
        }
        else if (this.selectedMulchShovel()) {
            App.game.farming.shovelMulch(index);
            // Handle Berries
        }
        else if (this.berryListVisible()) {
            if (plot.isEmpty()) {
                App.game.farming.plant(index, this.selectedBerry());
            }
            else {
                App.game.farming.harvest(index);
            }
            // Handle Mulches
        }
        else {
            App.game.farming.addMulch(index, this.selectedMulch(), this.getAmount());
        }
    }
    static mulchAll() {
        App.game.farming.mulchAll(FarmController.selectedMulch(), this.getAmount());
    }
    static navigateRight() {
        if (FarmController.navigateIndex() < FarmController.numberOfTabs()) {
            FarmController.navigateIndex(FarmController.navigateIndex() + 1);
            this.selectedBerry(this.getBerryListWithIndex()[0]);
        }
    }
    static navigateLeft() {
        if (FarmController.navigateIndex() > 0) {
            FarmController.navigateIndex(FarmController.navigateIndex() - 1);
            this.selectedBerry(this.getBerryListWithIndex()[0]);
        }
    }
    static getBerryListWithIndex() {
        return this.berryListFiltered().slice(this.navigateIndex() * this.BERRIES_PER_PAGE, (this.navigateIndex() * this.BERRIES_PER_PAGE) + this.BERRIES_PER_PAGE);
    }
    static getUnlockedBerryList() {
        return this.berryListFiltered().filter((berry) => berry <= this.berryListEnd());
    }
    static getAmount() {
        return Number(this.multipliers[this.multIndex()].replace(/\D/g, '')) || Infinity;
    }
    static incrementMultiplier() {
        this.multIndex((this.multIndex() + 1) % this.multipliers.length);
    }
    static decrementMultiplier() {
        this.multIndex((this.multIndex() + this.multipliers.length - 1) % this.multipliers.length);
    }
    static getBackgroundColor(index) {
        if (App.game.farming.unlockedBerries[index]()) {
            return GameConstants.BerryColor[App.game.farming.berryData[index].color];
        }
        else if (FarmController.getHint(index, true) !== '') {
            return GameConstants.BerryColor[6];
        }
        else {
            return GameConstants.BerryColor[7];
        }
    }
    static getBerryImage(index) {
        return `assets/images/items/berry/${BerryType[index]}.png`;
    }
    static getHint(index, checkSeen = false, checkUnlocked = false) {
        if (checkUnlocked && App.game.farming.unlockedBerries[index]()) {
            return '';
        }
        const mutation = App.game.farming.mutations.find(mutation => mutation.mutatedBerry === index && mutation.showHint);
        if (mutation) {
            if (checkSeen && !mutation.hintSeen) {
                return '';
            }
            return mutation.hint;
        }
        return '';
    }
}
FarmController.navigateIndex = ko.observable(0);
FarmController.berryListFiltered = ko.observableArray([]);
FarmController.selectedBerry = ko.observable(BerryType.Games);
FarmController.selectedMulch = ko.observable(MulchType.Speed_Boost);
FarmController.selectedShovel = ko.observable(false);
FarmController.selectedMulchShovel = ko.observable(false);
FarmController.berryListVisible = ko.observable(true);
FarmController.multipliers = ['×1', '×10', '×100', '×1000', 'All'];
FarmController.multIndex = ko.observable(0);
FarmController.BERRIES_PER_PAGE = 8;
FarmController.additionalInfoTooltip = ko.pureComputed(() => {
    const tooltip = [];
    // External Auras
    App.game.farming.externalAuras.forEach((aura, idx) => {
        if (typeof aura === 'undefined') {
            return;
        }
        if (aura() === 1) {
            return;
        }
        tooltip.push(`${AuraType[idx]}: ${aura().toFixed(2)}x`);
    });
    // Adding header if necessary
    if (tooltip.length) {
        tooltip.unshift('<u>External Auras</u>');
    }
    return tooltip.join('<br>');
});
const FarmHandSkills = [
    'energy',
    'efficiency',
    'accuracy',
    'cost',
];
var FarmHandSpeeds;
(function (FarmHandSpeeds) {
    FarmHandSpeeds[FarmHandSpeeds["Fastest"] = 0] = "Fastest";
    FarmHandSpeeds[FarmHandSpeeds["Faster"] = 1] = "Faster";
    FarmHandSpeeds[FarmHandSpeeds["Fast"] = 2] = "Fast";
    FarmHandSpeeds[FarmHandSpeeds["AboveAverage"] = 3] = "AboveAverage";
    FarmHandSpeeds[FarmHandSpeeds["Average"] = 4] = "Average";
    FarmHandSpeeds[FarmHandSpeeds["BelowAverage"] = 5] = "BelowAverage";
    FarmHandSpeeds[FarmHandSpeeds["Slow"] = 6] = "Slow";
    FarmHandSpeeds[FarmHandSpeeds["Slower"] = 7] = "Slower";
    FarmHandSpeeds[FarmHandSpeeds["Slowest"] = 8] = "Slowest";
    FarmHandSpeeds[FarmHandSpeeds["SnailPaced"] = 9] = "SnailPaced";
    FarmHandSpeeds[FarmHandSpeeds["Lazy"] = 10] = "Lazy";
})(FarmHandSpeeds || (FarmHandSpeeds = {}));
/*
TODO:
Work in levels/experience somehow
Use accuracy to decide if they plant the right berry or plant a berry at all (still use up energy?)
Use accuracy to decide if they harvest a berry by accident? (still use up energy?)
*/
var FarmHandBerryType;
(function (FarmHandBerryType) {
    FarmHandBerryType[FarmHandBerryType["Random"] = -3] = "Random";
    FarmHandBerryType[FarmHandBerryType["Replant"] = -2] = "Replant";
})(FarmHandBerryType || (FarmHandBerryType = {}));
const FarmHandBerryTypes = Object.assign(Object.assign({}, FarmHandBerryType), BerryType);
class FarmHand {
    // public level: number;
    // public experience: number;
    constructor(name, maxEnergy, // 10 - 100
    efficiency, // 1 - 50?
    speed, accuracy, // 0 - 10 (80% - 100%)
    cost, // 0 - 10? (can go higher if needed)
    unlockRequirement) {
        this.name = name;
        this.maxEnergy = maxEnergy;
        this.efficiency = efficiency;
        this.speed = speed;
        this.accuracy = accuracy;
        this.unlockRequirement = unlockRequirement;
        this.defaults = {
            focus: BerryType.None,
            shouldHarvest: false,
            workTicks: 0,
            costTicks: 0,
            energy: 0,
            hired: false,
            plots: [],
        };
        // Maximum Efficiency value
        this.maxEfficiency = 50;
        // Negative value so they are charged on the first tick and work on the first tick
        this.workTicks = ko.observable(-GameConstants.TICK_TIME).extend({ numeric: 0 });
        this.costTicks = ko.observable(-GameConstants.TICK_TIME).extend({ numeric: 0 });
        this.costTick = GameConstants.HOUR;
        this.cost = new Amount(+0, GameConstants.Currency.farmPoint);
        this.trainerSprite = 0;
        this.focus = ko.observable(BerryType.None);
        this.shouldHarvest = ko.observable(false).extend({ boolean: null });
        this.energy = ko.observable(0).extend({ numeric: 0 });
        this.hired = ko.observable(false).extend({ boolean: null });
        this.plots = ko.observableArray(new Array(GameConstants.FARM_PLOT_WIDTH * GameConstants.FARM_PLOT_HEIGHT).fill(0).map((v, i) => i));
        SeededRand.seed(parseInt(this.name, 36));
        this.trainerSprite = SeededRand.intBetween(0, Profile.MAX_TRAINER - 1);
        // Negative value so they are charged on the first tick and work on the first tick
        this.workTicks(-GameConstants.TICK_TIME);
        this.costTicks(-GameConstants.TICK_TIME);
        // Set initial energy to maximum energy
        this.energy(this.maxEnergy);
        // Calculate how much to charge the player in farm points
        this.cost = new Amount(+Math.pow(100, 1 + cost * 0.08).toPrecision(2), GameConstants.Currency.farmPoint);
        // Calculate how often they work
        this.workTick = this.calcWorkTick(this.speed);
        this.tooltip = ko.pureComputed(() => `<strong>${this.name}</strong><br/>
            Energy: ${this.energy()}/${this.maxEnergy}<br/>
            Work Cycle: ${GameConstants.formatTimeFullLetters((this.workTick - this.workTicks()) / 1000)}`);
    }
    calcWorkTick(speed) {
        speed = ((speed + 1) * 0.03) + 1;
        let time = Math.pow(GameConstants.MINUTE, speed);
        time -= time > 5 * GameConstants.MINUTE ? time % GameConstants.MINUTE : time % (30 * GameConstants.SECOND);
        return time;
    }
    isUnlocked() {
        var _a, _b;
        return (_b = (_a = this.unlockRequirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true;
    }
    togglePlot(plotIndex) {
        const index = this.plots().findIndex(p => p == plotIndex);
        if (index >= 0) {
            this.plots.splice(index, 1);
        }
        else {
            this.plots.push(plotIndex);
        }
        this.plots.sort((a, b) => a - b);
    }
    hire() {
        // Negative value so they are charged on the first tick and work on the first tick
        this.workTicks(-GameConstants.TICK_TIME);
        this.costTicks(-GameConstants.TICK_TIME);
        // Check the player has enough Farm Points to hire this Farm Hand
        if (!App.game.wallet.hasAmount(this.cost)) {
            Notifier.notify({
                title: `[FARM HAND] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
                message: `You don't have enough Farm Points to hire me..\nCost: <img src="./assets/images/currency/farmPoint.svg" height="24px"/> ${this.cost.amount.toLocaleString('en-US')}`,
                type: NotificationConstants.NotificationOption.warning,
                timeout: 30 * GameConstants.SECOND,
            });
            return;
        }
        // Farm hand is hired
        this.hired(true);
        Notifier.notify({
            title: `[FARM HAND] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: 'Thanks for hiring me,\nI won\'t let you down!',
            type: NotificationConstants.NotificationOption.success,
            timeout: 30 * GameConstants.SECOND,
        });
    }
    fire() {
        Notifier.notify({
            title: `[FARM HAND] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: 'Thanks for the work,\nLet me know when you\'re hiring again!',
            type: NotificationConstants.NotificationOption.info,
            timeout: 30 * GameConstants.SECOND,
        });
        this.hired(false);
        return;
    }
    tick() {
        // If not hired and energy full, there's nothing to do
        if (!this.hired() && this.energy() >= this.maxEnergy) {
            return;
        }
        // Charge player when cost tick reached
        GameHelper.incrementObservable(this.costTicks, GameConstants.TICK_TIME);
        if (this.costTicks() % this.costTick < GameConstants.TICK_TIME) {
            this.costTicks(0);
            if (this.hired()) {
                this.charge();
            }
        }
        // Work/Restore energy when work ticks reached
        GameHelper.incrementObservable(this.workTicks, GameConstants.TICK_TIME);
        if (this.workTicks() % this.workTick < GameConstants.TICK_TIME) {
            this.workTicks(0);
            if (this.hired()) {
                this.work();
            }
            else {
                this.addEnergy();
            }
        }
    }
    work() {
        // Out of energy cannot work right now..
        if (!this.energy()) {
            this.addEnergy();
            return;
        }
        // flip this if they worked, otherwise restore energy points
        let worked = false;
        let workTimes = this.efficiency;
        // Harvesting berries
        if (this.shouldHarvest()) {
            let readyPlotIndex;
            do {
                readyPlotIndex = App.game.farming.plotList.findIndex((p, i) => p.isUnlocked && p.berry !== BerryType.None && p.stage() >= PlotStage.Berry && this.plots().includes(i));
                if (readyPlotIndex >= 0 && workTimes > 0) {
                    const berry = App.game.farming.plotList[readyPlotIndex].berry;
                    App.game.farming.harvest(readyPlotIndex);
                    workTimes--;
                    worked = true;
                    if (this.focus() == FarmHandBerryTypes.Replant) {
                        App.game.farming.plant(readyPlotIndex, berry);
                        workTimes--;
                        worked = true;
                    }
                }
            } while (readyPlotIndex >= 0 && workTimes > 0);
        }
        // Planting berries
        if (this.focus() != FarmHandBerryTypes.None) {
            let emptyPlotIndex;
            do {
                // Find empty plots
                emptyPlotIndex = App.game.farming.plotList.findIndex((p, i) => p.isUnlocked && p.berry == BerryType.None && this.plots().includes(i));
                // Plant the berry
                if (emptyPlotIndex >= 0 && workTimes > 0) {
                    // Plant the expected berry
                    let berry;
                    switch (this.focus()) {
                        case FarmHandBerryTypes.Replant: // Re-plant last berry used
                            berry = App.game.farming.plotList[emptyPlotIndex].lastPlanted;
                            break;
                        case FarmHandBerryTypes.Random: // Plant a random berry
                            berry = Rand.fromArray(App.game.farming.farmHands.availableBerries().filter(b => b >= 0));
                            break;
                        default:
                            berry = this.focus();
                    }
                    // If we somehow didn't find a berry to use, just plant a Cheri..
                    berry = berry < 0 ? BerryType.Games : berry;
                    App.game.farming.plant(emptyPlotIndex, berry);
                    workTimes--;
                    worked = true;
                }
            } while (emptyPlotIndex >= 0 && workTimes > 0);
        }
        if (!worked) {
            this.addEnergy();
        }
        else {
            this.useEnergy();
        }
    }
    addEnergy(amt = 1) {
        // Only allow up to maximum value
        this.energy(Math.min(this.maxEnergy, this.energy() + amt));
    }
    useEnergy(amt = 1) {
        // Only allow to go down to 0
        this.energy(Math.max(0, this.energy() - amt));
    }
    charge() {
        // Charge the player if they can afford it, otherwise notify that they cannot
        if (!App.game.wallet.loseAmount(this.cost)) {
            Notifier.notify({
                title: `[FARM HAND] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
                message: `It looks like you are a little short on Farm Points right now..\nLet me know when you're hiring again!\nCost: <img src="./assets/images/currency/farmPoint.svg" height="24px"/> ${this.cost.amount.toLocaleString('en-US')}`,
                type: NotificationConstants.NotificationOption.danger,
                timeout: 30 * GameConstants.MINUTE,
            });
            this.hired(false);
            return;
        }
        // Charge the player for the hour
        Notifier.notify({
            title: `[FARM HAND] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: `Here's your bill for the hour!\nCost: <img src="./assets/images/currency/farmPoint.svg" height="24px"/> ${this.cost.amount.toLocaleString('en-US')}`,
            type: NotificationConstants.NotificationOption.info,
            timeout: 30 * GameConstants.SECOND,
        });
    }
    toJSON() {
        const output = {
            focus: this.focus(),
            shouldHarvest: this.shouldHarvest(),
            workTicks: this.workTicks(),
            costTicks: this.costTicks(),
            energy: this.energy(),
            hired: this.hired(),
            plots: this.plots(),
        };
        // Don't save anything that is the default option
        Object.entries(output).forEach(([key, value]) => {
            if (value === this.defaults[key]) {
                delete output[key];
            }
        });
        return output;
    }
    fromJSON(json) {
        if (!json) {
            return;
        }
        this.focus(json.focus || this.defaults.focus);
        this.shouldHarvest(json.shouldHarvest || this.defaults.shouldHarvest);
        this.workTicks(json.workTicks || this.defaults.workTicks);
        this.costTicks(json.costTicks || this.defaults.costTicks);
        this.energy(json.energy || this.defaults.energy);
        this.hired(json.hired || this.defaults.hired);
        this.plots(json.plots || this.defaults.plots);
    }
}
class FarmHands {
    constructor() {
        this.MAX_HIRES = 3;
        this.requirement = new BerriesUnlockedRequirement(8);
        this.available = ko.pureComputed(() => FarmHands.list.filter(f => f.isUnlocked()));
        this.hired = ko.pureComputed(() => FarmHands.list.filter(f => f.hired()));
        this.availableBerries = ko.pureComputed(() => GameHelper.enumNumbers(FarmHandBerryTypes).filter(b => { var _a, _b; return ((_b = (_a = App.game.farming.unlockedBerries)[b]) === null || _b === void 0 ? void 0 : _b.call(_a)) || b < 0; }).sort((a, b) => a - b));
        this.canHire = ko.pureComputed(() => this.hired().length < this.MAX_HIRES);
    }
    static add(farmHand) {
        this.list.push(farmHand);
    }
    isUnlocked() {
        return this.requirement.isCompleted();
    }
    tick() {
        // run game tick for all hired farmhands
        FarmHands.list.forEach(f => f.hired() && f.tick());
    }
    toJSON() {
        return this.available().map(f => f.toJSON());
    }
    fromJSON(json) {
        if (!json || !json.length) {
            return;
        }
        FarmHands.list.forEach(f => {
            const data = json === null || json === void 0 ? void 0 : json.find(_f => _f.name == f.name);
            if (data) {
                f.fromJSON(data);
            }
        });
    }
}
FarmHands.list = [];
// Note: Gender-neutral names used as the trainer sprite is (seeded) randomly generated
FarmHands.add(new FarmHand('Alex', 10, 1, FarmHandSpeeds.Lazy, 1, 1, new BerriesUnlockedRequirement(8)));
FarmHands.add(new FarmHand('Logan', 15, 3, FarmHandSpeeds.Slowest, 2, 4, new BerriesUnlockedRequirement(16)));
FarmHands.add(new FarmHand('Joey', 10, 5, FarmHandSpeeds.Slow, 2, 5, new BerriesUnlockedRequirement(24)));
FarmHands.add(new FarmHand('Charlie', 30, 10, FarmHandSpeeds.BelowAverage, 7, 6, new BerriesUnlockedRequirement(32)));
FarmHands.add(new FarmHand('Bailey', 10, 12, FarmHandSpeeds.Average, 7, 7, new ItemOwnedRequirement('FarmHandBailey')));
FarmHands.add(new FarmHand('Kerry', 50, 16, FarmHandSpeeds.AboveAverage, 8, 8, new ItemOwnedRequirement('FarmHandKerry')));
FarmHands.add(new FarmHand('Riley', 70, 25, FarmHandSpeeds.Fast, 8, 10, new ItemOwnedRequirement('FarmHandRiley')));
FarmHands.add(new FarmHand('Jamie', 65, 5, FarmHandSpeeds.Faster, 9, 10, new ItemOwnedRequirement('FarmHandJamie')));
FarmHands.add(new FarmHand('Jessie', 100, 50, FarmHandSpeeds.Fastest, 10, 12, new BerriesUnlockedRequirement(56)));
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
class Farming {
    constructor(multiplier) {
        this.multiplier = multiplier;
        this.name = 'Farming';
        this.saveKey = 'farming';
        this.berryData = [];
        this.mutations = [];
        this.farmHands = new FarmHands();
        this.mutationCounter = 0;
        this.wanderCounter = 0;
        // You may be wondering why this is necessary.
        // It turns out for some reason the plot age doesn't update in time in the same tick.
        // This means that if we attempt to reset the auras in the same tick, the plant that changed stages
        // will still act like it's in the previous stage, which means the wrong aura is applied.
        // Queueing an aura reset in later ticks fixes this issue, and is barely noticable to the player.
        this.queuedAuraReset = -1;
        this.defaults = {
            berryList: Array(GameHelper.enumLength(BerryType) - 1).fill(0),
            unlockedBerries: Array(GameHelper.enumLength(BerryType) - 1).fill(false),
            mulchList: Array(GameHelper.enumLength(MulchType)).fill(0),
            plotList: new Array(GameConstants.FARM_PLOT_WIDTH * GameConstants.FARM_PLOT_HEIGHT).fill(null).map((value, index) => {
                const middle = Math.floor(GameConstants.FARM_PLOT_HEIGHT / 2) * GameConstants.FARM_PLOT_WIDTH + Math.floor(GameConstants.FARM_PLOT_WIDTH / 2);
                return new Plot(index === middle, BerryType.None, 0, MulchType.None, 0);
            }),
            shovelAmt: 0,
            mulchShovelAmt: 0,
        };
        this.berryList = this.defaults.berryList.map((v) => ko.observable(v));
        this.unlockedBerries = this.defaults.unlockedBerries.map((v) => ko.observable(v));
        this.mulchList = this.defaults.mulchList.map((v) => ko.observable(v));
        this.plotList = this.defaults.plotList;
        this.shovelAmt = ko.observable(this.defaults.shovelAmt);
        this.mulchShovelAmt = ko.observable(this.defaults.mulchShovelAmt);
        this.externalAuras = [];
        this.externalAuras[AuraType.Attract] = ko.observable(1);
        this.externalAuras[AuraType.Egg] = ko.observable(1);
        this.externalAuras[AuraType.Shiny] = ko.observable(1);
        this.externalAuras[AuraType.Roaming] = ko.observable(1);
        this.multiplier.addBonus('shiny', () => this.externalAuras[AuraType.Shiny]());
        this.multiplier.addBonus('eggStep', () => this.externalAuras[AuraType.Egg]());
        this.multiplier.addBonus('roaming', () => this.externalAuras[AuraType.Roaming]());
        this.highestUnlockedBerry = ko.pureComputed(() => {
            for (let i = GameHelper.enumLength(BerryType) - 2; i >= 0; i--) {
                if (this.unlockedBerries[i]()) {
                    return i;
                }
            }
            return 0;
        });
    }
    initialize() {
        //#region Berry Data
        //#region First Generation
        this.berryData[BerryType.Games] = new Berry(BerryType.Games, [5, 10, 20, 30, 60], 2, 0.5, 5, 1, [10, 0, 0, 0, 0], BerryColor.Red, ['You shouldn\'t be suprised to know that this is our most popular item. It\'s all about making as many of them, as quickly as possible.'], undefined, ['Shima Unimon']);
        this.berryData[BerryType.Security] = new Berry(BerryType.Security, [5, 15, 25, 40, 80], 3, 0.5, 6, 2, [0, 10, 0, 0, 0], BerryColor.Blue, ['A basic program to keep your device safe. Everyone needs one.'], undefined, ['Psychemon']);
        this.berryData[BerryType.Health] = new Berry(BerryType.Health, [10, 35, 50, 60, 120], 4, 0.5, 7, 3, [0, 0, 10, 0, 0], BerryColor.Pink, ['A simple diagnostics program. It won\'t fix the bugs but it will give you a form to report them.'], undefined, ['Tyumon']);
        this.berryData[BerryType.Step] = new Berry(BerryType.Step, [15, 30, 45, 80, 160], 5, 0.5, 8, 4, [0, 0, 0, 10, 0], BerryColor.Green, ['This one keeps count of your steps as you walk.']);
        this.berryData[BerryType.Light] = new Berry(BerryType.Light, [10, 40, 60, 120, 240], 6, 0.5, 9, 5, [0, 0, 0, 0, 10], BerryColor.Yellow, ['Turns any light emitting component on and makes your device into a makeshift flashlight.'], undefined, ['Plotmon', 'Nyaromon']);
        this.berryData[BerryType.eBook] = new Berry(BerryType.eBook, [100, 120, 140, 240, 480], 7, 0.5, 10, 6, [10, 0, 10, 10, 10], BerryColor.Purple, ['More convenient that carrying a heavy book around. It can store thousands of books for reading on the go.'], undefined, ['Dark Lizamon']);
        this.berryData[BerryType.Chat] = new Berry(BerryType.Chat, [120, 180, 240, 300, 600], 8, 0.5, 20, 7, [10, 10, 0, 10, 10], BerryColor.Blue, ['A messaging program. Make groups and talk with others.'], undefined, ['Psychemon']);
        this.berryData[BerryType.Finance] = new Berry(BerryType.Finance, [150, 300, 450, 600, 1200], 9, 0.5, 30, 8, [0, 10, 10, 10, 10], BerryColor.Yellow, ['How can our shop make a profit if our customers don\'t have a digital wallet to store their hard-earned money.'], undefined, ['Plotmon', 'Nyaromon']);
        //#endregion
        //#region Second Generation
        this.berryData[BerryType.Mail] = new Berry(BerryType.Mail, [20, 40, 50, 90, 180], 5, 0.4, 10, 2, [10, 10, 10, 0, 10], BerryColor.Pink, ['An email program. The latest update comes pre-subscribed to our newsletter.'], undefined, ['Burpmon']);
        this.berryData[BerryType.Cards] = new Berry(BerryType.Cards, [100, 150, 200, 250, 500], 7, 0.4, 15, 2, [10, 10, 0, 0, 0], BerryColor.Red, ['Solitaire, FreeCell, ads every other game. What\'s not to like.'], undefined, ['Shima Unimon']);
        this.berryData[BerryType.Compress] = new Berry(BerryType.Compress, [200, 250, 300, 330, 660], 9, 0.4, 20, 2, [0, 10, 10, 0, 0], BerryColor.Purple, ['The closest thing humans have made to real magic. You won\'t believe the memory you can save.'], undefined, ['Burpmon']);
        this.berryData[BerryType.Camera] = new Berry(BerryType.Camera, [25, 30, 35, 250, 500], 11, 0.4, 25, 2, [0, 0, 10, 10, 0], BerryColor.Pink, ['Photos, humans take a lot of them. That\'s why we charge premium for this one.'], undefined, ['Burpmon']);
        this.berryData[BerryType.GPS] = new Berry(BerryType.GPS, [150, 350, 375, 400, 800], 12, 0.4, 30, 2, [0, 0, 0, 10, 10], BerryColor.Green, ['20% of the time, they\'ll use it for directions, 80% to find their house on it.']);
        this.berryData[BerryType.Shopping] = new Berry(BerryType.Shopping, [30, 60, 180, 240, 480], 13, 0.4, 35, 2, [10, 0, 0, 0, 10], BerryColor.Yellow, ['If there\'s demand, there\'s someone who has scalped it.'], undefined, ['Burpmon', 'Burpmon']);
        this.berryData[BerryType.Music] = new Berry(BerryType.Music, [40, 160, 230, 350, 700], 14, 0.3, 40, 3, [15, 0, 0, 0, 0], BerryColor.Red, ['Plays sounds that humans like. Nice of us to include all these tracks for free.'], undefined, ['Shima Unimon']);
        this.berryData[BerryType.Backup] = new Berry(BerryType.Backup, [40, 190, 210, 360, 720], 15, 0.3, 45, 3, [0, 15, 0, 0, 0], BerryColor.Purple, ['Unless you have 5 of them you don\'t have enough.'], undefined, ['Burpmon']);
        this.berryData[BerryType.Sleep] = new Berry(BerryType.Sleep, [40, 180, 240, 370, 740], 16, 0.3, 50, 3, [0, 0, 15, 0, 0], BerryColor.Pink, ['Humans use this when they have problems going to bed. It makes sounds of the sea and rain.'], undefined, ['Burpmon']);
        this.berryData[BerryType.Calendar] = new Berry(BerryType.Calendar, [40, 170, 220, 350, 700], 17, 0.3, 55, 3, [0, 0, 0, 15, 0], BerryColor.Green, ['What day is it in the human world? Use this to find out.']);
        this.berryData[BerryType.Weather] = new Berry(BerryType.Weather, [40, 200, 230, 380, 760], 18, 0.3, 60, 3, [0, 0, 0, 0, 15], BerryColor.Yellow, ['Makes mostly accurate predictions of what the weather would be like in the future.'], undefined, ['Burpmon', 'Burpmon']);
        this.berryData[BerryType.Hacking] = new Berry(BerryType.Hacking, [3000, 3200, 3400, 3600, 43200], 1, 0, 1000, 3, [10, 10, 10, 10, 0], BerryColor.Green, [
            'How did you get this? We are a legitimate business, we can\'t sell this. But you are free to use this yourself.',
            'This Disk multiplies the effects of Disks around it.',
        ], new Aura(AuraType.Boost, [1.01, 1.02, 1.03]));
        //#endregion
        //#region Third Generation
        this.berryData[BerryType.Travel] = new Berry(BerryType.Travel, [200, 1200, 4000, 5400, 10800], 20, 0.2, 500, 10, [10, 0, 10, 10, 0], BerryColor.Red, ['Apparently, teleporting isn\'t a thing in the human world, they have to use this to plan things.'], undefined, ['Shima Unimon']);
        this.berryData[BerryType.Diary] = new Berry(BerryType.Diary, [240, 2000, 3400, 6000, 12000], 21, 0.2, 525, 10, [0, 10, 0, 10, 10], BerryColor.Blue, ['Keep notes, write poems, make shopping lists. Just make sure it\'s nothing too personal.'], undefined, ['Burpmon']);
        this.berryData[BerryType.Accounting] = new Berry(BerryType.Accounting, [230, 1000, 2500, 4800, 9600], 22, 0.2, 550, 10, [10, 0, 10, 0, 10], BerryColor.Yellow, ['Lines going up and down. Trade money for hopefully more money.'], undefined, ['Burpmon', 'Burpmon']);
        this.berryData[BerryType.Video] = new Berry(BerryType.Video, [1000, 2000, 5000, 10800, 21600], 23, 0.2, 2000, 10, [10, 10, 0, 10, 0], BerryColor.Green, ['I don\'t get why they complain about unskippable 2 minutes ads for 30 seconds of video... it makes me money.']);
        this.berryData[BerryType.Alarm] = new Berry(BerryType.Alarm, [300, 3400, 5600, 7200, 14400], 24, 0.2, 600, 10, [0, 10, 10, 0, 10], BerryColor.Yellow, ['Set 5 alarms only to snooze all of them.'], undefined, ['Burpmon', 'Burpmon']);
        this.berryData[BerryType.News] = new Berry(BerryType.News, [430, 1400, 4000, 8640, 17280], 25, 0.2, 625, 10, [20, 10, 0, 0, 0], BerryColor.Red, ['You think I\'m shrewd…wait till you see what the people behind this one do to get you to click on things.'], undefined, ['Shima Unimon']);
        this.berryData[BerryType.Dictionary] = new Berry(BerryType.Dictionary, [1100, 4000, 8000, 9000, 18000], 26, 0.1, 700, 10, [0, 20, 10, 0, 0], BerryColor.Purple, ['Who am I kidding, nobody uses this. Half the words humans use aren\'t even in it.'], undefined, ['Burpmon']);
        this.berryData[BerryType.Cooking] = new Berry(BerryType.Cooking, [2400, 6500, 10000, 14400, 28800], 27, 0.1, 750, 10, [0, 0, 20, 10, 0], BerryColor.Pink, ['It will tell you how to make some of the most delicious of meals. If you bother cooking them, that is.'], undefined, ['Burpmon']);
        this.berryData[BerryType.Wallpaper] = new Berry(BerryType.Wallpaper, [2310, 5400, 9500, 12240, 24480], 28, 0.1, 800, 10, [0, 0, 0, 20, 10], BerryColor.Green, ['We can charge people for image files. Humans will buy anything if you put a timer on it.']);
        this.berryData[BerryType.Fashion] = new Berry(BerryType.Fashion, [1240, 5200, 10500, 15120, 30240], 29, 0.1, 850, 10, [10, 0, 0, 0, 20], BerryColor.Yellow, ['Humans care a lot about what they wear. They also care what others think about what they wear.'], undefined, ['Burpmon', 'Burpmon']);
        this.berryData[BerryType.Advice] = new Berry(BerryType.Advice, [2000, 7000, 12000, 15480, 30960], 30, 0.1, 900, 10, [30, 10, 0, 0, 0], BerryColor.Red, ['Have a question? You\'ll find an answer. Will it be correct? You can always ask.'], undefined, ['Shima Unimon']);
        this.berryData[BerryType.Search] = new Berry(BerryType.Search, [3000, 10000, 16400, 18000, 36000], 31, 0.1, 950, 10, [0, 30, 10, 0, 0], BerryColor.Purple, [
            'Good luck doing anything on the internet without this. Keeping track of what you search is how the internet works.',
            'It has a tendency to copy itself into nearby trays.',
        ], undefined, ['Burpmon']);
        this.berryData[BerryType.Gourmet] = new Berry(BerryType.Gourmet, [2300, 3400, 9800, 16560, 33120], 32, 0.1, 1000, 10, [0, 0, 30, 10, 0], BerryColor.Pink, ['Order food you don\'t want to make yourself and get someone else to bring it to your house.'], undefined, ['Burpmon']);
        this.berryData[BerryType.Paint] = new Berry(BerryType.Paint, [10000, 14000, 18000, 21600, 43200], 33, 0.1, 1050, 10, [0, 0, 0, 30, 10], BerryColor.Green, ['From a simple doodle to a high quality portrait, this program provides a canvas for your imagination.']);
        this.berryData[BerryType.Beauty] = new Berry(BerryType.Beauty, [5000, 9800, 14500, 19800, 39600], 20, 0.1, 1100, 10, [10, 0, 0, 0, 30], BerryColor.Purple, ['Make up and cosmetics. A business worth trillions. I had to get in on it.'], undefined, ['Burpmon']);
        //#endregion
        //#region Fourth Generation (Typed)
        this.berryData[BerryType.Broadcasting] = new Berry(BerryType.Broadcasting, [8090, 13200, 16000, 21960, 43920], 21, 0.05, 1200, 15, [15, 0, 10, 0, 0], BerryColor.Red, [
            'Listen to this popular streamer, sponsored by Tyutyumon\'s of course.',
            'It has a tendency to overwrite nearby disks.',
        ], undefined, ['Shima Unimon']);
        this.berryData[BerryType.Gossip] = new Berry(BerryType.Gossip, [490, 3600, 10800, 21600, 43200], 22, 0.05, 1300, 15, [0, 15, 0, 10, 0], BerryColor.Blue, [
            '27 Celebrities Who Went So Broke It\'s Embarrassing. Click now to see them!',
            'This Disk makes nearby Disks provide more copies than usual.',
        ], new Aura(AuraType.Harvest, [1.1, 1.2, 1.3]), ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon']);
        this.berryData[BerryType.Auction] = new Berry(BerryType.Auction, [10, 180, 900, 1800, 3600], 2, 0.05, 250, 1, [0, 0, 15, 0, 10], BerryColor.Yellow, [
            'Going once, going twice, sold, to the human with the fat wallet.',
            'Makes nearby disks complete burning faster.',
        ], new Aura(AuraType.Growth, [1.1, 1.2, 1.3]), ['Burpmon', 'Burpmon', 'Burpmon']);
        this.berryData[BerryType.Recording] = new Berry(BerryType.Recording, [3600, 7200, 16200, 28800, 57600], 24, 0.05, 1400, 15, [10, 0, 0, 15, 0], BerryColor.Green, [
            'So like, this one time, I was talking a stroll and I saw this huge like billboard with an advert for like Tyutyumon\'s…',
            'It has a tendency to expand into nearby trays.',
        ], undefined, ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon']);
        this.berryData[BerryType.Review] = new Berry(BerryType.Review, [3600, 14400, 28800, 43200, 86400], 25, 0.05, 1500, 15, [0, 10, 0, 0, 15], BerryColor.Blue, [
            '5/5 stars. Tyutyumon\'s is the best online store I\'ve ever bought from.',
            'This Disk slows the burning of nearby Disks.',
        ], new Aura(AuraType.Growth, [0.9, 0.8, 0.7]), ['Burpmon', 'Burpmon']);
        this.berryData[BerryType.Puzzle] = new Berry(BerryType.Puzzle, [5400, 10800, 25200, 36000, 72000], 26, 0.05, 1600, 15, [15, 0, 0, 10, 0], BerryColor.Red, [
            'Humans seem to enjoy filling squares with numbers for hours on end.',
            'Burning these Disks will promote Digitama growth.',
        ], new Aura(AuraType.Egg, [1.01, 1.02, 1.03]), ['Shima Unimon', 'Būmon']);
        this.berryData[BerryType.Fortune] = new Berry(BerryType.Fortune, [100, 200, 400, 600, 86400], 1, 1, 50, 1, [0, 15, 0, 0, 10], BerryColor.Green, [
            'I see spending a lot of money on Tyutyumon\'s in your future.',
            'It has a tendency to overwrite nearby disks.',
            'Due to its nature, it increases the chances of modifications near it.',
        ], new Aura(AuraType.Mutation, [1.2, 1.4, 1.6]), ['Burpmon']);
        this.berryData[BerryType.Exercise] = new Berry(BerryType.Exercise, [7200, 16200, 32400, 39600, 79200], 28, 1, 1700, 15, [10, 0, 15, 0, 0], BerryColor.Yellow, [
            'Keep track of all the days you skipped on working out with this program.',
            'Burning these Disks will increase the chances of saving failed disks.',
        ], new Aura(AuraType.Replant, [1.01, 1.02, 1.03]), ['Burpmon', 'Burpmon', 'Burpmon']);
        this.berryData[BerryType.Astrology] = new Berry(BerryType.Astrology, [9000, 12600, 16200, 19800, 39600], 29, 0.05, 1800, 15, [0, 10, 0, 15, 0], BerryColor.Blue, ['I was programmed during a full moon, that stars say that this is good for my finances.'], undefined, ['Burpmon', 'Burpmon']);
        this.berryData[BerryType.Translate] = new Berry(BerryType.Translate, [4680, 11880, 23400, 34200, 68400], 30, 0.05, 1900, 15, [0, 0, 10, 0, 15], BerryColor.Purple, [
            'Se vi povas legi ĉi tion, vi uzas unu.',
            'Due to its nature, it increases the chances of modifications near it.',
        ], new Aura(AuraType.Mutation, [1.1, 1.2, 1.3]), ['Burpmon', 'Burpmon']);
        this.berryData[BerryType.Social] = new Berry(BerryType.Social, [450, 900, 1800, 3600, 7200], 3, 0.5, 500, 15, [20, 0, 0, 0, 10], BerryColor.Green, [
            'Share your opinions with your friends. And block those who don\'t agree.',
            'It\'s toxit nature decreases the amount of disks burned on nearby trays.',
        ], new Aura(AuraType.Harvest, [0.9, 0.8, 0.7]), ['Burpmon']);
        this.berryData[BerryType.Library] = new Berry(BerryType.Library, [8600, 12960, 23040, 37800, 75600], 32, 0.05, 2000, 15, [10, 20, 0, 0, 0], BerryColor.Yellow, [
            'Find books, comics, papers. All for a small price of 70 dollars a month.',
            'This Disk decreases the chances of saving overburned disks.',
        ], new Aura(AuraType.Replant, [0.99, 0.98, 0.97]), ['Burpmon', 'Burpmon', 'Burpmon']);
        this.berryData[BerryType.Action] = new Berry(BerryType.Action, [30, 60, 120, 300, 86400], 1, 1, 25, 1, [0, 10, 20, 0, 0], BerryColor.Purple, [
            'Lootboxes are the single greatest invention since the texture file.',
            'This fast paced Disk causes other nearby Disks to last less.',
        ], new Aura(AuraType.Death, [1.25, 1.5, 2.0]), ['Burpmon', 'Burpmon']);
        this.berryData[BerryType.Phone] = new Berry(BerryType.Phone, [10800, 21600, 43200, 86400, 172800], 34, 0, 4000, 15, [0, 0, 10, 20, 0], BerryColor.Red, [
            'A call feature program.',
            'This Disk requires a lot of energy to burn, stealing away power from nearby trays.',
        ], new Aura(AuraType.Growth, [0.8, 0.6, 0.5]), ['Burpmon', 'Burpmon']);
        this.berryData[BerryType.Entertainment] = new Berry(BerryType.Entertainment, [2880, 10080, 19440, 27000, 54000], 35, 0.05, 2300, 15, [0, 0, 0, 10, 20], BerryColor.Purple, [
            'Are you familiar with the concept of memes?',
            'It has a tendency to overwrite nearby Disks.',
        ], undefined, ['Burpmon', 'Burpmon']);
        this.berryData[BerryType.Medical] = new Berry(BerryType.Medical, [7200, 16200, 32400, 64800, 129600], 36, 0.05, 2400, 15, [25, 10, 0, 0, 0], BerryColor.Green, [
            'Enter your symptoms and it will give you a rare congenital disease that matches.',
            'This Disk is very hardy, making it resistant to overwriting, and also decreasing the chance of overwriting around it.',
        ], new Aura(AuraType.Mutation, [0.5, 0.25, 0.0]), ['Burpmon']);
        this.berryData[BerryType.Slots] = new Berry(BerryType.Slots, [240, 1430, 2970, 7200, 14400], 10, 0.05, 500, 15, [0, 25, 10, 0, 0], BerryColor.Yellow, ['You win a free 100 spins!'], undefined, ['Burpmon', 'Burpmon']);
        this.berryData[BerryType.Hotel] = new Berry(BerryType.Hotel, [2410, 5040, 12600, 25200, 50400], 38, 0.05, 2500, 15, [0, 0, 25, 10, 0], BerryColor.Pink, [
            'Hotel? Tyutyumon\'s.',
            'The data of this Disk attracts wild Digimon.',
        ], new Aura(AuraType.Attract, [1.01, 1.02, 1.03]), ['Burpmon', 'Burpmon']);
        //#endregion
        //#region Fifth Generation
        this.berryData[BerryType.Virus] = new Berry(BerryType.Virus, [3960, 7920, 15840, 31680, 63360], 1, 0.05, 2600, 20, [0, 40, 10, 0, 0], BerryColor.Green, ['Why is this anti-virus program called Virus, you may ask? It\'s best not to worry about it.']);
        this.berryData[BerryType.Commentary] = new Berry(BerryType.Commentary, [3240, 8280, 13320, 27360, 54720], 1, 0.05, 2700, 20, [0, 0, 40, 10, 0], BerryColor.Red, ['Your post gathered 31 votes and 456 replies.'], undefined, ['Burpmon']);
        this.berryData[BerryType.Design] = new Berry(BerryType.Design, [4320, 8640, 16560, 33480, 66960], 1, 0.05, 2800, 20, [0, 0, 0, 40, 10], BerryColor.Yellow, [
            'Build a house or 3d print a sword.',
            'The data of these Disk attracts wild Digimon.',
        ], new Aura(AuraType.Roaming, [1.005, 1.01, 1.015]), ['Burpmon', 'Burpmon']);
        this.berryData[BerryType.Mirror] = new Berry(BerryType.Mirror, [5760, 9000, 14040, 21240, 42480], 1, 0.05, 2900, 20, [10, 0, 0, 0, 40], BerryColor.Blue, ['Now don\'t tell this to anyone but, you can\'t really make a mirror from a digital screen, but people will still try.'], undefined, ['Burpmon']);
        this.berryData[BerryType.Dream] = new Berry(BerryType.Dream, [4680, 9360, 18360, 36360, 72720], 1, 0.05, 3000, 20, [30, 30, 10, 10, 10], BerryColor.Yellow, ['A program that records dreams, through a complex series of algorithms that monitor your brainwaves.'], undefined, ['Burpmon', 'Burpmon']);
        this.berryData[BerryType.Logoff] = new Berry(BerryType.Logoff, [5040, 10080, 20160, 40320, 80640], 1, 0.05, 3100, 20, [10, 10, 30, 30, 10], BerryColor.Blue, ['You\'ve come this far, you can turn your device off now.'], undefined, ['Burpmon']);
        this.berryData[BerryType.Monitoring] = new Berry(BerryType.Monitoring, [21600, 43200, 86400, 172800, 345600], 0.5, 0, 10000, 20, [30, 10, 30, 0, 0], BerryColor.Red, ['This is for monitoring your dog when away. If you get caught spying on your neighbor it won\'t be our fault.'], undefined, ['Burpmon', 'Burpmon']);
        this.berryData[BerryType.MindControl] = new Berry(BerryType.MindControl, [21600, 43200, 86400, 172800, 345600], 0.5, 0, 10000, 20, [0, 30, 10, 30, 0], BerryColor.Purple, ['A legendary program that allows the user to control the minds of others.'], undefined, ['Burpmon']);
        this.berryData[BerryType.Simulation] = new Berry(BerryType.Simulation, [21600, 43200, 86400, 172800, 345600], 0.5, 0, 10000, 20, [0, 0, 30, 10, 30], BerryColor.Green, ['A legendary program that allows the user to create artificial life in the digital world.']);
        this.berryData[BerryType.Trashbin] = new Berry(BerryType.Trashbin, [10800, 21600, 43200, 86400, 432000], 0.5, 0, 15000, 20, [30, 0, 0, 30, 10], BerryColor.Pink, [
            'After popular demand we now offer an uninstall program. You just have to install all other programs first.',
            'It\'s data keeps other disks active for longer.',
        ], undefined, ['Burpmon', 'Burpmon']);
        this.berryData[BerryType.Gashapon] = new Berry(BerryType.Gashapon, [10800, 21600, 43200, 86400, 432000], 0.5, 0, 15000, 20, [10, 30, 0, 0, 30], BerryColor.Blue, ['Stay away from that one. This technology is too dangerous.'], undefined, ['Burpmon']);
        this.berryData[BerryType.Censored] = new Berry(BerryType.Censored, [10800, 21600, 43200, 86400, 432000], 0.5, 0, 15000, 20, [30, 10, 30, 10, 30], BerryColor.Red, ['What? This is a business. We give the people what they want.'], undefined, ['Burpmon']);
        this.berryData[BerryType.Battery] = new Berry(BerryType.Battery, [10800, 21600, 43200, 86400, 432000], 0.5, 0, 15000, 20, [30, 10, 30, 10, 30], BerryColor.Green, ['Get the most out of your battery\'s life, so you can stay on your device for longer.'], new Aura(AuraType.Shiny, [1.005, 1.01, 1.015]), ['Burpmon']);
        this.berryData[BerryType.Calculator] = new Berry(BerryType.Calculator, [10800, 21600, 43200, 86400, 604800], 0.5, 0, 15000, 20, [40, 10, 0, 0, 0], BerryColor.Purple, ['This was supposed to be a simple calculator program, but was discontinued because it contains a backdoor for the server itself.'], undefined, ['Burpmon']);
        //#endregion
        //#endregion
        //#region Mutations
        /**
         * NOTE: ONLY ADD NEW MUTATIONS AT THE END OF THE LIST. MUTATION INDEX IS USED TO STORE HINT SEEN DATA
         */
        //#region Second Generation
        // Mail
        this.mutations.push(new GrowNearBerryMutation(.02, BerryType.Games, [
            BerryType.Health,
            BerryType.Chat,
        ]));
        // Cards
        this.mutations.push(new GrowNearBerryMutation(.019, BerryType.Security, [
            BerryType.Games,
            BerryType.eBook,
        ]));
        // Compress
        this.mutations.push(new GrowNearBerryMutation(.018, BerryType.Step, [
            BerryType.Security,
            BerryType.eBook,
        ]));
        // Camera
        this.mutations.push(new GrowNearBerryMutation(.017, BerryType.eBook, [
            BerryType.Health,
            BerryType.Light,
        ]));
        // GPS
        this.mutations.push(new GrowNearBerryMutation(.016, BerryType.Health, [
            BerryType.Step,
            BerryType.Chat,
        ]));
        // Shopping
        this.mutations.push(new GrowNearBerryMutation(.015, BerryType.Light, [
            BerryType.Finance,
            BerryType.Light,
        ]));
        // Music
        this.mutations.push(new GrowNearFlavorMutation(.009, BerryType.Music, [[25, 80], [0, 5], [0, 5], [0, 5], [0, 5]], {
            hint: 'I\'ve heard that a special Disk can appear if its surroundings get too exciting!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Games]();
            },
        }));
        // Backup
        this.mutations.push(new GrowNearFlavorMutation(.008, BerryType.Backup, [[0, 5], [25, 80], [0, 5], [0, 5], [0, 5]], {
            hint: 'I\'ve heard that a special Disk can appear if its surroundings get too technical!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Security]();
            },
        }));
        // Sleep
        this.mutations.push(new GrowNearFlavorMutation(.007, BerryType.Sleep, [[0, 5], [0, 5], [25, 80], [0, 5], [0, 5]], {
            hint: 'I\'ve heard that a special Disk can appear if its surroundings get too comforting!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Health]();
            },
        }));
        // Calendar
        this.mutations.push(new GrowNearFlavorMutation(.006, BerryType.Calendar, [[0, 5], [0, 5], [0, 5], [25, 80], [0, 5]], {
            hint: 'I\'ve heard that a special Disk can appear if its surroundings get too informative!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Step]();
            },
        }));
        // Weather
        this.mutations.push(new GrowNearFlavorMutation(.005, BerryType.Weather, [[0, 5], [0, 5], [0, 5], [0, 5], [25, 80]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings get too practical!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Light]();
            },
        }));
        // Hacking
        this.mutations.push(new GrowNearBerryMutation(.001, BerryType.Hacking, [
            BerryType.Games,
            BerryType.Security,
            BerryType.Health,
            BerryType.Step,
            BerryType.Light,
            BerryType.eBook,
            BerryType.Chat,
            BerryType.Finance,
        ], {
            hint: 'I\'ve heard that there\'s a Disk that only appears when fully surrounded by unique Disks!',
        }));
        //#endregion
        //#region Third Generation
        // Travel
        this.mutations.push(new GrowNearBerryMutation(.0005, BerryType.Travel, [
            BerryType.Weather,
            BerryType.Sleep,
        ]));
        // Diary
        this.mutations.push(new GrowNearBerryMutation(.0005, BerryType.Diary, [
            BerryType.Security,
            BerryType.Games,
        ]));
        // Accounting
        this.mutations.push(new GrowNearFlavorMutation(.0005, BerryType.Accounting, [[10, 15], [0, 0], [10, 15], [0, 0], [10, 15]], {
            hint: 'I\'ve heard that a special Disk can appear if its surroundings match its data profile! If I recall, it was a little entertaining, a little comforting, and a little practical at the same time.',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Games]() &&
                    App.game.farming.unlockedBerries[BerryType.Health]() &&
                    App.game.farming.unlockedBerries[BerryType.Light]();
            },
        }));
        // Video
        this.mutations.push(new GrowNearFlavorMutation(.0004, BerryType.Video, [[15, 15], [15, 15], [0, 0], [15, 15], [0, 0]], {
            hint: 'I\'ve heard that a special Disk can appear if its surroundings match its data profile! If I recall, it was fairly exciting, technical, and informative at the same time.',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Music]() &&
                    App.game.farming.unlockedBerries[BerryType.Backup]() &&
                    App.game.farming.unlockedBerries[BerryType.Calendar]();
            },
        }));
        // Alarm
        this.mutations.push(new GrowNearBerryMutation(.0005, BerryType.Alarm, [
            BerryType.Calendar,
            BerryType.Music,
        ]));
        // News
        this.mutations.push(new EvolveNearBerryMutation(.0005, BerryType.News, BerryType.Security, [BerryType.Travel]));
        // Dictionary
        this.mutations.push(new GrowNearBerryMutation(.0003, BerryType.Dictionary, [
            BerryType.eBook,
            BerryType.Step,
            BerryType.Backup,
        ]));
        // Cooking
        this.mutations.push(new GrowNearBerryMutation(.0003, BerryType.Cooking, [
            BerryType.Health,
            BerryType.eBook,
            BerryType.Sleep,
        ]));
        // Wallpaper
        this.mutations.push(new EvolveNearBerryMutation(.0003, BerryType.Wallpaper, BerryType.Light, [BerryType.Calendar]));
        // Fashion
        this.mutations.push(new GrowNearBerryMutation(.0003, BerryType.Fashion, [BerryType.Light]));
        // Advice
        this.mutations.push(new EvolveNearFlavorMutation(.0002, BerryType.Advice, BerryType.News, [[130, 160], [0, 80], [0, 80], [0, 80], [0, 80]], {
            hint: 'I\'ve heard that a News Disk will change if its surroundings get extremely exciting!',
        }));
        // Search
        this.mutations.push(new EvolveNearFlavorMutation(.0002, BerryType.Search, BerryType.Dictionary, [[0, 80], [130, 160], [0, 80], [0, 80], [0, 80]], {
            hint: 'I\'ve heard that a Dictionary Disk will change if its surroundings get extremely technical!',
        }));
        // Search Overgrow
        this.mutations.push(new GrowNearBerryMutation(.0004, BerryType.Search, [BerryType.Search], { showHint: false }));
        // Gourmet
        this.mutations.push(new EvolveNearFlavorMutation(.0002, BerryType.Gourmet, BerryType.Cooking, [[0, 80], [0, 80], [130, 160], [0, 80], [0, 80]], {
            hint: 'I\'ve heard that a Cooking Disk will change if its surroundings get extremely comforting!',
        }));
        // Paint
        this.mutations.push(new EvolveNearFlavorMutation(.0002, BerryType.Paint, BerryType.Wallpaper, [[0, 80], [0, 80], [0, 80], [130, 160], [0, 80]], {
            hint: 'I\'ve heard that a Wallpaper Disk will change if its surroundings get extremely informative!',
        }));
        // Beauty
        this.mutations.push(new EvolveNearFlavorMutation(.0002, BerryType.Beauty, BerryType.Fashion, [[0, 80], [0, 80], [0, 80], [0, 80], [130, 160]], {
            hint: 'I\'ve heard that a Fashion Disk will change if its surroundings get extremely practical!',
        }));
        //#endregion
        //#region Fourth Generation
        // Broadcasting
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Broadcasting, [
            BerryType.Security,
            BerryType.Music,
            BerryType.News,
            BerryType.Advice,
        ]));
        // Broadcasting Parasite
        this.mutations.push(new ParasiteMutation(.0004, BerryType.Broadcasting));
        // Gossip
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Gossip, [
            BerryType.Chat,
            BerryType.Security,
            BerryType.Diary,
            BerryType.Astrology,
        ]));
        // Auction
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Auction, [
            BerryType.Light,
            BerryType.Weather,
            BerryType.Accounting,
            BerryType.Alarm,
        ]));
        // Recording
        // TODO: HLXII - Change mutation to grow spontaneously when Grass pokemon in party
        this.mutations.push(new GrowNearFlavorMutation(.0001, BerryType.Recording, [[10, 15], [0, 0], [0, 0], [15, 20], [0, 0]], {
            hint: 'I\'ve heard that a special Disk can appear if its surroundings match its data profile! If I recall, it was a little exciting and fairly informative at the same time.',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Calendar]() &&
                    App.game.farming.unlockedBerries[BerryType.Games]();
            },
        }));
        // Recording Overgrow
        this.mutations.push(new GrowNearBerryMutation(.0004, BerryType.Recording, [BerryType.Recording], { showHint: false }));
        // Review
        this.mutations.push(new EvolveNearBerryStrictMutation(.0001, BerryType.Review, BerryType.Gossip, {}, PlotStage.Seed, {
            hint: 'I\'ve heard that burning a Gossip Disk alone will cause it to change!',
        }));
        // Puzzle
        this.mutations.push(new OakMutation(.0001, BerryType.Puzzle, BerryType.Advice, OakItemType.Egg_Holder));
        // Fortune
        this.mutations.push(new OakMutation(.0001, BerryType.Fortune, BerryType.Search, OakItemType.Fancy_Cursor));
        // Fortune Parasite
        this.mutations.push(new ParasiteMutation(.0004, BerryType.Fortune));
        // Exercise
        this.mutations.push(new OakMutation(.0001, BerryType.Exercise, BerryType.Gourmet, OakItemType.Failure_Prevent));
        // Astrology
        // TODO: HLXII - Change mutation to grow spontaneously when Flying pokemon in party
        this.mutations.push(new GrowNearFlavorMutation(.0001, BerryType.Astrology, [[0, 0], [10, 15], [0, 0], [15, 20], [0, 0]], {
            hint: 'I\'ve heard that a special Disk can appear if its surroundings match its data profile! If I recall, it was a little technical and fairly informative at the same time.',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Security]() &&
                    App.game.farming.unlockedBerries[BerryType.Calendar]();
            },
        }));
        // Translate
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Translate, [
            BerryType.Backup,
            BerryType.Step,
            BerryType.Dictionary,
            BerryType.Search,
        ]));
        // Social
        let berryReqs = {};
        berryReqs[BerryType.Recording] = 8;
        this.mutations.push(new GrowNearBerryStrictMutation(.0001, BerryType.Social, berryReqs, {
            hint: 'I\'ve heard that a special Disk can appear after being surrounded by Recording Disks!',
        }));
        // Library
        this.mutations.push(new OakMutation(.0001, BerryType.Library, BerryType.Dictionary, OakItemType.Full_Battery));
        // Action
        // No mutation, will check withers
        // Phone
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Phone, [
            BerryType.Broadcasting,
            BerryType.Recording,
            BerryType.Gossip,
            BerryType.Auction,
        ]));
        // Entertainment
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Entertainment, [
            BerryType.Wallpaper,
            BerryType.Action,
            BerryType.Translate,
        ]));
        // Entertainment Parasite
        this.mutations.push(new ParasiteMutation(.0004, BerryType.Entertainment));
        // Medical
        berryReqs = {};
        berryReqs[BerryType.Exercise] = 4;
        berryReqs[BerryType.Library] = 4;
        this.mutations.push(new GrowNearBerryStrictMutation(.0001, BerryType.Medical, berryReqs, {
            hint: 'I\'ve heard that a special Disk can appear after being surrounded by Exercise and Library Disks!',
        }));
        // Slots
        berryReqs = {};
        berryReqs[BerryType.Puzzle] = 3;
        this.mutations.push(new EvolveNearBerryMinMutation(.0001, BerryType.Slots, BerryType.Puzzle, berryReqs, {
            hint: 'I\'ve heard that Puzzle Disks will turn into a different Disk if surrounded by more than two of its own kind',
        }));
        // Hotel
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Hotel, [
            BerryType.Sleep,
            BerryType.eBook,
            BerryType.Cooking,
            BerryType.Gourmet,
        ]));
        //#endregion
        //#region Fifth Generation
        // Virus
        this.mutations.push(new FieldFlavorMutation(.0003, BerryType.Virus, [0, 600, 0, 0, 0], {
            hint: 'I\'ve heard of a Disk that only appears in the most technical of setups.',
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Search](),
        }));
        // Commentary
        this.mutations.push(new FieldFlavorMutation(.0003, BerryType.Commentary, [0, 0, 600, 0, 0], {
            hint: 'I\'ve heard of a Disk that only appears in the most comforting of setups.',
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Gourmet](),
        }));
        // Design
        this.mutations.push(new FieldFlavorMutation(.0003, BerryType.Design, [0, 0, 0, 600, 0], {
            hint: 'I\'ve heard of a Disk that only appears in the most informative of setups.',
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Paint](),
        }));
        // Mirror
        this.mutations.push(new FieldFlavorMutation(.0003, BerryType.Mirror, [0, 0, 0, 0, 600], {
            hint: 'I\'ve heard of a Disk that only appears in the most practical of setups.',
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Beauty](),
        }));
        // Dream
        this.mutations.push(new GrowNearBerryMutation(.0003, BerryType.Dream, [
            BerryType.Monitoring,
            BerryType.MindControl,
        ]));
        // Logoff
        this.mutations.push(new GrowNearBerryMutation(.0003, BerryType.Logoff, [
            BerryType.Simulation,
            BerryType.Trashbin,
        ]));
        // Monitoring
        this.mutations.push(new FieldMutation(.00001, BerryType.Monitoring, BerryType.Gossip, undefined, {
            unlockReq: () => { var _a, _b; return (_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.digimonScanned[PokemonHelper.getPokemonByName('Burpmon').id](); },
        }));
        // MindControl
        this.mutations.push(new FieldMutation(.00001, BerryType.MindControl, BerryType.Exercise, undefined, {
            unlockReq: () => { var _a, _b; return (_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.digimonScanned[PokemonHelper.getPokemonByName('Burpmon').id](); },
        }));
        // Simulation
        this.mutations.push(new FieldMutation(.00001, BerryType.Simulation, BerryType.Astrology, undefined, {
            unlockReq: () => { var _a, _b; return (_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.digimonScanned[PokemonHelper.getPokemonByName('Burpmon').id](); },
        }));
        // Trashbin
        this.mutations.push(new PetayaMutation(.00001));
        // Gashapon
        this.mutations.push(new FieldMutation(.00001, BerryType.Gashapon, BerryType.Slots, undefined, {
            unlockReq: () => { var _a, _b; return (_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.digimonScanned[PokemonHelper.getPokemonByName('Burpmon').id](); },
        }));
        // Censored
        // TODO: HLXII - Add Mutation to evolve Translate when Milotic, Gardevoir, Blissey, and Togekiss in party.
        this.mutations.push(new FieldMutation(.00001, BerryType.Censored, BerryType.Hotel, undefined, {
            unlockReq: () => { var _a, _b; return (_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.digimonScanned[PokemonHelper.getPokemonByName('Burpmon').id](); },
        }));
        // Battery
        // No mutation, obtained by wandering shiny pokemon
        // Calculator
        this.mutations.push(new EnigmaMutation(.0001));
        // Calculator Mutations
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Monitoring, BerryType.Gossip, [BerryType.Calculator], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Monitoring](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.MindControl, BerryType.Exercise, [BerryType.Calculator], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.MindControl](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Simulation, BerryType.Astrology, [BerryType.Calculator], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Simulation](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Trashbin, BerryType.Translate, [BerryType.Calculator], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Trashbin](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Gashapon, BerryType.Slots, [BerryType.Calculator], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Gashapon](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Censored, BerryType.Hotel, [BerryType.Calculator], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Censored](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Battery, BerryType.Phone, [BerryType.Calculator], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Battery](),
        }));
        // Empty Mutations for hints
        // Action
        this.mutations.push(new BlankMutation(0, BerryType.Action, {
            hint: 'I\'ve heard of a Disk that only appears after a Disk has failed, but is blocked by Entertainment Disks.',
            unlockReq: () => App.game.farming.highestUnlockedBerry() >= BerryType.Broadcasting,
        }));
        // Battery
        this.mutations.push(new BlankMutation(0, BerryType.Battery, {
            hint: 'I\'ve heard of a Disk that only appears after a Dot Digimon wanders near open trays.',
            unlockReq: () => App.game.farming.highestUnlockedBerry() >= BerryType.Broadcasting,
        }));
        //#endregion
        //#endregion
    }
    getGrowthMultiplier() {
        let multiplier = 1;
        multiplier *= App.game.oakItems.calculateBonus(OakItemType.Megabyte) * FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.H_Wood_Spirit);
        return multiplier;
    }
    getReplantMultiplier() {
        let multiplier = 1;
        multiplier *= App.game.oakItems.calculateBonus(OakItemType.Megabyte) * FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.H_Wood_Spirit);
        return multiplier;
    }
    getMutationMultiplier() {
        let multiplier = 1;
        multiplier *= App.game.oakItems.calculateBonus(OakItemType.Demo_Disk);
        return multiplier;
    }
    update(delta) {
        const timeToReduce = delta;
        const notifications = new Set();
        let change = false;
        // Handle updating auras
        if (this.queuedAuraReset >= 0) {
            this.queuedAuraReset -= 1;
            if (this.queuedAuraReset === 0) {
                this.resetAuras();
            }
        }
        // Updating Berries
        this.plotList.forEach(plot => {
            if (plot.update(timeToReduce)) {
                change = true;
            }
            if (plot.notifications) {
                plot.notifications.forEach(n => notifications.add(n));
                plot.notifications = [];
            }
        });
        // Running Mutations
        this.mutationCounter += GameConstants.TICK_TIME;
        if (this.mutationCounter >= GameConstants.MUTATION_TICK) {
            this.mutations.forEach(mutation => {
                if (mutation.mutate()) {
                    GameHelper.incrementObservable(App.game.statistics.totalDisksModified, 1);
                    notifications.add(FarmNotificationType.Mutated);
                    change = true;
                }
            });
            this.mutationCounter = 0;
        }
        // Wandering Pokemon
        this.wanderCounter += GameConstants.TICK_TIME;
        let wanderPokemon;
        if (this.wanderCounter >= GameConstants.WANDER_TICK) {
            for (let i = 0; i < App.game.farming.plotList.length; i++) {
                const plot = App.game.farming.plotList[i];
                wanderPokemon = plot.generateWanderPokemon();
                if (wanderPokemon !== undefined) {
                    // TODO: HLXII Handle other bonus (DT?)
                    notifications.add(FarmNotificationType.Wander);
                    break;
                }
            }
            this.wanderCounter = 0;
        }
        // Handle queueing aura reset
        if (change) {
            this.queuedAuraReset = 2;
        }
        if (notifications.size) {
            notifications.forEach((n) => this.handleNotification(n, wanderPokemon));
        }
        this.farmHands.tick();
    }
    handleNotification(farmNotiType, wander) {
        let message = '';
        let type = NotificationConstants.NotificationOption.success;
        let sound = NotificationConstants.NotificationSound.Farming.ready_to_harvest;
        let setting = NotificationConstants.NotificationSetting.Farming.ready_to_harvest;
        switch (farmNotiType) {
            case FarmNotificationType.Ripe:
                message = 'A Disk is ready to collect!';
                break;
            case FarmNotificationType.AboutToWither:
                message = 'A Disk plant is about to fail!';
                type = NotificationConstants.NotificationOption.warning;
                sound = NotificationConstants.NotificationSound.Farming.berry_wither;
                setting = NotificationConstants.NotificationSetting.Farming.about_to_wither;
                break;
            case FarmNotificationType.Withered:
                message = 'A Disk plant has failed!';
                type = NotificationConstants.NotificationOption.warning;
                sound = NotificationConstants.NotificationSound.Farming.berry_wither;
                setting = NotificationConstants.NotificationSetting.Farming.berry_withered;
                break;
            case FarmNotificationType.Mutated:
                message = 'A Disk plant has modified!';
                sound = NotificationConstants.NotificationSound.Farming.berry_mutated;
                setting = NotificationConstants.NotificationSetting.Farming.berry_mutated;
                break;
            case FarmNotificationType.Replanted:
                message = 'A Disk has been replaced!';
                sound = NotificationConstants.NotificationSound.Farming.berry_replanted;
                setting = NotificationConstants.NotificationSetting.Farming.berry_replanted;
                break;
            case FarmNotificationType.Dropped:
                message = 'A Disk has been ejected!';
                sound = NotificationConstants.NotificationSound.Farming.berry_dropped;
                setting = NotificationConstants.NotificationSetting.Farming.berry_dropped;
                break;
            case FarmNotificationType.MulchRanOut:
                message = 'A tray has run out of boost!';
                type = NotificationConstants.NotificationOption.warning;
                sound = NotificationConstants.NotificationSound.Farming.mulch_ran_out;
                setting = NotificationConstants.NotificationSetting.Farming.mulch_ran_out;
                break;
            case FarmNotificationType.Wander:
                const pokemon = (wander === null || wander === void 0 ? void 0 : wander.shiny) ? `shiny ${wander === null || wander === void 0 ? void 0 : wander.pokemon}` : wander === null || wander === void 0 ? void 0 : wander.pokemon;
                message = `A wild ${pokemon} has wandered to the shop!`;
                type = (wander === null || wander === void 0 ? void 0 : wander.shiny) ? NotificationConstants.NotificationOption.warning : NotificationConstants.NotificationOption.success;
                sound = NotificationConstants.NotificationSound.Farming.wandering_pokemon;
                setting = NotificationConstants.NotificationSetting.Farming.wandering_pokemon;
                break;
        }
        Notifier.notify({
            message,
            type,
            sound,
            setting,
        });
    }
    resetAuras() {
        this.externalAuras[AuraType.Attract](1);
        this.externalAuras[AuraType.Egg](1);
        this.externalAuras[AuraType.Shiny](1);
        this.externalAuras[AuraType.Roaming](1);
        this.plotList.forEach(plot => plot.clearAuras());
        // Handle Boost Auras first
        this.plotList.forEach((plot, idx) => {
            var _a, _b;
            if (((_a = plot.berryData) === null || _a === void 0 ? void 0 : _a.aura) && ((_b = plot.berryData) === null || _b === void 0 ? void 0 : _b.aura.auraType) === AuraType.Boost) {
                plot.emitAura(idx);
            }
        });
        // Handle rest of Auras
        this.plotList.forEach((plot, idx) => {
            var _a, _b;
            if (!((_a = plot.berryData) === null || _a === void 0 ? void 0 : _a.aura) || ((_b = plot.berryData) === null || _b === void 0 ? void 0 : _b.aura.auraType) !== AuraType.Boost) {
                plot.emitAura(idx);
            }
        });
    }
    unlockPlot(index) {
        if (this.allPlotsUnlocked()) {
            return;
        }
        if (this.canBuyPlot(index)) {
            const berryData = this.plotBerryCost(index);
            GameHelper.incrementObservable(this.berryList[berryData.type], -berryData.amount);
            const cost = this.plotFPCost(index);
            App.game.wallet.loseAmount(new Amount(cost, GameConstants.Currency.farmPoint));
            this.plotList[index].isUnlocked = true;
        }
    }
    allPlotsUnlocked() {
        return this.plotList.every(plot => plot.isUnlocked);
    }
    canBuyPlot(index) {
        const berryData = this.plotBerryCost(index);
        if (App.game.farming.berryList[berryData.type]() < berryData.amount) {
            return false;
        }
        const cost = this.plotFPCost(index);
        if (!App.game.wallet.hasAmount(new Amount(cost, GameConstants.Currency.farmPoint))) {
            return false;
        }
        return true;
    }
    plotFPCost(index) {
        const berryType = Farming.unlockMatrix[index];
        return 10 * Math.floor(Math.pow(berryType + 1, 2));
    }
    plotBerryCost(index) {
        const berryType = Farming.unlockMatrix[index];
        return { type: berryType, amount: 10 * (berryType + 1) };
    }
    //#endregion
    plant(index, berry, suppressResetAura = false) {
        const plot = this.plotList[index];
        if (!plot.isEmpty() || !plot.isUnlocked || !this.hasBerry(berry)) {
            return;
        }
        GameHelper.incrementObservable(this.berryList[berry], -1);
        plot.plant(berry);
        if (!suppressResetAura) {
            this.resetAuras();
        }
    }
    plantAll(berry) {
        this.plotList.forEach((plot, index) => {
            this.plant(index, berry, true);
        });
        this.resetAuras();
    }
    /**
     * Harvest a plot at the given index
     * @param index The index of the plot to harvest
     */
    harvest(index, suppressResetAura = false) {
        const plot = this.plotList[index];
        if (plot.berry === BerryType.None || plot.stage() != PlotStage.Berry) {
            return;
        }
        App.game.wallet.gainFarmPoints(this.berryData[plot.berry].farmValue);
        const amount = plot.harvestAmount();
        this.gainBerry(plot.berry, amount);
        App.game.oakItems.use(OakItemType.Megabyte, this.berryData[plot.berry].exp);
        GameHelper.incrementObservable(App.game.statistics.totalManualBurns, 1);
        player.lowerItemMultipliers(MultiplierDecreaser.Berry, this.berryData[plot.berry].exp);
        plot.die(true);
        if (!suppressResetAura) {
            this.resetAuras();
        }
    }
    /**
     * Try to harvest all plots
     */
    harvestAll() {
        this.plotList.forEach((plot, index) => {
            this.harvest(index, true);
        });
        this.resetAuras();
    }
    /**
     * Handles using the Berry Shovel to remove a Berry plant
     * @param index The plot index
     */
    shovel(index) {
        const plot = this.plotList[index];
        if (!plot.isUnlocked) {
            return;
        }
        if (plot.isEmpty()) {
            return;
        }
        if (plot.stage() == PlotStage.Berry) {
            this.harvest(index);
            return;
        }
        if (this.shovelAmt() <= 0) {
            return;
        }
        plot.die(true);
        GameHelper.incrementObservable(this.shovelAmt, -1);
        GameHelper.incrementObservable(App.game.statistics.totalDiscardsUsed, 1);
        this.resetAuras();
    }
    /**
     * Handles using the Mulch Shovel to remove mulch from a plot
     * @param index The plot index
     */
    shovelMulch(index) {
        const plot = this.plotList[index];
        if (!plot.isUnlocked) {
            return;
        }
        if (this.mulchShovelAmt() <= 0) {
            return;
        }
        if (plot.clearMulch()) {
            GameHelper.incrementObservable(this.mulchShovelAmt, -1);
            GameHelper.incrementObservable(App.game.statistics.totalDiscardsUsed, 1);
        }
        this.resetAuras();
    }
    /**
     * Adds mulch to a plot
     * @param index The plot index
     * @param mulch The MulchType to be added
     * @param amount The amount of mulch to apply. Defaults to 1
     */
    addMulch(index, mulch, amount = 1) {
        const plot = this.plotList[index];
        if (!this.canMulch(index, mulch)) {
            return;
        }
        amount = Math.min(this.mulchList[mulch](), amount);
        GameHelper.incrementObservable(this.mulchList[mulch], -amount);
        GameHelper.incrementObservable(App.game.statistics.totalBoostsUsed, amount);
        GameHelper.incrementObservable(App.game.statistics.boostsUsed[mulch], amount);
        plot.mulch = +mulch;
        plot.mulchTimeLeft += GameConstants.MULCH_USE_TIME * amount;
    }
    /**
     * Attempts to add mulch to all plots
     * @param mulch The MulchType to be added
     * @param amount The amount of mulch to apply to each plot. Defaults to 1
     */
    mulchAll(mulch, amount = 1) {
        const mulchPlots = this.plotList.filter((_, index) => this.canMulch(index, mulch));
        amount *= mulchPlots.length;
        amount = Math.min(this.mulchList[mulch](), amount);
        const sharedMulch = Math.floor(amount / mulchPlots.length);
        if (sharedMulch <= 0) {
            return;
        }
        this.plotList.forEach((_, index) => {
            this.addMulch(index, mulch, sharedMulch);
        });
    }
    canMulch(index, mulch) {
        const plot = this.plotList[index];
        if (!plot.isUnlocked || !this.hasMulch(mulch)) {
            return false;
        }
        if (plot.mulch != MulchType.None && plot.mulch != mulch) {
            return false;
        }
        return true;
    }
    /**
     * Gives the player a random Berry from the first 8 types
     * @param amount Amount of berries to give. Defaults to 1.
     * @param disableNotification Set to true to not notify the player. Defaults to false.
     */
    gainRandomBerry(amount = 1, disableNotification = false) {
        const berry = GameHelper.getIndexFromDistribution(GameConstants.BerryDistribution);
        if (!disableNotification) {
            Notifier.notify({
                message: `You got a ${BerryType[berry]} disk!`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Items.route_item_found,
            });
        }
        this.gainBerry(berry, amount, false);
    }
    gainBerry(berry, amount = 1, farming = true) {
        GameHelper.incrementObservable(this.berryList[berry], Math.floor(amount));
        if (amount > 0) {
            this.unlockBerry(berry);
            GameHelper.incrementObservable(App.game.statistics.totalDisksObtained, amount);
            GameHelper.incrementObservable(App.game.statistics.disksObtained[berry], amount);
            if (farming === true) {
                GameHelper.incrementObservable(App.game.statistics.totalDisksBurned, amount);
                GameHelper.incrementObservable(App.game.statistics.disksBurned[berry], amount);
            }
        }
    }
    hasBerry(berry) {
        return this.berryList[berry]() > 0;
    }
    hasMulch(mulch) {
        return this.mulchList[mulch]() > 0;
    }
    canAccess() {
        return MapHelper.accessToRoute(14, 0) && App.game.keyItems.hasKeyItem(KeyItemType.Employee_Pass);
    }
    unlockBerry(berry) {
        if (!this.unlockedBerries[berry]()) {
            Notifier.notify({
                message: `You've discovered a ${BerryType[berry]} Disk!`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Items.route_item_found,
            });
            this.unlockedBerries[berry](true);
        }
    }
    /**
     * Checks whether a Berry plant exists on the farm
     * @param berry The Berry type
     * @param stage The stage of the Berry plant. Defaults to PlotStage.Berry
     */
    berryInFarm(berry, stage = PlotStage.Berry) {
        return this.plotList.some(plot => plot.berry == berry && plot.stage() >= stage);
    }
    toJSON() {
        return {
            berryList: this.berryList.map(ko.unwrap),
            unlockedBerries: this.unlockedBerries.map(ko.unwrap),
            mulchList: this.mulchList.map(ko.unwrap),
            plotList: this.plotList.map(plot => plot.toJSON()),
            shovelAmt: this.shovelAmt(),
            mulchShovelAmt: this.mulchShovelAmt(),
            mutations: this.mutations.map(mutation => mutation.toJSON()),
            farmHands: this.farmHands.toJSON(),
        };
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        const savedBerries = json['berryList'];
        if (savedBerries == null) {
            this.berryList = this.defaults.berryList.map((v) => ko.observable(v));
        }
        else {
            savedBerries.forEach((value, index) => {
                this.berryList[index](value);
            });
        }
        const savedUnlockedBerries = json['unlockedBerries'];
        if (savedUnlockedBerries == null) {
            this.unlockedBerries = this.defaults.unlockedBerries.map((v) => ko.observable(v));
        }
        else {
            savedUnlockedBerries.forEach((value, index) => {
                this.unlockedBerries[index](value);
            });
        }
        const savedMulches = json['mulchList'];
        if (savedMulches == null) {
            this.mulchList = this.defaults.mulchList.map((v) => ko.observable(v));
        }
        else {
            savedMulches.forEach((value, index) => {
                this.mulchList[index](value);
            });
        }
        const savedPlots = json['plotList'];
        if (savedPlots == null) {
            this.plotList = this.defaults.plotList;
        }
        else {
            savedPlots.forEach((value, index) => {
                const plot = new Plot(false, BerryType.None, 0, MulchType.None, 0);
                plot.fromJSON(value);
                this.plotList[index] = plot;
            });
        }
        const shovelAmt = json['shovelAmt'];
        if (shovelAmt == null) {
            this.shovelAmt = ko.observable(this.defaults.shovelAmt);
        }
        else {
            this.shovelAmt(shovelAmt);
        }
        const mulchShovelAmt = json['mulchShovelAmt'];
        if (mulchShovelAmt == null) {
            this.mulchShovelAmt = ko.observable(this.defaults.mulchShovelAmt);
        }
        else {
            this.mulchShovelAmt(mulchShovelAmt);
        }
        const mutations = json['mutations'];
        if (mutations) {
            this.mutations.forEach((mutation, i) => mutation.fromJSON(mutations[i]));
        }
        this.farmHands.fromJSON(json.farmHands);
    }
    static getGeneration(gen) {
        const genBounds = Farming.genBounds;
        const minBound = genBounds[gen - 1] || 0;
        const maxBound = genBounds[gen] || Infinity;
        return App.game.farming.berryData.filter(berry => berry.type >= minBound && berry.type < maxBound).map(berry => berry.type);
    }
    static getColor(color) {
        return App.game.farming.berryData.filter(berry => berry.color === color).map(berry => berry.type);
    }
}
//#region Plot Unlocking
Farming.unlockMatrix = [
    BerryType.Diary, BerryType.Sleep, BerryType.Games, BerryType.Health, BerryType.Accounting,
    BerryType.Backup, BerryType.Light, BerryType.Games, BerryType.eBook, BerryType.Calendar,
    BerryType.eBook, BerryType.Step, BerryType.None, BerryType.Security, BerryType.Security,
    BerryType.Travel, BerryType.Finance, BerryType.Health, BerryType.Chat, BerryType.Light,
    BerryType.Alarm, BerryType.Music, BerryType.Step, BerryType.Weather, BerryType.Video,
];
Farming.genBounds = [8, 20, 35, 53, Infinity];
class Plot {
    constructor(isUnlocked, berry, age, mulch, mulchTimeLeft) {
        this.saveKey = '';
        this.defaults = {
            isUnlocked: false,
            berry: BerryType.None,
            age: 0,
            mulch: MulchType.None,
            mulchTimeLeft: 0,
        };
        this._isUnlocked = ko.observable(isUnlocked);
        this._berry = ko.observable(berry).extend({ numeric: 0 });
        this._lastPlanted = ko.observable(berry).extend({ numeric: 0 });
        this._age = ko.observable(age).extend({ numeric: 3 });
        this._mulch = ko.observable(mulch).extend({ numeric: 0 });
        this._mulchTimeLeft = ko.observable(mulchTimeLeft).extend({ numeric: 3 });
        this._auras = [];
        this._auras[AuraType.Growth] = ko.observable(1);
        this._auras[AuraType.Harvest] = ko.observable(1);
        this._auras[AuraType.Mutation] = ko.observable(1);
        this._auras[AuraType.Replant] = ko.observable(1);
        this._auras[AuraType.Death] = ko.observable(1);
        this._auras[AuraType.Boost] = ko.observable(1);
        this.formattedStageTimeLeft = ko.pureComputed(() => {
            if (this.berry === BerryType.None) {
                return '';
            }
            const growthTime = this.berryData.growthTime.find(t => this.age < t);
            const timeLeft = Math.ceil(growthTime - this.age);
            const growthMultiplier = App.game.farming.getGrowthMultiplier() * this.getGrowthMultiplier();
            return GameConstants.formatTime(timeLeft / growthMultiplier);
        });
        this.formattedTimeLeft = ko.pureComputed(() => {
            if (this.berry === BerryType.None) {
                return '';
            }
            let timeLeft = 0;
            if (this.age < this.berryData.growthTime[3]) {
                timeLeft = Math.ceil(this.berryData.growthTime[3] - this.age);
            }
            else {
                timeLeft = Math.ceil(this.berryData.growthTime[4] - this.age);
            }
            const growthMultiplier = App.game.farming.getGrowthMultiplier() * this.getGrowthMultiplier();
            return GameConstants.formatTime(timeLeft / growthMultiplier);
        });
        this.formattedMulchTimeLeft = ko.pureComputed(() => {
            if (this.mulch === MulchType.None) {
                return '';
            }
            return GameConstants.formatTime(this.mulchTimeLeft);
        });
        this.auraGrowth = ko.pureComputed(() => {
            return this._auras[AuraType.Growth]();
        });
        this.auraHarvest = ko.pureComputed(() => {
            return this._auras[AuraType.Harvest]();
        });
        this.auraMutation = ko.pureComputed(() => {
            return this._auras[AuraType.Mutation]();
        });
        this.auraReplant = ko.pureComputed(() => {
            return this._auras[AuraType.Replant]();
        });
        this.auraDeath = ko.pureComputed(() => {
            return this._auras[AuraType.Death]();
        });
        this.auraBoost = ko.pureComputed(() => {
            return this._auras[AuraType.Boost]();
        });
        this.formattedAuras = ko.pureComputed(() => {
            const auraStr = [];
            if (this.auraGrowth() !== 1) {
                auraStr.push(`Growth: ${this.auraGrowth().toFixed(2)}x`);
            }
            if (this.auraHarvest() !== 1) {
                auraStr.push(`Harvest: ${this.auraHarvest().toFixed(2)}x`);
            }
            if (this.auraMutation() !== 1) {
                auraStr.push(`Mutation: ${this.auraMutation().toFixed(2)}x`);
            }
            if (this.auraReplant() !== 1) {
                auraStr.push(`Replant: ${this.auraReplant().toFixed(2)}x`);
            }
            if (this.auraDeath() !== 1) {
                auraStr.push(`Death: ${this.auraDeath().toFixed(2)}x`);
            }
            if (this.auraBoost() !== 1) {
                auraStr.push(`Boost: ${this.auraBoost().toFixed(2)}x`);
            }
            return auraStr.join('<br/>');
        });
        this.isEmpty = ko.pureComputed(() => {
            return this.berry === BerryType.None;
        });
        this.stage = ko.pureComputed(() => {
            if (this.berry === BerryType.None) {
                return PlotStage.Seed;
            }
            return this.berryData.growthTime.findIndex(t => this.age <= t);
        });
        this.tooltip = ko.pureComputed(() => {
            const tooltip = [];
            // Time
            if (this.berry !== BerryType.None) {
                tooltip.push(`<u>${BerryType[this.berry]}</u>`);
                // Trashbin Effect
                if (App.game.farming.berryInFarm(BerryType.Trashbin) && this.berry !== BerryType.Trashbin && this.stage() == PlotStage.Berry) {
                    tooltip.push('∞ until death');
                    // Normal Time
                }
                else {
                    const timeType = Settings.getSetting('farmDisplay').observableValue();
                    if (timeType === 'nextStage') {
                        const formattedTime = this.formattedStageTimeLeft();
                        switch (this.stage()) {
                            case PlotStage.Seed:
                                tooltip.push(`${formattedTime} until sprout`);
                                break;
                            case PlotStage.Sprout:
                                tooltip.push(`${formattedTime} until grown`);
                                break;
                            case PlotStage.Taller:
                                tooltip.push(`${formattedTime} until bloom`);
                                break;
                            case PlotStage.Bloom:
                                tooltip.push(`${formattedTime} until ripe`);
                                break;
                            case PlotStage.Berry:
                                tooltip.push(`${formattedTime} until death`);
                                break;
                        }
                    }
                    else {
                        const formattedTime = this.formattedTimeLeft();
                        switch (this.stage()) {
                            case PlotStage.Seed:
                            case PlotStage.Sprout:
                            case PlotStage.Taller:
                            case PlotStage.Bloom:
                                tooltip.push(`${formattedTime} until ripe`);
                                break;
                            case PlotStage.Berry:
                                tooltip.push(`${formattedTime} until death`);
                                break;
                        }
                    }
                }
            }
            // Aura
            if (this.stage() >= PlotStage.Taller && this.berryData.aura) {
                const berryAuraValue = this.berryData.aura.getAuraValue(this.stage());
                const lumAuraValue = this._auras[AuraType.Boost]();
                tooltip.push('<u>Aura Emitted:</u>');
                const emittedAura = (berryAuraValue >= 1) ? (berryAuraValue * lumAuraValue) : (berryAuraValue / lumAuraValue);
                tooltip.push(`${AuraType[this.berryData.aura.auraType]}: ${emittedAura.toFixed(2)}x`);
            }
            const auraStr = this.formattedAuras();
            if (auraStr) {
                tooltip.push('<u>Aura Received:</u>');
                tooltip.push(auraStr);
            }
            // Mulch
            if (this.mulch !== MulchType.None) {
                const mulchTime = this.formattedMulchTimeLeft();
                tooltip.push('<u>Mulch</u>');
                tooltip.push(`${MulchType[this.mulch].replace('_Mulch', '')} : ${mulchTime}`);
            }
            return tooltip.join('<br/>');
        });
        this.notifications = [];
    }
    /**
     * Handles updating the berry plant
     * @param seconds Number of seconds to add to the plants age
     * @returns Whether the plot stage has changed this update
     */
    update(seconds) {
        // Updating Berry
        let change = false;
        if (this.berry !== BerryType.None) {
            const growthTime = seconds * App.game.farming.getGrowthMultiplier() * this.getGrowthMultiplier();
            const oldAge = this.age;
            this.age += growthTime;
            // Checking for Trashbin Berries
            if (App.game.farming.berryInFarm(BerryType.Trashbin) && this.berry !== BerryType.Trashbin) {
                this.age = Math.min(this.age, this.berryData.growthTime[3] + 1);
            }
            const updatedStage = this.stageUpdated(oldAge, this.age);
            if (updatedStage !== PlotStage.Seed) {
                change = true;
            }
            if (updatedStage === PlotStage.Berry) {
                this.notifications.push(FarmNotificationType.Ripe);
                change = true;
            }
            if (!this._hasWarnedAboutToWither && this.age + 15 > this.berryData.growthTime[4]) {
                this.notifications.push(FarmNotificationType.AboutToWither);
                this._hasWarnedAboutToWither = true;
            }
            if (this.age > this.berryData.growthTime[4]) {
                this.die();
                change = true;
            }
        }
        // Updating Mulch
        if (this.mulch !== MulchType.None) {
            this.mulchTimeLeft = Math.max(this.mulchTimeLeft - seconds, 0);
            if (this.mulchTimeLeft === 0) {
                this.notifications.push(FarmNotificationType.MulchRanOut);
                this.mulch = MulchType.None;
            }
        }
        return change;
    }
    stageUpdated(oldAge, newAge) {
        const oldStage = this.berryData.growthTime.findIndex(t => oldAge < t);
        const newStage = this.berryData.growthTime.findIndex(t => newAge < t);
        if (oldStage !== newStage) {
            return newStage;
        }
        return PlotStage.Seed;
    }
    /**
     * Handles planting a berry on the plot
     * @param berry The BerryType
     */
    plant(berry) {
        this.berry = berry;
        this.lastPlanted = berry;
        this.age = 0;
        this.notifications = [];
        this._hasWarnedAboutToWither = false;
    }
    /**
     * Returns how many berries will be harvested
     */
    harvestAmount() {
        return this.berryData.harvestAmount * this.getHarvestMultiplier();
    }
    /**
     * Handles killing the berry plant
     * @param harvested Whether this death was due to the player harvesting manually, or by withering
     */
    die(harvested = false) {
        if (!harvested) {
            // Withered Berry plant drops half of the berries
            const amount = Math.ceil(this.harvestAmount() / 2);
            if (amount) {
                App.game.farming.gainBerry(this.berry, amount);
                this.notifications.push(FarmNotificationType.Dropped);
            }
            // Check if berry replants itself
            const replantChance = this.berryData.replantRate * App.game.farming.getReplantMultiplier() * this.getReplantMultiplier();
            if (Rand.chance(replantChance)) {
                this.age = 0;
                this.notifications.push(FarmNotificationType.Replanted);
                App.game.oakItems.use(OakItemType.Failure_Prevent);
                GameHelper.incrementObservable(App.game.statistics.totalDisksReplaced, 1);
                return;
            }
            this.notifications.push(FarmNotificationType.Withered);
            // Check for Action berry mutation/replant chance
            if (App.game.farming.highestUnlockedBerry() >= BerryType.Broadcasting) {
                if (!App.game.farming.berryInFarm(BerryType.Entertainment)) {
                    if (Rand.chance(0.05)) {
                        this.notifications.push(FarmNotificationType.Mutated);
                        this.berry = BerryType.Action;
                        this.age = 0;
                        App.game.farming.unlockBerry(BerryType.Action);
                        return;
                    }
                }
            }
        }
        // Reset plant
        this.berry = BerryType.None;
        this.age = 0;
    }
    generateWanderPokemon() {
        // Check if plot is eligible for wandering Pokemon
        if (!this.isUnlocked || this.berry === BerryType.None || this.stage() !== PlotStage.Berry) {
            return undefined;
        }
        // Chance to generate wandering Pokemon
        if (Rand.chance(GameConstants.WANDER_RATE * App.game.farming.externalAuras[AuraType.Attract]())) {
            // Get a random Pokemon from the list of possible encounters
            const availablePokemon = this.berryData.wander.filter(pokemon => PokemonHelper.calcNativeRegion(pokemon) <= player.highestRegion());
            const wanderPokemon = Rand.fromArray(availablePokemon);
            const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_FARM);
            // Add to log book
            const pokemonStr = shiny ? `shiny ${wanderPokemon}` : wanderPokemon;
            App.game.logbook.newLog(LogBookTypes.WANDER, `A wild ${pokemonStr} has wandered onto the farm!`);
            // Gain Pokemon
            App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(wanderPokemon).id, shiny, true);
            // Check for Battery berry generation
            if (shiny) {
                const emptyPlots = App.game.farming.plotList.filter(plot => plot.isUnlocked && plot.isEmpty());
                // No Battery generation if no empty plots :(
                if (emptyPlots.length) {
                    const chosenPlot = emptyPlots[Rand.floor(emptyPlots.length)];
                    chosenPlot.plant(BerryType.Battery);
                    App.game.farming.unlockBerry(BerryType.Battery);
                }
            }
            return { pokemon: wanderPokemon, shiny: shiny };
        }
        return undefined;
    }
    /**
     * Gets the growth multiplier for this plot
     */
    getGrowthMultiplier() {
        let multiplier = 1;
        if (this.mulch === MulchType.Speed_Boost) {
            multiplier = GameConstants.BOOST_MULCH_MULTIPLIER;
        }
        else if (this.mulch === MulchType.Quality_Boost) {
            multiplier = GameConstants.AMAZE_MULCH_GROWTH_MULTIPLIER;
        }
        multiplier *= this._auras[AuraType.Growth]();
        // Handle Death Aura
        if (this.stage() == PlotStage.Berry && this.berry != BerryType.Action) {
            multiplier *= this._auras[AuraType.Death]();
        }
        return multiplier;
    }
    /**
     * Gets the harvest multiplier for this plot
     */
    getHarvestMultiplier() {
        let multiplier = 1;
        if (this.mulch === MulchType.Space_Boost) {
            multiplier = GameConstants.RICH_MULCH_MULTIPLIER;
        }
        else if (this.mulch === MulchType.Quality_Boost) {
            multiplier = GameConstants.AMAZE_MULCH_PRODUCE_MULTIPLIER;
        }
        multiplier *= this._auras[AuraType.Harvest]();
        return multiplier;
    }
    /**
     * Gets the replant multiplier for this plot
     */
    getReplantMultiplier() {
        let multiplier = 1;
        if (this.mulch === MulchType.Space_Boost) {
            multiplier = GameConstants.RICH_MULCH_MULTIPLIER;
        }
        else if (this.mulch === MulchType.Quality_Boost) {
            multiplier = GameConstants.AMAZE_MULCH_PRODUCE_MULTIPLIER;
        }
        multiplier *= this._auras[AuraType.Replant]();
        return multiplier;
    }
    /**
     * Gets the mutation multiplier for this plot
     */
    getMutationMultiplier() {
        let multiplier = 1;
        if (this.mulch === MulchType.Surprise_Boost) {
            multiplier = GameConstants.SURPRISE_MULCH_MULTIPLIER;
        }
        else if (this.mulch === MulchType.Quality_Boost) {
            multiplier = GameConstants.AMAZE_MULCH_MUTATE_MULTIPLIER;
        }
        multiplier *= this._auras[AuraType.Mutation]();
        return multiplier;
    }
    /**
     * Handles adding a multiplicative aura to the Plot
     * @param auraType The AuraType
     * @param multiplier The multiplier to modify the current aura by
     */
    addAura(auraType, multiplier) {
        const currentMultiplier = this._auras[auraType]();
        this._auras[auraType](currentMultiplier * multiplier);
    }
    /**
     * Handles setting the value of an aura to the Plot
     * @param auraType The AuraType
     * @param value The value to be set
     */
    setAura(auraType, value) {
        // Death Aura doesn't apply to Action
        if (auraType == AuraType.Death && this.berry === BerryType.Action) {
            return;
        }
        // Boost Aura doesn't apply to Hacking
        if (auraType == AuraType.Boost && this.berry === BerryType.Hacking) {
            return;
        }
        this._auras[auraType](value);
    }
    clearAuras() {
        this._auras.forEach(aura => aura(1));
    }
    emitAura(index) {
        var _a;
        if (this.berry === BerryType.None) {
            return;
        }
        (_a = this.berryData.aura) === null || _a === void 0 ? void 0 : _a.emitAura(index);
    }
    /**
     * returns true if the plot had mulch.
     */
    clearMulch() {
        const wasMulched = this.mulch != MulchType.None;
        if (wasMulched) {
            this.mulch = MulchType.None;
            this.mulchTimeLeft = 0;
        }
        return wasMulched;
    }
    fromJSON(json) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (json == null) {
            return;
        }
        this.isUnlocked = (_a = json['isUnlocked']) !== null && _a !== void 0 ? _a : this.defaults.isUnlocked;
        this.berry = (_b = json['berry']) !== null && _b !== void 0 ? _b : this.defaults.berry;
        this.age = (_c = json['age']) !== null && _c !== void 0 ? _c : this.defaults.age;
        this.mulch = (_d = json['mulch']) !== null && _d !== void 0 ? _d : this.defaults.mulch;
        this.mulchTimeLeft = (_e = json['mulchTimeLeft']) !== null && _e !== void 0 ? _e : this.defaults.mulchTimeLeft;
        this.lastPlanted = (_g = (_f = json['lastPlanted']) !== null && _f !== void 0 ? _f : json['berry']) !== null && _g !== void 0 ? _g : this.defaults.berry;
    }
    toJSON() {
        return {
            isUnlocked: this.isUnlocked,
            berry: this.berry,
            lastPlanted: this.lastPlanted,
            age: this.age,
            mulch: this.mulch,
            mulchTimeLeft: this.mulchTimeLeft,
        };
    }
    /**
     * Finds the plot indices that are around the plot in a 3x3 square
     * @param index The plot index
     */
    static findNearPlots(index) {
        const plots = [];
        const posX = index % GameConstants.FARM_PLOT_WIDTH;
        const posY = (index - posX) / GameConstants.FARM_PLOT_HEIGHT;
        for (let y = posY - 1; y <= posY + 1; y++) {
            for (let x = posX - 1; x <= posX + 1; x++) {
                if (y < 0 || y > GameConstants.FARM_PLOT_HEIGHT - 1 || x < 0 || x > GameConstants.FARM_PLOT_WIDTH - 1) {
                    continue;
                }
                if (y === posY && x === posX) {
                    continue;
                }
                const id = y * GameConstants.FARM_PLOT_HEIGHT + x;
                plots.push(id);
            }
        }
        return plots;
    }
    /**
     * Finds the plot indices that are directly next to the plot (aka a plus sign)
     * @param index The plot index
     */
    static findPlusPlots(index, filter) {
        const posX = index % GameConstants.FARM_PLOT_WIDTH;
        const posY = (index - posX) / GameConstants.FARM_PLOT_HEIGHT;
        const possiblePlots = [[posY - 1, posX], [posY, posX - 1], [posY, posX + 1], [posY + 1, posX]];
        return possiblePlots.filter(([y, x]) => {
            return y >= 0 && y < GameConstants.FARM_PLOT_HEIGHT && x >= 0 && x < GameConstants.FARM_PLOT_WIDTH;
        }).map(([y, x]) => y * GameConstants.FARM_PLOT_HEIGHT + x);
    }
    get berryData() {
        return App.game.farming.berryData[this.berry];
    }
    // Knockout getters
    get isUnlocked() {
        return this._isUnlocked();
    }
    set isUnlocked(value) {
        this._isUnlocked(value);
    }
    get berry() {
        return this._berry();
    }
    set berry(berry) {
        this._berry(berry);
    }
    get lastPlanted() {
        return this._lastPlanted();
    }
    set lastPlanted(berry) {
        this._lastPlanted(berry);
    }
    get age() {
        return this._age();
    }
    set age(value) {
        this._age(value);
    }
    get mulch() {
        return this._mulch();
    }
    set mulch(value) {
        this._mulch(value);
    }
    get mulchTimeLeft() {
        return this._mulchTimeLeft();
    }
    set mulchTimeLeft(value) {
        this._mulchTimeLeft(value);
    }
    get auras() {
        return this._auras.map(aura => aura());
    }
}
class Aura {
    constructor(auraType, auraMultipliers) {
        this.auraType = auraType;
        this.auraMultipliers = auraMultipliers;
    }
    /**
     * Handles applying the berry's Aura to its neighbors
     */
    emitAura(index) {
        const plot = App.game.farming.plotList[index];
        if (plot.stage() < PlotStage.Taller) {
            return;
        }
        const berryAura = this.auraMultipliers[plot.stage() - 2];
        const lumBoost = plot._auras[AuraType.Boost]();
        const multiplier = (berryAura >= 1) ? (berryAura * lumBoost) : (berryAura / lumBoost);
        const plots = Plot.findNearPlots(index);
        switch (this.auraType) {
            // External Auras
            case AuraType.Attract:
            case AuraType.Egg:
            case AuraType.Shiny:
            case AuraType.Roaming:
                const currentMultiplier = App.game.farming.externalAuras[this.auraType]();
                App.game.farming.externalAuras[this.auraType](currentMultiplier * multiplier);
                break;
            // Auras that are the max magnitude of surroundings
            case AuraType.Death:
            case AuraType.Boost:
                for (const nearIdx of plots) {
                    const nearPlot = App.game.farming.plotList[nearIdx];
                    const currentMultiplier = nearPlot._auras[this.auraType]();
                    nearPlot.setAura(this.auraType, Math.max(currentMultiplier, multiplier));
                }
                break;
            // Default auras are multiplicative
            default:
                for (const nearIdx of plots) {
                    const nearPlot = App.game.farming.plotList[nearIdx];
                    nearPlot.addAura(this.auraType, multiplier);
                }
                break;
        }
    }
    getAuraValue(stage) {
        if (!stage || stage < PlotStage.Taller) {
            return 1;
        }
        return this.auraMultipliers[stage - 2];
    }
}
class Mutation {
    constructor(mutationChance, mutatedBerry, options) {
        var _a;
        this._mutationChance = mutationChance;
        this.mutatedBerry = mutatedBerry;
        this._hint = options === null || options === void 0 ? void 0 : options.hint;
        this._unlockReq = options === null || options === void 0 ? void 0 : options.unlockReq;
        this.showHint = (_a = options === null || options === void 0 ? void 0 : options.showHint) !== null && _a !== void 0 ? _a : true;
        this._hintSeen = ko.observable(false);
    }
    toJSON() {
        return this.hintSeen;
    }
    fromJSON(hintSeen) {
        this.hintSeen = !!hintSeen;
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        if (!this._unlockReq) {
            return true;
        }
        return this._unlockReq();
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (!this.showHint) {
            return '';
        }
        if (this._hint) {
            return this._hint;
        }
        return '';
    }
    /**
     * Handles getting the mutation chance
     * @param idx The plot index
     */
    mutationChance(idx) {
        return this._mutationChance;
    }
    /**
     * Update tag for mutations. Returns true if this mutation will occur
     */
    mutate() {
        if (!this.unlocked) {
            return false;
        }
        const plots = this.getMutationPlots();
        if (!plots.length) {
            return false;
        }
        let mutated = false;
        plots.forEach((idx) => {
            const willMutate = Rand.chance(this.mutationChance(idx) * App.game.farming.getMutationMultiplier() * App.game.farming.plotList[idx].getMutationMultiplier());
            if (!willMutate) {
                return;
            }
            this.handleMutation(idx);
            App.game.oakItems.use(OakItemType.Demo_Disk);
            mutated = true;
        });
        return mutated;
    }
    get hintSeen() {
        return this._hintSeen();
    }
    set hintSeen(bool) {
        this._hintSeen(bool);
    }
}
/// <reference path="../Mutation.ts" />
/**
 * A Blank Mutation to be used to store hint data.
 * This is mostly because the Mutation framework controls the hints, but some mutations are outside of the Mutation framework
 */
class BlankMutation extends Mutation {
    getMutationPlots() {
        return [];
    }
    handleMutation(index) {
        return;
    }
}
/// <reference path="../Mutation.ts" />
/**
 * Mutation that occurs on an empty Plot
 */
class GrowMutation extends Mutation {
    constructor(mutationChance, mutatedBerry, options) {
        super(mutationChance, mutatedBerry, options);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = [];
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (!plot.isEmpty()) {
                return;
            }
            plots.push(idx);
        });
        return plots;
    }
    /**
     * Handles updating the farm with the mutation
     * @param index The plot index to mutate
     */
    handleMutation(index) {
        const plot = App.game.farming.plotList[index];
        plot.berry = this.mutatedBerry;
        plot.age = 0;
        plot.notifications = [];
        App.game.farming.unlockBerry(this.mutatedBerry);
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation to produce the Enigma Berry
 */
class EnigmaMutation extends GrowMutation {
    constructor(mutationChance) {
        super(mutationChance, BerryType.Calculator, {
            unlockReq: function () {
                if (!App.game.discord.ID()) {
                    return false;
                }
                return EnigmaMutation.getReqs().every(req => App.game.farming.unlockedBerries[req]());
            },
        });
        this.hintsSeen = Array(4).fill(false).map(val => ko.observable(val));
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        const reqs = EnigmaMutation.getReqs();
        return plots.filter((idx) => {
            const nearPlots = Plot.findPlusPlots(idx);
            if (nearPlots.length !== 4) {
                return false;
            }
            return nearPlots.every((idx, n) => {
                const plot = App.game.farming.plotList[idx];
                if (!plot.isUnlocked) {
                    return false;
                }
                if (plot.isEmpty()) {
                    return false;
                }
                if (plot.stage() !== PlotStage.Berry) {
                    return false;
                }
                if (plot.berry !== reqs[n]) {
                    return false;
                }
                return true;
            });
        });
    }
    /**
     * Returns a list of 4 Berry types to cause the mutation
     */
    static getReqs() {
        SeededRand.seed(+App.game.discord.ID());
        // Getting possible Berries
        // Only Gen 3 and 4 Berries so there isn't as big of a growth discrepancy (e.g. Cheri and Haban)
        let berryTypes = Farming.getGeneration(2).concat(Farming.getGeneration(3));
        // Remove parasite Berries, as having four sides for mutation requirements means parasite
        // mutations can make it difficult to have all four plants fully grown.
        // Also remove Babiri since they'll stop mutations
        berryTypes = berryTypes.filter(berry => {
            return ![BerryType.Broadcasting, BerryType.Fortune, BerryType.Entertainment, BerryType.Medical].includes(berry);
        });
        return [...new Array(4)].map((_) => SeededRand.fromArray(berryTypes));
    }
    get hintIndex() {
        SeededRand.seedWithDate(new Date());
        return SeededRand.floor(4);
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get partialHint() {
        if (!App.game.discord.ID()) {
            return 'There is a program that requires a linked <u>Discord</u> account to appear...';
        }
        const idx = this.hintIndex;
        return `There's a mysterious program that requires ${this.getHint(idx)}.`;
    }
    getHint(idx) {
        let direction = '';
        switch (idx) {
            case 0:
                direction = 'north';
                break;
            case 1:
                direction = 'west';
                break;
            case 2:
                direction = 'east';
                break;
            case 3:
                direction = 'south';
        }
        return `a ${BerryType[EnigmaMutation.getReqs()[idx]]} Berry to the ${direction}`;
    }
    /**
     * Handles getting the full hint for the BerryDex
     */
    get hint() {
        if (!App.game.discord.ID()) {
            return 'There is a program that requires a linked <u>Discord</u> account to appear...';
        }
        const hints = [];
        this.hintsSeen.forEach((hintSeen, idx) => {
            if (!hintSeen()) {
                return false;
            }
            hints.push(this.getHint(idx));
        });
        let tempHint = `There's a mysterious program that requires ${hints.join(', ').replace(/, ([\w\s]+)$/, ' and $1')}`;
        if (hints.length === 0) {
            tempHint += 'a specific configuration of Berries';
        }
        tempHint += (hints.length !== 4) ? '. However there\'s still something missing...' : '.';
        return tempHint;
    }
    toJSON() {
        return this.hintsSeen.map(h => h());
    }
    fromJSON(hintsSeen) {
        if (!hintsSeen || typeof hintsSeen !== 'object') {
            return;
        }
        hintsSeen.forEach((value, index) => {
            if (value) {
                this.hintSeen = true;
            }
            this.hintsSeen[index](value);
        });
    }
}
/// <reference path="../Mutation.ts" />
/**
 * Mutation that occurs on a Berry plant that is PlotStage.Taller or older.
 */
class EvolveMutation extends Mutation {
    constructor(mutationChance, mutatedBerry, originalBerry, options) {
        super(mutationChance, mutatedBerry, options);
        this.originalBerry = originalBerry;
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = [];
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < PlotStage.Taller) {
                return;
            }
            if (this.originalBerry && plot.berry !== this.originalBerry) {
                return;
            }
            // Medical Berries can't mutate
            if (plot.berry === BerryType.Medical) {
                return;
            }
            plots.push(idx);
        });
        return plots;
    }
    /**
     * Handles updating the farm with the mutation.
     * Mutations will keep the new Berry plant in the same stage as it was previously
     * @param index The plot index to mutate
     */
    handleMutation(index) {
        const plot = App.game.farming.plotList[index];
        const currentStage = plot.stage();
        let newAge = 0;
        if (currentStage !== PlotStage.Seed) {
            newAge = App.game.farming.berryData[this.mutatedBerry].growthTime[currentStage - 1] + 1;
        }
        plot.berry = this.mutatedBerry;
        plot.age = newAge;
        plot.notifications = [];
        App.game.farming.unlockBerry(this.mutatedBerry);
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for unlocked original berry
        if (this.originalBerry && !App.game.farming.unlockedBerries[this.originalBerry]()) {
            return false;
        }
        return super.unlocked;
    }
}
/// <reference path="./EvolveMutation.ts" />
/**
 * Mutation that requires a specific environment near a Berry plot.
 */
class EvolveNearMutation extends EvolveMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        return plots.filter((idx) => {
            const nearPlots = Plot.findNearPlots(idx);
            return this.nearPlotsFitRequirements(nearPlots);
        });
    }
}
/// <reference path="./EvolveNearMutation.ts" />
/**
 * Mutation that requires at least some amount of specific Berry plants near an empty plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class EvolveNearBerryMinMutation extends EvolveNearMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, berryReqs, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.berryReqs = berryReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const currentReqs = {};
        plots.forEach((idx) => {
            const plot = App.game.farming.plotList[idx];
            if (plot.stage() !== PlotStage.Berry) {
                return;
            }
            if (!currentReqs[plot.berry]) {
                currentReqs[plot.berry] = 1;
            }
            else {
                currentReqs[plot.berry] += 1;
            }
        });
        return Object.keys(this.berryReqs).every(key => currentReqs[key] !== undefined && currentReqs[key] >= this.berryReqs[key]);
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        for (const berry of Object.keys(this.berryReqs)) {
            if (!App.game.farming.unlockedBerries[berry]()) {
                return false;
            }
        }
        return super.unlocked;
    }
}
/// <reference path="./EvolveNearMutation.ts" />
/**
 * Mutation that requires specific Berry plants near a Berry plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class EvolveNearBerryMutation extends EvolveNearMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, berryReqs, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.berryReqs = berryReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        return this.berryReqs.every((req) => {
            return plots.some((plot) => {
                return this.checkRequirement(plot, req);
            });
        });
    }
    /**
     * Checks an individual plot for a Berry requirement
     */
    checkRequirement(index, berryReq) {
        const plot = App.game.farming.plotList[index];
        if (!plot.isUnlocked) {
            return false;
        }
        if (plot.berry !== berryReq) {
            return false;
        }
        if (plot.stage() !== PlotStage.Berry) {
            return false;
        }
        return true;
    }
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        const berryType = this.originalBerry !== undefined ? BerryType[this.originalBerry] : 'some';
        if (this.berryReqs.length === 0) {
            return `I've heard that ${berryType} Berries can spontaneously change!`;
        }
        let str = `I've heard that growing ${berryType} Berries`;
        str += ` near ${this.berryReqs.map(b => BerryType[b]).join(', ').replace(/, ([\w\s]+)$/, ' and $1')} Berries`;
        str += ' can cause it to change!';
        return str;
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for Berry requirements
        if (!this.berryReqs.every(req => App.game.farming.unlockedBerries[req]())) {
            return false;
        }
        return super.unlocked;
    }
}
/// <reference path="./EvolveNearMutation.ts" />
/**
 * Mutation that requires very specific Berry plants near an empty plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class EvolveNearBerryStrictMutation extends EvolveNearMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, berryReqs, neighborStageReq, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.berryReqs = berryReqs;
        this.neighborStageReq = neighborStageReq;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const currentReqs = {};
        plots.forEach((idx) => {
            const plot = App.game.farming.plotList[idx];
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < this.neighborStageReq) {
                return;
            }
            if (!currentReqs[plot.berry]) {
                currentReqs[plot.berry] = 1;
            }
            else {
                currentReqs[plot.berry] += 1;
            }
        });
        return GameHelper.shallowEqual(this.berryReqs, currentReqs);
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        for (const berry of Object.keys(this.berryReqs)) {
            if (!App.game.farming.unlockedBerries[berry]()) {
                return false;
            }
        }
        return super.unlocked;
    }
}
/// <reference path="./EvolveNearMutation.ts" />
/**
 * Mutation that requires specific flavored Berry plants near a Berry plot
 * Will check the surround plots for the flavors of the nearby Berry plants. Must be in the range of the flavorReqs
 */
class EvolveNearFlavorMutation extends EvolveNearMutation {
    /**
     * Constructor for a FlavorMutation
     * @param mutationChance The chance of the mutation occuring
     * @param mutatedBerry The mutated BerryType
     * @param flavorReqs The flavor requirements for the mutation to occur
     * @param options The additional MutationOptions
     */
    constructor(mutationChance, mutatedBerry, originalBerry, flavorReqs, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.flavorRatio = [0.5, 0.75, 1]; // Determines how much flavor a Berry plant has before fully mature.
        this.flavorReqs = flavorReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const nearFlavors = [0, 0, 0, 0, 0];
        plots.forEach(idx => {
            const plot = App.game.farming.plotList[idx];
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < PlotStage.Taller) {
                return;
            }
            const berryFlavors = App.game.farming.berryData[plot.berry].flavors.map(x => x.value * this.flavorRatio[plot.stage() - 2]);
            for (let j = 0; j < 5; j++) {
                nearFlavors[j] += berryFlavors[j];
            }
        });
        return this.flavorReqs.every((value, idx) => value[0] <= nearFlavors[idx] && nearFlavors[idx] <= value[1]);
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation that requires a total amount of flavor in the field
 */
class FieldFlavorMutation extends GrowMutation {
    constructor(mutationChance, mutatedBerry, fieldFlavor, options) {
        super(mutationChance, mutatedBerry, options);
        this.flavorRatio = [0.5, 0.75, 1]; // Determines how much flavor a Berry plant has before fully mature.
        this.fieldFlavor = fieldFlavor;
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const emptyPlots = super.getMutationPlots();
        const nearFlavors = [0, 0, 0, 0, 0];
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < PlotStage.Taller) {
                return;
            }
            const berryFlavors = App.game.farming.berryData[plot.berry].flavors.map(x => x.value * this.flavorRatio[plot.stage() - 2]);
            for (let j = 0; j < 5; j++) {
                nearFlavors[j] += berryFlavors[j];
            }
        });
        const reqMatched = this.fieldFlavor.every((value, idx) => value <= nearFlavors[idx]);
        if (reqMatched) {
            return emptyPlots;
        }
        return [];
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation that requires a number of Berry plants in the farm
 */
class FieldMutation extends GrowMutation {
    constructor(mutationChance, mutatedBerry, fieldBerry, fieldAmount = 22, options) {
        super(mutationChance, mutatedBerry, options);
        this.fieldBerry = fieldBerry;
        this.fieldAmount = fieldAmount;
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const emptyPlots = super.getMutationPlots();
        let fieldPlots = 0;
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.berry === this.fieldBerry && plot.stage() === PlotStage.Berry) {
                fieldPlots += 1;
            }
        });
        if (fieldPlots > this.fieldAmount) {
            return emptyPlots;
        }
        return [];
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for Berry requirements
        if (!App.game.farming.unlockedBerries[this.fieldBerry]()) {
            return false;
        }
        return super.unlocked;
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        return `Legends tell of a mysterious Berry that only appears in a field of ${BerryType[this.fieldBerry]} Berries.`;
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation that requires a specific environment near an empty plot.
 */
class GrowNearMutation extends GrowMutation {
    constructor(mutationChance, mutatedBerry, options) {
        super(mutationChance, mutatedBerry, options);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        return plots.filter((idx) => {
            const nearPlots = Plot.findNearPlots(idx);
            return this.nearPlotsFitRequirements(nearPlots);
        });
    }
}
/// <reference path="./GrowNearMutation.ts" />
/**
 * Mutation that requires specific Berry plants near an empty plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class GrowNearBerryMutation extends GrowNearMutation {
    constructor(mutationChance, mutatedBerry, berryReqs, options) {
        super(mutationChance, mutatedBerry, options);
        this.berryReqs = berryReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        return this.berryReqs.every((req) => {
            return plots.some((plot) => {
                return this.checkRequirement(plot, req);
            });
        });
    }
    /**
     * Checks an individual plot for a Berry requirement
     */
    checkRequirement(index, berryReq) {
        const plot = App.game.farming.plotList[index];
        if (!plot.isUnlocked) {
            return false;
        }
        if (plot.berry !== berryReq) {
            return false;
        }
        if (plot.stage() !== PlotStage.Berry) {
            return false;
        }
        return true;
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        if (this.berryReqs.length === 1) {
            return `I've heard that growing ${BerryType[this.berryReqs[0]]} Berries can spread a new Berry into nearby empty plots!`;
        }
        if (this.berryReqs.length >= 2) {
            return `I've heard that growing ${this.berryReqs.map(b => BerryType[b]).join(', ').replace(/, ([\w\s]+)$/, ' and $1')} Berries near each other will produce something interesting!`;
        }
        return '';
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for Berry requirements
        if (!this.berryReqs.every(req => App.game.farming.unlockedBerries[req]())) {
            return false;
        }
        return super.unlocked;
    }
}
/// <reference path="./GrowNearMutation.ts" />
/**
 * Mutation that requires very specific Berry plants near an empty plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class GrowNearBerryStrictMutation extends GrowNearMutation {
    constructor(mutationChance, mutatedBerry, berryReqs, options) {
        super(mutationChance, mutatedBerry, options);
        this.berryReqs = berryReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const currentReqs = {};
        plots.forEach((idx) => {
            const plot = App.game.farming.plotList[idx];
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() !== PlotStage.Berry) {
                return;
            }
            if (!currentReqs[plot.berry]) {
                currentReqs[plot.berry] = 1;
            }
            else {
                currentReqs[plot.berry] += 1;
            }
        });
        return GameHelper.shallowEqual(this.berryReqs, currentReqs);
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        for (const berry of Object.keys(this.berryReqs)) {
            if (!App.game.farming.unlockedBerries[berry]()) {
                return false;
            }
        }
        return super.unlocked;
    }
}
/// <reference path="./GrowNearMutation.ts" />
/**
 * Mutation that requires specific flavored Berry plants near an empty plot
 * Will check the surround plots for the flavors of the nearby Berry plants. Must be in the range of the flavorReqs
 */
class GrowNearFlavorMutation extends GrowNearMutation {
    /**
     * Constructor for a FlavorMutation
     * @param mutationChance The chance of the mutation occuring
     * @param mutatedBerry The mutated BerryType
     * @param flavorReqs The flavor requirements for the mutation to occur
     * @param options The additional MutationOptions
     */
    constructor(mutationChance, mutatedBerry, flavorReqs, options) {
        super(mutationChance, mutatedBerry, options);
        this.flavorRatio = [0.5, 0.75, 1]; // Determines how much flavor a Berry plant has before fully mature.
        this.flavorReqs = flavorReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const nearFlavors = [0, 0, 0, 0, 0];
        plots.forEach(idx => {
            const plot = App.game.farming.plotList[idx];
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < PlotStage.Taller) {
                return;
            }
            const berryFlavors = App.game.farming.berryData[plot.berry].flavors.map(x => x.value * this.flavorRatio[plot.stage() - 2]);
            for (let j = 0; j < 5; j++) {
                nearFlavors[j] += berryFlavors[j];
            }
        });
        return this.flavorReqs.every((value, idx) => value[0] <= nearFlavors[idx] && nearFlavors[idx] <= value[1]);
    }
    /**
     * Handles getting the mutation chance.
     * Will decrease the mutation chance if the mutatedBerry already exists around this one.
     * @param idx The plot index
     */
    mutationChance(idx) {
        const sameBerries = Plot.findNearPlots(idx).filter(plotIndex => {
            return App.game.farming.plotList[plotIndex].berry === this.mutatedBerry;
        }).length;
        return super.mutationChance(idx) * Math.pow(4, -sameBerries);
    }
}
/// <reference path="./EvolveMutation.ts" />
/**
 * Mutation that applies to a current Berry plant based on the active state of Oak Items
 */
class OakMutation extends EvolveMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, oakItem, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.oakItem = oakItem;
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        return plots.filter((idx) => {
            const plot = App.game.farming.plotList[idx];
            return this.plotFitRequirements(plot, idx);
        });
    }
    /**
     * Checks whether a plot fits the requirements for a mutation
     * @param plot The Plot
     * @param idx The Plot index
     */
    plotFitRequirements(plot, idx) {
        if (!App.game.oakItems.isActive(this.oakItem)) {
            return false;
        }
        if (this.originalBerry && plot.berry !== this.originalBerry) {
            return false;
        }
        return true;
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check Oak Item unlock status
        if (!App.game.oakItems.isUnlocked(this.oakItem)) {
            return false;
        }
        return super.unlocked;
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        return `I've heard that using the ${App.game.oakItems.itemList[this.oakItem].displayName} can cause ${BerryType[this.originalBerry]} Berries to change!`;
    }
}
/// <reference path="./EvolveNearBerryMutation.ts" />
/**
 * Parasite Mutation
 */
class ParasiteMutation extends EvolveNearBerryMutation {
    constructor(mutationChance, berry) {
        super(mutationChance, berry, undefined, [berry], { showHint: false });
    }
    /**
     * Determines which plots can mutate. Excludes the parasite berry
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        return plots.filter((idx) => {
            return App.game.farming.plotList[idx].berry !== this.mutatedBerry;
        });
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation for the Petaya Berry. Requires all 18 typed Berries to be in the field.
 */
class PetayaMutation extends GrowMutation {
    constructor(mutationChance, options) {
        super(mutationChance, BerryType.Trashbin, options);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const emptyPlots = super.getMutationPlots();
        const fieldPlots = {};
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() !== PlotStage.Berry) {
                return;
            }
            if (!fieldPlots[plot.berry]) {
                fieldPlots[plot.berry] = 1;
            }
            else {
                fieldPlots[plot.berry] += 1;
            }
        });
        const requiredBerries = Farming.getGeneration(3);
        if (requiredBerries.every(berry => fieldPlots[berry])) {
            return emptyPlots;
        }
        return [];
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for Berry requirements
        const requiredBerries = Farming.getGeneration(3);
        if (!requiredBerries.every(berry => App.game.farming.unlockedBerries[berry]())) {
            return false;
        }
        return super.unlocked;
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        return 'Legends tell of a mysterious Berry that only appears while surrounded by all types of Berries.';
    }
}
class FluteEffectRunner {
    static initialize(multiplier) {
        FluteEffectRunner.numActiveFlutes(0);
        GameHelper.enumStrings(GameConstants.FluteItemType).forEach((itemName) => {
            const item = ItemList[itemName];
            if (item.multiplierType) {
                multiplier.addBonus(item.multiplierType, () => this.getFluteMultiplier(itemName));
            }
            if (this.isActive(itemName)()) {
                GameHelper.incrementObservable(this.numActiveFlutes, 1);
            }
        });
        this.updateActiveGemTypes();
    }
    static tick() {
        this.counter = 0;
        GameHelper.enumStrings(GameConstants.FluteItemType).forEach((itemName) => {
            if (this.getLowestGem(itemName) > 0 && this.isActive(itemName)()) {
                player.effectList[itemName](Math.max(0, this.getLowestGem(itemName) - this.numActiveFlutes()));
                this.updateFormattedTimeLeft(itemName);
                if (this.numActiveFlutes() >= this.getLowestGem(itemName)) {
                    this.removeEffect(itemName);
                    Notifier.notify({
                        message: `The ${GameConstants.humanifyString(itemName)}'s effect ran out!`,
                        type: NotificationConstants.NotificationOption.danger,
                        sound: NotificationConstants.NotificationSound.General.battle_item_timer,
                        setting: NotificationConstants.NotificationSetting.Items.battle_item_timer,
                    });
                }
            }
        });
        this.gemCost();
    }
    static getLowestGem(itemName) {
        const item = ItemList[itemName];
        const gemArray = item.gemTypes.map(idx => App.game.gems.gemWallet[PokemonType[idx]]());
        const gemMaxTime = Math.min(...gemArray);
        return gemMaxTime;
    }
    static updateActiveGemTypes() {
        this.activeGemTypes.removeAll();
        const gemTypes = new Set();
        GameHelper.enumStrings(GameConstants.FluteItemType).forEach((itemName) => {
            if (FluteEffectRunner.isActive(itemName)()) {
                const item = ItemList[itemName];
                item.gemTypes.forEach(idx => gemTypes.add(PokemonType[idx]));
            }
        });
        [...gemTypes].forEach(x => this.activeGemTypes.push(x));
    }
    static gemCost() {
        this.activeGemTypes().forEach(idx => App.game.gems.gainGems(-this.numActiveFlutes(), idx));
    }
    static getEffect(itemName) {
        if (!player) {
            return 0;
        }
        return player.effectList[itemName]();
    }
    static toggleEffect(itemName) {
        if (this.isActive(itemName)()) {
            this.removeEffect(itemName);
            return;
        }
        player.effectList[itemName](Math.max(0, player.effectList[itemName]() + FluteEffectRunner.getLowestGem(itemName)));
        GameHelper.incrementObservable(this.numActiveFlutes, 1);
        this.updateFormattedTimeLeft(itemName);
        this.updateActiveGemTypes();
    }
    static removeEffect(itemName) {
        player.effectList[itemName](0);
        GameHelper.incrementObservable(this.numActiveFlutes, -1);
        this.updateFormattedTimeLeft(itemName);
        player.gainItem(itemName, 1);
        this.updateActiveGemTypes();
    }
    static fluteFormattedTime(itemName) {
        return (player.effectList[itemName]() / this.numActiveFlutes());
    }
    static fluteTooltip(itemName) {
        const str = [];
        str.push(`Gems/Second: ${FluteEffectRunner.numActiveFlutes()} <br><br>Gem Types Used:`);
        const item = ItemList[itemName];
        item.gemTypes.forEach(t => {
            str.push(`${t}: ${App.game.gems.gemWallet[PokemonType[t]]()}`);
        });
        str.push(`<br>Time Remaining:<br> ${GameConstants.formatSecondsToTime(this.fluteFormattedTime(itemName))}`);
        return str.join('<br>');
    }
    static updateFormattedTimeLeft(itemName) {
        const times = GameConstants.formatTime(this.fluteFormattedTime(itemName)).split(':');
        if (+times[0] > 99) {
            return player.effectTimer[itemName]('99h+');
        }
        else if (+times[0] > 0) {
            return player.effectTimer[itemName](`${+times[0]}h`);
        }
        times.shift();
        player.effectTimer[itemName](times.join(':'));
    }
    static getFluteMultiplier(itemName) {
        const flute = ItemList[itemName];
        return this.isActive(flute.name)() ? flute.getMultiplier() : 1;
    }
    static isActive(itemName) {
        return ko.pureComputed(() => {
            if (!player) {
                return false;
            }
            return !!player.effectList[itemName]();
        });
    }
}
FluteEffectRunner.counter = 0;
FluteEffectRunner.numActiveFlutes = ko.observable(0);
FluteEffectRunner.activeGemTypes = ko.observableArray();
class GemDeal {
    constructor(gemCosts, item, itemAmount) {
        this.gems = gemCosts;
        this.item = { itemType: item, amount: itemAmount };
    }
    static generateDeals() {
        const gemMasterRegions = [GameConstants.Region.hoenn, GameConstants.Region.unova];
        for (const region of gemMasterRegions) {
            if (!GemDeal.list[region]) {
                GemDeal.list[region] = ko.observableArray();
            }
            else {
                GemDeal.list[region].removeAll();
            }
        }
        GemDeal.list[GameConstants.Region.hoenn].push(...this.generateHoennFluteDeals());
        GemDeal.list[GameConstants.Region.unova].push(...this.generateUnovaFluteDeals());
    }
    static generateHoennFluteDeals() {
        const list = [];
        list.push(new GemDeal([
            { gemType: PokemonType['Fire'], amount: 50000 },
            { gemType: PokemonType['Vaccine'], amount: 50000 },
            { gemType: PokemonType['Electric'], amount: 50000 },
        ], ItemList['H_Fire_Spirit'], 1));
        list.push(new GemDeal([
            { gemType: PokemonType['Light'], amount: 10000 },
            { gemType: PokemonType['Data'], amount: 10000 },
            { gemType: PokemonType['Neutral'], amount: 10000 },
        ], ItemList['H_Light_Spirit'], 1));
        list.push(new GemDeal([
            { gemType: PokemonType['Plant'], amount: 10000 },
            { gemType: PokemonType['Wind'], amount: 10000 },
            { gemType: PokemonType['Vaccine'], amount: 10000 },
        ], ItemList['H_Wind_Spirit'], 1));
        list.push(new GemDeal([
            { gemType: PokemonType['Free'], amount: 10000 },
            { gemType: PokemonType['Light'], amount: 10000 },
            { gemType: PokemonType['Neutral'], amount: 10000 },
        ], ItemList['H_Steel_Spirit'], 1));
        list.push(new GemDeal([
            { gemType: PokemonType['Free'], amount: 10000 },
            { gemType: PokemonType['Water'], amount: 10000 },
            { gemType: PokemonType['Dark'], amount: 10000 },
        ], ItemList['H_Water_Spirit'], 1));
        list.push(new GemDeal([
            { gemType: PokemonType['Vaccine'], amount: 10000 },
            { gemType: PokemonType['Fire'], amount: 10000 },
            { gemType: PokemonType['Electric'], amount: 10000 },
        ], ItemList['H_Thunder_Spirit'], 1));
        return list;
    }
    static generateUnovaFluteDeals() {
        const list = [];
        list.push(new GemDeal([
            { gemType: PokemonType['Neutral'], amount: 50000 },
            { gemType: PokemonType['Earth'], amount: 50000 },
            { gemType: PokemonType['Dark'], amount: 50000 },
        ], ItemList['Azure_Flute'], 1));
        list.push(new GemDeal([
            { gemType: PokemonType['Wind'], amount: 50000 },
            { gemType: PokemonType['Dark'], amount: 50000 },
            { gemType: PokemonType['Virus'], amount: 50000 },
        ], ItemList['CH_Dark_Spirit'], 1));
        list.push(new GemDeal([
            { gemType: PokemonType['Fire'], amount: 50000 },
            { gemType: PokemonType['Earth'], amount: 50000 },
            { gemType: PokemonType['Water'], amount: 50000 },
        ], ItemList['H_Dark_Spirit'], 1));
        list.push(new GemDeal([
            { gemType: PokemonType['Data'], amount: 50000 },
            { gemType: PokemonType['Earth'], amount: 50000 },
            { gemType: PokemonType['Electric'], amount: 50000 },
        ], ItemList['H_Earth_Spirit'], 1));
        list.push(new GemDeal([
            { gemType: PokemonType['Plant'], amount: 50000 },
            { gemType: PokemonType['Virus'], amount: 50000 },
            { gemType: PokemonType['Water'], amount: 50000 },
        ], ItemList['H_Ice_Spirit'], 1));
        list.push(new GemDeal([
            { gemType: PokemonType['Plant'], amount: 50000 },
            { gemType: PokemonType['Data'], amount: 50000 },
            { gemType: PokemonType['Light'], amount: 50000 },
        ], ItemList['H_Wood_Spirit'], 1));
        return list;
    }
    static getDeals(region) {
        return GemDeal.list[region];
    }
    static canUse(region, i) {
        const deal = GemDeal.list[region].peek()[i];
        if (ItemList[deal.item.itemType.name].isSoldOut()) {
            return false;
        }
        else {
            return deal.gems.every((value) => App.game.gems.gemWallet[value.gemType]() >= value.amount);
        }
    }
    static use(region, i, tradeTimes = 1) {
        const deal = GemDeal.list[region].peek()[i];
        if (GemDeal.canUse(region, i)) {
            const trades = deal.gems.map(gem => {
                const amt = App.game.gems.gemWallet[gem.gemType]();
                const maxTrades = Math.floor(amt / gem.amount);
                return maxTrades;
            });
            const maxTrades = trades.reduce((a, b) => Math.min(a, b), tradeTimes);
            deal.gems.forEach((value) => GameHelper.incrementObservable(App.game.gems.gemWallet[value.gemType], -value.amount * maxTrades));
            deal.item.itemType.gain(deal.item.amount * maxTrades);
        }
    }
    static isFluteDeal(region, i) {
        const deal = GemDeal.list[region].peek()[i];
        return deal.item.itemType instanceof FluteItem;
    }
}
GemDeal.list = {};
class TownContent {
    constructor(requirements = []) {
        this.tooltip = undefined;
        this.requirements = requirements;
    }
    addParent(parent) {
        this.parent = parent;
    }
    areaStatus() {
        return areaStatus.completed;
    }
    isUnlocked() {
        return this.requirements.every(requirement => requirement.isCompleted());
    }
    clears() {
        return undefined;
    }
    protectedOnclick() {
        var _a;
        if (!this.isVisible()) {
            return;
        }
        const reqsList = [];
        (_a = this.requirements) === null || _a === void 0 ? void 0 : _a.forEach(requirement => {
            if (!requirement.isCompleted()) {
                reqsList.push(requirement.hint());
            }
        });
        if (reqsList.length) {
            Notifier.notify({
                message: `You don't have access yet.\n${reqsList.join('\n')}`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
        else {
            this.onclick();
        }
    }
}
class DockTownContent extends TownContent {
    cssClass() {
        return 'btn btn-info';
    }
    isVisible() {
        return player.highestRegion() > 0;
    }
    onclick() {
        MapHelper.openShipModal();
    }
    text() {
        return 'Dock';
    }
}
class BattleFrontierTownContent extends TownContent {
    cssClass() {
        return 'btn btn-primary';
    }
    isVisible() {
        return true;
    }
    onclick() {
        App.game.battleFrontier.enter();
    }
    text() {
        return 'Enter Battle Frontier';
    }
}
class NextRegionTownContent extends TownContent {
    cssClass() {
        return 'btn btn-warning';
    }
    isVisible() {
        return MapHelper.ableToTravel();
    }
    onclick() {
        $('#nextRegionModal').modal('show');
    }
    text() {
        return `Travel to ${GameConstants.camelCaseToString(GameConstants.Region[player.highestRegion() + 1])}`;
    }
}
class MoveToDungeon extends TownContent {
    constructor(dungeon) {
        super([]);
        this.dungeon = dungeon;
    }
    cssClass() {
        return 'btn btn-secondary';
    }
    text() {
        return this.dungeon.name;
    }
    isVisible() {
        return true;
    }
    onclick() {
        MapHelper.moveToTown(this.dungeon.name);
    }
    isUnlocked() {
        return TownList[this.dungeon.name].isUnlocked();
    }
    areaStatus() {
        const dungeonAccess = MapHelper.calculateTownCssClass(this.dungeon.name);
        switch (dungeonAccess) {
            // if dungeon completed or locked, ignore it
            case 'completed':
            case 'locked':
                return areaStatus.completed;
            // Return the dungeons state
            default:
                return areaStatus[dungeonAccess];
        }
    }
    clears() {
        if (!QuestLineHelper.isQuestLineCompleted('Tutorial Quests')) {
            return undefined;
        }
        return App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(this.dungeon.name)]();
    }
}
///<reference path="GymPokemon.ts"/>
///<reference path="../pokemons/PokemonFactory.ts"/>
///<reference path="../../declarations/requirements/OneFromManyRequirement.d.ts"/>
///<reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="../towns/TownContent.ts"/>
/**
 * Gym class.
 */
class Gym extends TownContent {
    constructor(leaderName, town, pokemons, badgeReward, moneyReward, defeatMessage, requirements = [], rewardFunction = () => { }, { quest = true, achievement = true, } = {}) {
        super(requirements);
        this.leaderName = leaderName;
        this.town = town;
        this.pokemons = pokemons;
        this.badgeReward = badgeReward;
        this.moneyReward = moneyReward;
        this.defeatMessage = defeatMessage;
        this.rewardFunction = rewardFunction;
        this.tooltip = 'Battle Gym Leaders to earn badges';
        this.flags = {
            quest: true,
            achievement: true,
        };
        this.flags.quest = quest;
        this.flags.achievement = achievement;
        if (!town.includes('Elite') && !town.includes('Champion')) {
            this.buttonText = `Challenge ${leaderName.replace(/\d/g, '')}`;
        }
        else {
            this.buttonText = leaderName.replace(/\d/g, '');
        }
    }
    cssClass() {
        if (App.game.badgeCase.hasBadge(this.badgeReward)) {
            return 'btn btn-success';
        }
        return 'btn btn-secondary';
    }
    text() {
        return this.buttonText;
    }
    isVisible() {
        return true;
    }
    onclick() {
        GymRunner.startGym(this);
    }
    areaStatus() {
        if (this.isUnlocked()) {
            if (!App.game.badgeCase.hasBadge(this.badgeReward)) {
                return areaStatus.unlockedUnfinished;
            }
            else if (this.isThereQuestAtLocation()) {
                return areaStatus.questAtLocation;
            }
            else if (!this.isAchievementsComplete()) {
                return areaStatus.missingAchievement;
            }
        }
        return areaStatus.completed;
    }
    clears() {
        if (!QuestLineHelper.isQuestLineCompleted('Tutorial Quests')) {
            return undefined;
        }
        return App.game.statistics.challengesDefeated[GameConstants.getGymIndex(this.town)]();
    }
    isAchievementsComplete() {
        const gymIndex = GameConstants.getGymIndex(this.town);
        return AchievementHandler.achievementList.every(achievement => {
            return !(achievement.property instanceof ClearGymRequirement && achievement.property.gymIndex === gymIndex && !achievement.isCompleted());
        });
    }
    isThereQuestAtLocation() {
        return App.game.quests.currentQuests().some(q => {
            return q instanceof DefeatGymQuest && q.gymTown == this.town;
        });
    }
    static getLeaderByBadge(badge) {
        for (const item in GymList) {
            const gym = GymList[item];
            if (BadgeEnums[gym.badgeReward] == BadgeEnums[BadgeEnums[badge]]) {
                return gym.leaderName;
            }
        }
        return 'Taichi';
    }
    firstWinReward() {
        // Give the player this gyms badge
        App.game.badgeCase.gainBadge(this.badgeReward);
        // Show the badge modal
        $('#receiveBadgeModal').modal('show');
        // Run the first time reward function
        this.rewardFunction();
    }
    get imagePath() {
        return `assets/images/gymLeaders/${GymBattle.gym.leaderName}.png`;
    }
}
/// <reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="Gym.ts"/>
class Champion extends Gym {
    constructor(leaderName, town, basePokemon, badgeReward, moneyReward, rewardMessage, requirements = [], alternativePokemon1, alternativePokemon2, alternativePokemon3, rewardFunction = () => { }) {
        super(leaderName, town, basePokemon, badgeReward, moneyReward, rewardMessage, requirements, rewardFunction);
        this.basePokemon = basePokemon;
        this.alternativePokemon1 = alternativePokemon1;
        this.alternativePokemon2 = alternativePokemon2;
        this.alternativePokemon3 = alternativePokemon3;
        this.rewardFunction = rewardFunction;
    }
    setPokemon(starter) {
        this.pokemons = [...this.basePokemon];
        switch (starter) {
            case 0: {
                if (this.alternativePokemon1 != undefined) {
                    this.pokemons.push(...this.alternativePokemon1);
                }
                break;
            }
            case 1: {
                if (this.alternativePokemon2 != undefined) {
                    this.pokemons.push(...this.alternativePokemon2);
                }
                break;
            }
            case 2:
            default: {
                if (this.alternativePokemon3 != undefined) {
                    this.pokemons.push(...this.alternativePokemon3);
                }
                break;
            }
        }
    }
}
///<reference path="../Battle.ts"/>
class GymBattle extends Battle {
    static pokemonAttack() {
        if (GymRunner.running()) {
            super.pokemonAttack();
        }
    }
    static clickAttack() {
        if (GymRunner.running()) {
            super.clickAttack();
        }
    }
    /**
     * Award the player with exp, and go to the next pokemon
     */
    static defeatPokemon() {
        this.enemyPokemon().defeat(true);
        // Make gym "route" regionless
        App.game.breeding.progressEggsBattle(this.gym.badgeReward * 3 + 1, GameConstants.Region.none);
        this.index(this.index() + 1);
        if (this.index() >= this.gym.pokemons.length) {
            GymRunner.gymWon(this.gym);
        }
        else {
            this.generateNewEnemy();
        }
        player.lowerItemMultipliers(MultiplierDecreaser.Battle);
    }
    /**
     * Reset the counter.
     */
    static generateNewEnemy() {
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateGymPokemon(this.gym, this.index()));
    }
}
GymBattle.index = ko.observable(0);
GymBattle.totalPokemons = ko.observable(0);
GymBattle.pokemonsDefeatedComputable = ko.pureComputed(() => {
    return GymBattle.index();
});
GymBattle.pokemonsUndefeatedComputable = ko.pureComputed(() => {
    return GymBattle.totalPokemons() - GymBattle.index();
});
const GymList = {};
// Kanto Gyms
GymList['Koromon Village'] = new Gym('Taichi', 'Koromon Village', [
    new GymPokemon('Greymon', 28000, 26),
    new GymPokemon('Metal Greymon', 32098, 28),
], BadgeEnums.Courange_Crest, 1703, 'Thanks for helping Agumon. I should not have pushed him so hard.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lost Colosseum'))]);
GymList['Piccolomon\'s'] = new Gym('Yamato', 'Piccolomon\'s', [
    new GymPokemon('Gabumon', 32537, 28),
    new GymPokemon('Garurumon', 34537, 29),
    new GymPokemon('Were Garurumon', 37537, 30),
], BadgeEnums.Friendship_Crest, 1925, 'Oh! I concede defeat. You are remarkably strong.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Etemon\'s Pyramid'))]);
GymList['Vademon Dimension'] = new Gym('Koushiro', 'Vademon Dimension', [
    new GymPokemon('Kabuterimon', 51642, 32),
    new GymPokemon('Atlur Kabuterimon Red', 53642, 33),
    new GymPokemon('Vademon', 54642, 34),
], BadgeEnums.Knowledge_Crest, 2566, 'Whoa! You\'re the real deal! Thank\'s for setting me free of Vademon\'s trap.', [
    new RouteKillRequirement(10, GameConstants.Region.adventure01, 14),
    new GymBadgeRequirement(BadgeEnums.Friendship_Crest),
]);
GymList['ShogunGekomon\'s Castle'] = new Gym('Mimi', 'ShogunGekomon\'s Castle', [
    new GymPokemon('Gekomon', 60685, 34),
    new GymPokemon('Otamamon', 60685, 34),
    new GymPokemon('Togemon', 62685, 35),
    new GymPokemon('Lilimon', 64685, 36),
], BadgeEnums.Purity_Crest, 2914, 'I can\'t believe I lost! Gekomon do something!', [new RouteKillRequirement(10, GameConstants.Region.adventure01, 15)]);
GymList['Tokyo City'] = new Gym('Joe', 'Tokyo City', [
    new GymPokemon('Rukamon', 100211, 40),
    new GymPokemon('Ikkakumon', 100211, 41),
    new GymPokemon('Zudomon', 101211, 42),
], BadgeEnums.Sincerity_Crest, 4144, 'I\'m shocked! But a loss is a loss. I admit I didn\'t work hard enough to win!', [new GymBadgeRequirement(BadgeEnums.Purity_Crest)]);
GymList['Pyokomon Village'] = new Gym('Sora', 'Pyokomon Village', [
    new GymPokemon('Flare Lizarmon', 70773, 36),
    new GymPokemon('Mechanorimon', 72773, 36),
    new GymPokemon('Birdramon', 73773, 37),
    new GymPokemon('Garudamon', 75773, 38),
], BadgeEnums.Love_Crest, 3300, 'Humph! You have proven your worth! Here!', [
    new GymBadgeRequirement(BadgeEnums.Purity_Crest)
], () => {
    App.game.keyItems.gainKeyItem(KeyItemType.Safari_ticket, true);
    App.game.quests.getQuestLine('Mining Expedition').beginQuest();
});
GymList['Whamon\'s Gulf'] = new Gym('Hikari', 'Whamon\'s Gulf', [
    new GymPokemon('Tyumon', 95316, 44),
    new GymPokemon('Tailmon', 115316, 45),
    new GymPokemon('Angewomon', 135316, 46),
], BadgeEnums.Light_Crest, 5208, 'Wow! You are really strong!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Metal Seadramon\'s Lair'))]);
GymList['Primary Village'] = new Gym('Takeru', 'Primary Village', [
    new GymPokemon('Leomon', 100444, 49),
    new GymPokemon('Andromon', 120444, 49),
    new GymPokemon('Patamon', 140444, 50),
    new GymPokemon('Angemon', 160444, 51),
    new GymPokemon('Holy Angemon', 180444, 51),
], BadgeEnums.Hope_Crest, 6533, 'Aww... Patamon wasn\'t strong enought to beat you...', [
    new GymBadgeRequirement(BadgeEnums.Light_Crest),
    new GymBadgeRequirement(BadgeEnums.Love_Crest),
    new GymBadgeRequirement(BadgeEnums.Knowledge_Crest),
], () => {
    App.game.keyItems.gainKeyItem(KeyItemType.Chip_case, true);
});
// Kanto Elite 4
GymList['Ocean Data'] = new Gym('Ocean', 'Ocean Data', [
    new GymPokemon('Anomalocarimon', 170426, 50),
    new GymPokemon('Dagomon', 175426, 50),
    new GymPokemon('Waru Seadramon', 180426, 50),
    new GymPokemon('Hangyomon', 185426, 51),
    new GymPokemon('Metal Seadramon', 190426, 51),
], BadgeEnums.Ocean_Data, 7500, 'This is not the last you see of me!', [new GymBadgeRequirement(BadgeEnums.Hope_Crest)]);
GymList['Forest Data'] = new Gym('Forest', 'Forest Data', [
    new GymPokemon('Floramon', 175536, 51),
    new GymPokemon('Kiwimon', 180536, 51),
    new GymPokemon('Delumon', 185536, 51),
    new GymPokemon('Jyureimon', 190536, 52),
    new GymPokemon('Pinochimon', 195536, 52),
], BadgeEnums.Forest_Data, 7500, 'This can\'t be happening again!', [new GymBadgeRequirement(BadgeEnums.Ocean_Data)]);
GymList['City Data'] = new Gym('City', 'City Data', [
    new GymPokemon('Metal Mamemon', 180733, 52),
    new GymPokemon('Tankmon', 185733, 52),
    new GymPokemon('Megadramon', 190733, 53),
    new GymPokemon('Gigadramon', 195733, 53),
    new GymPokemon('Mugendramon', 200733, 53),
], BadgeEnums.City_Data, 7500, 'I will destroy you. This isn\'t over.', [new GymBadgeRequirement(BadgeEnums.Forest_Data)]);
GymList['Wasteland Data'] = new Gym('Wasteland', 'Wasteland Data', [
    new GymPokemon('Devimon', 186008, 53),
    new GymPokemon('Vamdemon', 191008, 53),
    new GymPokemon('Waru Monzaemon', 196008, 53),
    new GymPokemon('Lady Devimon', 201008, 54),
    new GymPokemon('Piemon', 206008, 54),
], BadgeEnums.Wasteland_Data, 7500, 'Lights out.', [new GymBadgeRequirement(BadgeEnums.City_Data)]);
// Kanto Champion
GymList['Apocalymon Data'] = new Champion('Apocalymon', 'Apocalymon Data', [
    new GymPokemon('Skull Greymon', 186370, 54),
    new GymPokemon('Venom Vamdemon', 191370, 54),
    new GymPokemon('Metal Etemon', 196370, 54),
], BadgeEnums.Apocalymon_Data, 10000, 'Why? Why did I lose? I never made any mistakes. Darn it! Why do you get to taste the best that life has to offer, while all i do is choke on its leftovers?! Answer me this! Why do all of you get the pizza, while i get the crusts?!', [new GymBadgeRequirement(BadgeEnums.Wasteland_Data)], 
// Botamon
[
    new GymPokemon('Skull Mammon', 201370, 55),
    new GymPokemon('King Etemon', 206370, 55),
    new GymPokemon('Apocalymon', 211370, 55),
], 
// Punimon
[
    new GymPokemon('Skull Mammon', 201370, 55),
    new GymPokemon('King Etemon', 206370, 55),
    new GymPokemon('Apocalymon', 211370, 55),
], 
// Poyomon/Burpmon
[
    new GymPokemon('Skull Mammon', 201370, 55),
    new GymPokemon('King Etemon', 206370, 55),
    new GymPokemon('Apocalymon', 211370, 55),
]);
//Johto Gyms
GymList['Violet City'] = new Gym('Falkner', 'Violet City', [
    new GymPokemon('Burpmon', 108000, 7),
    new GymPokemon('Burpmon', 112000, 9),
], BadgeEnums.Zephyr, 250, '...Darn! My Dad\'s cherished bird Pokémon... All right. Take this. It\'s the official Pokémon League Zephyr Badge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sprout Tower'))]);
GymList['Azalea Town'] = new Gym('Bugsy', 'Azalea Town', [
    new GymPokemon('Burpmon', 103000, 14),
    new GymPokemon('Burpmon', 101500, 14),
    new GymPokemon('Burpmon', 119000, 16),
], BadgeEnums.Hive, 500, 'Whoa, amazing! You\'re an expert on Pokémon! My research isn\'t complete yet. Ok, you win. Take this Badge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Burpmon Well'))]);
GymList['Goldenrod City'] = new Gym('Whitney', 'Goldenrod City', [
    new GymPokemon('Burpmon', 130000, 18),
    new GymPokemon('Burpmon', 170000, 20),
], BadgeEnums.Plain, 1000, '...Sniff... What? What do you want? A badge? Oh, right. I forgot. Here\'s Plain Badge.', [new RouteKillRequirement(10, GameConstants.Region.johto, 34)]);
GymList['Ecruteak City'] = new Gym('Morty', 'Ecruteak City', [
    new GymPokemon('Burpmon', 127000, 21),
    new GymPokemon('Burpmon', 128000, 21),
    new GymPokemon('Burpmon', 132000, 25),
    new GymPokemon('Burpmon', 130000, 23),
], BadgeEnums.Fog, 1500, 'I\'m not good enough yet... All right. This Badge is yours.', [new GymBadgeRequirement(BadgeEnums.Plain)], () => {
    App.game.quests.getQuestLine('Team Rocket Again').beginQuest();
});
GymList['Cianwood City'] = new Gym('Chuck', 'Cianwood City', [
    new GymPokemon('Burpmon', 177000, 27),
    new GymPokemon('Burpmon', 183000, 30),
], BadgeEnums.Storm, 2500, 'Wha? Huh? I lost? How about that! You\'re worthy of Storm Badge!', [new GymBadgeRequirement(BadgeEnums.Fog)]);
GymList['Olivine City'] = new Gym('Jasmine', 'Olivine City', [
    new GymPokemon('Burpmon', 177000, 30),
    new GymPokemon('Burpmon', 178000, 30),
    new GymPokemon('Burpmon', 182000, 35),
], BadgeEnums.Mineral, 3500, '...You are a better trainer than me, in both skill and kindness. In accordance with League rules, I confer upon you this Badge.', [new GymBadgeRequirement(BadgeEnums.Storm)]);
GymList['Mahogany Town'] = new Gym('Pryce', 'Mahogany Town', [
    new GymPokemon('Burpmon', 190000, 27),
    new GymPokemon('Burpmon', 192500, 29),
    new GymPokemon('Burpmon', 196000, 31),
], BadgeEnums.Glacier, 4000, 'Ah, I am impressed by your prowess. With your strong will, I know you will overcome all life\'s obstacles. You are worthy of this Badge!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Rockets Hideout'))]);
GymList['Blackthorn City'] = new Gym('Clair', 'Blackthorn City', [
    new GymPokemon('Burpmon', 205000, 37),
    new GymPokemon('Burpmon', 205000, 37),
    new GymPokemon('Burpmon', 218000, 37),
    new GymPokemon('Burpmon', 220000, 40),
], BadgeEnums.Rising, 5000, 'Here, this is the Rising Badge... Hurry up! Take it!', [new GymBadgeRequirement(BadgeEnums.Glacier)]);
//Johto Elite 4
GymList['Elite Will'] = new Gym('Will', 'Elite Will', [
    new GymPokemon('Burpmon', 245330, 40),
    new GymPokemon('Burpmon', 248300, 41),
    new GymPokemon('Burpmon', 252000, 41),
    new GymPokemon('Burpmon', 257000, 41),
    new GymPokemon('Burpmon', 260250, 42),
], BadgeEnums.Elite_Will, 7500, 'Even though I was defeated, I won\'t change my course. I will continue battling until I stand above all Trainers! Now move on and experience the true ferocity of the Elite Four.', [new GymBadgeRequirement(BadgeEnums.Rising)]);
GymList['Elite Koga'] = new Gym('Koga2', 'Elite Koga', [
    new GymPokemon('Burpmon', 245330, 40),
    new GymPokemon('Burpmon', 248300, 41),
    new GymPokemon('Burpmon', 252000, 43),
    new GymPokemon('Burpmon', 257000, 42),
    new GymPokemon('Burpmon', 260250, 44),
], BadgeEnums.Elite_Koga, 7500, 'I subjected you to everything I could muster. But my efforts failed. I must hone my skills. Go on to the next room, and put your abilities to the test!', [new GymBadgeRequirement(BadgeEnums.Elite_Will)]);
GymList['Elite Bruno2'] = new Gym('Bruno2', 'Elite Bruno2', [
    new GymPokemon('Burpmon', 245330, 42),
    new GymPokemon('Burpmon', 248300, 42),
    new GymPokemon('Burpmon', 252000, 42),
    new GymPokemon('Burpmon', 257000, 43),
    new GymPokemon('Burpmon', 260250, 46),
], BadgeEnums.Elite_Bruno2, 7500, 'Having lost, I have no right to say anything… Go face your next challenge!', [new GymBadgeRequirement(BadgeEnums.Elite_Koga)]);
GymList['Elite Karen'] = new Gym('Karen', 'Elite Karen', [
    new GymPokemon('Burpmon', 248300, 42),
    new GymPokemon('Burpmon', 252000, 42),
    new GymPokemon('Burpmon', 257000, 44),
    new GymPokemon('Burpmon', 260250, 45),
    new GymPokemon('Burpmon', 266000, 47),
], BadgeEnums.Elite_Karen, 7500, 'Strong Pokémon. Weak Pokémon. That is only the selfish perception of people. Truly skilled Trainers should try to win with the Pokémon they love best. I like your style. You understand what\'s important. Go on — — the Champion is waiting.', [new GymBadgeRequirement(BadgeEnums.Elite_Bruno2)]);
// Johto Champion
GymList['Champion Lance'] = new Champion('Lance2', 'Champion Lance', [
    new GymPokemon('Burpmon', 258300, 44),
    new GymPokemon('Burpmon', 262000, 47),
    new GymPokemon('Burpmon', 264000, 46),
    new GymPokemon('Burpmon', 260250, 46),
    new GymPokemon('Burpmon', 270000, 47),
    new GymPokemon('Burpmon', 270000, 50),
], BadgeEnums.Elite_JohtoChampion, 7500, '…It\'s over. But it\'s an odd feeling. I\'m not angry that I lost. In fact, I feel happy. Happy that I witnessed the rise of a great new Champion!', [new GymBadgeRequirement(BadgeEnums.Elite_Karen)]);
// Hoenn Gyms
GymList['Rustboro City'] = new Gym('Roxanne', 'Rustboro City', [
    new GymPokemon('Burpmon', 382900, 12),
    new GymPokemon('Burpmon', 382900, 12),
    new GymPokemon('Burpmon', 410200, 15),
], BadgeEnums.Stone, 1000, 'So… I lost… It seems that I still have much more to learn… I understand. The Pokémon League\'s rules state that Trainers are to be given this if they defeat a Gym Leader. Please accept the official Pokémon League Stone Badge.', [new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion)]);
GymList['Dewford Town'] = new Gym('Brawly', 'Dewford Town', [
    new GymPokemon('Burpmon', 424000, 16),
    new GymPokemon('Burpmon', 424000, 16),
    new GymPokemon('Burpmon', 444000, 19),
], BadgeEnums.Knuckle, 2000, 'Whoah, wow! You made a much bigger splash than I expected! You swamped me! Okay, you\'ve got me. Take this Gym Badge!');
GymList['Mauville City'] = new Gym('Wattson', 'Mauville City', [
    new GymPokemon('Burpmon', 452000, 20),
    new GymPokemon('Burpmon', 448000, 20),
    new GymPokemon('Burpmon', 483000, 22),
    new GymPokemon('Burpmon', 448000, 24),
], BadgeEnums.Dynamo, 3000, 'Wahahahah! Fine, I lost! You ended up giving me a thrill! Take this Badge!', [new GymBadgeRequirement(BadgeEnums.Knuckle)], () => {
    App.game.quests.getQuestLine('Land vs Water').beginQuest();
});
GymList['Lavaridge Town'] = new Gym('Flannery', 'Lavaridge Town', [
    new GymPokemon('Burpmon', 472000, 24),
    new GymPokemon('Burpmon', 472000, 24),
    new GymPokemon('Burpmon', 492000, 26),
    new GymPokemon('Burpmon', 524000, 29),
], BadgeEnums.Heat, 4000, 'Oh... I guess I was trying too hard... I... I\'ve only recently become a Gym Leader. I tried too hard to be someone I\'m not. I have to do things my natural way. If I don\'t, my Pokémon will be confused. Thanks for teaching me that. For that, you deserve this.');
GymList['Petalburg City'] = new Gym('Norman', 'Petalburg City', [
    new GymPokemon('Burpmon', 490000, 27),
    new GymPokemon('Burpmon', 530000, 27),
    new GymPokemon('Burpmon', 560000, 29),
    new GymPokemon('Burpmon', 596000, 31),
], BadgeEnums.Balance, 5000, '… I… I can\'t… I can\'t believe it. I lost to you? But, rules are rules! Here, take this.', [new GymBadgeRequirement(BadgeEnums.Heat)]);
GymList['Fortree City'] = new Gym('Winona', 'Fortree City', [
    new GymPokemon('Burpmon', 605000, 29),
    new GymPokemon('Burpmon', 650000, 29),
    new GymPokemon('Burpmon', 630000, 30),
    new GymPokemon('Burpmon', 667000, 31),
    new GymPokemon('Burpmon', 669000, 33),
], BadgeEnums.Feather, 6000, 'Never before have I seen a Trainer command Pokémon with more grace than I... In recognition of your prowess, I present to you this Gym Badge.');
GymList['Mossdeep City'] = new Gym('Tate & Liza', 'Mossdeep City', [
    new GymPokemon('Burpmon', 702000, 41),
    new GymPokemon('Burpmon', 703000, 41),
    new GymPokemon('Burpmon', 702000, 42),
    new GymPokemon('Burpmon', 703000, 42),
], BadgeEnums.Mind, 8000, 'What? Our combination... Was shattered! It can\'t be helped. You\'ve won... So, in recognition, take this Gym Badge.');
GymList['Sootopolis City'] = new Gym('Juan', 'Sootopolis City', [
    new GymPokemon('Burpmon', 798000, 41),
    new GymPokemon('Burpmon', 813000, 41),
    new GymPokemon('Burpmon', 823400, 43),
    new GymPokemon('Burpmon', 842000, 43),
    new GymPokemon('Burpmon', 865000, 46),
], BadgeEnums.Rain, 10000, 'Ahahaha, excellent! Very well, you are the winner. From you, I sense the brilliant shine of skill that will overcome all. However, compared with me or even Wallace, you are lacking in elegance. Perhaps I should make you a loan of my outfit? ... Hahaha, I merely jest! Rather than my clothes, I shall reward you with this, the Rain Badge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sky Pillar'))]);
// Hoenn Elite 4
GymList['Elite Sidney'] = new Gym('Sidney', 'Elite Sidney', [
    new GymPokemon('Burpmon', 972000, 46),
    new GymPokemon('Burpmon', 980000, 48),
    new GymPokemon('Burpmon', 1002000, 46),
    new GymPokemon('Burpmon', 1015000, 48),
    new GymPokemon('Burpmon', 1020000, 49),
], BadgeEnums.Elite_Sidney, 15000, 'Well, listen to what this loser has to say. You\'ve got what it takes to go far. Now, go on to the next room and enjoy your next battle!', [new GymBadgeRequirement(BadgeEnums.Rain)]);
GymList['Elite Phoebe'] = new Gym('Phoebe', 'Elite Phoebe', [
    new GymPokemon('Burpmon', 1036700, 48),
    new GymPokemon('Burpmon', 1038000, 49),
    new GymPokemon('Burpmon', 1052000, 50),
    new GymPokemon('Burpmon', 1038000, 49),
    new GymPokemon('Burpmon', 1063000, 51),
], BadgeEnums.Elite_Phoebe, 15000, 'There\'s a definite bond between you and your Pokémon, too. I didn\'t recognize it, so it\'s only natural that I lost. Yup, I\'d like to see how far your bond will carry you. Go ahead, move to the next room.', [new GymBadgeRequirement(BadgeEnums.Elite_Sidney)]);
GymList['Elite Glacia'] = new Gym('Glacia', 'Elite Glacia', [
    new GymPokemon('Burpmon', 1082000, 50),
    new GymPokemon('Burpmon', 1072000, 50),
    new GymPokemon('Burpmon', 1086000, 52),
    new GymPokemon('Burpmon', 1076000, 52),
    new GymPokemon('Burpmon', 1100000, 53),
], BadgeEnums.Elite_Glacia, 15000, 'Advance to the next room. And there, confirm the truly fearsome side of the Pokémon League.', [new GymBadgeRequirement(BadgeEnums.Elite_Phoebe)]);
GymList['Elite Drake'] = new Gym('Drake', 'Elite Drake', [
    new GymPokemon('Burpmon', 1064000, 52),
    new GymPokemon('Burpmon', 1072000, 54),
    new GymPokemon('Burpmon', 1076000, 53),
    new GymPokemon('Burpmon', 1076000, 53),
    new GymPokemon('Burpmon', 1157000, 55),
], BadgeEnums.Elite_Drake, 15000, 'You deserve every credit for coming this far as a Trainer of Pokémon. You do seem to know what is needed. Yes, what a Trainer needs is a virtuous heart. Pokémon touch the good hearts of Trainers and learn good from wrong. They touch the good hearts of Trainers and grow strong. Go! Go onwards! The Champion is waiting!', [new GymBadgeRequirement(BadgeEnums.Elite_Glacia)]);
// Hoenn Champion
GymList['Champion Wallace'] = new Champion('Wallace', 'Champion Wallace', [
    new GymPokemon('Burpmon', 1202000, 57),
    new GymPokemon('Burpmon', 1164000, 55),
    new GymPokemon('Burpmon', 1184000, 56),
    new GymPokemon('Burpmon', 1172000, 56),
    new GymPokemon('Burpmon', 1163000, 56),
    new GymPokemon('Burpmon', 1182000, 58),
], BadgeEnums.Elite_HoennChampion, 16000, 'I, the Champion, fall in defeat… That was wonderful work. You were elegant, infuriatingly so. And yet it was utterly glorious! Kudos to you! You are a truly noble Pokémon Trainer!', [new GymBadgeRequirement(BadgeEnums.Elite_Drake)], undefined, undefined, undefined, () => {
    App.game.quests.getQuestLine('Mystery of Burpmon').beginQuest();
});
//Sinnoh Gyms
GymList['Oreburgh City'] = new Gym('Roark', 'Oreburgh City', [
    new GymPokemon('Burpmon', 1338000, 12),
    new GymPokemon('Burpmon', 1342000, 12),
    new GymPokemon('Burpmon', 1342000, 14),
], BadgeEnums.Coal, 250, 'This is embarrassing... I went and lost to a Trainer who didn\'t have a single Gym Badge... But that\'s tough. You were strong, and I was weak. That\'s all there is. According to Pokémon League rules, I have to give you our Gym Badge since you\'ve beaten me, the Leader. Heres your official Pokémon League Coal Badge.', [new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)], () => {
    App.game.quests.getQuestLine('A new world').beginQuest();
});
GymList['Eterna City'] = new Gym('Gardenia', 'Eterna City', [
    new GymPokemon('Burpmon', 1433000, 20),
    new GymPokemon('Burpmon', 1437500, 20),
    new GymPokemon('Burpmon', 1439000, 22),
], BadgeEnums.Forest, 400, 'I might\'ve said it before, but you\'re really tough! Wasn\'t it hard for you to raise your Pokémon to be so good? I guess that\'s a measure of how much you love your Pokémon. In recognition of that, I proudly grant you this!"', [new GymBadgeRequirement(BadgeEnums.Coal)]);
GymList['Hearthome City'] = new Gym('Fantina', 'Hearthome City', [
    new GymPokemon('Burpmon', 1450000, 24),
    new GymPokemon('Burpmon', 1480000, 24),
    new GymPokemon('Burpmon', 1480000, 26),
], BadgeEnums.Relic, 740, 'I am dumbfounded! So very, very strong! You, your Pokémon, so strong! Your power is admirable! I shall honor it with this Gym Badge!"', [new GymBadgeRequirement(BadgeEnums.Forest)]);
GymList['Veilstone City'] = new Gym('Maylene', 'Veilstone City', [
    new GymPokemon('Burpmon', 1537000, 28),
    new GymPokemon('Burpmon', 1538000, 29),
    new GymPokemon('Burpmon', 1540000, 32),
], BadgeEnums.Cobble, 1200, '...OK. You win. That was a tough loss. I learned a lot from it. Please, accept this Gym Badge.', [new GymBadgeRequirement(BadgeEnums.Relic)]);
GymList['Pastoria City'] = new Gym('Crasher Wake', 'Pastoria City', [
    new GymPokemon('Burpmon', 1687000, 33),
    new GymPokemon('Burpmon', 1693000, 34),
    new GymPokemon('Burpmon', 1693000, 37),
], BadgeEnums.Fen, 2500, 'It seems the undertow pulled me under... But I had a great time battling with you! You\'ve earned this!', [new GymBadgeRequirement(BadgeEnums.Cobble)]);
GymList['Canalave City'] = new Gym('Byron', 'Canalave City', [
    new GymPokemon('Burpmon', 1767000, 37),
    new GymPokemon('Burpmon', 1772000, 38),
    new GymPokemon('Burpmon', 1768000, 41),
], BadgeEnums.Mine, 4800, 'You were strong enough to take down my prized team of Pokémon. In recognition of that power, I give you this: the Mine Badge!', [new GymBadgeRequirement(BadgeEnums.Fen)]);
GymList['Snowpoint City'] = new Gym('Candice', 'Snowpoint City', [
    new GymPokemon('Burpmon', 1872500, 40),
    new GymPokemon('Burpmon', 1876000, 40),
    new GymPokemon('Burpmon', 1870000, 42),
    new GymPokemon('Burpmon', 1870000, 44),
], BadgeEnums.Icicle, 8000, 'Wow! You\'re great! You\'ve earned my respect! I think your focus and will bowled us over totally. Oh, that\'s right! I\'m supposed to give you this!', [new GymBadgeRequirement(BadgeEnums.Mine)]);
GymList['Sunyshore City'] = new Gym('Volkner', 'Sunyshore City', [
    new GymPokemon('Burpmon', 1965000, 46),
    new GymPokemon('Burpmon', 1965000, 46),
    new GymPokemon('Burpmon', 1978000, 48),
    new GymPokemon('Burpmon', 1980000, 50),
], BadgeEnums.Beacon, 12000, '...Hehehe. Hahahah! ...That was the most fun I\'ve had in a battle since...I don\'t know when! It\'s also made me excited to know you and your team will keep battling to greater heights! This is your eighth Gym Badge. You\'ve earned this!', [new GymBadgeRequirement(BadgeEnums.Icicle)]);
//Sinnoh Elite 4
GymList['Elite Aaron'] = new Gym('Aaron', 'Elite Aaron', [
    new GymPokemon('Burpmon', 2545330, 49),
    new GymPokemon('Burpmon', 2548300, 49),
    new GymPokemon('Burpmon', 2552000, 50),
    new GymPokemon('Burpmon', 2557000, 51),
    new GymPokemon('Burpmon', 2560250, 53),
], BadgeEnums.Elite_Aaron, 18000, 'I lost with the most beautiful and toughest of the bug Pokémon... We lost because I wasn\'t good enough... That\'s it! Back to training camp! Let\'s hear it for me! No... That was wrong... Anyway... Go on to the next room! Three Trainers are waiting for you. They are all tougher than me.', [new GymBadgeRequirement(BadgeEnums.Beacon)]);
GymList['Elite Bertha'] = new Gym('Bertha', 'Elite Bertha', [
    new GymPokemon('Burpmon', 2645330, 50),
    new GymPokemon('Burpmon', 2648300, 53),
    new GymPokemon('Burpmon', 2652000, 52),
    new GymPokemon('Burpmon', 2657000, 52),
    new GymPokemon('Burpmon', 2660250, 55),
], BadgeEnums.Elite_Bertha, 18000, 'You\'re quite something, youngster. I like how you and your Pokémon earned the win by working as one. That\'s what makes you so strong. Ahahaha! I think that you can go as far as you want.', [new GymBadgeRequirement(BadgeEnums.Elite_Aaron)]);
GymList['Elite Flint'] = new Gym('Flint', 'Elite Flint', [
    new GymPokemon('Burpmon', 2845330, 52),
    new GymPokemon('Burpmon', 2848300, 55),
    new GymPokemon('Burpmon', 2852000, 53),
    new GymPokemon('Burpmon', 2857000, 55),
    new GymPokemon('Burpmon', 2860250, 57),
], BadgeEnums.Elite_Flint, 18000, '.........Keep going...I know your spirit burns hot. Your whole team does.', [new GymBadgeRequirement(BadgeEnums.Elite_Bertha)]);
GymList['Elite Lucian'] = new Gym('Lucian', 'Elite Lucian', [
    new GymPokemon('Burpmon', 3048300, 53),
    new GymPokemon('Burpmon', 3052000, 55),
    new GymPokemon('Burpmon', 3057000, 54),
    new GymPokemon('Burpmon', 3060250, 56),
    new GymPokemon('Burpmon', 3066000, 59),
], BadgeEnums.Elite_Lucian, 18000, 'Congratulations. You have beaten the Elite Four. However, that doesn\'t mean you\'re done with the Pokémon league. There remains the Champion. I should warn you—the Champion is far stronger than the Elite Four. Now, go on. Step through the doorway to your final battle.', [new GymBadgeRequirement(BadgeEnums.Elite_Flint)]);
// Sinnoh Champion
GymList['Champion Cynthia'] = new Champion('Cynthia', 'Champion Cynthia', [
    new GymPokemon('Burpmon', 3458300, 58),
    new GymPokemon('Burpmon', 3462000, 58),
    new GymPokemon('Burpmon', 3464000, 60),
    new GymPokemon('Burpmon', 3460250, 60),
    new GymPokemon('Burpmon', 3470000, 58),
    new GymPokemon('Burpmon', 3570000, 62),
], BadgeEnums.Elite_SinnohChampion, 32000, 'That was excellent. Truly, an outstanding battle. You gave the support your Pokémon needed to maximize their power. And you guided them with certainty to secure victory. You have both passion and calculating coolness. Together, you and your Pokémon can overcome any challenge that may come your way. Those are the impressions I got from our battle. I\'m glad I got to take part in the crowning of Sinnoh\'s new Champion! Come with me. We\'ll take the lift.', [new GymBadgeRequirement(BadgeEnums.Elite_Lucian)]);
//Unova Gyms
//TODO: Balancing of gym Pokemon HP & rewards.
GymList['Aspertia City'] = new Gym('Cheren', 'Aspertia City', [
    new GymPokemon('Burpmon', 3458300, 58),
    new GymPokemon('Burpmon', 3462000, 58),
    new GymPokemon('Burpmon', 3464000, 58),
], BadgeEnums.Basic, 500, 'That battle has made me feel really glad you were my first challenger as a Gym Leader… I give you this in honor of the strength you and your Pokémon showed!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Floccesy Ranch'))]);
GymList['Virbank City'] = new Gym('Roxie', 'Virbank City', [
    new GymPokemon('Burpmon', 3658300, 58),
    new GymPokemon('Burpmon', 3662000, 58),
    new GymPokemon('Burpmon', 3664000, 58),
], BadgeEnums.Toxic, 800, 'Sigh! What are you doing losing, Roxie?! Well…I guess that means you\'re strong! This stinks, but I gave it everything I had, and I feel revitalized and refreshed now! Here! Proof that you beat me!', [new GymBadgeRequirement(BadgeEnums.Basic)]);
GymList['Castelia City'] = new Gym('Burgh', 'Castelia City', [
    new GymPokemon('Burpmon', 3858300, 58),
    new GymPokemon('Burpmon', 3862000, 58),
    new GymPokemon('Burpmon', 3964000, 58),
    new GymPokemon('Burpmon', 4064000, 58),
], BadgeEnums.Insect, 1500, 'Oh hoo… You are very strong indeed! I guess it\'s no surprise I lost. Here! Take this Insect Badge! I think it\'ll suit you!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Castelia Sewers'))]);
GymList['Nimbasa City'] = new Gym('Elesa', 'Nimbasa City', [
    new GymPokemon('Burpmon', 4258300, 58),
    new GymPokemon('Burpmon', 4262000, 58),
    new GymPokemon('Burpmon', 4464000, 58),
    new GymPokemon('Burpmon', 4464000, 58),
], BadgeEnums.Bolt, 2600, 'Well… Now you… you\'re an even more wonderful Trainer than I expected. Your sweet fighting style swept me off my feet! Take this!', [new GymBadgeRequirement(BadgeEnums.Insect)]);
GymList['Driftveil City'] = new Gym('Clay', 'Driftveil City', [
    new GymPokemon('Burpmon', 4658300, 58),
    new GymPokemon('Burpmon', 4662000, 58),
    new GymPokemon('Burpmon', 4864000, 58),
    new GymPokemon('Burpmon', 5064000, 58),
], BadgeEnums.Quake, 4800, 'Phew… You\'re really somethin\'! Li\'l whippersnapper Trainers who pack a real punch keep showin\' up one after another. Mrmph. Here! Take this!', [new GymBadgeRequirement(BadgeEnums.Bolt)]);
GymList['Mistralton City'] = new Gym('Skyla', 'Mistralton City', [
    new GymPokemon('Burpmon', 5458300, 58),
    new GymPokemon('Burpmon', 6062000, 58),
    new GymPokemon('Burpmon', 5664000, 58),
    new GymPokemon('Burpmon', 5864000, 58),
], BadgeEnums.Jet, 7600, 'You\'re an amazing Pokémon Trainer. My Pokémon and I are happy because for the first time in quite a while--about two years, I\'d say--we could fight with our full strength. This is an official League Gym Badge. But this is just a stepping-stone.', [new GymBadgeRequirement(BadgeEnums.Quake)], () => {
    App.game.quests.getQuestLine('Quest for the DNA Splicers').beginQuest();
});
GymList['Opelucid City'] = new Gym('Drayden', 'Opelucid City', [
    new GymPokemon('Burpmon', 6558300, 58),
    new GymPokemon('Burpmon', 6662000, 58),
    new GymPokemon('Burpmon', 6464000, 58),
    new GymPokemon('Burpmon', 6964000, 58),
], BadgeEnums.Legend, 14000, 'Wonderful. I\'m grateful that we had a chance to meet and battle. It reminded me that Pokémon battles are about working with others to meet our challenges together.', [new GymBadgeRequirement(BadgeEnums.Jet)]);
GymList['Humilau City'] = new Gym('Marlon', 'Humilau City', [
    new GymPokemon('Burpmon', 7458300, 58),
    new GymPokemon('Burpmon', 7262000, 58),
    new GymPokemon('Burpmon', 7064000, 58),
    new GymPokemon('Burpmon', 7464000, 58),
], BadgeEnums.Wave, 27000, 'You don\'t just look strong, you\'re strong fo\' reals! Eh, I was swept away, too! Oh yeah, yo. I was so surprised that I forgot! I gotta give this to you!', [new GymBadgeRequirement(BadgeEnums.Legend)]);
//Unova Elite 4
//TODO: Balancing of elite Pokemon HP & rewards.
GymList['Elite Shauntal'] = new Gym('Shauntal', 'Elite Shauntal', [
    new GymPokemon('Burpmon', 8945330, 49),
    new GymPokemon('Burpmon', 8948300, 49),
    new GymPokemon('Burpmon', 8952000, 50),
    new GymPokemon('Burpmon', 8957000, 51),
    new GymPokemon('Burpmon', 8960250, 53),
    new GymPokemon('Burpmon', 8960250, 53),
], BadgeEnums.Elite_Shauntal, 32000, 'My Pokémon and the challenger\'s Pokémon. Everyone battled even though they were hurt... Thank you.', [new GymBadgeRequirement(BadgeEnums.Wave)]);
GymList['Elite Marshal'] = new Gym('Marshal', 'Elite Marshal', [
    new GymPokemon('Burpmon', 9945330, 49),
    new GymPokemon('Burpmon', 9948300, 49),
    new GymPokemon('Burpmon', 9952000, 50),
    new GymPokemon('Burpmon', 9957000, 51),
    new GymPokemon('Burpmon', 9957000, 51),
    new GymPokemon('Burpmon', 9960250, 53),
], BadgeEnums.Elite_Marshal, 32000, 'Whew! Well done! As your battles continue, aim for even greater heights!', [new GymBadgeRequirement(BadgeEnums.Elite_Shauntal)]);
GymList['Elite Grimsley'] = new Gym('Grimsley', 'Elite Grimsley', [
    new GymPokemon('Burpmon', 10945330, 49),
    new GymPokemon('Burpmon', 10948300, 49),
    new GymPokemon('Burpmon', 10952000, 50),
    new GymPokemon('Burpmon', 10957000, 51),
    new GymPokemon('Burpmon', 10957000, 51),
    new GymPokemon('Burpmon', 10960250, 53),
], BadgeEnums.Elite_Grimsley, 32000, 'Whether or not you get to fight at full strength, whether or not luck smiles on you--none of that matters. Only results matter. And a loss is a loss. See, victory shines like a bright light. And right now, you and your Pokémon are shining brilliantly.', [new GymBadgeRequirement(BadgeEnums.Elite_Marshal)]);
GymList['Elite Caitlin'] = new Gym('Caitlin', 'Elite Caitlin', [
    new GymPokemon('Burpmon', 11945330, 49),
    new GymPokemon('Burpmon', 11948300, 49),
    new GymPokemon('Burpmon', 11957000, 51),
    new GymPokemon('Burpmon', 11957000, 51),
    new GymPokemon('Burpmon', 11952000, 50),
    new GymPokemon('Burpmon', 11960250, 53),
], BadgeEnums.Elite_Caitlin, 32000, 'You and your Pokémon are both excellent and elegant. To have been able to battle against such a splendid team... My Pokémon and I learned a lot! I offer you my thanks', [new GymBadgeRequirement(BadgeEnums.Elite_Grimsley)]);
// Unova Champion
GymList['Champion Iris'] = new Champion('Iris', 'Champion Iris', [
    new GymPokemon('Burpmon', 12458300, 58),
    new GymPokemon('Burpmon', 12462000, 58),
    new GymPokemon('Burpmon', 12464000, 58),
    new GymPokemon('Burpmon', 12460250, 60),
    new GymPokemon('Burpmon', 12470000, 58),
    new GymPokemon('Burpmon', 14570000, 62),
], BadgeEnums.Elite_UnovaChampion, 64000, 'I\'m upset I couldn\'t win! But you know what? More than that, I\'m happy! I mean, come on. By having a serious battle, you and your Pokémon, and me and my Pokémon, we all got to know one another better than before! Yep, we sure did! OK, let\'s go!', [new GymBadgeRequirement(BadgeEnums.Elite_Caitlin)]);
//Kalos Gyms
//TODO: Balancing of gym Pokemon HP & rewards.
GymList['Santalune City'] = new Gym('Viola', 'Santalune City', [
    new GymPokemon('Burpmon', 13737400, 10),
    new GymPokemon('Burpmon', 17395730, 12),
], BadgeEnums.Bug, 800, 'Young Trainer, you... No, it wasn\'t you alone. You and your Pokémon have shown me a whole new depth of field! Fantastic! Just fantastic!', [new RouteKillRequirement(10, GameConstants.Region.kalos, 3)]);
GymList['Cyllage City'] = new Gym('Grant', 'Cyllage City', [
    new GymPokemon('Burpmon', 16937530, 25),
    new GymPokemon('Burpmon', 19837400, 25),
], BadgeEnums.Cliff, 1700, 'There are some things that seem out of reach no matter how hard you try. However, it\'s important that you never give up--no matter the opponent or the odds. I could tell from our battle that you and your Pokémon understand that. To commemorate such an impressive show of teamwork, please accept the Cliff Badge!', [new GymBadgeRequirement(BadgeEnums.Bug)]);
GymList['Shalour City'] = new Gym('Korrina', 'Shalour City', [
    new GymPokemon('Burpmon', 21558300, 29),
    new GymPokemon('Burpmon', 22062000, 28),
    new GymPokemon('Burpmon', 22362000, 32),
], BadgeEnums.Rumble, 3800, 'Oh! I have been defeated! Alack, alay! Lady Korrina gave a terrible display! This is it. I must give up my title and admit that your strength far exceeds-- Just teasing! But here\'s your Badge. Boy, you\'ll be rolling in \'em soon!', [new GymBadgeRequirement(BadgeEnums.Cliff)]);
GymList['Coumarine City'] = new Gym('Ramos', 'Coumarine City', [
    new GymPokemon('Burpmon', 25508300, 30),
    new GymPokemon('Burpmon', 27562000, 31),
    new GymPokemon('Burpmon', 29502000, 34),
], BadgeEnums.Plant, 5500, 'Yeh believe in yer Pokémon... And they believe in yeh, too... Mighty oaks from acorns grow. Go on, then. Yeh\'ve earned it. Here\'s yer own Plant Badge, sprout.', [new GymBadgeRequirement(BadgeEnums.Rumble)]);
GymList['Lumiose City'] = new Gym('Clemont', 'Lumiose City', [
    new GymPokemon('Burpmon', 30058300, 35),
    new GymPokemon('Burpmon', 31062000, 35),
    new GymPokemon('Burpmon', 32062000, 37),
], BadgeEnums.Voltage, 9000, 'Oh, Bonnie... When will you learn there\'s no shame in losing? I\'m glad whenever I get to learn something new thanks to strong challengers like you here.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Kalos Power Plant'))]);
GymList['Laverre City'] = new Gym('Valerie', 'Laverre City', [
    new GymPokemon('Burpmon', 33058300, 38),
    new GymPokemon('Burpmon', 36462000, 38),
    new GymPokemon('Burpmon', 38062000, 42),
], BadgeEnums.Fairy, 16000, 'Yes... That was a fine battle. I shall reward you for this great victory. This is the Fairy Badge. It is yours now. Its beauty is captivating, is it not? ... ... ... ... ... ... Ah... Do forgive me. I was so captivated, I forgot for a moment that it is yours.', [new GymBadgeRequirement(BadgeEnums.Voltage)]);
GymList['Anistar City'] = new Gym('Olympia', 'Anistar City', [
    new GymPokemon('Burpmon', 40058300, 44),
    new GymPokemon('Burpmon', 42062000, 45),
    new GymPokemon('Burpmon', 44462000, 48),
], BadgeEnums.Psychic, 30000, 'Now, the Psychic Badge. A testament to your skill. Proof of your power.', [new GymBadgeRequirement(BadgeEnums.Fairy)]);
GymList['Snowbelle City'] = new Gym('Wulfric', 'Snowbelle City', [
    new GymPokemon('Burpmon', 46558300, 56),
    new GymPokemon('Burpmon', 47654830, 55),
    new GymPokemon('Burpmon', 50062000, 59),
], BadgeEnums.Iceberg, 52000, 'Impressive! Your Pokémon fought with great courage. I can tell that you\'ve trained your Pokémon well.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokémon Village'))], () => {
    App.game.quests.getQuestLine('The Great Vivillon Hunt!').beginQuest();
});
//Kalos Elite 4
//TODO: Balancing of elite Pokemon HP & rewards.
GymList['Elite Malva'] = new Gym('Malva', 'Elite Malva', [
    new GymPokemon('Burpmon', 54696969, 63),
    new GymPokemon('Burpmon', 55048300, 63),
    new GymPokemon('Burpmon', 55052000, 63),
    new GymPokemon('Burpmon', 55557000, 65),
], BadgeEnums.Elite_Malva, 64000, 'What news... So a new challenger has defeated Malva of the Elite Four!', [new GymBadgeRequirement(BadgeEnums.Iceberg)]);
GymList['Elite Siebold'] = new Gym('Siebold', 'Elite Siebold', [
    new GymPokemon('Burpmon', 54696969, 63),
    new GymPokemon('Burpmon', 55405330, 63),
    new GymPokemon('Burpmon', 55405330, 63),
    new GymPokemon('Burpmon', 55557000, 65),
], BadgeEnums.Elite_Siebold, 64000, 'I shall store my memory of you and your Pokémon forever away within my heart.', [new GymBadgeRequirement(BadgeEnums.Elite_Malva)]);
GymList['Elite Wikstrom'] = new Gym('Wikstrom', 'Elite Wikstrom', [
    new GymPokemon('Burpmon', 54696969, 63),
    new GymPokemon('Burpmon', 55405330, 63),
    new GymPokemon('Burpmon', 55405330, 63),
    new GymPokemon('Burpmon', 55557000, 65),
], BadgeEnums.Elite_Wikstrom, 64000, 'Glorious! The trust that you share with your honorable Pokémon surpasses even mine!', [new GymBadgeRequirement(BadgeEnums.Elite_Siebold)]);
GymList['Elite Drasna'] = new Gym('Drasna', 'Elite Drasna', [
    new GymPokemon('Burpmon', 54696969, 63),
    new GymPokemon('Burpmon', 55405330, 63),
    new GymPokemon('Burpmon', 55405330, 63),
    new GymPokemon('Burpmon', 55557000, 65),
], BadgeEnums.Elite_Drasna, 64000, 'Oh, dear me. That sure was a quick battle... I do hope you\'ll come back again sometime!', [new GymBadgeRequirement(BadgeEnums.Elite_Wikstrom)]);
// Kalos Champion
GymList['Champion Diantha'] = new Champion('Diantha', 'Champion Diantha', [
    new GymPokemon('Burpmon', 60083000, 64),
    new GymPokemon('Burpmon', 62057000, 65),
    new GymPokemon('Burpmon', 62057000, 65),
    new GymPokemon('Burpmon', 62557000, 65),
    new GymPokemon('Burpmon', 62170000, 66),
    new GymPokemon('Burpmon', 63070000, 68),
], BadgeEnums.Elite_KalosChampion, 128000, 'Witnessing the noble spirits of you and your Pokémon in battle has really touched my heart...', [new GymBadgeRequirement(BadgeEnums.Elite_Drasna)]);
//Alola Gyms
//TODO: Balancing of gym Pokemon HP & rewards.
GymList['Iki Town'] = new Gym('Hala', 'Iki Town', [
    new GymPokemon('Burpmon', 62058739, 15),
    new GymPokemon('Burpmon', 62058739, 15),
    new GymPokemon('Burpmon', 63069612, 16),
], BadgeEnums.FightiniumZ, 128000, 'The results come as no surprise to me. What a fine Trainer...and what fine Pokémon, too!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Melemele Meadow'))]);
GymList['Konikoni City'] = new Gym('Olivia', 'Konikoni City', [
    new GymPokemon('Burpmon', 66147743, 27),
    new GymPokemon('Burpmon', 66147743, 27),
    new GymPokemon('Burpmon', 67478674, 28),
], BadgeEnums.RockiumZ, 128000, 'How lovely.', [new RouteKillRequirement(10, GameConstants.Region.alola, 9)], () => {
    App.game.quests.getQuestLine('Eater of Light').beginQuest();
});
GymList['Malie City'] = new Gym('Nanu', 'Malie City', [
    new GymPokemon('Burpmon', 70650480, 43),
    new GymPokemon('Burpmon', 70650480, 43),
    new GymPokemon('Burpmon', 71735104, 44),
], BadgeEnums.DarkiniumZ, 128000, 'Hmph...', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Po Town'))]);
GymList['Burpmon Island'] = new Gym('Hapu', 'Burpmon Island', [
    new GymPokemon('Burpmon', 76658268, 53),
    new GymPokemon('Burpmon', 76658268, 53),
    new GymPokemon('Burpmon', 76658268, 53),
    new GymPokemon('Burpmon', 77747374, 54),
], BadgeEnums.GroundiumZ, 128000, 'You have succeeded in your final grand trial!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mina\'s Houseboat'))]);
//trials
GymList['Ilima\'s Trial'] = new Gym('Ilima', 'Verdant Cavern', [
    new GymPokemon('Burpmon', 2458300, 51),
    new GymPokemon('Burpmon', 2462000, 51),
    new GymPokemon('Burpmon', 2462000, 51),
], BadgeEnums.NormaliumZ, 128000, 'You have received the Normalium-Z!', undefined, undefined, {
    quest: false,
    achievement: false,
});
GymList['Lana\'s Trial'] = new Gym('Lana', 'Brooklet Hill', [
    new GymPokemon('Burpmon', 2458300, 51),
    new GymPokemon('Burpmon', 2462000, 51),
    new GymPokemon('Burpmon', 2462000, 51),
], BadgeEnums.WateriumZ, 128000, 'You have received the Waterium-Z!', undefined, undefined, {
    quest: false,
    achievement: false,
});
GymList['Kiawe\'s Trial'] = new Gym('Kiawe', 'Wela Volcano Park', [
    new GymPokemon('Burpmon', 2458300, 51),
    new GymPokemon('Burpmon', 2462000, 51),
    new GymPokemon('Burpmon', 2462000, 51),
], BadgeEnums.FiriumZ, 128000, 'You have received the Firium-Z!', undefined, undefined, {
    quest: false,
    achievement: false,
});
GymList['Mallow\'s Trial'] = new Gym('Mallow', 'Lush Jungle', [
    new GymPokemon('Burpmon', 2458300, 51),
    new GymPokemon('Burpmon', 2462000, 51),
    new GymPokemon('Burpmon', 2462000, 51),
], BadgeEnums.GrassiumZ, 128000, 'You have received the Grassium-Z!', undefined, undefined, {
    quest: false,
    achievement: false,
});
GymList['Sophocles\' Trial'] = new Gym('Sophocles', 'Hokulani Observatory', [
    new GymPokemon('Burpmon', 2458300, 51),
    new GymPokemon('Burpmon', 2462000, 51),
    new GymPokemon('Burpmon', 2462000, 51),
], BadgeEnums.ElectriumZ, 128000, 'You have received the Electrium-Z!', undefined, undefined, {
    quest: false,
    achievement: false,
});
GymList['Acerola\'s Trial'] = new Gym('Acerola', 'Thrifty Megamart', [
    new GymPokemon('Burpmon', 2458300, 51),
    new GymPokemon('Burpmon', 2462000, 51),
    new GymPokemon('Burpmon', 2462000, 51),
], BadgeEnums.GhostiumZ, 128000, 'You have received the Ghostium-Z!', undefined, undefined, {
    quest: false,
    achievement: false,
});
GymList['Vast Poni Canyon Trial'] = new Gym('Burpmon', 'Vast Poni Canyon', [
    new GymPokemon('Burpmon', 2458300, 51),
    new GymPokemon('Burpmon', 2462000, 51),
    new GymPokemon('Burpmon', 2462000, 51),
], BadgeEnums.DragoniumZ, 128000, 'You have received the Dragonium-Z!', undefined, undefined, {
    quest: false,
    achievement: false,
});
GymList['Mina\'s Trial'] = new Gym('Mina', 'Mina\'s Houseboat', [
    new GymPokemon('Burpmon', 2458300, 51),
    new GymPokemon('Burpmon', 2462000, 51),
    new GymPokemon('Burpmon', 2462000, 51),
], BadgeEnums.FairiumZ, 128000, 'You have received the Fairium-Z!', undefined, undefined, {
    quest: false,
    achievement: false,
});
//Alola Elite 4
//TODO: Balancing of elite Pokemon HP & rewards.
GymList['Elite Molayne'] = new Gym('Molayne', 'Elite Molayne', [
    new GymPokemon('Burpmon', 85547357, 56),
    new GymPokemon('Burpmon', 85547357, 56),
    new GymPokemon('Burpmon', 85547357, 56),
    new GymPokemon('Burpmon', 85547357, 56),
    new GymPokemon('Burpmon', 86456446, 57),
], BadgeEnums.Elite_Molayne, 64000, 'That Kukui... He certainly found an interesting Trainer for me to face!', [new GymBadgeRequirement(BadgeEnums.GroundiumZ)]);
GymList['Elite Olivia'] = new Gym('Olivia', 'Elite Olivia', [
    new GymPokemon('Burpmon', 85547357, 56),
    new GymPokemon('Burpmon', 85547357, 56),
    new GymPokemon('Burpmon', 85547357, 56),
    new GymPokemon('Burpmon', 85547357, 56),
    new GymPokemon('Burpmon', 86456446, 57),
], BadgeEnums.Elite_Olivia, 64000, 'I don\'t see the same look in your eyes that I saw when we first met on Akala Island. Have you had some experiences that you\'ll carry with you in your heart forever? Well, it\'s time for you to move on.', [new GymBadgeRequirement(BadgeEnums.Elite_Molayne)]);
GymList['Elite Acerola'] = new Gym('Acerola', 'Elite Acerola', [
    new GymPokemon('Burpmon', 85547357, 56),
    new GymPokemon('Burpmon', 85547357, 56),
    new GymPokemon('Burpmon', 85547357, 56),
    new GymPokemon('Burpmon', 85547357, 56),
    new GymPokemon('Burpmon', 86456446, 57),
], BadgeEnums.Elite_Acerola, 64000, 'I\'m...I\'m speechless! You\'ve done me in!', [new GymBadgeRequirement(BadgeEnums.Elite_Olivia)]);
GymList['Elite Kahili'] = new Gym('Kahili', 'Elite Kahili', [
    new GymPokemon('Burpmon', 85547357, 56),
    new GymPokemon('Burpmon', 85547357, 56),
    new GymPokemon('Burpmon', 85547357, 56),
    new GymPokemon('Burpmon', 85547357, 56),
    new GymPokemon('Burpmon', 86456446, 57),
], BadgeEnums.Elite_Kahili, 64000, 'It\'s frustrating to me as a member of the Elite Four, but it seems your strength is the real deal.', [new GymBadgeRequirement(BadgeEnums.Elite_Acerola)]);
// Alola Champion
// TODO: Balancing - Set HP
GymList['Champion Hau'] = new Champion('Hau', 'Champion Hau', [
    new GymPokemon('Burpmon', 91545555, 59),
    new GymPokemon('Burpmon', 89636471, 58),
    new GymPokemon('Burpmon', 89636471, 58),
    new GymPokemon('Burpmon', 91545555, 59),
], BadgeEnums.Elite_AlolaChampion, 100000, 'We\'re gonna keep moving forward, by staying at full power all the time!', [new GymBadgeRequirement(BadgeEnums.Elite_Kahili)], 
// Burpmon
[
    new GymPokemon('Burpmon', 89636471, 58),
    new GymPokemon('Burpmon', 96725389, 60),
], 
// Burpmon
[
    new GymPokemon('Burpmon', 89636471, 58),
    new GymPokemon('Burpmon', 96725389, 60),
], 
// Burpmon/Burpmon
[
    new GymPokemon('Burpmon', 89636471, 58),
    new GymPokemon('Burpmon', 96725389, 60),
]);
//Galar Leaders
//TODO Addition of G-Max forms?
GymList['Turffield'] = new Gym('Milo', 'Turffield', [
    new GymPokemon('Burpmon', 40466361, 19),
    new GymPokemon('Burpmon', 42596169, 20),
], BadgeEnums.Galar_Grass, 40000, 'The power of Grass has wilted... What an incredible Gym Challenger!', [new RouteKillRequirement(10, GameConstants.Region.galar, 4)]);
GymList['Hulbury'] = new Gym('Nessa', 'Hulbury', [
    new GymPokemon('Burpmon', 47607484, 22),
    new GymPokemon('Burpmon', 48108615, 23),
    new GymPokemon('Burpmon', 50113141, 24),
], BadgeEnums.Galar_Water, 60000, 'I may proudly be the strongest member of this Gym, but I was totally washed away!', [new RouteKillRequirement(10, GameConstants.Region.galar, 5)]);
GymList['Motostoke'] = new Gym('Kabu', 'Motostoke', [
    new GymPokemon('Burpmon', 56008804, 25),
    new GymPokemon('Burpmon', 56008804, 25),
    new GymPokemon('Burpmon', 58936636, 27),
], BadgeEnums.Galar_Fire, 60000, 'I\'m often regarded as the first real roadblock of the Gym Challenge, and yet you defeated me! Clearly, your talent surpassed my many years of experience. I still have much to learn!', [new RouteKillRequirement(10, GameConstants.Region.galar, 13)]);
GymList['Stow-on-Side1'] = new Gym('Bea', 'Stow-on-Side1', [
    new GymPokemon('Burpmon', 65892712, 34),
    new GymPokemon('Burpmon', 65892712, 34),
    new GymPokemon('Burpmon', 66586319, 35),
    new GymPokemon('Burpmon', 69360749, 36),
], BadgeEnums.Galar_Fighting, 80000, 'Your strength nearly made me want to turn and run in my bare feet', [new RouteKillRequirement(10, GameConstants.Region.galar, 15)]);
GymList['Stow-on-Side2'] = new Gym('Allister', 'Stow-on-Side2', [
    new GymPokemon('Burpmon', 65892712, 34),
    new GymPokemon('Burpmon', 65892712, 34),
    new GymPokemon('Burpmon', 66586319, 35),
    new GymPokemon('Burpmon', 69360749, 36),
], BadgeEnums.Galar_Ghost, 80000, 'Maybe my mask... kept me from seeing just how strong you really are...', [new RouteKillRequirement(10, GameConstants.Region.galar, 15)]);
GymList['Ballonlea'] = new Gym('Opal', 'Ballonlea', [
    new GymPokemon('Burpmon', 71622513, 36),
    new GymPokemon('Burpmon', 71622513, 36),
    new GymPokemon('Burpmon', 73130355, 37),
    new GymPokemon('Burpmon', 75392119, 38),
], BadgeEnums.Galar_Fairy, 80000, 'Your pink is still lacking, but you\'re an excellent Trainer with some excellent Pokémon.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glimwood Tangle'))]);
GymList['Circhester1'] = new Gym('Gordie', 'Circhester1', [
    new GymPokemon('Burpmon', 84261781, 40),
    new GymPokemon('Burpmon', 84261781, 40),
    new GymPokemon('Burpmon', 86035713, 41),
    new GymPokemon('Burpmon', 88696611, 42),
], BadgeEnums.Galar_Rock, 80000, 'I just want to climb into a hole... Well, I guess it\'d be more like falling from here.', [new RouteKillRequirement(10, GameConstants.Region.galar, 18)]);
GymList['Circhester2'] = new Gym('Melony', 'Circhester2', [
    new GymPokemon('Burpmon', 84261781, 40),
    new GymPokemon('Burpmon', 84261781, 40),
    new GymPokemon('Burpmon', 86035713, 41),
    new GymPokemon('Burpmon', 88696611, 42),
], BadgeEnums.Galar_Ice, 80000, 'I think you took breaking the ice a little too literally...', [new RouteKillRequirement(10, GameConstants.Region.galar, 18)]);
GymList['Spikemuth'] = new Gym('Piers', 'Spikemuth', [
    new GymPokemon('Burpmon', 99141007, 44),
    new GymPokemon('Burpmon', 100184597, 45),
    new GymPokemon('Burpmon', 100184597, 45),
    new GymPokemon('Burpmon', 104348955, 46),
], BadgeEnums.Galar_Dark, 96000, 'Me an\' my team gave it our best. Let\'s meet up again for a battle some time...', [new RouteKillRequirement(10, GameConstants.Region.galar, 22)]);
GymList['Hammerlocke'] = new Gym('Raihan', 'Hammerlocke', [
    new GymPokemon('Burpmon', 111645278, 46),
    new GymPokemon('Burpmon', 112820492, 47),
    new GymPokemon('Burpmon', 111645278, 46),
    new GymPokemon('Burpmon', 117521346, 48),
], BadgeEnums.Galar_Dragon, 128000, 'I might have lost, but I still look good. Maybe I should snap a quick selfie...', [
    new RouteKillRequirement(10, GameConstants.Region.galar, 22),
    new GymBadgeRequirement(BadgeEnums.Galar_Dark),
]);
GymList['Trainer Marnie'] = new Gym('Marnie', 'Trainer Marnie', [
    new GymPokemon('Burpmon', 117521346, 47),
    new GymPokemon('Burpmon', 117521346, 47),
    new GymPokemon('Burpmon', 117521346, 47),
    new GymPokemon('Burpmon', 127967688, 48),
    new GymPokemon('Burpmon', 130579274, 49),
], BadgeEnums.Elite_Marnie, 150000, 'I mean, If you\'re gonna win, you could at least win in a way that makes me look good, right?', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rose Tower'))]);
GymList['Gym Leader Bede'] = new Gym('Bede', 'Gym Leader Bede', [
    new GymPokemon('Burpmon', 117521346, 51),
    new GymPokemon('Burpmon', 117521346, 51),
    new GymPokemon('Burpmon', 117521346, 51),
    new GymPokemon('Burpmon', 127967688, 52),
    new GymPokemon('Burpmon', 130579274, 53),
], BadgeEnums.Elite_Bede, 150000, 'I couldn\'t win, but at least I was able to show everyone how great Fairy types are.', [new GymBadgeRequirement(BadgeEnums.Elite_Marnie)]);
GymList['Trainer Hop'] = new Gym('Hop', 'Trainer Hop', [
    new GymPokemon('Burpmon', 130579274, 59),
    new GymPokemon('Burpmon', 117521346, 58),
    new GymPokemon('Burpmon', 117521346, 58),
    new GymPokemon('Burpmon', 117521346, 58),
    new GymPokemon('Burpmon', 130579274, 59),
    new GymPokemon('Burpmon', 137833678, 60),
], BadgeEnums.Elite_Hop, 200000, 'Thanks, mate. I\'m really glad you were the one here with me.', [new GymBadgeRequirement(BadgeEnums.Elite_Bede)]
// TODO: Add ability to change gym leaders pokemon based on your starter
// Burpmon
// [new GymPokemon('Burpmon', 137833678, 60)],
// Burpmon
// [new GymPokemon('Burpmon', 137833678, 60)],
// Burpmon/Burpmon
// [new GymPokemon('Burpmon', 137833678, 60)]
);
// Galar Champion
//TODO: rewards/hp rebalance
GymList['Champion Leon'] = new Champion('Leon', 'Champion Leon', [
    new GymPokemon('Burpmon', 130579274, 62),
    new GymPokemon('Burpmon', 130579274, 62),
    new GymPokemon('Burpmon', 130579274, 63),
], BadgeEnums.Elite_GalarChampion, 250000, 'My time as Champion is over... But what a champion time it\'s been! Thank you for the greatest battle I\'ve ever had!', [new GymBadgeRequirement(BadgeEnums.Elite_Hop)], 
// Burpmon
[
    new GymPokemon('Burpmon', 133481036, 64),
    new GymPokemon('Burpmon', 137833678, 64),
    new GymPokemon('Burpmon', 145088083, 65),
], 
// Burpmon
[
    new GymPokemon('Burpmon', 133481036, 64),
    new GymPokemon('Burpmon', 137833678, 64),
    new GymPokemon('Burpmon', 145088083, 65),
], 
// Burpmon/Burpmon
[
    new GymPokemon('Burpmon', 133481036, 64),
    new GymPokemon('Burpmon', 137833678, 64),
    new GymPokemon('Burpmon', 145088083, 65),
]);
// Armor + crown gyms
GymList['Gym Leader Klara'] = new Gym('Klara', 'Gym Leader Klara', [
    new GymPokemon('Burpmon', 144036193, 68),
    new GymPokemon('Burpmon', 144036193, 68),
    new GymPokemon('Burpmon', 144036193, 68),
    new GymPokemon('Burpmon', 147068434, 69),
    new GymPokemon('Burpmon', 151617045, 70),
], BadgeEnums.Elite_ArmorPoison, 150000, 'Aww, come on! What a drag! But...I guess it was also kinda fun!', [
    new MultiRequirement([
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tower of Darkness')),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tower of Water')),
    ]),
]);
GymList['Gym Leader Avery'] = new Gym('Avery', 'Gym Leader Avery', [
    new GymPokemon('Burpmon', 144036193, 68),
    new GymPokemon('Burpmon', 144036193, 68),
    new GymPokemon('Burpmon', 144036193, 68),
    new GymPokemon('Burpmon', 147068434, 69),
    new GymPokemon('Burpmon', 151617045, 70),
], BadgeEnums.Elite_ArmorPsychic, 150000, 'More! I require more! Show me your Stored Power!', [new GymBadgeRequirement(BadgeEnums.Elite_ArmorPoison)]);
GymList['Dojo Master Mustard'] = new Gym('Mustard', 'Dojo Master Mustard', [
    new GymPokemon('Burpmon', 151617046, 73),
    new GymPokemon('Burpmon', 151617046, 73),
    new GymPokemon('Burpmon', 154808984, 75),
    new GymPokemon('Burpmon', 154808984, 75),
    new GymPokemon('Burpmon', 159596891, 75),
    new GymPokemon('Burpmon', 159596891, 75),
], BadgeEnums.Elite_ArmorChampion, 250000, 'That strength of yours doesn\'t bend easily!', [new GymBadgeRequirement(BadgeEnums.Elite_ArmorPsychic)]);
GymList['Trainer Peony'] = new Gym('Freezington', 'Trainer Peony', [
    new GymPokemon('Burpmon', 197029616, 74),
    new GymPokemon('Burpmon', 192967150, 73),
    new GymPokemon('Burpmon', 192967150, 73),
    new GymPokemon('Burpmon', 197029616, 74),
    new GymPokemon('Burpmon', 203123316, 74),
], BadgeEnums.Elite_CrownChampion, 250000, 'Gone and got stronger again, have you? Ah well! Hats off to you-in more ways than one!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Crown Shrine'))]);
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/enums/Badges.d.ts" />
class GymRunner {
    static startGym(gym, autoRestart = false, initialRun = true) {
        this.initialRun = initialRun;
        this.autoRestart(autoRestart);
        this.running(false);
        this.gymObservable(gym);
        if (gym instanceof Champion) {
            gym.setPokemon(player.regionStarters[player.region]());
        }
        App.game.gameState = GameConstants.GameState.idle;
        GymRunner.timeLeft(GameConstants.GYM_TIME);
        GymRunner.timeLeftPercentage(100);
        GymBattle.gym = gym;
        GymBattle.totalPokemons(gym.pokemons.length);
        GymBattle.index(0);
        GymBattle.generateNewEnemy();
        App.game.gameState = GameConstants.GameState.gym;
        this.running(true);
        this.resetGif();
        setTimeout(() => {
            this.hideGif();
        }, GameConstants.GYM_COUNTDOWN);
    }
    static hideGif() {
        $('#gymGoContainer').hide();
    }
    static resetGif() {
        // If the user doesn't want the animation, just return
        if (!Settings.getSetting('showGymGoAnimation').value) {
            return;
        }
        if (!this.autoRestart() || this.initialRun) {
            $('#gymGoContainer').show();
            setTimeout(() => {
                $('#gymGo').attr('src', 'assets/gifs/go.gif');
            }, 0);
        }
    }
    static tick() {
        if (!this.running()) {
            return;
        }
        if (this.timeLeft() < 0) {
            GymRunner.gymLost();
        }
        this.timeLeft(this.timeLeft() - GameConstants.GYM_TICK);
        this.timeLeftPercentage(Math.floor(this.timeLeft() / GameConstants.GYM_TIME * 100));
    }
    static gymLost() {
        if (this.running()) {
            this.running(false);
            Notifier.notify({
                message: `It appears you are not strong enough to defeat ${GymBattle.gym.leaderName}`,
                type: NotificationConstants.NotificationOption.danger,
            });
            App.game.gameState = GameConstants.GameState.town;
        }
    }
    static gymWon(gym) {
        if (this.running()) {
            this.running(false);
            Notifier.notify({
                message: `Congratulations, you defeated ${GymBattle.gym.leaderName}!`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.General.gym_won,
            });
            // If this is the first time defeating this gym
            if (!App.game.badgeCase.hasBadge(gym.badgeReward)) {
                gym.firstWinReward();
            }
            GameHelper.incrementObservable(App.game.statistics.challengesDefeated[GameConstants.getGymIndex(gym.town)]);
            // Auto restart gym battle
            if (this.autoRestart()) {
                const cost = (this.gymObservable().moneyReward || 10) * 2;
                const amt = new Amount(cost, GameConstants.Currency.money);
                // If the player can afford it, restart the gym
                if (App.game.wallet.loseAmount(amt)) {
                    this.startGym(this.gymObservable(), this.autoRestart(), false);
                    return;
                }
            }
            // Award money for defeating gym
            App.game.wallet.gainMoney(gym.moneyReward);
            // Send the player back to the town they were in
            player.town(gym.parent);
            App.game.gameState = GameConstants.GameState.town;
        }
    }
}
GymRunner.timeLeft = ko.observable(GameConstants.GYM_TIME);
GymRunner.timeLeftPercentage = ko.observable(100);
GymRunner.gymObservable = ko.observable(GymList['Koromon Village']);
GymRunner.running = ko.observable(false);
GymRunner.autoRestart = ko.observable(false);
GymRunner.initialRun = true;
GymRunner.timeLeftSeconds = ko.pureComputed(() => {
    return (Math.ceil(GymRunner.timeLeft() / 100) / 10).toFixed(1);
});
document.addEventListener('DOMContentLoaded', () => {
    $('#receiveBadgeModal').on('hidden.bs.modal', () => {
        if (GymBattle.gym.badgeReward == BadgeEnums.Sincerity_Crest) {
            KeyItemController.showGainModal(KeyItemType.Safari_ticket);
        }
        if (GymBattle.gym.badgeReward == BadgeEnums.Hope_Crest) {
            KeyItemController.showGainModal(KeyItemType.Chip_case);
        }
    });
});
/**
 * Static class as an API for handling items.
 */
class BagHandler {
    /**
     * Gets the display name for the item
     * @param item The item identifier
     */
    static displayName(item) {
        if (!item) {
            return '';
        }
        switch (item.type) {
            case ItemType.item:
                return this.getItem(item.id).displayName;
            case ItemType.underground:
                return this.getUndergroundItem(item.id).displayName;
            case ItemType.berry:
                return `${BerryType[this.getBerry(item.id)]} Disk`;
            case ItemType.gem:
                return `${PokemonType[this.getGem(item.id)]} Chip`;
        }
    }
    /**
     * Gets the image path for the item
     * @param item The item identifier
     */
    static image(item) {
        if (!item) {
            return '';
        }
        switch (item.type) {
            case ItemType.item:
                return this.getItem(item.id).image;
            case ItemType.underground:
                return this.getUndergroundItem(item.id).image;
            case ItemType.berry:
                return FarmController.getBerryImage(this.getBerry(item.id));
            case ItemType.gem:
                return Gems.image(this.getGem(item.id));
        }
    }
    /**
     * Gets the amount observable for the item. NOTE: You shouldn't use this to modify the amount, as there might
     * be some additional code that needs to be run via the base gainItem API calls. Use BagHandler.gainItem instead.
     * @param item The item identifier
     */
    static amount(item) {
        if (!item) {
            return null;
        }
        switch (item.type) {
            case ItemType.item:
                return player.itemList[this.getItem(item.id).name];
            case ItemType.underground:
                return player.mineInventory()[player.mineInventoryIndex(this.getUndergroundItem(item.id).id)].amount;
            case ItemType.berry:
                return App.game.farming.berryList[this.getBerry(item.id)];
            case ItemType.gem:
                return App.game.gems.gemWallet[this.getGem(item.id)];
        }
    }
    /**
     * Handles updating the amount for an item. This should be used instead of modifying the amount observable
     * directly, as the base method might have additional handling.
     * @param item The item identifier
     * @param amount The amount to be added to the Bag. Defaults to 1.
     */
    static gainItem(item, amount = 1) {
        if (!item) {
            return;
        }
        switch (item.type) {
            case ItemType.item:
                this.getItem(item.id).gain(amount);
                return;
            case ItemType.underground:
                Underground.gainMineItem(this.getUndergroundItem(item.id).id, amount);
                return;
            case ItemType.berry:
                App.game.farming.gainBerry(this.getBerry(item.id), amount, false);
                return;
            case ItemType.gem:
                App.game.gems.gainGems(amount, this.getGem(item.id));
                return;
        }
    }
    //#region Item getters
    static getItem(id) {
        return ItemList[id];
    }
    static getUndergroundItem(id) {
        if (typeof id === 'string') {
            return Underground.getMineItemByName(id);
        }
        else {
            return Underground.getMineItemById(id);
        }
    }
    static getBerry(id) {
        if (typeof id === 'string') {
            id = App.game.farming.berryData.findIndex((_, idx) => BerryType[idx] === id);
        }
        return id;
    }
    static getGem(id) {
        if (typeof id === 'string') {
            id = PokemonType[id];
        }
        return id;
    }
}
///<reference path="../towns/TownContent.ts"/>
class Shop extends TownContent {
    constructor(items, name = undefined, requirements = []) {
        super(requirements);
        this.items = items;
        this.name = name;
        this.tooltip = 'Visit shops to buy items.';
        this.amountInput = () => $('#shopModal').find('input[name="amountOfItems"]');
    }
    cssClass() {
        return 'btn btn-secondary';
    }
    text() {
        var _a;
        return (_a = this.name) !== null && _a !== void 0 ? _a : 'Digi Mart';
    }
    isVisible() {
        return true;
    }
    onclick() {
        ShopHandler.showShop(this);
        $('#shopModal').modal('show');
    }
    get displayName() {
        if (this.name) {
            return this.name;
        }
        if (!this.parent) {
            return 'Poké Mart';
        }
        return `Digi Mart ${this.parent.name}`;
    }
}
///<reference path="Shop.ts"/>
class ShopHandler {
    static showShop(shop) {
        this.setSelected(0);
        this.resetAmount();
        this.shopObservable(shop);
        shop.items.forEach(item => {
            item.price(Math.round(item.basePrice * (player.itemMultipliers[item.saveName] || 1)));
        });
    }
    //#region Controls
    static setSelected(i) {
        this.selected(i);
    }
    static buyItem() {
        const item = this.shopObservable().items[ShopHandler.selected()];
        item.buy(this.amount());
        if (Settings.getSetting('resetShopAmountOnPurchase').observableValue()) {
            ShopHandler.resetAmount();
        }
    }
    static resetAmount() {
        this.shopObservable().amountInput().val(1).change();
    }
    static increaseAmount(n) {
        const newVal = (parseInt(this.shopObservable().amountInput().val().toString(), 10) || 0) + n;
        this.shopObservable().amountInput().val(newVal > 1 ? newVal : 1).change();
    }
    static multiplyAmount(n) {
        const newVal = (parseInt(this.shopObservable().amountInput().val().toString(), 10) || 0) * n;
        this.shopObservable().amountInput().val(newVal > 1 ? newVal : 1).change();
    }
    static maxAmount() {
        const item = this.shopObservable().items[ShopHandler.selected()];
        if (!item || !item.isAvailable()) {
            return this.shopObservable().amountInput().val(0).change();
        }
        const tooMany = (amt) => amt > item.maxAmount || !App.game.wallet.hasAmount(new Amount(item.totalPrice(amt), item.currency));
        const amt = GameHelper.binarySearch(tooMany, 0, Number.MAX_SAFE_INTEGER);
        this.shopObservable().amountInput().val(amt).change();
    }
    //#endregion
    //#region UI
    static calculateCss(i) {
        if (this.selected() == i) {
            return 'shopItem clickable btn btn-secondary active';
        }
        else {
            return 'shopItem clickable btn btn-secondary';
        }
    }
    static calculateButtonCss() {
        const item = this.shopObservable().items[ShopHandler.selected()];
        if (item && !(item.isAvailable() && App.game.wallet.hasAmount(new Amount(item.totalPrice(this.amount()), item.currency)))
            || this.amount() < 1) {
            return 'btn btn-danger smallButton smallFont';
        }
        else {
            return 'btn btn-success smallButton smallFont';
        }
    }
}
ShopHandler.shopObservable = ko.observable(new Shop([]));
ShopHandler.selected = ko.observable(0);
ShopHandler.amount = ko.observable(1);
///<reference path="../shop/ShopHandler.ts"/>
/**
 * Source event for decreasing shop multipliers
 */
var MultiplierDecreaser;
(function (MultiplierDecreaser) {
    MultiplierDecreaser[MultiplierDecreaser["Battle"] = 0] = "Battle";
    MultiplierDecreaser[MultiplierDecreaser["Berry"] = 1] = "Berry";
})(MultiplierDecreaser || (MultiplierDecreaser = {}));
class Item {
    constructor(name, basePrice, currency = GameConstants.Currency.money, { saveName = '', maxAmount = Number.MAX_SAFE_INTEGER, multiplier = GameConstants.ITEM_PRICE_MULTIPLIER, multiplierDecrease = true, multiplierDecreaser = MultiplierDecreaser.Battle, } = {}, levelreq, displayName, description, imageDirectory) {
        this.name = name;
        this.basePrice = basePrice;
        this.currency = currency;
        this.levelreq = levelreq;
        this.price = ko.observable(this.basePrice);
        // If no custom save name specified, default to item name
        this.saveName = saveName || name || `${name}|${GameConstants.Currency[currency]}`;
        this.maxAmount = maxAmount || Number.MAX_SAFE_INTEGER;
        // Multiplier needs to be above 1
        this.multiplier = Math.max(1, multiplier || GameConstants.ITEM_PRICE_MULTIPLIER);
        this.multiplierDecrease = multiplierDecrease;
        this.multiplierDecreaser = multiplierDecreaser || MultiplierDecreaser.Battle;
        if (!ItemList[this.saveName]) {
            ItemList[this.saveName] = this;
        }
        this._displayName = displayName !== null && displayName !== void 0 ? displayName : name;
        this._description = description;
        this.imageDirectory = imageDirectory;
    }
    totalPrice(amount) {
        if (this.name == GameConstants.Pokeball[GameConstants.Pokeball.Pokeball]) {
            return Math.max(0, this.basePrice * amount);
        }
        else {
            // multiplier should be capped at 100, so work out how many to buy at increasing price and how many at max
            //    (m_start) * (m^k) = 100
            // => k = (2 - log(m_start)) / log(m)
            const mStart = Math.max(player.itemMultipliers[this.saveName] || 1, 1);
            const k = (mStart < 100)
                ? Math.ceil((2 - Math.log10(mStart)) / Math.log10(this.multiplier))
                : 0;
            const incAmount = Math.min(k, amount);
            const incCost = (this.price() * (1 - Math.pow(this.multiplier, incAmount))) / (1 - this.multiplier);
            const maxCost = (this.basePrice * 100 * (amount - incAmount));
            const total = incCost + maxCost;
            return Math.max(0, Math.round(total));
        }
    }
    buy(n) {
        if (PokemonHelper.getPokemonByName(ShopHandler.shopObservable().displayName).id != 0) {
            if (App.game.party.getPokemon(PokemonHelper.getPokemonByName(ShopHandler.shopObservable().displayName).id).level < this.levelreq) {
                Notifier.notify({
                    message: `Your Digimon's level isn't high enough!`,
                    type: NotificationConstants.NotificationOption.danger,
                });
                return;
            }
            if (PartyController.getCaughtStatusByName(this.name) != CaughtStatus.NotCaught) {
                let prot = Math.floor(this.basePrice / 100);
                if (prot >= 1) {
                    Notifier.notify({
                        message: `${prot} Proteins obtained!`,
                        type: NotificationConstants.NotificationOption.success,
                    });
                    GameHelper.incrementObservable(App.game.statistics.totalProteinsObtained, prot);
                    player.gainItem('Protein', prot);
                }
            }
        }
        if (n <= 0) {
            return;
        }
        if (n > this.maxAmount) {
            Notifier.notify({
                message: `You can only buy ${this.maxAmount} &times; ${GameConstants.humanifyString(this.displayName)}!`,
                type: NotificationConstants.NotificationOption.danger,
            });
            n = this.maxAmount;
        }
        if (!this.isAvailable()) {
            Notifier.notify({
                message: `${GameConstants.humanifyString(this.displayName)} is sold out!`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return;
        }
        const multiple = n > 1 ? 's' : '';
        if (App.game.wallet.loseAmount(new Amount(this.totalPrice(n), this.currency))) {
            this.gain(n);
            this.increasePriceMultiplier(n);
            Notifier.notify({
                message: `You obtained ${n} ${GameConstants.humanifyString(this.displayName)}${multiple}`,
                type: NotificationConstants.NotificationOption.success,
            });
        }
        else {
            let curr = GameConstants.camelCaseToString(GameConstants.Currency[this.currency]);
            switch (this.currency) {
                case GameConstants.Currency.money:
                    break;
                default:
                    curr += 's';
                    break;
            }
            Notifier.notify({
                message: `You don't have enough ${curr} for that.`,
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    gain(n) {
        player.gainItem(this.name, n);
        if (this.name == 'Protein') {
            GameHelper.incrementObservable(App.game.statistics.totalProteinsObtained, n);
        }
    }
    use() {
        return false;
    }
    checkCanUse() {
        if (!player.itemList[this.name]()) {
            Notifier.notify({
                message: `You don't have any ${ItemList[this.name].displayName}s left...`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        return true;
    }
    isAvailable() {
        return true;
    }
    isSoldOut() {
        return false;
    }
    getDescription() {
        return this._description;
    }
    increasePriceMultiplier(amount = 1) {
        player.itemMultipliers[this.saveName] = Math.min(100, (player.itemMultipliers[this.saveName] || 1) * Math.pow(this.multiplier, amount));
        this.price(Math.round(this.basePrice * player.itemMultipliers[this.saveName]));
    }
    decreasePriceMultiplier(amount = 1, multiplierDecreaser) {
        if (!this.multiplierDecrease) {
            return;
        }
        if (this.multiplierDecreaser !== multiplierDecreaser) {
            return;
        }
        player.itemMultipliers[this.saveName] = Math.max(1, (player.itemMultipliers[this.saveName] || 1) / Math.pow(this.multiplier, amount));
        this.price(Math.round(this.basePrice * player.itemMultipliers[this.saveName]));
    }
    get description() {
        return this._description;
    }
    get displayName() {
        return this._displayName;
    }
    get image() {
        const subDirectory = this.imageDirectory ? `${this.imageDirectory}/` : '';
        return `assets/images/items/${subDirectory}${this.name}.png`;
    }
}
const ItemList = {};
///<reference path="Item.ts"/>
class BattleItem extends Item {
    constructor(type, description, basePrice, currency = GameConstants.Currency.money, displayName, multiplierType, multiplyBy) {
        super(GameConstants.BattleItemType[type], basePrice, currency, undefined, undefined, displayName, description, 'battleItem');
        this.multiplierType = multiplierType;
        this.multiplyBy = multiplyBy;
        this.type = type;
    }
    use() {
        EffectEngineRunner.addEffect(this.name, ItemHandler.amountToUse);
        return true;
    }
    checkCanUse() {
        if (App.game.challenges.list.disableBattleItems.active()) {
            Notifier.notify({
                title: 'Challenge Mode',
                message: 'Battle Items are disabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (!player.itemList[this.name]()) {
            Notifier.notify({
                message: `You don't have any ${ItemList[this.name].displayName}s left...`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        return true;
    }
}
ItemList['xAttack'] = new BattleItem(GameConstants.BattleItemType.xAttack, '+50% Bonus to Digimon attack for 30 seconds', 600, undefined, undefined, 'pokemonAttack', 1.5);
ItemList['xClick'] = new BattleItem(GameConstants.BattleItemType.xClick, '+50% Bonus to click attack for 30 seconds', 400, undefined, undefined, 'clickAttack', 1.5);
ItemList['Lucky_pill'] = new BattleItem(GameConstants.BattleItemType.Lucky_pill, '+50% Bonus to experience gained for 30 seconds', 800, undefined, 'Lucky Pill', 'exp', 1.5);
ItemList['Intel_floppy'] = new BattleItem(GameConstants.BattleItemType.Intel_floppy, '+50% Bonus to scan coins gained for 30 seconds', 1000, undefined, 'Intel Floppy', 'explorecoin', 1.5);
ItemList['Item_magnet'] = new BattleItem(GameConstants.BattleItemType.Item_magnet, 'Increased chance of gaining extra items for 30 seconds', 1500, undefined, 'Item Magnet');
ItemList['Lucky_floppy'] = new BattleItem(GameConstants.BattleItemType.Lucky_floppy, '+50% Bonus to money gained for 30 seconds', 2000, undefined, 'Lucky Floppy', 'money', 1.5);
///<reference path="Item.ts"/>
class BerryItem extends Item {
    constructor(berry, basePrice, currency = GameConstants.Currency.farmPoint, berryReq) {
        super(`${BerryType[berry]}Berry`, basePrice, currency, { maxAmount: 1 }, undefined, `${BerryType[berry]} Disk`);
        this.berry = berry;
        this.berryReq = berryReq;
        this.berryName = BerryType[berry];
    }
    gain(amt) {
        App.game.farming.gainBerry(this.berry, amt, false);
    }
    get description() {
        return `Obtain a ${this.berryName}<br/><i>(No Hina Item challenge runs only)</i>`;
    }
    isAvailable() {
        var _a, _b, _c, _d;
        const hasBerry = (_a = !!App.game.farming.berryList[this.berry]()) !== null && _a !== void 0 ? _a : false;
        const unlockedBerryReq = (_d = (_c = (_b = App.game.farming.unlockedBerries)[this.berryReq]) === null || _c === void 0 ? void 0 : _c.call(_b)) !== null && _d !== void 0 ? _d : false;
        const noOakItemChallenge = App.game.challenges.list.disableOakItems.active();
        return super.isAvailable() && !hasBerry && unlockedBerryReq && noOakItemChallenge;
    }
    get image() {
        return `assets/images/items/berry/${this.berryName}.png`;
    }
}
ItemList['PuzzleDisk'] = new BerryItem(BerryType.Puzzle, 10000, GameConstants.Currency.farmPoint, BerryType.Advice);
ItemList['FortuneDisk'] = new BerryItem(BerryType.Fortune, 10000, GameConstants.Currency.farmPoint, BerryType.Search);
ItemList['ExerciseDisk'] = new BerryItem(BerryType.Exercise, 10000, GameConstants.Currency.farmPoint, BerryType.Gourmet);
ItemList['LibraryDisk'] = new BerryItem(BerryType.Library, 10000, GameConstants.Currency.farmPoint, BerryType.Dictionary);
class CaughtIndicatingItem extends Item {
}
/// <reference path="CaughtIndicatingItem.ts" />
class EggItem extends CaughtIndicatingItem {
    constructor(type, basePrice, currency = GameConstants.Currency.farmPoint, displayName) {
        super(GameConstants.EggItemType[type], basePrice, currency, undefined, undefined, displayName, 'An egg. Can be hatched in the Day Care.', 'egg');
        this.type = type;
    }
    use() {
        if (player.itemList[this.name]() <= 0) {
            return false;
        }
        let success;
        if (this.type === GameConstants.EggItemType.Pokemon_egg) {
            success = App.game.breeding.gainPokemonEgg(pokemonMap.randomRegion(player.highestRegion()));
        }
        else if (this.type === GameConstants.EggItemType.Mystery_egg) {
            success = App.game.breeding.gainRandomEgg();
        }
        else {
            const etype = EggType[GameConstants.EggItemType[this.type].split('_')[0]];
            success = App.game.breeding.gainEgg(App.game.breeding.createTypedEgg(etype));
        }
        if (success) {
            player.loseItem(this.name, 1);
        }
        return success;
    }
    getCaughtStatus() {
        switch (this.type) {
            case (GameConstants.EggItemType.Pokemon_egg): {
                // random pokemon
                return CaughtStatus.NotCaught;
            }
            case (GameConstants.EggItemType.Mystery_egg): {
                return App.game.breeding.getAllCaughtStatus();
            }
            default: {
                const etype = EggType[GameConstants.EggItemType[this.type].split('_')[0]];
                return App.game.breeding.getTypeCaughtStatus(etype);
            }
        }
    }
}
ItemList['Fire_egg'] = new EggItem(GameConstants.EggItemType.Fire_egg, 1000, undefined, 'Fire Egg');
ItemList['Water_egg'] = new EggItem(GameConstants.EggItemType.Water_egg, 1000, undefined, 'Water Egg');
ItemList['Plant_egg'] = new EggItem(GameConstants.EggItemType.Plant_egg, 1000, undefined, 'Plant Egg');
ItemList['Earth_egg'] = new EggItem(GameConstants.EggItemType.Earth_egg, 1000, undefined, 'Earth egg');
ItemList['Electric_egg'] = new EggItem(GameConstants.EggItemType.Electric_egg, 1000, undefined, 'Electric Egg');
ItemList['Wind_egg'] = new EggItem(GameConstants.EggItemType.Wind_egg, 1000, undefined, 'Wind_egg');
ItemList['Pokemon_egg'] = new EggItem(GameConstants.EggItemType.Pokemon_egg, 1000, undefined, 'Digimon Egg');
ItemList['Mystery_egg'] = new EggItem(GameConstants.EggItemType.Mystery_egg, 700, undefined, 'Mystery Egg');
///<reference path="Item.ts"/>
class EnergyRestore extends Item {
    constructor(type, basePrice, currency = GameConstants.Currency.money, displayName) {
        super(GameConstants.EnergyRestoreSize[type], basePrice, currency, undefined, undefined, displayName, 'Restores Energy in the Underground.');
        this.type = type;
    }
    use() {
        if (player.itemList[this.name]() <= 0) {
            return false;
        }
        if (App.game.underground.energy === App.game.underground.getMaxEnergy()) {
            Notifier.notify({
                message: 'Your mining energy is already full!',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        App.game.underground.gainEnergyThroughItem(this.type);
        player.loseItem(this.name, 1);
        return true;
    }
}
ItemList['SmallRestore'] = new EnergyRestore(GameConstants.EnergyRestoreSize.SmallRestore, 30000, undefined, 'Small Restore');
ItemList['MediumRestore'] = new EnergyRestore(GameConstants.EnergyRestoreSize.MediumRestore, 100000, undefined, 'Medium Restore');
ItemList['LargeRestore'] = new EnergyRestore(GameConstants.EnergyRestoreSize.LargeRestore, 400000, undefined, 'Large Restore');
///<reference path="Item.ts"/>
class EvolutionStone extends CaughtIndicatingItem {
    constructor(type, basePrice, currency = GameConstants.Currency.diamond, displayName, unlockedRegion) {
        super(GameConstants.StoneType[type], basePrice, currency, undefined, undefined, displayName, 'An evolution item. See your itembag for more information.', 'evolution');
        this.getCaughtStatus = ko.pureComputed(() => {
            // Only include Pokémon which have evolutions
            const unlockedEvolutions = pokemonList.filter((p) => p.evolutions)
                // only include base Pokémon we have caught
                .filter(p => PartyController.getCaughtStatusByName(p.name))
                // Map to the evolution which uses this stone type
                .map((p) => p.evolutions.filter(e => e.type.includes(EvolutionType.Stone) && e.stone === this.type))
                // Flatten the array (in case of multiple evolutions)
                .flat()
                // Ensure the we actually found an evolution
                .filter(evolution => evolution)
                // Filter out any Pokémon which can't be obtained yet (future region)
                .filter(evolution => PokemonHelper.calcNativeRegion(evolution.getEvolvedPokemon()) <= player.highestRegion())
                // Finally get the evolution
                .map(evolution => evolution.getEvolvedPokemon());
            if (unlockedEvolutions.length == 0) {
                return undefined;
            }
            // Calculate the lowest caught status
            return unlockedEvolutions.reduce((status, pokemonName) => {
                return Math.min(status, PartyController.getCaughtStatusByName(pokemonName));
            }, CaughtStatus.CaughtShiny);
        });
        this.type = type;
        this.unlockedRegion = unlockedRegion;
    }
    gain(n) {
        player.gainItem(GameConstants.StoneType[this.type], n);
    }
    use(pokemon) {
        const partyPokemon = App.game.party.getPokemon(PokemonHelper.getPokemonByName(pokemon).id);
        const shiny = partyPokemon.useStone(this.type);
        return shiny;
    }
}
// TODO: Set prices for different kinds of stones
ItemList['Purity_Digimental'] = new EvolutionStone(GameConstants.StoneType.Purity_Digimental, 250, undefined, 'Purity Digimental');
ItemList['Courage_Digimental'] = new EvolutionStone(GameConstants.StoneType.Courage_Digimental, 250, undefined, 'Courage Digimental');
ItemList['Sincerity_Digimental'] = new EvolutionStone(GameConstants.StoneType.Sincerity_Digimental, 250, undefined, 'Sincerity Digimental');
ItemList['Knowledge_Digimental'] = new EvolutionStone(GameConstants.StoneType.Knowledge_Digimental, 250, undefined, 'Knowledge Digimental');
ItemList['Hope_Digimental'] = new EvolutionStone(GameConstants.StoneType.Hope_Digimental, 250, undefined, 'Hope Digimental');
ItemList['Kindness_Digimental'] = new EvolutionStone(GameConstants.StoneType.Kindness_Digimental, 250, undefined, 'Kindness Digimental');
ItemList['Love_Digimental'] = new EvolutionStone(GameConstants.StoneType.Love_Digimental, 250, undefined, 'Love Digimental');
ItemList['Soothe_bell'] = new EvolutionStone(GameConstants.StoneType.Soothe_bell, 250, undefined, 'Soothe Bell');
ItemList['Metal_coat'] = new EvolutionStone(GameConstants.StoneType.Metal_coat, 250, undefined, 'Metal Coat');
ItemList['Kings_rock'] = new EvolutionStone(GameConstants.StoneType.Kings_rock, 250, undefined, 'King\'s Rock');
ItemList['Upgrade'] = new EvolutionStone(GameConstants.StoneType.Upgrade, 250, undefined, 'Upgrade');
ItemList['Dragon_scale'] = new EvolutionStone(GameConstants.StoneType.Dragon_scale, 250, undefined, 'Dragon Scale');
ItemList['Prism_scale'] = new EvolutionStone(GameConstants.StoneType.Prism_scale, 250, undefined, 'Prism Scale');
ItemList['Deepsea_tooth'] = new EvolutionStone(GameConstants.StoneType.Deepsea_tooth, 250, undefined, 'Deep Sea Tooth');
ItemList['Deepsea_scale'] = new EvolutionStone(GameConstants.StoneType.Deepsea_scale, 250, undefined, 'Deep Sea Scale');
ItemList['Miracles_Digimental'] = new EvolutionStone(GameConstants.StoneType.Miracles_Digimental, 250, undefined, 'Miracles Digimental');
ItemList['Fate_Digimental'] = new EvolutionStone(GameConstants.StoneType.Fate_Digimental, 250, undefined, 'Fate Digimental');
ItemList['Light_Digimental'] = new EvolutionStone(GameConstants.StoneType.Light_Digimental, 250, undefined, 'Light Digimental');
ItemList['Razor_claw'] = new EvolutionStone(GameConstants.StoneType.Razor_claw, 250, undefined, 'Razor Claw');
ItemList['Razor_fang'] = new EvolutionStone(GameConstants.StoneType.Razor_fang, 250, undefined, 'Razor Fang');
ItemList['Electirizer'] = new EvolutionStone(GameConstants.StoneType.Electirizer, 250, undefined, 'Electirizer');
ItemList['Magmarizer'] = new EvolutionStone(GameConstants.StoneType.Magmarizer, 250, undefined, 'Magmarizer');
ItemList['Protector'] = new EvolutionStone(GameConstants.StoneType.Protector, 250, undefined, 'Protector');
ItemList['Dubious_disc'] = new EvolutionStone(GameConstants.StoneType.Dubious_disc, 250, undefined, 'Dubious Disc');
ItemList['Reaper_cloth'] = new EvolutionStone(GameConstants.StoneType.Reaper_cloth, 250, undefined, 'Reaper Cloth');
ItemList['Black_DNA'] = new EvolutionStone(GameConstants.StoneType.Black_DNA, 250, undefined, 'Black DNA');
ItemList['White_DNA'] = new EvolutionStone(GameConstants.StoneType.White_DNA, 250, undefined, 'White DNA');
ItemList['Sachet'] = new EvolutionStone(GameConstants.StoneType.Sachet, 250, undefined, 'Sachet');
ItemList['Whipped_dream'] = new EvolutionStone(GameConstants.StoneType.Whipped_dream, 250, undefined, 'Whipped Dream');
ItemList['Friendship_Digimental'] = new EvolutionStone(GameConstants.StoneType.Friendship_Digimental, 250, undefined, 'Friendship Digimental');
///<reference path="Item.ts"/>
class FarmHandItem extends Item {
    constructor(farmHandName, basePrice, currency = GameConstants.Currency.farmPoint) {
        super(`FarmHand${farmHandName}`, basePrice, currency, { maxAmount: 1 }, undefined, `Farm Hand ${farmHandName}`);
        this.farmHandName = farmHandName;
    }
    get farmHand() {
        return FarmHands.list.find(f => f.name == this.farmHandName);
    }
    get description() {
        var _a, _b, _c, _d, _e;
        const farmHand = this.farmHand;
        return `Cost: <img alt="Farm Points" src="assets/images/currency/farmPoint.svg" width="20px">&nbsp;${((_b = (_a = farmHand === null || farmHand === void 0 ? void 0 : farmHand.cost) === null || _a === void 0 ? void 0 : _a.amount) !== null && _b !== void 0 ? _b : 0).toLocaleString('en-US')}/hour<br/>
        Work Speed: ${GameConstants.formatTimeFullLetters(((_c = farmHand === null || farmHand === void 0 ? void 0 : farmHand.workTick) !== null && _c !== void 0 ? _c : GameConstants.MINUTE) / 1000)}<br/>
        Efficiency: ${((_d = farmHand === null || farmHand === void 0 ? void 0 : farmHand.efficiency) !== null && _d !== void 0 ? _d : 0).toLocaleString('en-US')}<br/>
        Max Energy: ${((_e = farmHand === null || farmHand === void 0 ? void 0 : farmHand.maxEnergy) !== null && _e !== void 0 ? _e : 0).toLocaleString('en-US')}`;
    }
    isAvailable() {
        var _a, _b;
        const purchased = (_b = (_a = this.farmHand) === null || _a === void 0 ? void 0 : _a.isUnlocked()) !== null && _b !== void 0 ? _b : true;
        return super.isAvailable() && !purchased;
    }
    get image() {
        var _a;
        const trainerID = ((_a = this.farmHand) === null || _a === void 0 ? void 0 : _a.trainerSprite) || 0;
        return `assets/images/profile/trainer-${trainerID}.png`;
    }
}
// Berry Masters
ItemList['FarmHandBailey'] = new FarmHandItem('Bailey', 50000, GameConstants.Currency.farmPoint); // Johto (50k)
ItemList['FarmHandKerry'] = new FarmHandItem('Kerry', 100000, GameConstants.Currency.farmPoint); // Hoenn (100k)
ItemList['FarmHandRiley'] = new FarmHandItem('Riley', 200000, GameConstants.Currency.farmPoint); // Sinnoh (200k)
//ItemList['FarmHandJessie']   = new FarmHandItem('Jessie', 500000, GameConstants.Currency.farmPoint); // Alola (500k) (not implemented)
// Battle Frontier
ItemList['FarmHandJamie'] = new FarmHandItem('Jamie', 20000, GameConstants.Currency.battlePoint);
///<reference path="Item.ts"/>
class FluteItem extends Item {
    constructor(name, description, gemTypes, multiplierType, multiplyBy) {
        super(name, Infinity, undefined, { maxAmount: 1 }, undefined, description, undefined, 'fluteItem');
        this.gemTypes = gemTypes;
        this.multiplierType = multiplierType;
        this.multiplyBy = multiplyBy;
    }
    use() {
        FluteEffectRunner.toggleEffect(this.name);
        return true;
    }
    getDescription() {
        const multiplier = ((this.getMultiplier() - 1) * 100).toFixed(2);
        return `+${multiplier}% bonus to ${this.description}`;
    }
    getMultiplier() {
        return (this.multiplyBy - 1) * (AchievementHandler.achievementBonus() + 1) + 1;
    }
    isSoldOut() {
        return player.itemList[this.name]() > 0 || FluteEffectRunner.isActive(GameConstants.FluteItemType[this.name])();
    }
    checkCanUse() {
        if (App.game.challenges.list.disableGems.active()) {
            Notifier.notify({
                title: 'Challenge Mode',
                message: 'Gems are Disabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (App.game.challenges.list.disableBattleItems.active()) {
            Notifier.notify({
                title: 'Challenge Mode',
                message: 'Battle Items are Disabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (!FluteEffectRunner.isActive(GameConstants.FluteItemType[this.name])() && !player.itemList[this.name]()) {
            Notifier.notify({
                message: `You don't have any ${this.displayName}s...`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (FluteEffectRunner.getLowestGem(this.name) <= FluteEffectRunner.numActiveFlutes() + 1) {
            Notifier.notify({
                message: 'You don\'t have enough gems to use this Flute',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        return true;
    }
}
ItemList['H_Fire_Spirit'] = new FluteItem(GameConstants.FluteItemType.H_Fire_Spirit, 'Click Attack', ['Fire', 'Vaccine', 'Electric'], 'clickAttack', 1.02);
ItemList['H_Light_Spirit'] = new FluteItem(GameConstants.FluteItemType.H_Light_Spirit, 'Exp Yield', ['Light', 'Data', 'Neutral'], 'exp', 1.02);
ItemList['H_Wind_Spirit'] = new FluteItem(GameConstants.FluteItemType.H_Wind_Spirit, 'Item Drop Rate', ['Plant', 'Wind', 'Vaccine'], undefined, 1.02);
ItemList['H_Steel_Spirit'] = new FluteItem(GameConstants.FluteItemType.H_Steel_Spirit, 'Digidollar Yield', ['Free', 'Light', 'Neutral'], 'money', 1.02);
ItemList['H_Water_Spirit'] = new FluteItem(GameConstants.FluteItemType.H_Water_Spirit, 'Scan Coin Yield', ['Free', 'Water', 'Dark'], 'dungeonToken', 1.02);
ItemList['H_Thunder_Spirit'] = new FluteItem(GameConstants.FluteItemType.H_Thunder_Spirit, 'Digimon Attack', ['Vaccine', 'Fire', 'Electric'], 'pokemonAttack', 1.02);
ItemList['Azure_Flute'] = new FluteItem(GameConstants.FluteItemType.Azure_Flute, 'Shiny Chance', ['Neutral', 'Earth', 'Dark'], 'shiny', 1.02);
ItemList['CH_Dark_Spirit'] = new FluteItem(GameConstants.FluteItemType.CH_Dark_Spirit, 'Roaming Chance', ['Wind', 'Dark', 'Virus'], 'roaming', 1.02);
ItemList['H_Dark_Spirit'] = new FluteItem(GameConstants.FluteItemType.H_Dark_Spirit, 'Egg Steps', ['Fire', 'Earth', 'Water'], 'eggStep', 1.02);
ItemList['H_Earth_Spirit'] = new FluteItem(GameConstants.FluteItemType.H_Earth_Spirit, 'Mining Energy Regeneration Yield and Time', ['Data', 'Earth', 'Electric'], undefined, 1.02);
ItemList['H_Ice_Spirit'] = new FluteItem(GameConstants.FluteItemType.H_Ice_Spirit, 'Dungeon Timer', ['Plant', 'Virus', 'Water'], undefined, 1.02);
ItemList['H_Wood_Spirit'] = new FluteItem(GameConstants.FluteItemType.H_Wood_Spirit, 'Farm Replant and Growth Multipliers', ['Plant', 'Data', 'Light'], undefined, 1.02);
///<reference path="Item.ts"/>
class HatcheryHelperItem extends Item {
    constructor(hatcheryHelperName, basePrice, currency = GameConstants.Currency.money) {
        super(`HatcheryHelper${hatcheryHelperName}`, basePrice, currency, { maxAmount: 1 }, undefined, `Hatchery Helper ${hatcheryHelperName}`);
        this.hatcheryHelperName = hatcheryHelperName;
    }
    get hatcheryHelper() {
        return HatcheryHelpers.list.find(f => f.name == this.hatcheryHelperName);
    }
    get description() {
        var _a, _b, _c, _d, _e;
        const hatcheryHelper = this.hatcheryHelper;
        return `Cost: <img src="assets/images/currency/${GameConstants.Currency[(_a = hatcheryHelper === null || hatcheryHelper === void 0 ? void 0 : hatcheryHelper.cost) === null || _a === void 0 ? void 0 : _a.currency]}.svg" width="20px">&nbsp;${((_c = (_b = hatcheryHelper === null || hatcheryHelper === void 0 ? void 0 : hatcheryHelper.cost) === null || _b === void 0 ? void 0 : _b.amount) !== null && _c !== void 0 ? _c : 0).toLocaleString('en-US')}/hatch<br/>
        Step Efficiency: ${((_d = hatcheryHelper === null || hatcheryHelper === void 0 ? void 0 : hatcheryHelper.stepEfficiencyBase) !== null && _d !== void 0 ? _d : 0).toLocaleString('en-US')}%<br/>
        Attack Efficiency: ${((_e = hatcheryHelper === null || hatcheryHelper === void 0 ? void 0 : hatcheryHelper.attackEfficiencyBase) !== null && _e !== void 0 ? _e : 0).toLocaleString('en-US')}%`;
    }
    isAvailable() {
        var _a, _b;
        const purchased = (_b = (_a = this.hatcheryHelper) === null || _a === void 0 ? void 0 : _a.isUnlocked()) !== null && _b !== void 0 ? _b : true;
        return super.isAvailable() && !purchased;
    }
    get image() {
        var _a;
        const trainerID = ((_a = this.hatcheryHelper) === null || _a === void 0 ? void 0 : _a.trainerSprite) || 0;
        return `assets/images/profile/trainer-${trainerID}.png`;
    }
}
// Berry Masters
ItemList['HatcheryHelperJasmine'] = new HatcheryHelperItem('Jasmine', 10000000, GameConstants.Currency.money);
ItemList['HatcheryHelperDakota'] = new HatcheryHelperItem('Dakota', 100000, GameConstants.Currency.explorecoin);
ItemList['HatcheryHelperCarey'] = new HatcheryHelperItem('Carey', 10000, GameConstants.Currency.farmPoint);
ItemList['HatcheryHelperKris'] = new HatcheryHelperItem('Kris', 2000, GameConstants.Currency.diamond);
ItemList['HatcheryHelperNoel'] = new HatcheryHelperItem('Noel', 20000, GameConstants.Currency.battlePoint);
class ItemHandler {
    static useItem(name, amount = 1) {
        if (!ItemList[name].checkCanUse()) {
            return false;
        }
        // Only allow the player to use the amount they have maximum
        this.amountToUse = Math.min(player.itemList[name](), amount);
        player.itemList[name](player.itemList[name]() - this.amountToUse);
        // run the function
        const result = ItemList[name].use();
        // If the function returned nothing assume it went fine
        return result == undefined ? true : result;
    }
    static hasItem(name) {
        return player.itemList[name] ? !!player.itemList[name]() : false;
    }
    static resetAmount() {
        const input = $('input[name="amountOfStones"]');
        input.val(1).change();
    }
    static increaseAmount(n) {
        const input = $('input[name="amountOfItems"]');
        const newVal = (parseInt(input.val().toString(), 10) || 0) + n;
        input.val(newVal > 1 ? newVal : 1).change();
    }
    static useStones() {
        if (!this.pokemonSelected()) {
            return Notifier.notify({
                message: 'No Digimon selected',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
        const amountTotal = Math.min(this.amountSelected(), player.itemList[this.stoneSelected()]());
        if (!amountTotal) {
            return Notifier.notify({
                // TODO: PMX - Update plural system to handle all cases
                message: `You don't have any ${ItemList[this.stoneSelected()].displayName}s left...`,
                type: NotificationConstants.NotificationOption.danger,
            });
        }
        let amountUsed = 0;
        for (let i = 0; i < amountTotal; i++) {
            player.itemList[this.stoneSelected()](player.itemList[this.stoneSelected()]() - 1);
            amountUsed++;
            if (ItemList[this.stoneSelected()].use(this.pokemonSelected())) {
                // Stop when a shiny is encountered
                break;
            }
        }
        const multiple = amountUsed == 1 ? '' : 's';
        Notifier.notify({
            // TODO: PMX - Update plural system to handle all cases
            message: `You used ${amountUsed} ${ItemList[this.stoneSelected()].displayName}${multiple}`,
            type: NotificationConstants.NotificationOption.success,
        });
    }
    static initilizeEvoStones() {
        // Set our unlock regions
        Object.values(ItemList).filter(item => item instanceof EvolutionStone).forEach(evoStone => {
            // If a region has already been manually set
            if (evoStone.unlockedRegion > GameConstants.Region.none) {
                return false;
            }
            // Get a list of evolutions that use this stone, set the unlock region to the lowest region
            evoStone.unlockedRegion = Math.min(...pokemonList.filter(p => 
            // Filter to only include pokemon that make use of this evolution stone
            p.nativeRegion > GameConstants.Region.none &&
                p.evolutions != undefined &&
                p.evolutions.some(e => e instanceof StoneEvolution && e.stone == evoStone.type)).map(p => {
                // Map to the native region for evolutions that use this stone
                return Math.min(...p.evolutions.filter(e => e instanceof StoneEvolution && e.stone == evoStone.type)
                    .map(e => Math.max(p.nativeRegion, PokemonHelper.calcNativeRegion(e.getEvolvedPokemon())))
                    .filter(r => r > GameConstants.Region.none));
            }));
        });
    }
}
ItemHandler.stoneSelected = ko.observable('Courage_Digimental');
ItemHandler.pokemonSelected = ko.observable('V-mon');
ItemHandler.amountSelected = ko.observable(1);
ItemHandler.amount = ko.observable(1);
ItemHandler.amountToUse = 1;
/*
To update this type when adding new items:

Open the game, and run the following code in the browser console

copy(`type ItemNameType
    = ${[...new Set(Object.values(ItemList).map(i => i.name))].map(i => `'${i.replace(/'/g, "\\'")}'`).join('\n    | ')};`);

Replace the everything in this file (except for this comment) with what was copied
*/
/// <reference path="Item.ts"/>
/// <reference path="../../declarations/enums/MulchType.d.ts"/>
class MulchItem extends Item {
    constructor(type, basePrice, displayName, description) {
        super(MulchType[type], basePrice, GameConstants.Currency.farmPoint, { multiplierDecreaser: MultiplierDecreaser.Berry }, undefined, displayName, description, 'farm');
        this.type = type;
    }
    gain(amt) {
        GameHelper.incrementObservable(App.game.farming.mulchList[this.type], amt);
    }
}
ItemList['Speed_Boost'] = new MulchItem(MulchType.Speed_Boost, 50, 'Speed Boost', 'Increases Disk burn speed.');
ItemList['Space_Boost'] = new MulchItem(MulchType.Space_Boost, 100, 'Space Boost', 'Increases Disk production.');
ItemList['Surprise_Boost'] = new MulchItem(MulchType.Surprise_Boost, 150, 'Surprise Boost', 'Increases disk modification rate.');
ItemList['Quality_Boost'] = new MulchItem(MulchType.Quality_Boost, 200, 'Quality Boost', 'Increases all boost effects.');
class PokeBlock extends Item {
    constructor(color, basePrice, currency = GameConstants.Currency.money) {
        super(`PokeBlock_${GameConstants.PokeBlockColor[color]}`, basePrice, currency, undefined, undefined);
        this.type = color;
    }
}
ItemList['PokeBlock_Black'] = new PokeBlock(GameConstants.PokeBlockColor.Black, Infinity);
ItemList['PokeBlock_Red'] = new PokeBlock(GameConstants.PokeBlockColor.Red, Infinity);
ItemList['PokeBlock_Gold'] = new PokeBlock(GameConstants.PokeBlockColor.Gold, Infinity);
ItemList['PokeBlock_Purple'] = new PokeBlock(GameConstants.PokeBlockColor.Purple, Infinity);
ItemList['PokeBlock_Gray'] = new PokeBlock(GameConstants.PokeBlockColor.Gray, Infinity);
ItemList['PokeBlock_White'] = new PokeBlock(GameConstants.PokeBlockColor.White, Infinity);
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="Item.ts" />
class PokeballItem extends Item {
    constructor(type, basePrice, currency = GameConstants.Currency.money, options, displayName) {
        super(GameConstants.Pokeball[type], basePrice, currency, options, undefined, displayName, undefined, 'pokeball');
        this.type = type;
    }
    gain(amt) {
        App.game.pokeballs.gainPokeballs(this.type, amt);
    }
}
ItemList['Pokeball'] = new PokeballItem(GameConstants.Pokeball.Pokeball, 100, undefined, undefined, 'Digiscan');
ItemList['Greatball'] = new PokeballItem(GameConstants.Pokeball.Greatball, 500, undefined, undefined, 'Greatscan');
ItemList['Ultraball'] = new PokeballItem(GameConstants.Pokeball.Ultraball, 2000, undefined, undefined, 'Ultrascan');
ItemList['Masterball'] = new PokeballItem(GameConstants.Pokeball.Masterball, 2500, GameConstants.Currency.farmPoint, undefined, 'Masterscan');
// Not sold in shops
ItemList['Fastball'] = new PokeballItem(GameConstants.Pokeball.Fastball, Infinity, GameConstants.Currency.farmPoint, undefined, 'Fastscan');
ItemList['Quickball'] = new PokeballItem(GameConstants.Pokeball.Quickball, Infinity, GameConstants.Currency.farmPoint, undefined, 'Quickscan');
ItemList['Timerball'] = new PokeballItem(GameConstants.Pokeball.Timerball, Infinity, GameConstants.Currency.farmPoint, undefined, 'Timescan');
ItemList['Duskball'] = new PokeballItem(GameConstants.Pokeball.Duskball, Infinity, GameConstants.Currency.farmPoint, undefined, 'Duskscan');
ItemList['Luxuryball'] = new PokeballItem(GameConstants.Pokeball.Luxuryball, Infinity, GameConstants.Currency.farmPoint, undefined, 'Luxuryscan');
ItemList['Diveball'] = new PokeballItem(GameConstants.Pokeball.Diveball, Infinity, GameConstants.Currency.battlePoint, undefined, 'Divescan');
ItemList['Lureball'] = new PokeballItem(GameConstants.Pokeball.Lureball, Infinity, GameConstants.Currency.battlePoint, undefined, 'Lurescan');
ItemList['Nestball'] = new PokeballItem(GameConstants.Pokeball.Nestball, Infinity, GameConstants.Currency.battlePoint, undefined, 'Nestscan');
ItemList['Repeatball'] = new PokeballItem(GameConstants.Pokeball.Repeatball, Infinity, GameConstants.Currency.battlePoint, undefined, 'Repeatscan');
/// <reference path="CaughtIndicatingItem.ts" />
class PokemonItem extends CaughtIndicatingItem {
    constructor(pokemon, basePrice, currency = GameConstants.Currency.farmPoint, levelreq) {
        super(pokemon, basePrice, currency, undefined, levelreq, undefined, undefined, 'pokemonItem');
        this.type = pokemon;
    }
    gain(amt) {
        let shiny = false;
        for (let i = 0; i < amt; i++) {
            shiny = shiny || PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SHOP);
        }
        const pokemonName = this.name;
        if (shiny) {
            Notifier.notify({
                message: `👾 You obtained a dot ${pokemonName}! 👾`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
        App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(pokemonName).id, shiny, true);
    }
    getCaughtStatus() {
        return PartyController.getCaughtStatusByName(this.name);
    }
    get image() {
        const subDirectory = this.imageDirectory ? `${this.imageDirectory}/` : '';
        const digimonid = PokemonHelper.getPokemonByName(this.name).id;
        return `assets/images/items/${subDirectory}${digimonid}.png`;
    }
}
ItemList['Ohakadamon'] = new PokemonItem('Ohakadamon', 1, Currency.explorecoin, 100);
ItemList['Botamon'] = new PokemonItem('Botamon', 8, Currency.defencecoin, 12);
ItemList['Punimon'] = new PokemonItem('Punimon', 9, Currency.attackcoin, 12);
ItemList['Koromon'] = new PokemonItem('Koromon', 23, Currency.attackcoin, 15);
ItemList['Tunomon'] = new PokemonItem('Tunomon', 22, Currency.attackcoin, 15);
ItemList['Agumon'] = new PokemonItem('Agumon', 51, Currency.attackcoin, 21);
ItemList['Betamon'] = new PokemonItem('Betamon', 36, Currency.intcoin, 20);
ItemList['Damemon Cmon'] = new PokemonItem('Damemon Cmon', 39, Currency.attackcoin, 21);
ItemList['Elecmon'] = new PokemonItem('Elecmon', 31, Currency.magiccoin, 20);
ItemList['Gabumon'] = new PokemonItem('Gabumon', 34, Currency.healthcoin, 21);
ItemList['Airdramon'] = new PokemonItem('Airdramon', 69, Currency.speedcoin, 29);
ItemList['Angemon'] = new PokemonItem('Angemon', 71, Currency.intcoin, 31);
ItemList['Birdramon'] = new PokemonItem('Birdramon', 65, Currency.speedcoin, 30);
ItemList['Devimon'] = new PokemonItem('Devimon', 75, Currency.attackcoin, 31);
ItemList['Garurumon'] = new PokemonItem('Garurumon', 75, Currency.speedcoin, 30);
ItemList['Greymon'] = new PokemonItem('Greymon', 85, Currency.attackcoin, 31);
ItemList['Kabuterimon'] = new PokemonItem('Kabuterimon', 65, Currency.defencecoin, 29);
ItemList['Meramon'] = new PokemonItem('Meramon', 75, Currency.attackcoin, 29);
ItemList['Numemon'] = new PokemonItem('Numemon', 75, Currency.healthcoin, 29);
ItemList['Seadramon'] = new PokemonItem('Seadramon', 71, Currency.intcoin, 29);
ItemList['Tyranomon'] = new PokemonItem('Tyranomon', 85, Currency.attackcoin, 29);
ItemList['Vegimon'] = new PokemonItem('Vegimon', 75, Currency.healthcoin, 29);
ItemList['Whamon'] = new PokemonItem('Whamon', 105, Currency.healthcoin, 41);
ItemList['Yukidarumon'] = new PokemonItem('Yukidarumon', 75, Currency.healthcoin, 29);
ItemList['Mamemon'] = new PokemonItem('Mamemon', 113, Currency.defencecoin, 38);
ItemList['Metal Greymon Virus'] = new PokemonItem('Metal Greymon Virus', 138, Currency.attackcoin, 42);
ItemList['Metal Mamemon'] = new PokemonItem('Metal Mamemon', 113, Currency.defencecoin, 39);
ItemList['Monzaemon'] = new PokemonItem('Monzaemon', 119, Currency.healthcoin, 39);
ItemList['Skull Greymon'] = new PokemonItem('Skull Greymon', 175, Currency.attackcoin, 42);
ItemList['Vademon'] = new PokemonItem('Vademon', 138, Currency.intcoin, 38);
ItemList['Deathmon Cmon'] = new PokemonItem('Deathmon Cmon', 225, Currency.magiccoin, 33);
ItemList['Bubbmon'] = new PokemonItem('Bubbmon', 8, Currency.healthcoin, 12);
ItemList['Pitchmon'] = new PokemonItem('Pitchmon', 9, Currency.intcoin, 12);
ItemList['Poyomon'] = new PokemonItem('Poyomon', 9, Currency.magiccoin, 12);
ItemList['Yuramon'] = new PokemonItem('Yuramon', 8, Currency.healthcoin, 12);
ItemList['Zurumon'] = new PokemonItem('Zurumon', 10, Currency.magiccoin, 12);
ItemList['Mochimon'] = new PokemonItem('Mochimon', 20, Currency.healthcoin, 15);
ItemList['Pagumon'] = new PokemonItem('Pagumon', 20, Currency.magiccoin, 15);
ItemList['Pukamon'] = new PokemonItem('Pukamon', 20, Currency.intcoin, 15);
ItemList['Tanemon'] = new PokemonItem('Tanemon', 20, Currency.healthcoin, 15);
ItemList['Tokomon'] = new PokemonItem('Tokomon', 20, Currency.speedcoin, 15);
ItemList['Ganimon'] = new PokemonItem('Ganimon', 42, Currency.defencecoin, 20);
ItemList['Gazimon'] = new PokemonItem('Gazimon', 45, Currency.attackcoin, 19);
ItemList['Gizamon'] = new PokemonItem('Gizamon', 43, Currency.healthcoin, 21);
ItemList['Gomamon'] = new PokemonItem('Gomamon', 40, Currency.healthcoin, 21);
ItemList['Gottsumon'] = new PokemonItem('Gottsumon', 42, Currency.defencecoin, 21);
ItemList['Kunemon'] = new PokemonItem('Kunemon', 39, Currency.speedcoin, 20);
ItemList['Otamamon'] = new PokemonItem('Otamamon', 38, Currency.intcoin, 19);
ItemList['Palmon'] = new PokemonItem('Palmon', 39, Currency.healthcoin, 21);
ItemList['Patamon'] = new PokemonItem('Patamon', 33, Currency.defencecoin, 19);
ItemList['Piyomon'] = new PokemonItem('Piyomon', 30, Currency.magiccoin, 19);
ItemList['Shakomon'] = new PokemonItem('Shakomon', 37, Currency.intcoin, 19);
ItemList['Tentomon'] = new PokemonItem('Tentomon', 36, Currency.defencecoin, 19);
ItemList['Tyumon'] = new PokemonItem('Tyumon', 36, Currency.speedcoin, 19);
ItemList['Bakemon'] = new PokemonItem('Bakemon', 85, Currency.magiccoin, 29);
ItemList['Centalmon'] = new PokemonItem('Centalmon', 85, Currency.intcoin, 30);
ItemList['Cockatrimon'] = new PokemonItem('Cockatrimon', 72, Currency.speedcoin, 31);
ItemList['Coelamon'] = new PokemonItem('Coelamon', 80, Currency.healthcoin, 29);
ItemList['Cyclomon'] = new PokemonItem('Cyclomon', 78, Currency.attackcoin, 29);
ItemList['Dark Tyranomon'] = new PokemonItem('Dark Tyranomon', 103, Currency.defencecoin, 30);
ItemList['Deltamon'] = new PokemonItem('Deltamon', 79, Currency.defencecoin, 29);
ItemList['Devidramon'] = new PokemonItem('Devidramon', 75, Currency.speedcoin, 30);
ItemList['Drimogemon'] = new PokemonItem('Drimogemon', 101, Currency.healthcoin, 31);
ItemList['Ebidramon'] = new PokemonItem('Ebidramon', 94, Currency.defencecoin, 31);
ItemList['Evilmon'] = new PokemonItem('Evilmon', 71, Currency.magiccoin, 30);
ItemList['Flymon'] = new PokemonItem('Flymon', 93, Currency.speedcoin, 29);
ItemList['Gekomon'] = new PokemonItem('Gekomon', 65, Currency.magiccoin, 29);
ItemList['Gesomon'] = new PokemonItem('Gesomon', 71, Currency.healthcoin, 31);
ItemList['Gokimon'] = new PokemonItem('Gokimon', 71, Currency.speedcoin, 31);
ItemList['Gorimon'] = new PokemonItem('Gorimon', 74, Currency.intcoin, 30);
ItemList['Ikkakumon'] = new PokemonItem('Ikkakumon', 70, Currency.healthcoin, 30);
ItemList['Kuwagamon'] = new PokemonItem('Kuwagamon', 90, Currency.attackcoin, 29);
ItemList['Leomon'] = new PokemonItem('Leomon', 80, Currency.attackcoin, 30);
ItemList['Mechanorimon'] = new PokemonItem('Mechanorimon', 85, Currency.defencecoin, 29);
ItemList['Minotaurmon'] = new PokemonItem('Minotaurmon', 66, Currency.healthcoin, 30);
ItemList['Mojyamon'] = new PokemonItem('Mojyamon', 87, Currency.healthcoin, 31);
ItemList['Monochromon'] = new PokemonItem('Monochromon', 72, Currency.attackcoin, 29);
ItemList['Nanimon'] = new PokemonItem('Nanimon', 70, Currency.defencecoin, 29);
ItemList['Octmon'] = new PokemonItem('Octmon', 90, Currency.intcoin, 29);
ItemList['Orgemon'] = new PokemonItem('Orgemon', 92, Currency.attackcoin, 30);
ItemList['Raremon'] = new PokemonItem('Raremon', 89, Currency.healthcoin, 29);
ItemList['Rukamon'] = new PokemonItem('Rukamon', 99, Currency.intcoin, 31);
ItemList['Scumon'] = new PokemonItem('Scumon', 80, Currency.healthcoin, 29);
ItemList['Shellmon'] = new PokemonItem('Shellmon', 80, Currency.defencecoin, 30);
ItemList['Starmon'] = new PokemonItem('Starmon', 60, Currency.defencecoin, 29);
ItemList['Tailmon'] = new PokemonItem('Tailmon', 80, Currency.magiccoin, 30);
ItemList['Tortamon'] = new PokemonItem('Tortamon', 105, Currency.defencecoin, 30);
ItemList['Tuskmon'] = new PokemonItem('Tuskmon', 72, Currency.healthcoin, 29);
ItemList['Unimon'] = new PokemonItem('Unimon', 65, Currency.intcoin, 29);
ItemList['V-dramon'] = new PokemonItem('V-dramon', 75, Currency.attackcoin, 31);
ItemList['Andromon'] = new PokemonItem('Andromon', 118, Currency.defencecoin, 39);
ItemList['Angewomon'] = new PokemonItem('Angewomon', 157, Currency.intcoin, 42);
ItemList['Anomalocarimon'] = new PokemonItem('Anomalocarimon', 130, Currency.healthcoin, 41);
ItemList['Atlur Kabuterimon Blue'] = new PokemonItem('Atlur Kabuterimon Blue', 169, Currency.healthcoin, 39);
ItemList['Dagomon'] = new PokemonItem('Dagomon', 123, Currency.intcoin, 39);
ItemList['Digitamamon'] = new PokemonItem('Digitamamon', 119, Currency.defencecoin, 39);
ItemList['Etemon'] = new PokemonItem('Etemon', 100, Currency.magiccoin, 41);
ItemList['Ex-Tyranomon'] = new PokemonItem('Ex-Tyranomon', 150, Currency.attackcoin, 42);
ItemList['Giromon'] = new PokemonItem('Giromon', 125, Currency.speedcoin, 39);
ItemList['Holy Angemon'] = new PokemonItem('Holy Angemon', 125, Currency.intcoin, 42);
ItemList['Jyagamon'] = new PokemonItem('Jyagamon', 125, Currency.defencecoin, 39);
ItemList['Lady Devimon'] = new PokemonItem('Lady Devimon', 125, Currency.magiccoin, 42);
ItemList['Mammon'] = new PokemonItem('Mammon', 149, Currency.defencecoin, 42);
ItemList['Marin Devimon'] = new PokemonItem('Marin Devimon', 118, Currency.intcoin, 44);
ItemList['Mega Seadramon'] = new PokemonItem('Mega Seadramon', 119, Currency.intcoin, 41);
ItemList['Megadramon'] = new PokemonItem('Megadramon', 119, Currency.attackcoin, 39);
ItemList['Metal Tyranomon'] = new PokemonItem('Metal Tyranomon', 144, Currency.defencecoin, 41);
ItemList['Nanomon'] = new PokemonItem('Nanomon', 140, Currency.intcoin, 39);
ItemList['Ookuwamon'] = new PokemonItem('Ookuwamon', 125, Currency.defencecoin, 39);
ItemList['Piccolomon'] = new PokemonItem('Piccolomon', 113, Currency.speedcoin, 39);
ItemList['Tonosama Gekomon'] = new PokemonItem('Tonosama Gekomon', 169, Currency.healthcoin, 39);
ItemList['Triceramon'] = new PokemonItem('Triceramon', 138, Currency.defencecoin, 39);
ItemList['Whamon Perfect'] = new PokemonItem('Whamon Perfect', 155, Currency.healthcoin, 43);
ItemList['Zudomon'] = new PokemonItem('Zudomon', 125, Currency.healthcoin, 41);
ItemList['Herakle Kabuterimon'] = new PokemonItem('Herakle Kabuterimon', 158, Currency.healthcoin, 50);
ItemList['Holydramon'] = new PokemonItem('Holydramon', 203, Currency.healthcoin, 56);
ItemList['Marin Angemon'] = new PokemonItem('Marin Angemon', 210, Currency.intcoin, 50);
ItemList['Metal Etemon'] = new PokemonItem('Metal Etemon', 188, Currency.defencecoin, 50);
ItemList['Metal Seadramon'] = new PokemonItem('Metal Seadramon', 158, Currency.intcoin, 50);
ItemList['Pukumon'] = new PokemonItem('Pukumon', 170, Currency.defencecoin, 58);
ItemList['Saber Leomon'] = new PokemonItem('Saber Leomon', 248, Currency.attackcoin, 52);
ItemList['Holy Angemon Priest Mode'] = new PokemonItem('Holy Angemon Priest Mode', 225, Currency.intcoin, 44);
ItemList['Choromon'] = new PokemonItem('Choromon', 9, Currency.defencecoin, 12);
ItemList['Mokumon'] = new PokemonItem('Mokumon', 9, Currency.attackcoin, 12);
ItemList['Nyokimon'] = new PokemonItem('Nyokimon', 9, Currency.healthcoin, 12);
ItemList['Yukimi Botamon'] = new PokemonItem('Yukimi Botamon', 7, Currency.magiccoin, 12);
ItemList['Caprimon'] = new PokemonItem('Caprimon', 15, Currency.defencecoin, 15);
ItemList['Nyaromon'] = new PokemonItem('Nyaromon', 22, Currency.magiccoin, 15);
ItemList['Peti Meramon'] = new PokemonItem('Peti Meramon', 19, Currency.attackcoin, 15);
ItemList['Pyocomon'] = new PokemonItem('Pyocomon', 21, Currency.healthcoin, 15);
ItemList['Alraumon'] = new PokemonItem('Alraumon', 52, Currency.healthcoin, 19);
ItemList['Bakumon'] = new PokemonItem('Bakumon', 42, Currency.defencecoin, 20);
ItemList['Candmon'] = new PokemonItem('Candmon', 49, Currency.magiccoin, 21);
ItemList['Clear Agumon'] = new PokemonItem('Clear Agumon', 52, Currency.magiccoin, 21);
ItemList['Dokunemon'] = new PokemonItem('Dokunemon', 45, Currency.defencecoin, 20);
ItemList['Floramon'] = new PokemonItem('Floramon', 49, Currency.intcoin, 21);
ItemList['Goburimon'] = new PokemonItem('Goburimon', 39, Currency.attackcoin, 19);
ItemList['Hagurumon'] = new PokemonItem('Hagurumon', 36, Currency.intcoin, 19);
ItemList['Kokuwamon'] = new PokemonItem('Kokuwamon', 45, Currency.magiccoin, 21);
ItemList['Modoki Betamon'] = new PokemonItem('Modoki Betamon', 52, Currency.speedcoin, 20);
ItemList['Muchomon'] = new PokemonItem('Muchomon', 51, Currency.healthcoin, 20);
ItemList['Mushmon'] = new PokemonItem('Mushmon', 36, Currency.healthcoin, 19);
ItemList['Penmon'] = new PokemonItem('Penmon', 48, Currency.intcoin, 21);
ItemList['Pico Devimon'] = new PokemonItem('Pico Devimon', 36, Currency.speedcoin, 19);
ItemList['Plotmon'] = new PokemonItem('Plotmon', 42, Currency.intcoin, 19);
ItemList['Psychemon'] = new PokemonItem('Psychemon', 49, Currency.magiccoin, 21);
ItemList['Shamamon'] = new PokemonItem('Shamamon', 50, Currency.speedcoin, 20);
ItemList['Snow Goburimon'] = new PokemonItem('Snow Goburimon', 48, Currency.healthcoin, 21);
ItemList['Toy Agumon'] = new PokemonItem('Toy Agumon', 37, Currency.defencecoin, 19);
ItemList['Tukaimon'] = new PokemonItem('Tukaimon', 40, Currency.magiccoin, 21);
ItemList['Yuki Agumon'] = new PokemonItem('Yuki Agumon', 45, Currency.healthcoin, 20);
ItemList['Akatorimon'] = new PokemonItem('Akatorimon', 95, Currency.intcoin, 30);
ItemList['Clockmon'] = new PokemonItem('Clockmon', 70, Currency.intcoin, 29);
ItemList['Dark Lizamon'] = new PokemonItem('Dark Lizamon', 94, Currency.magiccoin, 29);
ItemList['Dokugumon'] = new PokemonItem('Dokugumon', 78, Currency.defencecoin, 29);
ItemList['Flare Lizarmon'] = new PokemonItem('Flare Lizarmon', 90, Currency.attackcoin, 30);
ItemList['Fugamon'] = new PokemonItem('Fugamon', 82, Currency.healthcoin, 30);
ItemList['Geremon'] = new PokemonItem('Geremon', 75, Currency.healthcoin, 29);
ItemList['Golemon'] = new PokemonItem('Golemon', 85, Currency.healthcoin, 29);
ItemList['Golemon PS'] = new PokemonItem('Golemon PS', 102, Currency.defencecoin, 29);
ItemList['Guardromon'] = new PokemonItem('Guardromon', 75, Currency.defencecoin, 29);
ItemList['Gururumon'] = new PokemonItem('Gururumon', 103, Currency.magiccoin, 31);
ItemList['Hanumon'] = new PokemonItem('Hanumon', 104, Currency.speedcoin, 29);
ItemList['Hyougamon'] = new PokemonItem('Hyougamon', 93, Currency.magiccoin, 30);
ItemList['Ice Devimon'] = new PokemonItem('Ice Devimon', 82, Currency.attackcoin, 31);
ItemList['Icemon'] = new PokemonItem('Icemon', 69, Currency.defencecoin, 29);
ItemList['Igamon'] = new PokemonItem('Igamon', 91, Currency.speedcoin, 29);
ItemList['Jungle Mojyamon'] = new PokemonItem('Jungle Mojyamon', 92, Currency.healthcoin, 31);
ItemList['Karatuki Numemon'] = new PokemonItem('Karatuki Numemon', 85, Currency.defencecoin, 29);
ItemList['Kiwimon'] = new PokemonItem('Kiwimon', 78, Currency.speedcoin, 30);
ItemList['Mori Shellmon'] = new PokemonItem('Mori Shellmon', 92, Currency.defencecoin, 30);
ItemList['Musyamon'] = new PokemonItem('Musyamon', 90, Currency.attackcoin, 29);
ItemList['Nise Drimogemon'] = new PokemonItem('Nise Drimogemon', 101, Currency.magiccoin, 29);
ItemList['Pidmon'] = new PokemonItem('Pidmon', 76, Currency.intcoin, 29);
ItemList['Platinum Scumon'] = new PokemonItem('Platinum Scumon', 75, Currency.healthcoin, 29);
ItemList['Red Vegimon'] = new PokemonItem('Red Vegimon', 92, Currency.healthcoin, 30);
ItemList['Revolmon'] = new PokemonItem('Revolmon', 80, Currency.attackcoin, 29);
ItemList['Saberdramon'] = new PokemonItem('Saberdramon', 79, Currency.magiccoin, 30);
ItemList['Sand Yanmamon'] = new PokemonItem('Sand Yanmamon', 78, Currency.speedcoin, 30);
ItemList['Shima Unimon'] = new PokemonItem('Shima Unimon', 102, Currency.magiccoin, 29);
ItemList['Snimon'] = new PokemonItem('Snimon', 74, Currency.speedcoin, 31);
ItemList['Soulmon'] = new PokemonItem('Soulmon', 91, Currency.magiccoin, 31);
ItemList['Tankmon'] = new PokemonItem('Tankmon', 78, Currency.defencecoin, 29);
ItemList['Thunderballmon'] = new PokemonItem('Thunderballmon', 103, Currency.magiccoin, 31);
ItemList['Togemon'] = new PokemonItem('Togemon', 70, Currency.healthcoin, 30);
ItemList['Tuchidarumon'] = new PokemonItem('Tuchidarumon', 66, Currency.healthcoin, 29);
ItemList['Wizarmon'] = new PokemonItem('Wizarmon', 80, Currency.intcoin, 30);
ItemList['Woodmon'] = new PokemonItem('Woodmon', 85, Currency.healthcoin, 29);
ItemList['Yanmamon'] = new PokemonItem('Yanmamon', 77, Currency.speedcoin, 29);
ItemList['Zassoumon'] = new PokemonItem('Zassoumon', 90, Currency.healthcoin, 31);
ItemList['Aero V-dramon'] = new PokemonItem('Aero V-dramon', 125, Currency.attackcoin, 42);
ItemList['Asuramon'] = new PokemonItem('Asuramon', 164, Currency.magiccoin, 42);
ItemList['Atlur Kabuterimon Red'] = new PokemonItem('Atlur Kabuterimon Red', 125, Currency.defencecoin, 39);
ItemList['Big Mamemon'] = new PokemonItem('Big Mamemon', 174, Currency.healthcoin, 42);
ItemList['Blikmon'] = new PokemonItem('Blikmon', 125, Currency.healthcoin, 40);
ItemList['Blossomon'] = new PokemonItem('Blossomon', 127, Currency.healthcoin, 40);
ItemList['Blue Meramon'] = new PokemonItem('Blue Meramon', 113, Currency.attackcoin, 39);
ItemList['Brachimon'] = new PokemonItem('Brachimon', 115, Currency.healthcoin, 39);
ItemList['Chimairamon'] = new PokemonItem('Chimairamon', 137, Currency.healthcoin, 41);
ItemList['Death Meramon'] = new PokemonItem('Death Meramon', 150, Currency.attackcoin, 41);
ItemList['Delumon'] = new PokemonItem('Delumon', 124, Currency.healthcoin, 38);
ItemList['Fantomon'] = new PokemonItem('Fantomon', 125, Currency.intcoin, 39);
ItemList['Garudamon'] = new PokemonItem('Garudamon', 100, Currency.intcoin, 41);
ItemList['Gerbemon'] = new PokemonItem('Gerbemon', 113, Currency.healthcoin, 39);
ItemList['Gigadramon'] = new PokemonItem('Gigadramon', 107, Currency.defencecoin, 39);
ItemList['Great King Scumon'] = new PokemonItem('Great King Scumon', 147, Currency.healthcoin, 39);
ItemList['Hangyomon'] = new PokemonItem('Hangyomon', 107, Currency.speedcoin, 42);
ItemList['Insekimon'] = new PokemonItem('Insekimon', 125, Currency.defencecoin, 39);
ItemList['Jijimon'] = new PokemonItem('Jijimon', 145, Currency.intcoin, 43);
ItemList['Jyureimon'] = new PokemonItem('Jyureimon', 125, Currency.healthcoin, 41);
ItemList['Knightmon'] = new PokemonItem('Knightmon', 119, Currency.defencecoin, 41);
ItemList['Lilimon'] = new PokemonItem('Lilimon', 125, Currency.intcoin, 41);
ItemList['Master Tyranomon'] = new PokemonItem('Master Tyranomon', 160, Currency.healthcoin, 44);
ItemList['Metal Greymon'] = new PokemonItem('Metal Greymon', 132, Currency.attackcoin, 42);
ItemList['Panjyamon'] = new PokemonItem('Panjyamon', 94, Currency.healthcoin, 41);
ItemList['Parrotmon'] = new PokemonItem('Parrotmon', 167, Currency.speedcoin, 44);
ItemList['Pumpmon'] = new PokemonItem('Pumpmon', 107, Currency.healthcoin, 38);
ItemList['Skull Satamon'] = new PokemonItem('Skull Satamon', 115, Currency.attackcoin, 39);
ItemList['Tekkamon'] = new PokemonItem('Tekkamon', 165, Currency.attackcoin, 41);
ItemList['Vamdemon'] = new PokemonItem('Vamdemon', 113, Currency.attackcoin, 42);
ItemList['Vermillimon'] = new PokemonItem('Vermillimon', 133, Currency.defencecoin, 39);
ItemList['Waru Monzaemon'] = new PokemonItem('Waru Monzaemon', 142, Currency.healthcoin, 43);
ItemList['Waru Seadramon'] = new PokemonItem('Waru Seadramon', 154, Currency.magiccoin, 42);
ItemList['Were Garurumon'] = new PokemonItem('Were Garurumon', 144, Currency.attackcoin, 41);
ItemList['Apocalymon'] = new PokemonItem('Apocalymon', 225, Currency.healthcoin, 60);
ItemList['Babamon'] = new PokemonItem('Babamon', 222, Currency.healthcoin, 56);
ItemList['Boltmon'] = new PokemonItem('Boltmon', 203, Currency.attackcoin, 50);
ItemList['Demon'] = new PokemonItem('Demon', 189, Currency.intcoin, 58);
ItemList['Diablomon'] = new PokemonItem('Diablomon', 270, Currency.attackcoin, 56);
ItemList['Goddramon'] = new PokemonItem('Goddramon', 195, Currency.attackcoin, 56);
ItemList['Griffomon'] = new PokemonItem('Griffomon', 173, Currency.speedcoin, 50);
ItemList['Hououmon'] = new PokemonItem('Hououmon', 195, Currency.intcoin, 52);
ItemList['King Etemon'] = new PokemonItem('King Etemon', 167, Currency.attackcoin, 50);
ItemList['Metal Garurumon'] = new PokemonItem('Metal Garurumon', 173, Currency.speedcoin, 52);
ItemList['Millenniumon'] = new PokemonItem('Millenniumon', 176, Currency.magiccoin, 57);
ItemList['Mugendramon'] = new PokemonItem('Mugendramon', 182, Currency.defencecoin, 52);
ItemList['Omegamon'] = new PokemonItem('Omegamon', 218, Currency.attackcoin, 60);
ItemList['Piemon'] = new PokemonItem('Piemon', 180, Currency.intcoin, 52);
ItemList['Pinochimon'] = new PokemonItem('Pinochimon', 165, Currency.attackcoin, 50);
ItemList['Plesiomon'] = new PokemonItem('Plesiomon', 188, Currency.intcoin, 50);
ItemList['Rosemon'] = new PokemonItem('Rosemon', 150, Currency.intcoin, 52);
ItemList['Skull Mammon'] = new PokemonItem('Skull Mammon', 239, Currency.defencecoin, 55);
ItemList['Venom Vamdemon'] = new PokemonItem('Venom Vamdemon', 203, Currency.attackcoin, 53);
ItemList['War Greymon'] = new PokemonItem('War Greymon', 195, Currency.attackcoin, 53);
ItemList['Chicomon'] = new PokemonItem('Chicomon', 9, Currency.magiccoin, 12);
ItemList['Cocomon'] = new PokemonItem('Cocomon', 8, Currency.healthcoin, 12);
ItemList['Kuramon'] = new PokemonItem('Kuramon', 8, Currency.speedcoin, 12);
ItemList['Leafmon'] = new PokemonItem('Leafmon', 8, Currency.defencecoin, 12);
ItemList['Pururumon'] = new PokemonItem('Pururumon', 9, Currency.speedcoin, 12);
ItemList['Tsubumon'] = new PokemonItem('Tsubumon', 9, Currency.defencecoin, 12);
ItemList['Zerimon'] = new PokemonItem('Zerimon', 9, Currency.speedcoin, 12);
ItemList['Arkadimon Baby'] = new PokemonItem('Arkadimon Baby', 24, Currency.attackcoin, 15);
ItemList['Chibimon'] = new PokemonItem('Chibimon', 20, Currency.magiccoin, 15);
ItemList['Chocomon'] = new PokemonItem('Chocomon', 22, Currency.healthcoin, 15);
ItemList['Gummymon'] = new PokemonItem('Gummymon', 17, Currency.speedcoin, 15);
ItemList['Minomon'] = new PokemonItem('Minomon', 20, Currency.defencecoin, 15);
ItemList['Poromon'] = new PokemonItem('Poromon', 22, Currency.speedcoin, 15);
ItemList['Tsumemon'] = new PokemonItem('Tsumemon', 23, Currency.attackcoin, 15);
ItemList['Upamon'] = new PokemonItem('Upamon', 19, Currency.defencecoin, 15);
ItemList['Agumon Black'] = new PokemonItem('Agumon Black', 46, Currency.attackcoin, 21);
ItemList['Armadimon'] = new PokemonItem('Armadimon', 40, Currency.healthcoin, 19);
ItemList['Elecmon Violet'] = new PokemonItem('Elecmon Violet', 48, Currency.magiccoin, 20);
ItemList['Gabumon Black'] = new PokemonItem('Gabumon Black', 38, Currency.attackcoin, 21);
ItemList['Hawkmon'] = new PokemonItem('Hawkmon', 39, Currency.speedcoin, 21);
ItemList['Keramon'] = new PokemonItem('Keramon', 45, Currency.attackcoin, 21);
ItemList['Lopmon'] = new PokemonItem('Lopmon', 34, Currency.attackcoin, 19);
ItemList['Otamamon Red'] = new PokemonItem('Otamamon Red', 41, Currency.healthcoin, 21);
ItemList['Solarmon'] = new PokemonItem('Solarmon', 34, Currency.defencecoin, 19);
ItemList['Terriermon'] = new PokemonItem('Terriermon', 37, Currency.speedcoin, 19);
ItemList['Toy Agumon Black'] = new PokemonItem('Toy Agumon Black', 40, Currency.healthcoin, 21);
ItemList['V-mon'] = new PokemonItem('V-mon', 51, Currency.attackcoin, 21);
ItemList['Wormmon'] = new PokemonItem('Wormmon', 36, Currency.defencecoin, 19);
ItemList['Ankylomon'] = new PokemonItem('Ankylomon', 70, Currency.healthcoin, 29);
ItemList['Aquilamon'] = new PokemonItem('Aquilamon', 80, Currency.speedcoin, 30);
ItemList['Black Tailmon'] = new PokemonItem('Black Tailmon', 70, Currency.magiccoin, 30);
ItemList['Bomber Nanimon'] = new PokemonItem('Bomber Nanimon', 82, Currency.attackcoin, 31);
ItemList['Chrysalimon'] = new PokemonItem('Chrysalimon', 90, Currency.attackcoin, 30);
ItemList['Galgomon'] = new PokemonItem('Galgomon', 60, Currency.attackcoin, 29);
ItemList['Garurumon Black'] = new PokemonItem('Garurumon Black', 70, Currency.speedcoin, 30);
ItemList['Greymon Blue'] = new PokemonItem('Greymon Blue', 90, Currency.attackcoin, 31);
ItemList['Red V-dramon'] = new PokemonItem('Red V-dramon', 67, Currency.defencecoin, 30);
ItemList['Sorcerimon'] = new PokemonItem('Sorcerimon', 85, Currency.intcoin, 30);
ItemList['Stingmon'] = new PokemonItem('Stingmon', 80, Currency.attackcoin, 30);
ItemList['Wendimon'] = new PokemonItem('Wendimon', 100, Currency.healthcoin, 31);
ItemList['XV-mon'] = new PokemonItem('XV-mon', 65, Currency.magiccoin, 31);
ItemList['Andiramon'] = new PokemonItem('Andiramon', 132, Currency.speedcoin, 41);
ItemList['Archnemon'] = new PokemonItem('Archnemon', 124, Currency.defencecoin, 41);
ItemList['Cyberdramon'] = new PokemonItem('Cyberdramon', 138, Currency.attackcoin, 42);
ItemList['Dinobeemon'] = new PokemonItem('Dinobeemon', 163, Currency.attackcoin, 44);
ItemList['Infermon'] = new PokemonItem('Infermon', 169, Currency.attackcoin, 42);
ItemList['Mummymon'] = new PokemonItem('Mummymon', 154, Currency.magiccoin, 41);
ItemList['Paildramon'] = new PokemonItem('Paildramon', 113, Currency.attackcoin, 44);
ItemList['Shakkoumon'] = new PokemonItem('Shakkoumon', 119, Currency.defencecoin, 44);
ItemList['Silphymon'] = new PokemonItem('Silphymon', 119, Currency.speedcoin, 44);
ItemList['Superstarmon'] = new PokemonItem('Superstarmon', 107, Currency.defencecoin, 41);
ItemList['Volcamon'] = new PokemonItem('Volcamon', 119, Currency.healthcoin, 38);
ItemList['Were Garurumon Black'] = new PokemonItem('Were Garurumon Black', 150, Currency.attackcoin, 41);
ItemList['Baihumon'] = new PokemonItem('Baihumon', 216, Currency.healthcoin, 59);
ItemList['Belial Vamdemon'] = new PokemonItem('Belial Vamdemon', 210, Currency.magiccoin, 50);
ItemList['Black War Greymon'] = new PokemonItem('Black War Greymon', 180, Currency.attackcoin, 53);
ItemList['Chaos Greymon'] = new PokemonItem('Chaos Greymon', 174, Currency.healthcoin, 56);
ItemList['Chaos Lord'] = new PokemonItem('Chaos Lord', 254, Currency.defencecoin, 60);
ItemList['Chaos Piemon'] = new PokemonItem('Chaos Piemon', 153, Currency.magiccoin, 53);
ItemList['Chaos Seadramon'] = new PokemonItem('Chaos Seadramon', 173, Currency.magiccoin, 55);
ItemList['Cherubimon Vice'] = new PokemonItem('Cherubimon Vice', 240, Currency.intcoin, 56);
ItemList['Cherubimon Virtue'] = new PokemonItem('Cherubimon Virtue', 218, Currency.intcoin, 56);
ItemList['Crossmon'] = new PokemonItem('Crossmon', 237, Currency.speedcoin, 55);
ItemList['Deathmon'] = new PokemonItem('Deathmon', 201, Currency.magiccoin, 52);
ItemList['Deathmon Black'] = new PokemonItem('Deathmon Black', 189, Currency.defencecoin, 57);
ItemList['Devitamamon'] = new PokemonItem('Devitamamon', 239, Currency.healthcoin, 52);
ItemList['Ebemon'] = new PokemonItem('Ebemon', 203, Currency.intcoin, 49);
ItemList['Gran Kuwagamon'] = new PokemonItem('Gran Kuwagamon', 180, Currency.defencecoin, 50);
ItemList['Hi Andromon'] = new PokemonItem('Hi Andromon', 173, Currency.defencecoin, 50);
ItemList['Imperialdramon Dragon Mode'] = new PokemonItem('Imperialdramon Dragon Mode', 180, Currency.healthcoin, 56);
ItemList['Imperialdramon Dragon Mode Black'] = new PokemonItem('Imperialdramon Dragon Mode Black', 206, Currency.healthcoin, 60);
ItemList['Imperialdramon Fighter Mode'] = new PokemonItem('Imperialdramon Fighter Mode', 203, Currency.attackcoin, 56);
ItemList['Lampmon'] = new PokemonItem('Lampmon', 195, Currency.healthcoin, 51);
ItemList['Metal Garurumon Black'] = new PokemonItem('Metal Garurumon Black', 165, Currency.attackcoin, 52);
ItemList['Moon Millenniumon'] = new PokemonItem('Moon Millenniumon', 153, Currency.defencecoin, 51);
ItemList['Pharaohmon'] = new PokemonItem('Pharaohmon', 207, Currency.defencecoin, 57);
ItemList['Prince Mamemon'] = new PokemonItem('Prince Mamemon', 165, Currency.defencecoin, 49);
ItemList['Qinglongmon'] = new PokemonItem('Qinglongmon', 207, Currency.speedcoin, 61);
ItemList['Seraphimon'] = new PokemonItem('Seraphimon', 203, Currency.intcoin, 56);
ItemList['Valkyrimon'] = new PokemonItem('Valkyrimon', 165, Currency.speedcoin, 52);
ItemList['Vikemon'] = new PokemonItem('Vikemon', 173, Currency.healthcoin, 52);
ItemList['Xuanwumon'] = new PokemonItem('Xuanwumon', 218, Currency.defencecoin, 59);
ItemList['Zanbamon'] = new PokemonItem('Zanbamon', 246, Currency.magiccoin, 58);
ItemList['Zhuqiaomon'] = new PokemonItem('Zhuqiaomon', 200, Currency.speedcoin, 59);
ItemList['Allomon'] = new PokemonItem('Allomon', 114, Currency.attackcoin, 34);
ItemList['Archelomon'] = new PokemonItem('Archelomon', 123, Currency.defencecoin, 34);
ItemList['Baromon'] = new PokemonItem('Baromon', 144, Currency.intcoin, 34);
ItemList['Bitmon'] = new PokemonItem('Bitmon', 126, Currency.speedcoin, 34);
ItemList['Boarmon'] = new PokemonItem('Boarmon', 133, Currency.attackcoin, 35);
ItemList['Bullmon'] = new PokemonItem('Bullmon', 126, Currency.attackcoin, 34);
ItemList['Butterflamon'] = new PokemonItem('Butterflamon', 128, Currency.attackcoin, 35);
ItemList['Chamelemon'] = new PokemonItem('Chamelemon', 140, Currency.defencecoin, 34);
ItemList['Coatlmon'] = new PokemonItem('Coatlmon', 130, Currency.speedcoin, 35);
ItemList['Depthmon'] = new PokemonItem('Depthmon', 139, Currency.magiccoin, 35);
ItemList['Digmon'] = new PokemonItem('Digmon', 126, Currency.defencecoin, 35);
ItemList['Elephamon'] = new PokemonItem('Elephamon', 139, Currency.defencecoin, 33);
ItemList['Fladramon'] = new PokemonItem('Fladramon', 149, Currency.speedcoin, 33);
ItemList['Flybeemon'] = new PokemonItem('Flybeemon', 130, Currency.speedcoin, 34);
ItemList['Frogmon'] = new PokemonItem('Frogmon', 130, Currency.healthcoin, 34);
ItemList['Gargomon'] = new PokemonItem('Gargomon', 123, Currency.intcoin, 34);
ItemList['Goatmon'] = new PokemonItem('Goatmon', 133, Currency.healthcoin, 35);
ItemList['Gold V-dramon'] = new PokemonItem('Gold V-dramon', 140, Currency.magiccoin, 34);
ItemList['Harpymon'] = new PokemonItem('Harpymon', 132, Currency.intcoin, 34);
ItemList['Holsmon'] = new PokemonItem('Holsmon', 133, Currency.speedcoin, 35);
ItemList['Honeybeemon'] = new PokemonItem('Honeybeemon', 151, Currency.attackcoin, 35);
ItemList['Kabukimon'] = new PokemonItem('Kabukimon', 123, Currency.intcoin, 33);
ItemList['Kangarumon'] = new PokemonItem('Kangarumon', 130, Currency.attackcoin, 33);
ItemList['Kongoumon'] = new PokemonItem('Kongoumon', 119, Currency.magiccoin, 35);
ItemList['Lighdramon'] = new PokemonItem('Lighdramon', 135, Currency.speedcoin, 34);
ItemList['Lynxmon'] = new PokemonItem('Lynxmon', 144, Currency.attackcoin, 35);
ItemList['Magnamon'] = new PokemonItem('Magnamon', 254, Currency.defencecoin, 57);
ItemList['Maildramon'] = new PokemonItem('Maildramon', 121, Currency.defencecoin, 35);
ItemList['Manbomon'] = new PokemonItem('Manbomon', 142, Currency.healthcoin, 35);
ItemList['Mantaraymon'] = new PokemonItem('Mantaraymon', 135, Currency.defencecoin, 33);
ItemList['Moosemon'] = new PokemonItem('Moosemon', 112, Currency.intcoin, 34);
ItemList['Mothmon'] = new PokemonItem('Mothmon', 144, Currency.magiccoin, 35);
ItemList['Nefertimon'] = new PokemonItem('Nefertimon', 137, Currency.magiccoin, 34);
ItemList['Nohemon'] = new PokemonItem('Nohemon', 126, Currency.intcoin, 35);
ItemList['Opossummon'] = new PokemonItem('Opossummon', 142, Currency.healthcoin, 33);
ItemList['Orcamon'] = new PokemonItem('Orcamon', 116, Currency.intcoin, 33);
ItemList['Owlmon'] = new PokemonItem('Owlmon', 119, Currency.intcoin, 33);
ItemList['Peacockmon'] = new PokemonItem('Peacockmon', 147, Currency.healthcoin, 35);
ItemList['Pegasmon'] = new PokemonItem('Pegasmon', 140, Currency.magiccoin, 35);
ItemList['Pipismon'] = new PokemonItem('Pipismon', 137, Currency.speedcoin, 35);
ItemList['Ponchomon'] = new PokemonItem('Ponchomon', 125, Currency.defencecoin, 35);
ItemList['Prairiemon'] = new PokemonItem('Prairiemon', 112, Currency.speedcoin, 34);
ItemList['Pteranomon'] = new PokemonItem('Pteranomon', 132, Currency.attackcoin, 34);
ItemList['Pucchiemon'] = new PokemonItem('Pucchiemon', 151, Currency.healthcoin, 33);
ItemList['Pucchiemon Green'] = new PokemonItem('Pucchiemon Green', 128, Currency.magiccoin, 33);
ItemList['Rapidmon Armor'] = new PokemonItem('Rapidmon Armor', 202, Currency.defencecoin, 52);
ItemList['Rhinomon'] = new PokemonItem('Rhinomon', 137, Currency.defencecoin, 34);
ItemList['Rinkmon'] = new PokemonItem('Rinkmon', 133, Currency.intcoin, 33);
ItemList['Sagittarimon'] = new PokemonItem('Sagittarimon', 149, Currency.attackcoin, 35);
ItemList['Seahomon'] = new PokemonItem('Seahomon', 114, Currency.attackcoin, 35);
ItemList['Searchmon'] = new PokemonItem('Searchmon', 149, Currency.intcoin, 35);
ItemList['Sepikmon'] = new PokemonItem('Sepikmon', 140, Currency.healthcoin, 34);
ItemList['Sethmon'] = new PokemonItem('Sethmon', 137, Currency.magiccoin, 35);
ItemList['Shadramon'] = new PokemonItem('Shadramon', 137, Currency.magiccoin, 35);
ItemList['Sheepmon'] = new PokemonItem('Sheepmon', 146, Currency.healthcoin, 34);
ItemList['Shurimon'] = new PokemonItem('Shurimon', 121, Currency.speedcoin, 35);
ItemList['Stegomon'] = new PokemonItem('Stegomon', 135, Currency.healthcoin, 34);
ItemList['Submarimon'] = new PokemonItem('Submarimon', 135, Currency.defencecoin, 34);
ItemList['Swanmon'] = new PokemonItem('Swanmon', 112, Currency.attackcoin, 34);
ItemList['Tocanmon'] = new PokemonItem('Tocanmon', 139, Currency.healthcoin, 34);
ItemList['Togemogumon'] = new PokemonItem('Togemogumon', 126, Currency.healthcoin, 35);
ItemList['Tylomon'] = new PokemonItem('Tylomon', 132, Currency.speedcoin, 33);
ItemList['Yaksamon'] = new PokemonItem('Yaksamon', 121, Currency.intcoin, 34);
ItemList['Jyarimon'] = new PokemonItem('Jyarimon', 8, Currency.speedcoin, 12);
ItemList['Ketomon'] = new PokemonItem('Ketomon', 9, Currency.attackcoin, 12);
ItemList['Paomon'] = new PokemonItem('Paomon', 9, Currency.intcoin, 12);
ItemList['Pipimon'] = new PokemonItem('Pipimon', 9, Currency.intcoin, 12);
ItemList['Relemon'] = new PokemonItem('Relemon', 8, Currency.magiccoin, 12);
ItemList['Gigimon'] = new PokemonItem('Gigimon', 19, Currency.speedcoin, 15);
ItemList['Hopmon'] = new PokemonItem('Hopmon', 21, Currency.attackcoin, 15);
ItemList['Pokomon'] = new PokemonItem('Pokomon', 21, Currency.magiccoin, 15);
ItemList['Xiaomon'] = new PokemonItem('Xiaomon', 21, Currency.intcoin, 15);
ItemList['Arkadimon Child'] = new PokemonItem('Arkadimon Child', 42, Currency.attackcoin, 21);
ItemList['Guilmon'] = new PokemonItem('Guilmon', 53, Currency.attackcoin, 21);
ItemList['Impmon'] = new PokemonItem('Impmon', 39, Currency.magiccoin, 21);
ItemList['Labramon'] = new PokemonItem('Labramon', 38, Currency.intcoin, 20);
ItemList['Lucemon'] = new PokemonItem('Lucemon', 109, Currency.defencecoin, 39);
ItemList['Monodramon'] = new PokemonItem('Monodramon', 49, Currency.attackcoin, 19);
ItemList['Petit Mamon'] = new PokemonItem('Petit Mamon', 42, Currency.intcoin, 20);
ItemList['Renamon'] = new PokemonItem('Renamon', 31, Currency.magiccoin, 21);
ItemList['Arkadimon Adult'] = new PokemonItem('Arkadimon Adult', 90, Currency.attackcoin, 31);
ItemList['Black Galgomon'] = new PokemonItem('Black Galgomon', 72, Currency.magiccoin, 31);
ItemList['Black Growmon'] = new PokemonItem('Black Growmon', 95, Currency.magiccoin, 31);
ItemList['Dobermon'] = new PokemonItem('Dobermon', 87, Currency.speedcoin, 30);
ItemList['Dogmon'] = new PokemonItem('Dogmon', 96, Currency.healthcoin, 30);
ItemList['Growmon'] = new PokemonItem('Growmon', 80, Currency.attackcoin, 31);
ItemList['Growmon Orange'] = new PokemonItem('Growmon Orange', 84, Currency.intcoin, 31);
ItemList['Kyubimon'] = new PokemonItem('Kyubimon', 75, Currency.magiccoin, 30);
ItemList['Kyubimon Silver'] = new PokemonItem('Kyubimon Silver', 97, Currency.healthcoin, 29);
ItemList['Siesamon'] = new PokemonItem('Siesamon', 92, Currency.intcoin, 31);
ItemList['Strikedramon'] = new PokemonItem('Strikedramon', 88, Currency.attackcoin, 29);
ItemList['Turuiemon'] = new PokemonItem('Turuiemon', 67, Currency.attackcoin, 29);
ItemList['V-dramon Black'] = new PokemonItem('V-dramon Black', 85, Currency.magiccoin, 30);
ItemList['Youkomon'] = new PokemonItem('Youkomon', 94, Currency.intcoin, 31);
ItemList['Andiramon Deva'] = new PokemonItem('Andiramon Deva', 128, Currency.intcoin, 43);
ItemList['Arkadimon Perfect'] = new PokemonItem('Arkadimon Perfect', 135, Currency.attackcoin, 42);
ItemList['Black Megalo Growmon'] = new PokemonItem('Black Megalo Growmon', 119, Currency.magiccoin, 39);
ItemList['Black Rapidmon'] = new PokemonItem('Black Rapidmon', 137, Currency.speedcoin, 44);
ItemList['Caturamon'] = new PokemonItem('Caturamon', 105, Currency.magiccoin, 41);
ItemList['Cerberumon'] = new PokemonItem('Cerberumon', 153, Currency.speedcoin, 39);
ItemList['Doumon'] = new PokemonItem('Doumon', 139, Currency.intcoin, 44);
ItemList['Grappu Leomon'] = new PokemonItem('Grappu Leomon', 125, Currency.healthcoin, 41);
ItemList['Indaramon'] = new PokemonItem('Indaramon', 127, Currency.magiccoin, 39);
ItemList['Karatenmon'] = new PokemonItem('Karatenmon', 160, Currency.speedcoin, 41);
ItemList['Kumbhiramon'] = new PokemonItem('Kumbhiramon', 175, Currency.magiccoin, 40);
ItemList['Majiramon'] = new PokemonItem('Majiramon', 143, Currency.magiccoin, 39);
ItemList['Makuramon'] = new PokemonItem('Makuramon', 129, Currency.speedcoin, 43);
ItemList['Megalo Growmon'] = new PokemonItem('Megalo Growmon', 144, Currency.attackcoin, 42);
ItemList['Megalo Growmon Data'] = new PokemonItem('Megalo Growmon Data', 128, Currency.intcoin, 41);
ItemList['Mephismon'] = new PokemonItem('Mephismon', 132, Currency.intcoin, 41);
ItemList['Mihiramon'] = new PokemonItem('Mihiramon', 157, Currency.magiccoin, 44);
ItemList['Orochimon'] = new PokemonItem('Orochimon', 124, Currency.magiccoin, 40);
ItemList['Pajramon'] = new PokemonItem('Pajramon', 124, Currency.magiccoin, 39);
ItemList['Pandamon'] = new PokemonItem('Pandamon', 113, Currency.defencecoin, 39);
ItemList['Rapidmon Perfect'] = new PokemonItem('Rapidmon Perfect', 113, Currency.speedcoin, 39);
ItemList['Sandiramon'] = new PokemonItem('Sandiramon', 130, Currency.speedcoin, 41);
ItemList['Scorpiomon'] = new PokemonItem('Scorpiomon', 155, Currency.attackcoin, 41);
ItemList['Sinduramon'] = new PokemonItem('Sinduramon', 125, Currency.defencecoin, 40);
ItemList['Taomon'] = new PokemonItem('Taomon', 138, Currency.intcoin, 41);
ItemList['Taomon Silver'] = new PokemonItem('Taomon Silver', 140, Currency.healthcoin, 40);
ItemList['Vajramon'] = new PokemonItem('Vajramon', 132, Currency.attackcoin, 44);
ItemList['Vikaralamon'] = new PokemonItem('Vikaralamon', 173, Currency.healthcoin, 44);
ItemList['Anubimon'] = new PokemonItem('Anubimon', 236, Currency.magiccoin, 50);
ItemList['Arkadimon Ultimate'] = new PokemonItem('Arkadimon Ultimate', 221, Currency.attackcoin, 56);
ItemList['Armagemon'] = new PokemonItem('Armagemon', 288, Currency.attackcoin, 60);
ItemList['Beelzebumon'] = new PokemonItem('Beelzebumon', 248, Currency.attackcoin, 57);
ItemList['Beelzebumon Blast Mode'] = new PokemonItem('Beelzebumon Blast Mode', 263, Currency.attackcoin, 60);
ItemList['Black Saint Galgomon'] = new PokemonItem('Black Saint Galgomon', 210, Currency.magiccoin, 55);
ItemList['Chaos Dukemon'] = new PokemonItem('Chaos Dukemon', 180, Currency.attackcoin, 57);
ItemList['Dukemon'] = new PokemonItem('Dukemon', 158, Currency.defencecoin, 57);
ItemList['Dukemon Crimson Mode'] = new PokemonItem('Dukemon Crimson Mode', 210, Currency.attackcoin, 60);
ItemList['Gokumon'] = new PokemonItem('Gokumon', 224, Currency.defencecoin, 58);
ItemList['Gulfmon'] = new PokemonItem('Gulfmon', 236, Currency.intcoin, 56);
ItemList['Imperialdramon Fighter Mode Black'] = new PokemonItem('Imperialdramon Fighter Mode Black', 182, Currency.magiccoin, 60);
ItemList['Imperialdramon Paladin Mode'] = new PokemonItem('Imperialdramon Paladin Mode', 158, Currency.magiccoin, 60);
ItemList['Justimon Accel Arm'] = new PokemonItem('Justimon Accel Arm', 195, Currency.attackcoin, 52);
ItemList['Justimon Blitz Arm'] = new PokemonItem('Justimon Blitz Arm', 210, Currency.speedcoin, 53);
ItemList['Justimon Critical Arm'] = new PokemonItem('Justimon Critical Arm', 212, Currency.magiccoin, 53);
ItemList['Kuzuhamon'] = new PokemonItem('Kuzuhamon', 195, Currency.intcoin, 52);
ItemList['Megidramon'] = new PokemonItem('Megidramon', 225, Currency.attackcoin, 56);
ItemList['Ofanimon'] = new PokemonItem('Ofanimon', 195, Currency.defencecoin, 56);
ItemList['Parallelmon'] = new PokemonItem('Parallelmon', 231, Currency.healthcoin, 58);
ItemList['Saint Galgomon'] = new PokemonItem('Saint Galgomon', 150, Currency.attackcoin, 50);
ItemList['Sakuyamon'] = new PokemonItem('Sakuyamon', 188, Currency.intcoin, 52);
ItemList['Sakuyamon Miko Mode'] = new PokemonItem('Sakuyamon Miko Mode', 219, Currency.magiccoin, 51);
ItemList['Zeed Millenniumon'] = new PokemonItem('Zeed Millenniumon', 215, Currency.magiccoin, 55);
ItemList['Culumon'] = new PokemonItem('Culumon', 574, Currency.magiccoin, 24);
ItemList['Keemon'] = new PokemonItem('Keemon', 8, Currency.intcoin, 12);
ItemList['Puttimon'] = new PokemonItem('Puttimon', 9, Currency.intcoin, 12);
ItemList['Cupimon'] = new PokemonItem('Cupimon', 21, Currency.intcoin, 15);
ItemList['Torikara Ballmon'] = new PokemonItem('Torikara Ballmon', 22, Currency.healthcoin, 15);
ItemList['Yarmon'] = new PokemonItem('Yarmon', 24, Currency.intcoin, 15);
ItemList['Bearmon'] = new PokemonItem('Bearmon', 37, Currency.healthcoin, 21);
ItemList['Bemmon'] = new PokemonItem('Bemmon', 45, Currency.healthcoin, 20);
ItemList['Bokomon'] = new PokemonItem('Bokomon', 42, Currency.intcoin, 21);
ItemList['Burgamon'] = new PokemonItem('Burgamon', 38, Currency.intcoin, 20);
ItemList['Cardmon C1'] = new PokemonItem('Cardmon C1', 52, Currency.magiccoin, 21);
ItemList['Ebi Burgamon'] = new PokemonItem('Ebi Burgamon', 37, Currency.defencecoin, 20);
ItemList['Koemon'] = new PokemonItem('Koemon', 45, Currency.attackcoin, 20);
ItemList['Kotemon'] = new PokemonItem('Kotemon', 43, Currency.speedcoin, 20);
ItemList['Neamon'] = new PokemonItem('Neamon', 51, Currency.intcoin, 21);
ItemList['Blimpmon'] = new PokemonItem('Blimpmon', 85, Currency.defencecoin, 30);
ItemList['Boogiemon'] = new PokemonItem('Boogiemon', 66, Currency.intcoin, 30);
ItemList['Burgamon Adult'] = new PokemonItem('Burgamon Adult', 100, Currency.healthcoin, 31);
ItemList['Darcmon'] = new PokemonItem('Darcmon', 81, Currency.intcoin, 31);
ItemList['Dinohumon'] = new PokemonItem('Dinohumon', 102, Currency.speedcoin, 30);
ItemList['Fangmon'] = new PokemonItem('Fangmon', 98, Currency.magiccoin, 29);
ItemList['Gladimon'] = new PokemonItem('Gladimon', 99, Currency.defencecoin, 30);
ItemList['Gryzmon'] = new PokemonItem('Gryzmon', 89, Currency.healthcoin, 30);
ItemList['Hookmon'] = new PokemonItem('Hookmon', 78, Currency.intcoin, 30);
ItemList['Kougamon'] = new PokemonItem('Kougamon', 73, Currency.attackcoin, 31);
ItemList['Mikemon'] = new PokemonItem('Mikemon', 91, Currency.speedcoin, 30);
ItemList['Snatchmon'] = new PokemonItem('Snatchmon', 101, Currency.healthcoin, 31);
ItemList['Trailmon Worm'] = new PokemonItem('Trailmon Worm', 101, Currency.defencecoin, 30);
ItemList['Witchmon'] = new PokemonItem('Witchmon', 98, Currency.magiccoin, 31);
ItemList['XV-mon Black'] = new PokemonItem('XV-mon Black', 59, Currency.magiccoin, 30);
ItemList['Assaultmon'] = new PokemonItem('Assaultmon', 149, Currency.attackcoin, 42);
ItemList['Bastemon'] = new PokemonItem('Bastemon', 135, Currency.speedcoin, 43);
ItemList['Betsumon'] = new PokemonItem('Betsumon', 128, Currency.intcoin, 42);
ItemList['Black King Numemon'] = new PokemonItem('Black King Numemon', 132, Currency.defencecoin, 38);
ItemList['Destromon'] = new PokemonItem('Destromon', 163, Currency.healthcoin, 42);
ItemList['Hippogriffomon'] = new PokemonItem('Hippogriffomon', 118, Currency.intcoin, 39);
ItemList['Jewelbeemon'] = new PokemonItem('Jewelbeemon', 139, Currency.speedcoin, 44);
ItemList['Kyukimon'] = new PokemonItem('Kyukimon', 100, Currency.magiccoin, 43);
ItemList['Locomon'] = new PokemonItem('Locomon', 144, Currency.speedcoin, 39);
ItemList['Lucemon Falldown Mode'] = new PokemonItem('Lucemon Falldown Mode', 182, Currency.intcoin, 57);
ItemList['Mermaimon'] = new PokemonItem('Mermaimon', 123, Currency.magiccoin, 41);
ItemList['Mistymon'] = new PokemonItem('Mistymon', 138, Currency.intcoin, 43);
ItemList['Neo Devimon'] = new PokemonItem('Neo Devimon', 130, Currency.magiccoin, 41);
ItemList['Phelesmon'] = new PokemonItem('Phelesmon', 173, Currency.intcoin, 42);
ItemList['Valvemon'] = new PokemonItem('Valvemon', 158, Currency.defencecoin, 40);
ItemList['Wisemon'] = new PokemonItem('Wisemon', 169, Currency.defencecoin, 41);
ItemList['Ancient Beatmon'] = new PokemonItem('Ancient Beatmon', 191, Currency.defencecoin, 58);
ItemList['Ancient Garurumon'] = new PokemonItem('Ancient Garurumon', 254, Currency.speedcoin, 53);
ItemList['Ancient Greymon'] = new PokemonItem('Ancient Greymon', 212, Currency.healthcoin, 59);
ItemList['Ancient Irismon'] = new PokemonItem('Ancient Irismon', 185, Currency.intcoin, 57);
ItemList['Ancient Megatheriumon'] = new PokemonItem('Ancient Megatheriumon', 222, Currency.defencecoin, 58);
ItemList['Ancient Mermaimon'] = new PokemonItem('Ancient Mermaimon', 239, Currency.intcoin, 58);
ItemList['Ancient Sphinxmon'] = new PokemonItem('Ancient Sphinxmon', 210, Currency.intcoin, 50);
ItemList['Ancient Troiamon'] = new PokemonItem('Ancient Troiamon', 231, Currency.defencecoin, 53);
ItemList['Ancient Volcamon'] = new PokemonItem('Ancient Volcamon', 215, Currency.healthcoin, 52);
ItemList['Ancient Wisemon'] = new PokemonItem('Ancient Wisemon', 182, Currency.intcoin, 52);
ItemList['Black Seraphimon'] = new PokemonItem('Black Seraphimon', 188, Currency.magiccoin, 52);
ItemList['Callismon'] = new PokemonItem('Callismon', 204, Currency.healthcoin, 50);
ItemList['Cannondramon'] = new PokemonItem('Cannondramon', 255, Currency.healthcoin, 50);
ItemList['Chaosdramon'] = new PokemonItem('Chaosdramon', 210, Currency.attackcoin, 56);
ItemList['Dominimon'] = new PokemonItem('Dominimon', 192, Currency.magiccoin, 51);
ItemList['Dynasmon'] = new PokemonItem('Dynasmon', 225, Currency.attackcoin, 57);
ItemList['Fujinmon'] = new PokemonItem('Fujinmon', 251, Currency.speedcoin, 56);
ItemList['Grand Locomon'] = new PokemonItem('Grand Locomon', 225, Currency.defencecoin, 52);
ItemList['Huanglongmon'] = new PokemonItem('Huanglongmon', 158, Currency.magiccoin, 61);
ItemList['Lilithmon'] = new PokemonItem('Lilithmon', 240, Currency.intcoin, 57);
ItemList['Lord Knightmon'] = new PokemonItem('Lord Knightmon', 195, Currency.speedcoin, 57);
ItemList['Lucemon Satan Mode'] = new PokemonItem('Lucemon Satan Mode', 255, Currency.intcoin, 60);
ItemList['Marsmon'] = new PokemonItem('Marsmon', 222, Currency.attackcoin, 54);
ItemList['Metamormon'] = new PokemonItem('Metamormon', 230, Currency.healthcoin, 56);
ItemList['Murmukusmon'] = new PokemonItem('Murmukusmon', 222, Currency.magiccoin, 57);
ItemList['Ornismon'] = new PokemonItem('Ornismon', 170, Currency.speedcoin, 50);
ItemList['Parasimon'] = new PokemonItem('Parasimon', 233, Currency.healthcoin, 52);
ItemList['Pile Volcamon'] = new PokemonItem('Pile Volcamon', 165, Currency.attackcoin, 50);
ItemList['Ragnamon'] = new PokemonItem('Ragnamon', 240, Currency.healthcoin, 58);
ItemList['Raidenmon'] = new PokemonItem('Raidenmon', 222, Currency.healthcoin, 56);
ItemList['Raijinmon'] = new PokemonItem('Raijinmon', 171, Currency.intcoin, 53);
ItemList['Regulumon'] = new PokemonItem('Regulumon', 216, Currency.healthcoin, 54);
ItemList['Slash Angemon'] = new PokemonItem('Slash Angemon', 207, Currency.speedcoin, 50);
ItemList['Suijinmon'] = new PokemonItem('Suijinmon', 252, Currency.healthcoin, 52);
ItemList['Susanoomon'] = new PokemonItem('Susanoomon', 180, Currency.attackcoin, 61);
ItemList['Ulforce V-dramon'] = new PokemonItem('Ulforce V-dramon', 210, Currency.speedcoin, 57);
ItemList['Fla Wizarmon'] = new PokemonItem('Fla Wizarmon', 142, Currency.magiccoin, 33);
ItemList['Kenkimon'] = new PokemonItem('Kenkimon', 144, Currency.defencecoin, 35);
ItemList['Salamandamon'] = new PokemonItem('Salamandamon', 133, Currency.attackcoin, 34);
ItemList['Thunderbirmon'] = new PokemonItem('Thunderbirmon', 126, Currency.magiccoin, 35);
ItemList['Agnimon'] = new PokemonItem('Agnimon', 170, Currency.attackcoin, 31);
ItemList['Aldamon'] = new PokemonItem('Aldamon', 240, Currency.speedcoin, 42);
ItemList['Arbormon'] = new PokemonItem('Arbormon', 146, Currency.defencecoin, 30);
ItemList['Beowolfmon'] = new PokemonItem('Beowolfmon', 200, Currency.speedcoin, 42);
ItemList['Blitzmon'] = new PokemonItem('Blitzmon', 148, Currency.speedcoin, 30);
ItemList['Blizzarmon'] = new PokemonItem('Blizzarmon', 144, Currency.intcoin, 35);
ItemList['Bolgmon'] = new PokemonItem('Bolgmon', 164, Currency.defencecoin, 34);
ItemList['Calamaramon'] = new PokemonItem('Calamaramon', 156, Currency.intcoin, 33);
ItemList['Chackmon'] = new PokemonItem('Chackmon', 148, Currency.intcoin, 31);
ItemList['Daipenmon'] = new PokemonItem('Daipenmon', 220, Currency.healthcoin, 42);
ItemList['Duskmon'] = new PokemonItem('Duskmon', 146, Currency.attackcoin, 30);
ItemList['Fairimon'] = new PokemonItem('Fairimon', 138, Currency.speedcoin, 30);
ItemList['Flamon'] = new PokemonItem('Flamon', 106, Currency.intcoin, 22);
ItemList['Garummon'] = new PokemonItem('Garummon', 150, Currency.attackcoin, 32);
ItemList['Gigasmon'] = new PokemonItem('Gigasmon', 202, Currency.healthcoin, 35);
ItemList['Grottomon'] = new PokemonItem('Grottomon', 176, Currency.healthcoin, 31);
ItemList['Jet Silphymon'] = new PokemonItem('Jet Silphymon', 166, Currency.speedcoin, 35);
ItemList['Kaiser Greymon'] = new PokemonItem('Kaiser Greymon', 296, Currency.attackcoin, 56);
ItemList['Kaiser Leomon'] = new PokemonItem('Kaiser Leomon', 190, Currency.healthcoin, 33);
ItemList['Löwemon'] = new PokemonItem('Löwemon', 176, Currency.healthcoin, 31);
ItemList['Magna Garurumon'] = new PokemonItem('Magna Garurumon', 250, Currency.healthcoin, 56);
ItemList['Mercuremon'] = new PokemonItem('Mercuremon', 148, Currency.defencecoin, 31);
ItemList['Petaldramon'] = new PokemonItem('Petaldramon', 182, Currency.defencecoin, 33);
ItemList['Raihimon'] = new PokemonItem('Raihimon', 240, Currency.healthcoin, 42);
ItemList['Ranamon'] = new PokemonItem('Ranamon', 176, Currency.intcoin, 31);
ItemList['Rhino Kabuterimon'] = new PokemonItem('Rhino Kabuterimon', 200, Currency.defencecoin, 42);
ItemList['Sephirothmon'] = new PokemonItem('Sephirothmon', 192, Currency.defencecoin, 33);
ItemList['Shutumon'] = new PokemonItem('Shutumon', 200, Currency.intcoin, 42);
ItemList['Strabimon'] = new PokemonItem('Strabimon', 108, Currency.attackcoin, 22);
ItemList['Velgrmon'] = new PokemonItem('Velgrmon', 160, Currency.speedcoin, 33);
ItemList['Vritramon'] = new PokemonItem('Vritramon', 158, Currency.attackcoin, 33);
ItemList['Wolfmon'] = new PokemonItem('Wolfmon', 160, Currency.attackcoin, 30);
ItemList['Būmon'] = new PokemonItem('Būmon', 70, Currency.magiccoin, 16);
ItemList['Dodomon'] = new PokemonItem('Dodomon', 8, Currency.attackcoin, 12);
ItemList['Fufumon'] = new PokemonItem('Fufumon', 8, Currency.speedcoin, 12);
ItemList['Pupumon'] = new PokemonItem('Pupumon', 9, Currency.intcoin, 12);
ItemList['Dorimon'] = new PokemonItem('Dorimon', 18, Currency.attackcoin, 15);
ItemList['Kyokyomon'] = new PokemonItem('Kyokyomon', 24, Currency.speedcoin, 15);
ItemList['Puroromon'] = new PokemonItem('Puroromon', 22, Currency.intcoin, 15);
ItemList['Agumon X-Antibody'] = new PokemonItem('Agumon X-Antibody', 42, Currency.magiccoin, 20);
ItemList['Betamon X-Antibody'] = new PokemonItem('Betamon X-Antibody', 40, Currency.healthcoin, 21);
ItemList['DORUmon'] = new PokemonItem('DORUmon', 49, Currency.attackcoin, 21);
ItemList['Funbeemon'] = new PokemonItem('Funbeemon', 37, Currency.speedcoin, 19);
ItemList['Gabumon X-Antibody'] = new PokemonItem('Gabumon X-Antibody', 35, Currency.defencecoin, 21);
ItemList['Ganimon X-Antibody'] = new PokemonItem('Ganimon X-Antibody', 38, Currency.defencecoin, 20);
ItemList['Gazimon X-Antibody'] = new PokemonItem('Gazimon X-Antibody', 51, Currency.attackcoin, 21);
ItemList['Gomamon X-Antibody'] = new PokemonItem('Gomamon X-Antibody', 41, Currency.intcoin, 21);
ItemList['Gottsumon X-Antibody'] = new PokemonItem('Gottsumon X-Antibody', 51, Currency.defencecoin, 21);
ItemList['Guilmon X-Antibody'] = new PokemonItem('Guilmon X-Antibody', 51, Currency.speedcoin, 21);
ItemList['Kokuwamon X-Antibody'] = new PokemonItem('Kokuwamon X-Antibody', 38, Currency.speedcoin, 21);
ItemList['Otamamon X-Antibody'] = new PokemonItem('Otamamon X-Antibody', 44, Currency.healthcoin, 21);
ItemList['Palmon X-Antibody'] = new PokemonItem('Palmon X-Antibody', 42, Currency.magiccoin, 21);
ItemList['Plotmon X-Antibody'] = new PokemonItem('Plotmon X-Antibody', 34, Currency.intcoin, 21);
ItemList['Ryudamon'] = new PokemonItem('Ryudamon', 45, Currency.attackcoin, 21);
ItemList['Shakomon X-Antibody'] = new PokemonItem('Shakomon X-Antibody', 39, Currency.defencecoin, 20);
ItemList['Allomon X-Antibody'] = new PokemonItem('Allomon X-Antibody', 104, Currency.attackcoin, 30);
ItemList['Death-X-DORUgamon'] = new PokemonItem('Death-X-DORUgamon', 63, Currency.magiccoin, 29);
ItemList['Dobermon X-Antibody'] = new PokemonItem('Dobermon X-Antibody', 83, Currency.speedcoin, 30);
ItemList['DORUgamon'] = new PokemonItem('DORUgamon', 75, Currency.attackcoin, 30);
ItemList['Garurumon X-Antibody'] = new PokemonItem('Garurumon X-Antibody', 98, Currency.speedcoin, 30);
ItemList['Gesomon X-Antibody'] = new PokemonItem('Gesomon X-Antibody', 95, Currency.healthcoin, 30);
ItemList['Ginryumon'] = new PokemonItem('Ginryumon', 72, Currency.attackcoin, 30);
ItemList['Greymon X-Antibody'] = new PokemonItem('Greymon X-Antibody', 80, Currency.magiccoin, 30);
ItemList['Growmon X-Antibody'] = new PokemonItem('Growmon X-Antibody', 89, Currency.healthcoin, 30);
ItemList['Kuwagamon X-Antibody'] = new PokemonItem('Kuwagamon X-Antibody', 95, Currency.attackcoin, 30);
ItemList['Leomon X-Antibody'] = new PokemonItem('Leomon X-Antibody', 82, Currency.intcoin, 31);
ItemList['Mantaraymon X-Antibody'] = new PokemonItem('Mantaraymon X-Antibody', 94, Currency.defencecoin, 30);
ItemList['Monochromon X-Antibody'] = new PokemonItem('Monochromon X-Antibody', 99, Currency.healthcoin, 30);
ItemList['Nefertimon X-Antibody'] = new PokemonItem('Nefertimon X-Antibody', 79, Currency.intcoin, 30);
ItemList['Omekamon'] = new PokemonItem('Omekamon', 92, Currency.intcoin, 30);
ItemList['Pteranomon X-Antibody'] = new PokemonItem('Pteranomon X-Antibody', 99, Currency.speedcoin, 29);
ItemList['Raptordramon'] = new PokemonItem('Raptordramon', 92, Currency.attackcoin, 29);
ItemList['Rhinomon X-Antibody'] = new PokemonItem('Rhinomon X-Antibody', 80, Currency.defencecoin, 31);
ItemList['Seadramon X-Antibody'] = new PokemonItem('Seadramon X-Antibody', 73, Currency.speedcoin, 30);
ItemList['Starmon X-Antibody'] = new PokemonItem('Starmon X-Antibody', 94, Currency.magiccoin, 31);
ItemList['Tailmon X-Antibody'] = new PokemonItem('Tailmon X-Antibody', 90, Currency.magiccoin, 31);
ItemList['Tobucatmon'] = new PokemonItem('Tobucatmon', 86, Currency.intcoin, 29);
ItemList['Togemon X-Antibody'] = new PokemonItem('Togemon X-Antibody', 93, Currency.healthcoin, 29);
ItemList['Tylomon X-Antibody'] = new PokemonItem('Tylomon X-Antibody', 99, Currency.speedcoin, 31);
ItemList['Waspmon'] = new PokemonItem('Waspmon', 70, Currency.attackcoin, 29);
ItemList['Anomalocarimon X-Antibody'] = new PokemonItem('Anomalocarimon X-Antibody', 163, Currency.healthcoin, 44);
ItemList['Cannonbeemon'] = new PokemonItem('Cannonbeemon', 113, Currency.defencecoin, 41);
ItemList['Cerberumon X-Antibody'] = new PokemonItem('Cerberumon X-Antibody', 167, Currency.speedcoin, 39);
ItemList['Death-X-DORUguremon'] = new PokemonItem('Death-X-DORUguremon', 160, Currency.magiccoin, 43);
ItemList['DORUguremon'] = new PokemonItem('DORUguremon', 123, Currency.attackcoin, 42);
ItemList['Garudamon X-Antibody'] = new PokemonItem('Garudamon X-Antibody', 129, Currency.intcoin, 43);
ItemList['Grademon'] = new PokemonItem('Grademon', 144, Currency.attackcoin, 41);
ItemList['Hisyaryumon'] = new PokemonItem('Hisyaryumon', 150, Currency.attackcoin, 42);
ItemList['Lilimon X-Antibody'] = new PokemonItem('Lilimon X-Antibody', 154, Currency.magiccoin, 42);
ItemList['Mametyramon'] = new PokemonItem('Mametyramon', 148, Currency.attackcoin, 40);
ItemList['Mammon X-Antibody'] = new PokemonItem('Mammon X-Antibody', 150, Currency.defencecoin, 42);
ItemList['Mega Seadramon X-Antibody'] = new PokemonItem('Mega Seadramon X-Antibody', 143, Currency.speedcoin, 41);
ItemList['Megalo Growmon X-Antibody'] = new PokemonItem('Megalo Growmon X-Antibody', 132, Currency.healthcoin, 41);
ItemList['Metal Fantomon'] = new PokemonItem('Metal Fantomon', 139, Currency.defencecoin, 39);
ItemList['Metal Greymon X-Antibody'] = new PokemonItem('Metal Greymon X-Antibody', 174, Currency.magiccoin, 44);
ItemList['Metal Tyranomon X-Antibody'] = new PokemonItem('Metal Tyranomon X-Antibody', 139, Currency.defencecoin, 40);
ItemList['Ookuwamon X-Antibody'] = new PokemonItem('Ookuwamon X-Antibody', 134, Currency.speedcoin, 39);
ItemList['Panjyamon X-Antibody'] = new PokemonItem('Panjyamon X-Antibody', 169, Currency.healthcoin, 41);
ItemList['Skull Baluchimon'] = new PokemonItem('Skull Baluchimon', 124, Currency.magiccoin, 39);
ItemList['Triceramon X-Antibody'] = new PokemonItem('Triceramon X-Antibody', 157, Currency.attackcoin, 41);
ItemList['Vademon X-Antibody'] = new PokemonItem('Vademon X-Antibody', 155, Currency.intcoin, 39);
ItemList['Were Garurumon X-Antibody'] = new PokemonItem('Were Garurumon X-Antibody', 167, Currency.attackcoin, 44);
ItemList['Alphamon'] = new PokemonItem('Alphamon', 180, Currency.defencecoin, 57);
ItemList['Alphamon Ouryuken'] = new PokemonItem('Alphamon Ouryuken', 195, Currency.attackcoin, 60);
ItemList['Arkadimon Super Ultimate'] = new PokemonItem('Arkadimon Super Ultimate', 233, Currency.attackcoin, 60);
ItemList['Barbamon'] = new PokemonItem('Barbamon', 255, Currency.intcoin, 57);
ItemList['Death-X-DORUgoramon'] = new PokemonItem('Death-X-DORUgoramon', 237, Currency.magiccoin, 53);
ItemList['Death-X-mon'] = new PokemonItem('Death-X-mon', 210, Currency.defencecoin, 54);
ItemList['Demon Super Ultimate'] = new PokemonItem('Demon Super Ultimate', 239, Currency.intcoin, 60);
ItemList['Dinorexmon'] = new PokemonItem('Dinorexmon', 246, Currency.speedcoin, 53);
ItemList['Dinotigermon'] = new PokemonItem('Dinotigermon', 185, Currency.speedcoin, 53);
ItemList['DORUgoramon'] = new PokemonItem('DORUgoramon', 251, Currency.attackcoin, 52);
ItemList['Dukemon X-Antibody'] = new PokemonItem('Dukemon X-Antibody', 233, Currency.intcoin, 54);
ItemList['Dynasmon X-Antibody'] = new PokemonItem('Dynasmon X-Antibody', 243, Currency.defencecoin, 57);
ItemList['Ebemon X-Antibody'] = new PokemonItem('Ebemon X-Antibody', 249, Currency.intcoin, 57);
ItemList['Gaioumon'] = new PokemonItem('Gaioumon', 210, Currency.attackcoin, 52);
ItemList['Giga Seadramon'] = new PokemonItem('Giga Seadramon', 218, Currency.defencecoin, 61);
ItemList['Goddramon X-Antibody'] = new PokemonItem('Goddramon X-Antibody', 219, Currency.intcoin, 54);
ItemList['Grandis Kuwagamon'] = new PokemonItem('Grandis Kuwagamon', 206, Currency.defencecoin, 56);
ItemList['Holydramon X-Antibody'] = new PokemonItem('Holydramon X-Antibody', 243, Currency.healthcoin, 56);
ItemList['Leviamon'] = new PokemonItem('Leviamon', 173, Currency.attackcoin, 57);
ItemList['Lucemon Larva'] = new PokemonItem('Lucemon Larva', 300, Currency.intcoin, 52);
ItemList['Magnamon X-Antibody'] = new PokemonItem('Magnamon X-Antibody', 201, Currency.defencecoin, 51);
ItemList['Medieval Dukemon'] = new PokemonItem('Medieval Dukemon', 195, Currency.intcoin, 52);
ItemList['Megidramon X-Antibody'] = new PokemonItem('Megidramon X-Antibody', 210, Currency.healthcoin, 57);
ItemList['Metal Garurumon X-Antibody'] = new PokemonItem('Metal Garurumon X-Antibody', 218, Currency.defencecoin, 53);
ItemList['Metal Piranimon'] = new PokemonItem('Metal Piranimon', 228, Currency.healthcoin, 55);
ItemList['Omegamon X-Antibody'] = new PokemonItem('Omegamon X-Antibody', 233, Currency.intcoin, 53);
ItemList['Ouryumon'] = new PokemonItem('Ouryumon', 237, Currency.attackcoin, 56);
ItemList['Plesiomon X-Antibody'] = new PokemonItem('Plesiomon X-Antibody', 239, Currency.defencecoin, 56);
ItemList['Rosemon X-Antibody'] = new PokemonItem('Rosemon X-Antibody', 225, Currency.healthcoin, 56);
ItemList['Skull Mammon X-Antibody'] = new PokemonItem('Skull Mammon X-Antibody', 225, Currency.defencecoin, 56);
ItemList['Tiger Vespamon'] = new PokemonItem('Tiger Vespamon', 195, Currency.attackcoin, 52);
ItemList['Ulforce V-dramon X-Antibody'] = new PokemonItem('Ulforce V-dramon X-Antibody', 249, Currency.speedcoin, 57);
ItemList['Ulforce V-dramon Future Mode'] = new PokemonItem('Ulforce V-dramon Future Mode', 219, Currency.speedcoin, 55);
ItemList['Ultimate Brachimon'] = new PokemonItem('Ultimate Brachimon', 224, Currency.healthcoin, 53);
ItemList['War Greymon X-Antibody'] = new PokemonItem('War Greymon X-Antibody', 255, Currency.healthcoin, 52);
ItemList['Black Guilmon'] = new PokemonItem('Black Guilmon', 45, Currency.magiccoin, 20);
ItemList['Hagurumon X-Antibody'] = new PokemonItem('Hagurumon X-Antibody', 42, Currency.defencecoin, 21);
ItemList['Phascomon'] = new PokemonItem('Phascomon', 36, Currency.defencecoin, 20);
ItemList['Porcupamon'] = new PokemonItem('Porcupamon', 70, Currency.defencecoin, 30);
ItemList['Thunderballmon X-Antibody'] = new PokemonItem('Thunderballmon X-Antibody', 87, Currency.magiccoin, 30);
ItemList['Astamon'] = new PokemonItem('Astamon', 162, Currency.magiccoin, 43);
ItemList['Mamemon X-Antibody'] = new PokemonItem('Mamemon X-Antibody', 142, Currency.magiccoin, 44);
ItemList['Metal Mamemon X-Antibody'] = new PokemonItem('Metal Mamemon X-Antibody', 152, Currency.magiccoin, 42);
ItemList['Belphemon Rage Mode'] = new PokemonItem('Belphemon Rage Mode', 276, Currency.attackcoin, 60);
ItemList['Belphemon Sleep Mode'] = new PokemonItem('Belphemon Sleep Mode', 210, Currency.intcoin, 57);
ItemList['Chaosdramon X-Antibody'] = new PokemonItem('Chaosdramon X-Antibody', 237, Currency.defencecoin, 52);
ItemList['Prince Mamemon X-Antibody'] = new PokemonItem('Prince Mamemon X-Antibody', 249, Currency.intcoin, 50);
ItemList['Bommon'] = new PokemonItem('Bommon', 9, Currency.speedcoin, 12);
ItemList['Pafumon'] = new PokemonItem('Pafumon', 9, Currency.intcoin, 12);
ItemList['Popomon'] = new PokemonItem('Popomon', 8, Currency.intcoin, 12);
ItemList['Puwamon'] = new PokemonItem('Puwamon', 8, Currency.speedcoin, 12);
ItemList['Frimon'] = new PokemonItem('Frimon', 23, Currency.intcoin, 15);
ItemList['Kyaromon'] = new PokemonItem('Kyaromon', 20, Currency.intcoin, 15);
ItemList['Missimon'] = new PokemonItem('Missimon', 24, Currency.speedcoin, 15);
ItemList['Pinamon'] = new PokemonItem('Pinamon', 20, Currency.speedcoin, 15);
ItemList['Tokomon X-Antibody'] = new PokemonItem('Tokomon X-Antibody', 23, Currency.magiccoin, 15);
ItemList['Agumon 2006'] = new PokemonItem('Agumon 2006', 48, Currency.speedcoin, 21);
ItemList['Commandramon'] = new PokemonItem('Commandramon', 42, Currency.intcoin, 20);
ItemList['Dracumon'] = new PokemonItem('Dracumon', 42, Currency.attackcoin, 21);
ItemList['Falcomon'] = new PokemonItem('Falcomon', 43, Currency.healthcoin, 22);
ItemList['Kokabuterimon'] = new PokemonItem('Kokabuterimon', 52, Currency.defencecoin, 20);
ItemList['Kudamon'] = new PokemonItem('Kudamon', 49, Currency.magiccoin, 21);
ItemList['Liollmon'] = new PokemonItem('Liollmon', 34, Currency.speedcoin, 21);
ItemList['Swimmon'] = new PokemonItem('Swimmon', 44, Currency.speedcoin, 21);
ItemList['Blade Kuwagamon'] = new PokemonItem('Blade Kuwagamon', 80, Currency.attackcoin, 29);
ItemList['Diatrymon'] = new PokemonItem('Diatrymon', 69, Currency.speedcoin, 30);
ItemList['Liamon'] = new PokemonItem('Liamon', 93, Currency.speedcoin, 31);
ItemList['Reppamon'] = new PokemonItem('Reppamon', 80, Currency.speedcoin, 31);
ItemList['Sangloupmon'] = new PokemonItem('Sangloupmon', 70, Currency.attackcoin, 29);
ItemList['Sealsdramon'] = new PokemonItem('Sealsdramon', 84, Currency.intcoin, 30);
ItemList['Loader Leomon'] = new PokemonItem('Loader Leomon', 169, Currency.defencecoin, 39);
ItemList['Matadrmon'] = new PokemonItem('Matadrmon', 125, Currency.speedcoin, 41);
ItemList['Metallife Kuwagamon'] = new PokemonItem('Metallife Kuwagamon', 144, Currency.defencecoin, 43);
ItemList['Tankdramon'] = new PokemonItem('Tankdramon', 160, Currency.attackcoin, 40);
ItemList['Tyilinmon'] = new PokemonItem('Tyilinmon', 132, Currency.speedcoin, 44);
ItemList['Volcdramon'] = new PokemonItem('Volcdramon', 137, Currency.attackcoin, 41);
ItemList['Yatagaramon'] = new PokemonItem('Yatagaramon', 147, Currency.speedcoin, 42);
ItemList['Bancho Leomon'] = new PokemonItem('Bancho Leomon', 197, Currency.defencecoin, 52);
ItemList['Beelzebumon X-Antibody'] = new PokemonItem('Beelzebumon X-Antibody', 245, Currency.attackcoin, 56);
ItemList['Black War Greymon X-Antibody'] = new PokemonItem('Black War Greymon X-Antibody', 197, Currency.speedcoin, 54);
ItemList['Chaosmon'] = new PokemonItem('Chaosmon', 383, Currency.attackcoin, 60);
ItemList['Clavis Angemon'] = new PokemonItem('Clavis Angemon', 174, Currency.intcoin, 55);
ItemList['Craniummon'] = new PokemonItem('Craniummon', 218, Currency.defencecoin, 57);
ItemList['Darkdramon'] = new PokemonItem('Darkdramon', 188, Currency.attackcoin, 50);
ItemList['Grand Dracumon'] = new PokemonItem('Grand Dracumon', 188, Currency.attackcoin, 56);
ItemList['Herakle Kabuterimon X-Antibody'] = new PokemonItem('Herakle Kabuterimon X-Antibody', 212, Currency.defencecoin, 51);
ItemList['Mercurymon'] = new PokemonItem('Mercurymon', 207, Currency.speedcoin, 56);
ItemList['Minervamon'] = new PokemonItem('Minervamon', 218, Currency.attackcoin, 56);
ItemList['Neptunemon'] = new PokemonItem('Neptunemon', 180, Currency.intcoin, 56);
ItemList['Sleipmon'] = new PokemonItem('Sleipmon', 180, Currency.speedcoin, 57);
ItemList['Spinomon'] = new PokemonItem('Spinomon', 192, Currency.speedcoin, 54);
ItemList['Tyrant Kabuterimon'] = new PokemonItem('Tyrant Kabuterimon', 203, Currency.attackcoin, 56);
ItemList['Ultimate Chaosmon'] = new PokemonItem('Ultimate Chaosmon', 225, Currency.magiccoin, 57);
ItemList['Valdurmon'] = new PokemonItem('Valdurmon', 225, Currency.intcoin, 56);
ItemList['Budmon'] = new PokemonItem('Budmon', 19, Currency.defencecoin, 15);
ItemList['Chapmon'] = new PokemonItem('Chapmon', 19, Currency.intcoin, 15);
ItemList['Wanyamon'] = new PokemonItem('Wanyamon', 15, Currency.healthcoin, 15);
ItemList['Agumon Black 2006'] = new PokemonItem('Agumon Black 2006', 44, Currency.magiccoin, 21);
ItemList['Agumon Hakase'] = new PokemonItem('Agumon Hakase', 47, Currency.intcoin, 21);
ItemList['Bushi Agumon'] = new PokemonItem('Bushi Agumon', 45, Currency.speedcoin, 21);
ItemList['Falcomon 2006'] = new PokemonItem('Falcomon 2006', 38, Currency.speedcoin, 21);
ItemList['Gaomon'] = new PokemonItem('Gaomon', 42, Currency.attackcoin, 21);
ItemList['Kamemon'] = new PokemonItem('Kamemon', 46, Currency.defencecoin, 20);
ItemList['Kudamon 2006'] = new PokemonItem('Kudamon 2006', 42, Currency.magiccoin, 21);
ItemList['Lalamon'] = new PokemonItem('Lalamon', 36, Currency.healthcoin, 19);
ItemList['Minidekachimon'] = new PokemonItem('Minidekachimon', 43, Currency.speedcoin, 20);
ItemList['Nise Agumon Hakase'] = new PokemonItem('Nise Agumon Hakase', 47, Currency.magiccoin, 20);
ItemList['Pawn Chessmon Black'] = new PokemonItem('Pawn Chessmon Black', 54, Currency.defencecoin, 21);
ItemList['Pawn Chessmon White'] = new PokemonItem('Pawn Chessmon White', 54, Currency.attackcoin, 21);
ItemList['Proto Gizmon'] = new PokemonItem('Proto Gizmon', 51, Currency.intcoin, 20);
ItemList['Santa Agumon'] = new PokemonItem('Santa Agumon', 30, Currency.intcoin, 21);
ItemList['Yuki Agumon 2006'] = new PokemonItem('Yuki Agumon 2006', 37, Currency.healthcoin, 20);
ItemList['Atamadekachimon'] = new PokemonItem('Atamadekachimon', 81, Currency.speedcoin, 30);
ItemList['Black Gaogamon'] = new PokemonItem('Black Gaogamon', 102, Currency.intcoin, 30);
ItemList['Gaogamon'] = new PokemonItem('Gaogamon', 75, Currency.speedcoin, 30);
ItemList['Gawappamon'] = new PokemonItem('Gawappamon', 65, Currency.magiccoin, 30);
ItemList['Geo Greymon'] = new PokemonItem('Geo Greymon', 80, Currency.attackcoin, 31);
ItemList['Gizmon AT'] = new PokemonItem('Gizmon AT', 85, Currency.intcoin, 29);
ItemList['Gold Numemon'] = new PokemonItem('Gold Numemon', 80, Currency.defencecoin, 29);
ItemList['Knight Chessmon Black'] = new PokemonItem('Knight Chessmon Black', 65, Currency.defencecoin, 31);
ItemList['Knight Chessmon White'] = new PokemonItem('Knight Chessmon White', 65, Currency.intcoin, 30);
ItemList['Peckmon'] = new PokemonItem('Peckmon', 85, Currency.speedcoin, 30);
ItemList['Sunflowmon'] = new PokemonItem('Sunflowmon', 78, Currency.intcoin, 29);
ItemList['Yoxtu!Yoxtu!mon'] = new PokemonItem('Yoxtu!Yoxtu!mon', 94, Currency.magiccoin, 30);
ItemList['Algomon Perfect'] = new PokemonItem('Algomon Perfect', 138, Currency.healthcoin, 39);
ItemList['Bishop Chessmon White'] = new PokemonItem('Bishop Chessmon White', 153, Currency.intcoin, 39);
ItemList['Gizmon XT'] = new PokemonItem('Gizmon XT', 175, Currency.intcoin, 42);
ItemList['Lilamon'] = new PokemonItem('Lilamon', 132, Currency.intcoin, 41);
ItemList['Mach Gaogamon'] = new PokemonItem('Mach Gaogamon', 125, Currency.speedcoin, 41);
ItemList['Rize Greymon'] = new PokemonItem('Rize Greymon', 144, Currency.attackcoin, 42);
ItemList['Rook Chessmon Black'] = new PokemonItem('Rook Chessmon Black', 185, Currency.defencecoin, 41);
ItemList['Shawujinmon'] = new PokemonItem('Shawujinmon', 163, Currency.magiccoin, 41);
ItemList['Yatagaramon 2006'] = new PokemonItem('Yatagaramon 2006', 138, Currency.speedcoin, 41);
ItemList['Algomon Ultimate'] = new PokemonItem('Algomon Ultimate', 240, Currency.healthcoin, 59);
ItemList['Bio Darkdramon'] = new PokemonItem('Bio Darkdramon', 195, Currency.magiccoin, 56);
ItemList['Bio Lotusmon'] = new PokemonItem('Bio Lotusmon', 219, Currency.magiccoin, 51);
ItemList['Bio Spinomon'] = new PokemonItem('Bio Spinomon', 215, Currency.speedcoin, 52);
ItemList['Chronomon Destroy Mode'] = new PokemonItem('Chronomon Destroy Mode', 225, Currency.magiccoin, 60);
ItemList['Chronomon Holy Mode'] = new PokemonItem('Chronomon Holy Mode', 252, Currency.healthcoin, 59);
ItemList['El Doradimon'] = new PokemonItem('El Doradimon', 234, Currency.defencecoin, 50);
ItemList['Jumbo Gamemon'] = new PokemonItem('Jumbo Gamemon', 230, Currency.defencecoin, 53);
ItemList['King Chessmon'] = new PokemonItem('King Chessmon', 246, Currency.intcoin, 58);
ItemList['Mirage Gaogamon'] = new PokemonItem('Mirage Gaogamon', 180, Currency.attackcoin, 52);
ItemList['Mirage Gaogamon Burst Mode'] = new PokemonItem('Mirage Gaogamon Burst Mode', 188, Currency.speedcoin, 56);
ItemList['Platinum Numemon'] = new PokemonItem('Platinum Numemon', 180, Currency.healthcoin, 49);
ItemList['Queen Chessmon'] = new PokemonItem('Queen Chessmon', 207, Currency.attackcoin, 54);
ItemList['Ravmon'] = new PokemonItem('Ravmon', 210, Currency.speedcoin, 52);
ItemList['Ravmon Burst Mode'] = new PokemonItem('Ravmon Burst Mode', 225, Currency.speedcoin, 56);
ItemList['Shine Greymon'] = new PokemonItem('Shine Greymon', 210, Currency.attackcoin, 53);
ItemList['Shine Greymon Burst Mode'] = new PokemonItem('Shine Greymon Burst Mode', 248, Currency.attackcoin, 57);
ItemList['Shine Greymon Ruin Mode'] = new PokemonItem('Shine Greymon Ruin Mode', 233, Currency.magiccoin, 56);
ItemList['Tonosama Mamemon'] = new PokemonItem('Tonosama Mamemon', 218, Currency.intcoin, 58);
ItemList['Bio Coatlmon'] = new PokemonItem('Bio Coatlmon', 140, Currency.speedcoin, 34);
ItemList['Bio Stegomon'] = new PokemonItem('Bio Stegomon', 146, Currency.healthcoin, 35);
ItemList['Bio Thunderbirmon'] = new PokemonItem('Bio Thunderbirmon', 132, Currency.magiccoin, 35);
ItemList['Petitmon'] = new PokemonItem('Petitmon', 9, Currency.attackcoin, 12);
ItemList['Babydmon'] = new PokemonItem('Babydmon', 23, Currency.attackcoin, 15);
ItemList['Chicchimon'] = new PokemonItem('Chicchimon', 21, Currency.speedcoin, 15);
ItemList['Moonmon'] = new PokemonItem('Moonmon', 20, Currency.intcoin, 15);
ItemList['Sunmon'] = new PokemonItem('Sunmon', 22, Currency.healthcoin, 15);
ItemList['Coronamon'] = new PokemonItem('Coronamon', 39, Currency.healthcoin, 20);
ItemList['Dracomon'] = new PokemonItem('Dracomon', 52, Currency.attackcoin, 21);
ItemList['Lunamon'] = new PokemonItem('Lunamon', 39, Currency.intcoin, 21);
ItemList['Coredramon Blue'] = new PokemonItem('Coredramon Blue', 88, Currency.attackcoin, 31);
ItemList['Coredramon Green'] = new PokemonItem('Coredramon Green', 88, Currency.attackcoin, 31);
ItemList['Firamon'] = new PokemonItem('Firamon', 92, Currency.healthcoin, 30);
ItemList['Grimmon'] = new PokemonItem('Grimmon', 96, Currency.magiccoin, 31);
ItemList['Lekismon'] = new PokemonItem('Lekismon', 80, Currency.speedcoin, 29);
ItemList['Catch Mamemon'] = new PokemonItem('Catch Mamemon', 117, Currency.healthcoin, 38);
ItemList['Chaos Grimmon'] = new PokemonItem('Chaos Grimmon', 124, Currency.magiccoin, 43);
ItemList['Crescemon'] = new PokemonItem('Crescemon', 119, Currency.intcoin, 41);
ItemList['Dark Superstarmon'] = new PokemonItem('Dark Superstarmon', 135, Currency.magiccoin, 43);
ItemList['Flaremon'] = new PokemonItem('Flaremon', 163, Currency.healthcoin, 42);
ItemList['Groundramon'] = new PokemonItem('Groundramon', 169, Currency.attackcoin, 42);
ItemList['Wingdramon'] = new PokemonItem('Wingdramon', 125, Currency.attackcoin, 42);
ItemList['Apollomon'] = new PokemonItem('Apollomon', 182, Currency.healthcoin, 57);
ItemList['Breakdramon'] = new PokemonItem('Breakdramon', 225, Currency.attackcoin, 56);
ItemList['Dianamon'] = new PokemonItem('Dianamon', 203, Currency.intcoin, 56);
ItemList['Duftmon'] = new PokemonItem('Duftmon', 195, Currency.speedcoin, 57);
ItemList['Duftmon X-Antibody'] = new PokemonItem('Duftmon X-Antibody', 255, Currency.speedcoin, 59);
ItemList['Duftmon Leopard Mode'] = new PokemonItem('Duftmon Leopard Mode', 233, Currency.speedcoin, 60);
ItemList['Examon'] = new PokemonItem('Examon', 188, Currency.attackcoin, 57);
ItemList['Exo Grimmon'] = new PokemonItem('Exo Grimmon', 254, Currency.magiccoin, 51);
ItemList['Lotusmon'] = new PokemonItem('Lotusmon', 225, Currency.intcoin, 52);
ItemList['Ogudomon'] = new PokemonItem('Ogudomon', 195, Currency.healthcoin, 61);
ItemList['Rosemon Burst Mode'] = new PokemonItem('Rosemon Burst Mode', 165, Currency.intcoin, 56);
ItemList['Slayerdramon'] = new PokemonItem('Slayerdramon', 180, Currency.attackcoin, 56);
ItemList['Surfymon'] = new PokemonItem('Surfymon', 233, Currency.speedcoin, 53);
ItemList['Victory Greymon'] = new PokemonItem('Victory Greymon', 221, Currency.magiccoin, 55);
ItemList['Zd Garurumon'] = new PokemonItem('Zd Garurumon', 222, Currency.defencecoin, 53);
ItemList['Burpmon'] = new PokemonItem('Burpmon', 574, Currency.healthcoin, 50);
ItemList['Bombmon'] = new PokemonItem('Bombmon', 9, Currency.attackcoin, 12);
ItemList['Chibickmon'] = new PokemonItem('Chibickmon', 8, Currency.speedcoin, 12);
ItemList['Monimon'] = new PokemonItem('Monimon', 22, Currency.defencecoin, 15);
ItemList['Pickmon'] = new PokemonItem('Pickmon', 22, Currency.speedcoin, 15);
ItemList['Chikurimon'] = new PokemonItem('Chikurimon', 42, Currency.attackcoin, 21);
ItemList['Cutemon'] = new PokemonItem('Cutemon', 52, Currency.intcoin, 21);
ItemList['Dondokomon'] = new PokemonItem('Dondokomon', 35, Currency.healthcoin, 20);
ItemList['Gaossmon'] = new PokemonItem('Gaossmon', 36, Currency.defencecoin, 21);
ItemList['Hyokomon'] = new PokemonItem('Hyokomon', 41, Currency.speedcoin, 20);
ItemList['Monitamon'] = new PokemonItem('Monitamon', 50, Currency.defencecoin, 20);
ItemList['Shoutmon'] = new PokemonItem('Shoutmon', 49, Currency.attackcoin, 21);
ItemList['Shoutmon-Dorulu Cannon'] = new PokemonItem('Shoutmon-Dorulu Cannon', 45, Currency.attackcoin, 21);
ItemList['Shoutmon-Jet Sparrow'] = new PokemonItem('Shoutmon-Jet Sparrow', 38, Currency.speedcoin, 20);
ItemList['Shoutmon-Star Sword'] = new PokemonItem('Shoutmon-Star Sword', 41, Currency.magiccoin, 20);
ItemList['Spadamon'] = new PokemonItem('Spadamon', 51, Currency.attackcoin, 20);
ItemList['Sparrowmon'] = new PokemonItem('Sparrowmon', 45, Currency.speedcoin, 21);
ItemList['Starmons'] = new PokemonItem('Starmons', 53, Currency.speedcoin, 21);
ItemList['Tyutyumon'] = new PokemonItem('Tyutyumon', 47, Currency.intcoin, 20);
ItemList['Ballistamon'] = new PokemonItem('Ballistamon', 84, Currency.defencecoin, 30);
ItemList['Buraimon'] = new PokemonItem('Buraimon', 87, Currency.speedcoin, 30);
ItemList['Damemon'] = new PokemonItem('Damemon', 69, Currency.defencecoin, 30);
ItemList['Deadly Axemon'] = new PokemonItem('Deadly Axemon', 102, Currency.attackcoin, 30);
ItemList['Deckerdramon'] = new PokemonItem('Deckerdramon', 75, Currency.defencecoin, 31);
ItemList['Don Shoutmon'] = new PokemonItem('Don Shoutmon', 103, Currency.intcoin, 29);
ItemList['Dorulumon'] = new PokemonItem('Dorulumon', 82, Currency.speedcoin, 29);
ItemList['Greymon 2010'] = new PokemonItem('Greymon 2010', 77, Currency.defencecoin, 30);
ItemList['Mad Leomon'] = new PokemonItem('Mad Leomon', 74, Currency.speedcoin, 29);
ItemList['Mad Leomon Armed Mode'] = new PokemonItem('Mad Leomon Armed Mode', 87, Currency.speedcoin, 30);
ItemList['Mail Birdramon'] = new PokemonItem('Mail Birdramon', 99, Currency.defencecoin, 30);
ItemList['Shonitamon'] = new PokemonItem('Shonitamon', 84, Currency.intcoin, 30);
ItemList['Shortmon'] = new PokemonItem('Shortmon', 74, Currency.intcoin, 30);
ItemList['Shoutmon X2'] = new PokemonItem('Shoutmon X2', 96, Currency.magiccoin, 30);
ItemList['Shoutmon X3'] = new PokemonItem('Shoutmon X3', 101, Currency.magiccoin, 31);
ItemList['Shoutmon X4'] = new PokemonItem('Shoutmon X4', 106, Currency.magiccoin, 31);
ItemList['Skull Knightmon'] = new PokemonItem('Skull Knightmon', 86, Currency.defencecoin, 29);
ItemList['Skull Knightmon Big Axe Mode'] = new PokemonItem('Skull Knightmon Big Axe Mode', 86, Currency.defencecoin, 30);
ItemList['Skull Knightmon Cavalier Mode'] = new PokemonItem('Skull Knightmon Cavalier Mode', 86, Currency.defencecoin, 31);
ItemList['Troopmon'] = new PokemonItem('Troopmon', 84, Currency.intcoin, 31);
ItemList['Baalmon'] = new PokemonItem('Baalmon', 130, Currency.magiccoin, 43);
ItemList['Butenmon'] = new PokemonItem('Butenmon', 144, Currency.speedcoin, 44);
ItemList['Cyberdramon 2010'] = new PokemonItem('Cyberdramon 2010', 118, Currency.magiccoin, 39);
ItemList['Dark Knightmon'] = new PokemonItem('Dark Knightmon', 153, Currency.defencecoin, 41);
ItemList['Decker Greymon'] = new PokemonItem('Decker Greymon', 125, Currency.defencecoin, 39);
ItemList['Metal Greymon 2010'] = new PokemonItem('Metal Greymon 2010', 125, Currency.defencecoin, 42);
ItemList['Metal Greymon-Cyber Launcher'] = new PokemonItem('Metal Greymon-Cyber Launcher', 138, Currency.defencecoin, 44);
ItemList['Shoutmon X4B'] = new PokemonItem('Shoutmon X4B', 187, Currency.magiccoin, 44);
ItemList['Shoutmon X4K'] = new PokemonItem('Shoutmon X4K', 187, Currency.magiccoin, 45);
ItemList['Shoutmon X5'] = new PokemonItem('Shoutmon X5', 187, Currency.magiccoin, 46);
ItemList['Weddinmon'] = new PokemonItem('Weddinmon', 152, Currency.intcoin, 41);
ItemList['Aegisdramon'] = new PokemonItem('Aegisdramon', 255, Currency.defencecoin, 58);
ItemList['Bagramon'] = new PokemonItem('Bagramon', 246, Currency.healthcoin, 58);
ItemList['Beelzebumon 2010'] = new PokemonItem('Beelzebumon 2010', 168, Currency.magiccoin, 55);
ItemList['Blastmon'] = new PokemonItem('Blastmon', 234, Currency.defencecoin, 56);
ItemList['Chaosmon Valdur Arm'] = new PokemonItem('Chaosmon Valdur Arm', 308, Currency.attackcoin, 60);
ItemList['King Whamon'] = new PokemonItem('King Whamon', 300, Currency.healthcoin, 56);
ItemList['Shoutmon X5B'] = new PokemonItem('Shoutmon X5B', 218, Currency.magiccoin, 56);
ItemList['Tactimon'] = new PokemonItem('Tactimon', 221, Currency.speedcoin, 51);
ItemList['Panbachimon'] = new PokemonItem('Panbachimon', 225, Currency.magiccoin, 27);
ItemList['Kozenimon'] = new PokemonItem('Kozenimon', 22, Currency.defencecoin, 15);
ItemList['Bacomon'] = new PokemonItem('Bacomon', 39, Currency.healthcoin, 21);
ItemList['Ekakimon'] = new PokemonItem('Ekakimon', 36, Currency.intcoin, 21);
ItemList['Gumdramon'] = new PokemonItem('Gumdramon', 48, Currency.attackcoin, 21);
ItemList['Iguneetmon'] = new PokemonItem('Iguneetmon', 48, Currency.speedcoin, 20);
ItemList['Soundbirdmon'] = new PokemonItem('Soundbirdmon', 48, Currency.speedcoin, 19);
ItemList['Tinkermon'] = new PokemonItem('Tinkermon', 44, Currency.magiccoin, 21);
ItemList['Zenimon'] = new PokemonItem('Zenimon', 50, Currency.defencecoin, 20);
ItemList['Arresterdramon'] = new PokemonItem('Arresterdramon', 77, Currency.attackcoin, 30);
ItemList['Ganemon'] = new PokemonItem('Ganemon', 77, Currency.defencecoin, 31);
ItemList['Ginkakumon'] = new PokemonItem('Ginkakumon', 101, Currency.defencecoin, 29);
ItemList['Ginkakumon Promote'] = new PokemonItem('Ginkakumon Promote', 101, Currency.intcoin, 30);
ItemList['Hi-Vision Monitamon'] = new PokemonItem('Hi-Vision Monitamon', 103, Currency.defencecoin, 30);
ItemList['Kinkakumon'] = new PokemonItem('Kinkakumon', 101, Currency.intcoin, 30);
ItemList['Petermon'] = new PokemonItem('Petermon', 87, Currency.intcoin, 30);
ItemList['Raptor Sparrowmon'] = new PokemonItem('Raptor Sparrowmon', 103, Currency.speedcoin, 31);
ItemList['Shademon'] = new PokemonItem('Shademon', 105, Currency.magiccoin, 30);
ItemList['Shooting Starmon'] = new PokemonItem('Shooting Starmon', 105, Currency.speedcoin, 30);
ItemList['Shoutmon King Ver'] = new PokemonItem('Shoutmon King Ver', 92, Currency.intcoin, 30);
ItemList['Targetmon'] = new PokemonItem('Targetmon', 74, Currency.healthcoin, 31);
ItemList['Tuwarmon'] = new PokemonItem('Tuwarmon', 72, Currency.healthcoin, 29);
ItemList['Atlur Ballistamon'] = new PokemonItem('Atlur Ballistamon', 147, Currency.attackcoin, 41);
ItemList['Black Mach Gaogamon'] = new PokemonItem('Black Mach Gaogamon', 175, Currency.speedcoin, 43);
ItemList['Captain Hookmon'] = new PokemonItem('Captain Hookmon', 139, Currency.intcoin, 40);
ItemList['Cho·Hakkaimon'] = new PokemonItem('Cho·Hakkaimon', 138, Currency.intcoin, 42);
ItemList['Footmon'] = new PokemonItem('Footmon', 150, Currency.intcoin, 43);
ItemList['Gokuwmon'] = new PokemonItem('Gokuwmon', 173, Currency.speedcoin, 42);
ItemList['Gravimon'] = new PokemonItem('Gravimon', 138, Currency.magiccoin, 44);
ItemList['Musou Knightmon'] = new PokemonItem('Musou Knightmon', 150, Currency.attackcoin, 38);
ItemList['Omega Shoutmon'] = new PokemonItem('Omega Shoutmon', 147, Currency.attackcoin, 56);
ItemList['Sagomon'] = new PokemonItem('Sagomon', 125, Currency.speedcoin, 44);
ItemList['Sanzomon'] = new PokemonItem('Sanzomon', 108, Currency.intcoin, 39);
ItemList['Splashmon'] = new PokemonItem('Splashmon', 163, Currency.intcoin, 43);
ItemList['Splashmon Darkness Mode'] = new PokemonItem('Splashmon Darkness Mode', 163, Currency.healthcoin, 44);
ItemList['Yaeger Dorulumon'] = new PokemonItem('Yaeger Dorulumon', 150, Currency.speedcoin, 41);
ItemList['Zamielmon'] = new PokemonItem('Zamielmon', 149, Currency.speedcoin, 39);
ItemList['Darkness Bagramon'] = new PokemonItem('Darkness Bagramon', 215, Currency.healthcoin, 55);
ItemList['Dorbickmon'] = new PokemonItem('Dorbickmon', 249, Currency.speedcoin, 57);
ItemList['Jet Mervamon'] = new PokemonItem('Jet Mervamon', 245, Currency.speedcoin, 56);
ItemList['Mervamon'] = new PokemonItem('Mervamon', 245, Currency.speedcoin, 58);
ItemList['Neo Vamdemon'] = new PokemonItem('Neo Vamdemon', 189, Currency.magiccoin, 51);
ItemList['Ofanimon Falldown Mode'] = new PokemonItem('Ofanimon Falldown Mode', 243, Currency.magiccoin, 55);
ItemList['Olegmon'] = new PokemonItem('Olegmon', 233, Currency.defencecoin, 54);
ItemList['Omegamon Zwart'] = new PokemonItem('Omegamon Zwart', 195, Currency.defencecoin, 60);
ItemList['Shakamon'] = new PokemonItem('Shakamon', 203, Currency.intcoin, 56);
ItemList['Shoutmon DX'] = new PokemonItem('Shoutmon DX', 255, Currency.magiccoin, 57);
ItemList['Shoutmon EX6'] = new PokemonItem('Shoutmon EX6', 255, Currency.magiccoin, 58);
ItemList['Shoutmon X7'] = new PokemonItem('Shoutmon X7', 285, Currency.magiccoin, 58);
ItemList['Shoutmon X7 Superior Mode'] = new PokemonItem('Shoutmon X7 Superior Mode', 285, Currency.magiccoin, 61);
ItemList['Venusmon'] = new PokemonItem('Venusmon', 198, Currency.intcoin, 56);
ItemList['Vulcanusmon'] = new PokemonItem('Vulcanusmon', 227, Currency.defencecoin, 54);
ItemList['Zeke Greymon'] = new PokemonItem('Zeke Greymon', 215, Currency.healthcoin, 55);
ItemList['Armamon'] = new PokemonItem('Armamon', 495, Currency.defencecoin, 56);
ItemList['Dark Volumon'] = new PokemonItem('Dark Volumon', 230, Currency.defencecoin, 41);
ItemList['Deadly Tuwarmon'] = new PokemonItem('Deadly Tuwarmon', 162, Currency.speedcoin, 33);
ItemList['Grand Generamon'] = new PokemonItem('Grand Generamon', 374, Currency.speedcoin, 60);
ItemList['Grey Knightsmon'] = new PokemonItem('Grey Knightsmon', 383, Currency.intcoin, 53);
ItemList['Omega Armamon BM'] = new PokemonItem('Omega Armamon BM', 563, Currency.attackcoin, 61);
ItemList['Shoutmon X3GM'] = new PokemonItem('Shoutmon X3GM', 228, Currency.magiccoin, 32);
ItemList['Shoutmon X3SD'] = new PokemonItem('Shoutmon X3SD', 228, Currency.magiccoin, 32);
ItemList['Shoutmon X4S'] = new PokemonItem('Shoutmon X4S', 336, Currency.magiccoin, 45);
ItemList['Shoutmon X5S'] = new PokemonItem('Shoutmon X5S', 327, Currency.magiccoin, 59);
ItemList['Huckmon'] = new PokemonItem('Huckmon', 42, Currency.attackcoin, 21);
ItemList['Pillomon'] = new PokemonItem('Pillomon', 42, Currency.healthcoin, 20);
ItemList['Sistermon Blanc'] = new PokemonItem('Sistermon Blanc', 40, Currency.intcoin, 19);
ItemList['Sistermon Noir'] = new PokemonItem('Sistermon Noir', 68, Currency.intcoin, 29);
ItemList['Yakiimon'] = new PokemonItem('Yakiimon', 88, Currency.healthcoin, 30);
ItemList['Arresterdramon Superior Mode'] = new PokemonItem('Arresterdramon Superior Mode', 150, Currency.attackcoin, 43);
ItemList['Jokermon'] = new PokemonItem('Jokermon', 174, Currency.magiccoin, 44);
ItemList['Luminamon'] = new PokemonItem('Luminamon', 137, Currency.intcoin, 41);
ItemList['Luminamon Nene Version'] = new PokemonItem('Luminamon Nene Version', 137, Currency.intcoin, 43);
ItemList['Gankoomon'] = new PokemonItem('Gankoomon', 225, Currency.healthcoin, 57);
ItemList['Quartzmon'] = new PokemonItem('Quartzmon', 236, Currency.defencecoin, 52);
ItemList['Sistermon Blanc Awaken'] = new PokemonItem('Sistermon Blanc Awaken', 84, Currency.intcoin, 42);
ItemList['Aegiomon'] = new PokemonItem('Aegiomon', 103, Currency.intcoin, 30);
ItemList['Sistermon Noir Awaken'] = new PokemonItem('Sistermon Noir Awaken', 101, Currency.intcoin, 47);
ItemList['Aegiochusmon'] = new PokemonItem('Aegiochusmon', 129, Currency.intcoin, 41);
ItemList['Aegiochusmon Blue'] = new PokemonItem('Aegiochusmon Blue', 129, Currency.defencecoin, 41);
ItemList['Aegiochusmon Green'] = new PokemonItem('Aegiochusmon Green', 129, Currency.speedcoin, 41);
ItemList['Cerberumon Werewolf Mode'] = new PokemonItem('Cerberumon Werewolf Mode', 145, Currency.speedcoin, 44);
ItemList['Sirenmon'] = new PokemonItem('Sirenmon', 115, Currency.intcoin, 39);
ItemList['Avenge Kidmon'] = new PokemonItem('Avenge Kidmon', 242, Currency.speedcoin, 52);
ItemList['Bacchusmon'] = new PokemonItem('Bacchusmon', 360, Currency.healthcoin, 51);
ItemList['Beel Starmon'] = new PokemonItem('Beel Starmon', 234, Currency.speedcoin, 50);
ItemList['Ceresmon'] = new PokemonItem('Ceresmon', 234, Currency.defencecoin, 57);
ItemList['Ceresmon Medium'] = new PokemonItem('Ceresmon Medium', 218, Currency.magiccoin, 54);
ItemList['Jupitermon'] = new PokemonItem('Jupitermon', 240, Currency.intcoin, 60);
ItemList['Kuzuhamon Miko Mode'] = new PokemonItem('Kuzuhamon Miko Mode', 180, Currency.intcoin, 51);
ItemList['Magna Kidmon'] = new PokemonItem('Magna Kidmon', 236, Currency.speedcoin, 56);
ItemList['Plutomon'] = new PokemonItem('Plutomon', 192, Currency.magiccoin, 54);
ItemList['Rust Tyranomon'] = new PokemonItem('Rust Tyranomon', 233, Currency.attackcoin, 52);
ItemList['Titamon'] = new PokemonItem('Titamon', 195, Currency.healthcoin, 52);
ItemList['Bao Huckmon'] = new PokemonItem('Bao Huckmon', 77, Currency.attackcoin, 31);
ItemList['Aegiochusmon Dark'] = new PokemonItem('Aegiochusmon Dark', 129, Currency.magiccoin, 41);
ItemList['Aegiochusmon Holy'] = new PokemonItem('Aegiochusmon Holy', 129, Currency.healthcoin, 41);
ItemList['Savior Huckmon'] = new PokemonItem('Savior Huckmon', 125, Currency.attackcoin, 42);
ItemList['Bancho Golemon'] = new PokemonItem('Bancho Golemon', 270, Currency.defencecoin, 56);
ItemList['Bancho Lilimon'] = new PokemonItem('Bancho Lilimon', 270, Currency.speedcoin, 56);
ItemList['Bancho Mamemon'] = new PokemonItem('Bancho Mamemon', 225, Currency.speedcoin, 57);
ItemList['Bancho Stingmon'] = new PokemonItem('Bancho Stingmon', 225, Currency.speedcoin, 55);
ItemList['Gundramon'] = new PokemonItem('Gundramon', 368, Currency.attackcoin, 56);
ItemList['Jesmon'] = new PokemonItem('Jesmon', 203, Currency.attackcoin, 57);
ItemList['Junomon'] = new PokemonItem('Junomon', 201, Currency.magiccoin, 55);
ItemList['Junomon Hysteric Mode'] = new PokemonItem('Junomon Hysteric Mode', 260, Currency.magiccoin, 58);
ItemList['Jupitermon Wrath Mode'] = new PokemonItem('Jupitermon Wrath Mode', 225, Currency.magiccoin, 61);
ItemList['Vorvomon'] = new PokemonItem('Vorvomon', 51, Currency.speedcoin, 20);
ItemList['Guardromon Gold'] = new PokemonItem('Guardromon Gold', 105, Currency.defencecoin, 30);
ItemList['Meicoomon'] = new PokemonItem('Meicoomon', 93, Currency.intcoin, 31);
ItemList['Meicrackmon Vicious Mode'] = new PokemonItem('Meicrackmon Vicious Mode', 140, Currency.magiccoin, 43);
ItemList['Mastemon'] = new PokemonItem('Mastemon', 173, Currency.attackcoin, 58);
ItemList['Omegamon Alter-B'] = new PokemonItem('Omegamon Alter-B', 225, Currency.magiccoin, 61);
ItemList['Omegamon Zwart Defeat'] = new PokemonItem('Omegamon Zwart Defeat', 221, Currency.speedcoin, 61);
ItemList['Volcanicdramon'] = new PokemonItem('Volcanicdramon', 218, Currency.speedcoin, 52);
ItemList['Sakumon'] = new PokemonItem('Sakumon', 9, Currency.attackcoin, 12);
ItemList['Sakuttomon'] = new PokemonItem('Sakuttomon', 17, Currency.attackcoin, 15);
ItemList['Ludomon'] = new PokemonItem('Ludomon', 35, Currency.defencecoin, 21);
ItemList['Zubamon'] = new PokemonItem('Zubamon', 48, Currency.attackcoin, 21);
ItemList['Hudiemon'] = new PokemonItem('Hudiemon', 64, Currency.intcoin, 31);
ItemList['Lavorvomon'] = new PokemonItem('Lavorvomon', 92, Currency.speedcoin, 29);
ItemList['Sistermon Ciel'] = new PokemonItem('Sistermon Ciel', 76, Currency.speedcoin, 29);
ItemList['Sistermon Ciel Awaken'] = new PokemonItem('Sistermon Ciel Awaken', 125, Currency.attackcoin, 47);
ItemList['Zubaeagermon'] = new PokemonItem('Zubaeagermon', 85, Currency.attackcoin, 31);
ItemList['Duramon'] = new PokemonItem('Duramon', 140, Currency.attackcoin, 42);
ItemList['Lavogaritamon'] = new PokemonItem('Lavogaritamon', 150, Currency.speedcoin, 43);
ItemList['Meicrackmon'] = new PokemonItem('Meicrackmon', 140, Currency.intcoin, 43);
ItemList['Blitz Greymon'] = new PokemonItem('Blitz Greymon', 237, Currency.defencecoin, 52);
ItemList['Cres Garurumon'] = new PokemonItem('Cres Garurumon', 225, Currency.intcoin, 55);
ItemList['Durandamon'] = new PokemonItem('Durandamon', 195, Currency.attackcoin, 53);
ItemList['Grace Novamon'] = new PokemonItem('Grace Novamon', 248, Currency.magiccoin, 61);
ItemList['Omegamon Alter-S'] = new PokemonItem('Omegamon Alter-S', 233, Currency.healthcoin, 61);
ItemList['Ordinemon'] = new PokemonItem('Ordinemon', 210, Currency.healthcoin, 59);
ItemList['Raguelmon'] = new PokemonItem('Raguelmon', 210, Currency.intcoin, 56);
ItemList['Rasielmon'] = new PokemonItem('Rasielmon', 210, Currency.magiccoin, 56);
ItemList['Voltobautamon'] = new PokemonItem('Voltobautamon', 182, Currency.intcoin, 57);
ItemList['Cotsucomon'] = new PokemonItem('Cotsucomon', 9, Currency.defencecoin, 12);
ItemList['Pusumon'] = new PokemonItem('Pusumon', 9, Currency.defencecoin, 12);
ItemList['Kakkinmon'] = new PokemonItem('Kakkinmon', 23, Currency.defencecoin, 15);
ItemList['Pusurimon'] = new PokemonItem('Pusurimon', 24, Currency.defencecoin, 15);
ItemList['Bulucomon'] = new PokemonItem('Bulucomon', 50, Currency.healthcoin, 20);
ItemList['Dracomon X-Antibody'] = new PokemonItem('Dracomon X-Antibody', 52, Currency.speedcoin, 22);
ItemList['Herissmon'] = new PokemonItem('Herissmon', 47, Currency.defencecoin, 21);
ItemList['Renamon X-Antibody'] = new PokemonItem('Renamon X-Antibody', 38, Currency.intcoin, 22);
ItemList['Terriermon Assistant'] = new PokemonItem('Terriermon Assistant', 39, Currency.intcoin, 20);
ItemList['Filmon'] = new PokemonItem('Filmon', 90, Currency.defencecoin, 30);
ItemList['Paledramon'] = new PokemonItem('Paledramon', 72, Currency.healthcoin, 30);
ItemList['Tia Ludomon'] = new PokemonItem('Tia Ludomon', 90, Currency.defencecoin, 29);
ItemList['Tyranomon X-Antibody'] = new PokemonItem('Tyranomon X-Antibody', 85, Currency.attackcoin, 30);
ItemList['Crys Paledramon'] = new PokemonItem('Crys Paledramon', 138, Currency.healthcoin, 39);
ItemList['Raiji Ludomon'] = new PokemonItem('Raiji Ludomon', 150, Currency.defencecoin, 39);
ItemList['Stiffilmon'] = new PokemonItem('Stiffilmon', 163, Currency.defencecoin, 43);
ItemList['Beel Starmon X-Antibody'] = new PokemonItem('Beel Starmon X-Antibody', 234, Currency.speedcoin, 51);
ItemList['Bryweludramon'] = new PokemonItem('Bryweludramon', 255, Currency.defencecoin, 58);
ItemList['Craniummon X-Antibody'] = new PokemonItem('Craniummon X-Antibody', 218, Currency.defencecoin, 58);
ItemList['Diablomon X-Antibody'] = new PokemonItem('Diablomon X-Antibody', 270, Currency.speedcoin, 57);
ItemList['Jesmon X-Antibody'] = new PokemonItem('Jesmon X-Antibody', 203, Currency.magiccoin, 58);
ItemList['Lord Knightmon X-Antibody'] = new PokemonItem('Lord Knightmon X-Antibody', 195, Currency.speedcoin, 58);
ItemList['Minervamon X-Antibody'] = new PokemonItem('Minervamon X-Antibody', 198, Currency.defencecoin, 57);
ItemList['Omegamon Merciful Mode'] = new PokemonItem('Omegamon Merciful Mode', 195, Currency.magiccoin, 61);
ItemList['Rafflesimon'] = new PokemonItem('Rafflesimon', 239, Currency.defencecoin, 55);
ItemList['Ragna Lordmon'] = new PokemonItem('Ragna Lordmon', 225, Currency.magiccoin, 58);
ItemList['Sakuyamon X-Antibody'] = new PokemonItem('Sakuyamon X-Antibody', 188, Currency.magiccoin, 53);
ItemList['Sleipmon X-Antibody'] = new PokemonItem('Sleipmon X-Antibody', 180, Currency.speedcoin, 58);
ItemList['Agumon Black X-Antibody'] = new PokemonItem('Agumon Black X-Antibody', 46, Currency.attackcoin, 22);
ItemList['Impmon X-Antibody'] = new PokemonItem('Impmon X-Antibody', 39, Currency.magiccoin, 22);
ItemList['Jazamon'] = new PokemonItem('Jazamon', 50, Currency.speedcoin, 19);
ItemList['Keramon X-Antibody'] = new PokemonItem('Keramon X-Antibody', 45, Currency.defencecoin, 22);
ItemList['Lopmon X-Antibody'] = new PokemonItem('Lopmon X-Antibody', 34, Currency.magiccoin, 20);
ItemList['Terriermon X-Antibody'] = new PokemonItem('Terriermon X-Antibody', 39, Currency.magiccoin, 21);
ItemList['Dark Tyranomon X-Antibody'] = new PokemonItem('Dark Tyranomon X-Antibody', 103, Currency.magiccoin, 31);
ItemList['Jazardmon'] = new PokemonItem('Jazardmon', 166, Currency.speedcoin, 29);
ItemList['Meramon X-Antibody'] = new PokemonItem('Meramon X-Antibody', 75, Currency.magiccoin, 30);
ItemList['Numemon X-Antibody'] = new PokemonItem('Numemon X-Antibody', 90, Currency.healthcoin, 30);
ItemList['Orgemon X-Antibody'] = new PokemonItem('Orgemon X-Antibody', 102, Currency.attackcoin, 31);
ItemList['Pegasmon X-Antibody'] = new PokemonItem('Pegasmon X-Antibody', 90, Currency.magiccoin, 36);
ItemList['Siesamon X-Antibody'] = new PokemonItem('Siesamon X-Antibody', 102, Currency.intcoin, 32);
ItemList['Wizarmon X-Antibody'] = new PokemonItem('Wizarmon X-Antibody', 90, Currency.intcoin, 31);
ItemList['Angewomon X-Antibody'] = new PokemonItem('Angewomon X-Antibody', 169, Currency.intcoin, 43);
ItemList['Cyberdramon X-Antibody'] = new PokemonItem('Cyberdramon X-Antibody', 138, Currency.speedcoin, 43);
ItemList['Jazarichmon'] = new PokemonItem('Jazarichmon', 250, Currency.speedcoin, 40);
ItemList['Lady Devimon X-Antibody'] = new PokemonItem('Lady Devimon X-Antibody', 138, Currency.magiccoin, 43);
ItemList['Mephismon X-Antibody'] = new PokemonItem('Mephismon X-Antibody', 132, Currency.magiccoin, 42);
ItemList['Metal Greymon Virus X-Antibody'] = new PokemonItem('Metal Greymon Virus X-Antibody', 150, Currency.attackcoin, 43);
ItemList['Monzaemon X-Antibody'] = new PokemonItem('Monzaemon X-Antibody', 148, Currency.healthcoin, 42);
ItemList['Omega Shoutmon X-Antibody'] = new PokemonItem('Omega Shoutmon X-Antibody', 147, Currency.speedcoin, 57);
ItemList['Rize Greymon X-Antibody'] = new PokemonItem('Rize Greymon X-Antibody', 144, Currency.healthcoin, 43);
ItemList['Vamdemon X-Antibody'] = new PokemonItem('Vamdemon X-Antibody', 125, Currency.intcoin, 43);
ItemList['Barbamon X-Antibody'] = new PokemonItem('Barbamon X-Antibody', 255, Currency.magiccoin, 58);
ItemList['Belphemon X-Antibody'] = new PokemonItem('Belphemon X-Antibody', 278, Currency.defencecoin, 60);
ItemList['Cherubimon Vice X-Antibody'] = new PokemonItem('Cherubimon Vice X-Antibody', 255, Currency.intcoin, 57);
ItemList['Cherubimon Virtue X-Antibody'] = new PokemonItem('Cherubimon Virtue X-Antibody', 218, Currency.intcoin, 57);
ItemList['Dark Knightmon X-Antibody'] = new PokemonItem('Dark Knightmon X-Antibody', 300, Currency.defencecoin, 58);
ItemList['Demon X-Antibody'] = new PokemonItem('Demon X-Antibody', 189, Currency.intcoin, 59);
ItemList['Examon X-Antibody'] = new PokemonItem('Examon X-Antibody', 180, Currency.healthcoin, 58);
ItemList['Gankoomon X-Antibody'] = new PokemonItem('Gankoomon X-Antibody', 225, Currency.healthcoin, 58);
ItemList['Hexeblaumon'] = new PokemonItem('Hexeblaumon', 227, Currency.healthcoin, 56);
ItemList['Hououmon X-Antibody'] = new PokemonItem('Hououmon X-Antibody', 174, Currency.speedcoin, 53);
ItemList['Jesmon GX'] = new PokemonItem('Jesmon GX', 180, Currency.intcoin, 61);
ItemList['Justimon X-Antibody'] = new PokemonItem('Justimon X-Antibody', 204, Currency.healthcoin, 60);
ItemList['Leviamon X-Antibody'] = new PokemonItem('Leviamon X-Antibody', 180, Currency.healthcoin, 58);
ItemList['Lilithmon X-Antibody'] = new PokemonItem('Lilithmon X-Antibody', 225, Currency.magiccoin, 58);
ItemList['Lucemon X-Antibody'] = new PokemonItem('Lucemon X-Antibody', 218, Currency.magiccoin, 58);
ItemList['Metallicdramon'] = new PokemonItem('Metallicdramon', 360, Currency.speedcoin, 57);
ItemList['Noble Pumpmon'] = new PokemonItem('Noble Pumpmon', 207, Currency.intcoin, 56);
ItemList['Ofanimon X-Antibody'] = new PokemonItem('Ofanimon X-Antibody', 195, Currency.defencecoin, 58);
ItemList['Ofanimon Falldown Mode X-Antibody'] = new PokemonItem('Ofanimon Falldown Mode X-Antibody', 243, Currency.magiccoin, 56);
ItemList['Ogudomon X-Antibody'] = new PokemonItem('Ogudomon X-Antibody', 195, Currency.healthcoin, 61);
ItemList['Rapidmon X-Antibody'] = new PokemonItem('Rapidmon X-Antibody', 158, Currency.speedcoin, 58);
ItemList['Rasenmon'] = new PokemonItem('Rasenmon', 300, Currency.defencecoin, 58);
ItemList['Rasenmon Fury Mode'] = new PokemonItem('Rasenmon Fury Mode', 360, Currency.magiccoin, 58);
ItemList['Algomon Baby I'] = new PokemonItem('Algomon Baby I', 9, Currency.healthcoin, 12);
ItemList['Dokimon'] = new PokemonItem('Dokimon', 8, Currency.magiccoin, 12);
ItemList['Algomon Baby II'] = new PokemonItem('Algomon Baby II', 21, Currency.healthcoin, 15);
ItemList['Bibimon'] = new PokemonItem('Bibimon', 20, Currency.magiccoin, 15);
ItemList['Algomon Child'] = new PokemonItem('Algomon Child', 45, Currency.healthcoin, 21);
ItemList['Ghostmon'] = new PokemonItem('Ghostmon', 52, Currency.magiccoin, 20);
ItemList['Junkmon'] = new PokemonItem('Junkmon', 45, Currency.defencecoin, 20);
ItemList['Morphomon'] = new PokemonItem('Morphomon', 51, Currency.intcoin, 21);
ItemList['Pomumon'] = new PokemonItem('Pomumon', 30, Currency.speedcoin, 21);
ItemList['Pulsemon'] = new PokemonItem('Pulsemon', 27, Currency.magiccoin, 19);
ItemList['Sangomon'] = new PokemonItem('Sangomon', 36, Currency.healthcoin, 20);
ItemList['Sunarizamon'] = new PokemonItem('Sunarizamon', 51, Currency.healthcoin, 21);
ItemList['Algomon Adult'] = new PokemonItem('Algomon Adult', 67, Currency.healthcoin, 30);
ItemList['Baboongamon'] = new PokemonItem('Baboongamon', 87, Currency.defencecoin, 30);
ItemList['Baluchimon'] = new PokemonItem('Baluchimon', 95, Currency.magiccoin, 30);
ItemList['Bulkmon'] = new PokemonItem('Bulkmon', 78, Currency.magiccoin, 30);
ItemList['Dark Maildramon'] = new PokemonItem('Dark Maildramon', 93, Currency.magiccoin, 31);
ItemList['Eosmon Adult'] = new PokemonItem('Eosmon Adult', 74, Currency.intcoin, 30);
ItemList['Exermon'] = new PokemonItem('Exermon', 74, Currency.intcoin, 30);
ItemList['Eyesmon'] = new PokemonItem('Eyesmon', 93, Currency.magiccoin, 30);
ItemList['Eyesmon Scatter Mode'] = new PokemonItem('Eyesmon Scatter Mode', 105, Currency.magiccoin, 31);
ItemList['Machmon'] = new PokemonItem('Machmon', 166, Currency.speedcoin, 30);
ItemList['Mimicmon'] = new PokemonItem('Mimicmon', 100, Currency.defencecoin, 31);
ItemList['Namakemon'] = new PokemonItem('Namakemon', 87, Currency.healthcoin, 31);
ItemList['Parasaurmon'] = new PokemonItem('Parasaurmon', 81, Currency.speedcoin, 30);
ItemList['Runnermon'] = new PokemonItem('Runnermon', 100, Currency.speedcoin, 30);
ItemList['Tobiumon'] = new PokemonItem('Tobiumon', 76, Currency.speedcoin, 30);
ItemList['Boutmon'] = new PokemonItem('Boutmon', 164, Currency.magiccoin, 39);
ItemList['Entmon'] = new PokemonItem('Entmon', 133, Currency.defencecoin, 39);
ItemList['Eosmon Perfect'] = new PokemonItem('Eosmon Perfect', 119, Currency.intcoin, 43);
ItemList['Gogmamon'] = new PokemonItem('Gogmamon', 138, Currency.defencecoin, 38);
ItemList['Gusokumon'] = new PokemonItem('Gusokumon', 133, Currency.defencecoin, 40);
ItemList['Manticoremon'] = new PokemonItem('Manticoremon', 172, Currency.healthcoin, 43);
ItemList['Marin Chimairamon'] = new PokemonItem('Marin Chimairamon', 162, Currency.healthcoin, 39);
ItemList['Metal Greymon Alterous Mode'] = new PokemonItem('Metal Greymon Alterous Mode', 150, Currency.attackcoin, 43);
ItemList['Piranimon'] = new PokemonItem('Piranimon', 125, Currency.healthcoin, 42);
ItemList['Rebellimon'] = new PokemonItem('Rebellimon', 174, Currency.defencecoin, 39);
ItemList['Toropiamon'] = new PokemonItem('Toropiamon', 168, Currency.speedcoin, 39);
ItemList['Were Garurumon Sagittarius Mode'] = new PokemonItem('Were Garurumon Sagittarius Mode', 167, Currency.speedcoin, 42);
ItemList['Agumon -Yuki no Kizuna-'] = new PokemonItem('Agumon -Yuki no Kizuna-', 197, Currency.intcoin, 55);
ItemList['Done Devimon'] = new PokemonItem('Done Devimon', 252, Currency.magiccoin, 60);
ItemList['Eosmon Ultimate'] = new PokemonItem('Eosmon Ultimate', 228, Currency.intcoin, 58);
ItemList['Gabumon -Yujo no Kizuna-'] = new PokemonItem('Gabumon -Yujo no Kizuna-', 197, Currency.magiccoin, 55);
ItemList['Heavy Leomon'] = new PokemonItem('Heavy Leomon', 225, Currency.defencecoin, 55);
ItemList['Kazuchimon'] = new PokemonItem('Kazuchimon', 203, Currency.magiccoin, 56);
ItemList['Mitamamon'] = new PokemonItem('Mitamamon', 254, Currency.speedcoin, 56);
ItemList['Nidhoggmon'] = new PokemonItem('Nidhoggmon', 210, Currency.healthcoin, 56);
ItemList['Omedamon'] = new PokemonItem('Omedamon', 209, Currency.defencecoin, 58);
ItemList['Regalecusmon'] = new PokemonItem('Regalecusmon', 254, Currency.healthcoin, 51);
ItemList['Curimon'] = new PokemonItem('Curimon', 8, Currency.magiccoin, 12);
ItemList['Hiyarimon'] = new PokemonItem('Hiyarimon', 9, Currency.healthcoin, 12);
ItemList['Puyomon'] = new PokemonItem('Puyomon', 9, Currency.magiccoin, 12);
ItemList['Pyonmon'] = new PokemonItem('Pyonmon', 8, Currency.healthcoin, 12);
ItemList['Sunamon'] = new PokemonItem('Sunamon', 9, Currency.defencecoin, 12);
ItemList['Bosamon'] = new PokemonItem('Bosamon', 22, Currency.healthcoin, 15);
ItemList['Goromon'] = new PokemonItem('Goromon', 25, Currency.defencecoin, 15);
ItemList['Gurimon'] = new PokemonItem('Gurimon', 23, Currency.magiccoin, 15);
ItemList['Puyoyomon'] = new PokemonItem('Puyoyomon', 23, Currency.magiccoin, 15);
ItemList['Negamon'] = new PokemonItem('Negamon', 17, Currency.magiccoin, 15);
ItemList['Angoramon'] = new PokemonItem('Angoramon', 43, Currency.healthcoin, 21);
ItemList['Gammamon'] = new PokemonItem('Gammamon', 49, Currency.magiccoin, 20);
ItemList['Jellymon'] = new PokemonItem('Jellymon', 41, Currency.magiccoin, 20);
ItemList['Kodokugumon Child'] = new PokemonItem('Kodokugumon Child', 39, Currency.defencecoin, 20);
ItemList['Betel Gammamon'] = new PokemonItem('Betel Gammamon', 104, Currency.attackcoin, 30);
ItemList['Gulus Gammamon'] = new PokemonItem('Gulus Gammamon', 104, Currency.speedcoin, 30);
ItemList['Kaus Gammamon'] = new PokemonItem('Kaus Gammamon', 104, Currency.defencecoin, 30);
ItemList['Komondomon'] = new PokemonItem('Komondomon', 85, Currency.defencecoin, 29);
ItemList['Potamon'] = new PokemonItem('Potamon', 95, Currency.healthcoin, 29);
ItemList['Symbare Angoramon'] = new PokemonItem('Symbare Angoramon', 94, Currency.healthcoin, 31);
ItemList['Tesla Jellymon'] = new PokemonItem('Tesla Jellymon', 87, Currency.magiccoin, 29);
ItemList['Wezen Gammamon'] = new PokemonItem('Wezen Gammamon', 104, Currency.magiccoin, 30);
ItemList['Black Tailmon Uver'] = new PokemonItem('Black Tailmon Uver', 132, Currency.speedcoin, 40);
ItemList['Canoweissmon'] = new PokemonItem('Canoweissmon', 144, Currency.magiccoin, 43);
ItemList['Climbmon'] = new PokemonItem('Climbmon', 125, Currency.attackcoin, 40);
ItemList['Divemon'] = new PokemonItem('Divemon', 164, Currency.speedcoin, 41);
ItemList['Frozomon'] = new PokemonItem('Frozomon', 173, Currency.defencecoin, 42);
ItemList['Lamortmon'] = new PokemonItem('Lamortmon', 138, Currency.healthcoin, 43);
ItemList['Pistmon'] = new PokemonItem('Pistmon', 173, Currency.speedcoin, 42);
ItemList['Rare Raremon'] = new PokemonItem('Rare Raremon', 173, Currency.healthcoin, 43);
ItemList['Shootmon'] = new PokemonItem('Shootmon', 132, Currency.healthcoin, 42);
ItemList['Tempomon'] = new PokemonItem('Tempomon', 175, Currency.magiccoin, 41);
ItemList['Thetismon'] = new PokemonItem('Thetismon', 157, Currency.magiccoin, 43);
ItemList['Vulturemon'] = new PokemonItem('Vulturemon', 133, Currency.speedcoin, 40);
ItemList['Abbadomon'] = new PokemonItem('Abbadomon', 278, Currency.magiccoin, 60);
ItemList['Abbadomon Core'] = new PokemonItem('Abbadomon Core', 279, Currency.speedcoin, 60);
ItemList['Achillesmon'] = new PokemonItem('Achillesmon', 216, Currency.speedcoin, 59);
ItemList['Ajatarmon'] = new PokemonItem('Ajatarmon', 233, Currency.speedcoin, 55);
ItemList['Bloom Lordmon'] = new PokemonItem('Bloom Lordmon', 242, Currency.speedcoin, 56);
ItemList['Fros Velgrmon'] = new PokemonItem('Fros Velgrmon', 210, Currency.speedcoin, 56);
ItemList['Gaioumon Invincible Sword'] = new PokemonItem('Gaioumon Invincible Sword', 236, Currency.attackcoin, 58);
ItemList['Hydramon'] = new PokemonItem('Hydramon', 221, Currency.healthcoin, 57);
ItemList['Lovely Angemon'] = new PokemonItem('Lovely Angemon', 215, Currency.healthcoin, 52);
ItemList['Shivamon'] = new PokemonItem('Shivamon', 167, Currency.intcoin, 52);
ItemList['Shroudmon'] = new PokemonItem('Shroudmon', 218, Currency.healthcoin, 57);
///<reference path="Item.ts"/>
class ShovelItem extends Item {
    constructor(basePrice, displayName, description) {
        super('Berry_Shovel', basePrice, GameConstants.Currency.farmPoint, { multiplierDecreaser: MultiplierDecreaser.Berry }, undefined, displayName, description, 'farm');
    }
    gain(amt) {
        GameHelper.incrementObservable(App.game.farming.shovelAmt, amt);
    }
}
ItemList['Berry_Shovel'] = new ShovelItem(300, 'Uninstaller', 'Stops the burning process for disks.');
class MulchShovelItem extends Item {
    constructor(basePrice, displayName, description) {
        super('Mulch_Shovel', basePrice, GameConstants.Currency.farmPoint, { multiplierDecreaser: MultiplierDecreaser.Berry }, undefined, displayName, description, 'farm');
    }
    gain(amt) {
        GameHelper.incrementObservable(App.game.farming.mulchShovelAmt, amt);
    }
}
ItemList['Mulch_Shovel'] = new MulchShovelItem(300, 'Unbooster', 'Removes Boosts from a spot in the disk tray.');
class Vitamin extends Item {
    constructor(type, basePrice, currency = GameConstants.Currency.money, options, displayName, description) {
        super(GameConstants.VitaminType[type], basePrice, currency, options, undefined, displayName, description);
        this.type = type;
    }
    use() {
        return true;
    }
}
ItemList.RareCandy = new Vitamin(GameConstants.VitaminType.RareCandy, Infinity, undefined, undefined, 'Rare Candy', 'A rare to find candy that currently has no use.');
ItemList.Protein = new Vitamin(GameConstants.VitaminType.Protein, 1e4, GameConstants.Currency.money, { multiplier: 1.1, multiplierDecrease: false, saveName: `${GameConstants.VitaminType[GameConstants.VitaminType.Protein]}|${GameConstants.Currency[GameConstants.Currency.money]}` }, undefined, 'Increases Pokemon attack bonus<br/><i>(attack gained per breeding cycle)</i>');
class VitaminController {
    static incrementMultiplier() {
        this.multiplierIndex((this.multiplierIndex() + 1) % this.multiplier.length);
    }
    static decrementMultiplier() {
        this.multiplierIndex((this.multiplierIndex() + this.multiplier.length - 1) % this.multiplier.length);
    }
    static getMultiplier() {
        return Number(VitaminController.multiplier[VitaminController.multiplierIndex()].replace(/\D/g, '')) || Infinity;
    }
}
VitaminController.multiplier = ['×1', '×5', 'x10', 'Max'];
VitaminController.multiplierIndex = ko.observable(0);
///<reference path="../../declarations/keyItems/KeyItems.d.ts"/>
class BuyKeyItem extends Item {
    constructor(item, basePrice, currency = GameConstants.Currency.farmPoint, options, displayName) {
        super(KeyItemType[item], basePrice, currency, Object.assign({ maxAmount: 1 }, options), undefined, displayName);
        this.item = item;
    }
    totalPrice(amt) {
        if (amt > this.maxAmount) {
            amt = this.maxAmount;
        }
        return this.basePrice * amt;
    }
    gain(amt) {
        App.game.keyItems.gainKeyItem(this.item);
    }
    isAvailable() {
        return super.isAvailable() && !App.game.keyItems.hasKeyItem(this.item);
    }
    get image() {
        return `assets/images/keyitems/${this.name}.png`;
    }
}
ItemList['Dungeon_ticket'] = new BuyKeyItem(KeyItemType.Dungeon_ticket, 100, undefined, undefined, 'Dungeon Ticket');
ItemList['Explorer_kit'] = new BuyKeyItem(KeyItemType.Explorer_kit, 5000, undefined, undefined, 'Explorer Kit');
///<reference path="../../declarations/enums/OakItemType.d.ts"/>
class BuyOakItem extends Item {
    constructor(item, basePrice, currency = GameConstants.Currency.farmPoint) {
        super(OakItemType[item], basePrice, currency, { maxAmount: 1 }, undefined, 'Purchase to unlock this Hina Item');
        this.item = item;
    }
    totalPrice(amt) {
        if (amt > this.maxAmount) {
            amt = this.maxAmount;
        }
        return this.basePrice * amt;
    }
    gain(amt) {
        const oakItem = App.game.oakItems.itemList[this.item];
        if (oakItem instanceof BoughtOakItem) {
            oakItem.purchased = true;
        }
    }
    isAvailable() {
        const oakItem = App.game.oakItems.itemList[this.item];
        const purchased = (oakItem instanceof BoughtOakItem) ? oakItem.purchased : true;
        return super.isAvailable() && !purchased;
    }
    get image() {
        return `assets/images/oakitems/${this.name}.png`;
    }
}
ItemList['Demo_Disk'] = new BuyOakItem(OakItemType.Demo_Disk, 5000, Currency.farmPoint);
ItemList['Failure_Prevent'] = new BuyOakItem(OakItemType.Failure_Prevent, 10000, Currency.farmPoint);
ItemList['Golden_DVD'] = new BuyOakItem(OakItemType.Golden_DVD, 5000, Currency.farmPoint);
ItemList['Shiny_Mirror'] = new BuyOakItem(OakItemType.Shiny_Mirror, 10000, Currency.farmPoint);
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
///<reference path="../../declarations/enums/CaughtStatus.d.ts"/>
class Party {
    constructor(multiplier) {
        this.multiplier = multiplier;
        this.name = 'Pokemon Party';
        this.saveKey = 'party';
        this.defaults = {
            caughtPokemon: [],
        };
        this.pokemonAttackObservable = ko.pureComputed(() => {
            return App.game.party.calculatePokemonAttack();
        }).extend({ rateLimit: 1000 });
        this._caughtPokemon = ko.observableArray([]);
        this.hasMaxLevelPokemon = ko.pureComputed(() => {
            for (let i = 0; i < this.caughtPokemon.length; i++) {
                if (this.caughtPokemon[i].level === 100) {
                    return true;
                }
            }
            return false;
        }).extend({ rateLimit: 1000 });
    }
    gainPokemonById(id, shiny = false, suppressNotification = false) {
        this.gainPokemon(PokemonFactory.generatePartyPokemon(id, shiny), suppressNotification);
    }
    gainPokemon(pokemon, suppressNotification = false) {
        GameHelper.incrementObservable(App.game.statistics.digimonScanned[pokemon.id]);
        GameHelper.incrementObservable(App.game.statistics.totalDigimonScanned);
        if (pokemon.shiny) {
            GameHelper.incrementObservable(App.game.statistics.dotDigimonScanned[pokemon.id]);
            GameHelper.incrementObservable(App.game.statistics.totalDotDigimonScanned);
            // Add all shiny catches to the log book
            App.game.logbook.newLog(LogBookTypes.CAUGHT, `You have scanned a Dot ${pokemon.name}!`);
            // Already caught (shiny)
            if (this.alreadyCaughtPokemon(pokemon.id, true)) {
                return;
            }
            // Notify if not already caught
            Notifier.notify({
                message: `👾 You have scanned a Dot ${pokemon.name}! 👾`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.new_catch,
                setting: NotificationConstants.NotificationSetting.General.new_catch,
            });
            // Already caught (non shiny) we need to update the party pokemon directly
            if (this.alreadyCaughtPokemon(pokemon.id, false)) {
                this.getPokemon(pokemon.id).shiny = true;
                return;
            }
        }
        // Already caught (non shiny)
        if (this.alreadyCaughtPokemon(pokemon.id, false)) {
            return;
        }
        if (!suppressNotification) {
            Notifier.notify({
                message: `You have scanned ${GameHelper.anOrA(pokemon.name)} ${pokemon.name}!`,
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.General.new_catch,
                setting: NotificationConstants.NotificationSetting.General.new_catch,
            });
        }
        App.game.logbook.newLog(LogBookTypes.CAUGHT, `You have scanned ${GameHelper.anOrA(pokemon.name)} ${pokemon.name}!`);
        this._caughtPokemon.push(pokemon);
    }
    gainExp(exp = 0, level = 1, trainer = false) {
        const multBonus = this.multiplier.getBonus('exp', true);
        const trainerBonus = trainer ? 1.5 : 1;
        const expTotal = Math.floor(exp * level * trainerBonus * multBonus / 9);
        const maxLevel = App.game.badgeCase.maxLevel();
        for (const pokemon of this.caughtPokemon) {
            if (pokemon.level < maxLevel) {
                pokemon.gainExp(expTotal);
            }
        }
    }
    /**
     * Calculate the attack of all your Pokémon
     * @param type1
     * @param type2 types of the enemy we're calculating damage against.
     * @returns {number} damage to be done.
     */
    calculatePokemonAttack(type1 = PokemonType.None, type2 = PokemonType.None, ignoreRegionMultiplier = false, region = player.region, includeBreeding = false, useBaseAttack = false, overrideWeather, ignoreLevel = false, includeFlute = true) {
        let attack = 0;
        for (const pokemon of this.caughtPokemon) {
            attack += this.calculateOnePokemonAttack(pokemon, type1, type2, region, ignoreRegionMultiplier, includeBreeding, useBaseAttack, overrideWeather, ignoreLevel, includeFlute);
        }
        const bonus = this.multiplier.getBonus('pokemonAttack');
        return Math.round(attack * bonus);
    }
    calculateOnePokemonAttack(pokemon, type1 = PokemonType.None, type2 = PokemonType.None, region = player.region, ignoreRegionMultiplier = false, includeBreeding = false, useBaseAttack = false, overrideWeather, ignoreLevel = false, includeFlute = true) {
        var _a;
        let multiplier = 1, attack = 0;
        const pAttack = useBaseAttack ? pokemon.baseAttack : (ignoreLevel ? pokemon.calculateAttack(ignoreLevel) : pokemon.attack);
        const nativeRegion = PokemonHelper.calcNativeRegion(pokemon.name);
        // Check if the pokemon is in their native region
        if (!ignoreRegionMultiplier && nativeRegion != region && nativeRegion != GameConstants.Region.none) {
            // Check if the challenge mode is active
            if (App.game.challenges.list.regionalAttackDebuff.active()) {
                // Pokemon only retain a % of their total damage in other regions based on highest region.
                multiplier = this.getRegionAttackMultiplier();
            }
        }
        // Check if the Pokemon is currently breeding (no attack)
        if (includeBreeding || !pokemon.breeding) {
            if (type1 == PokemonType.None) {
                attack = pAttack * multiplier;
            }
            else {
                const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
                attack = pAttack * TypeHelper.getAttackModifier(dataPokemon.type1, dataPokemon.type2, type1, type2) * multiplier;
            }
        }
        // Weather boost
        const weather = Weather.weatherConditions[overrideWeather !== null && overrideWeather !== void 0 ? overrideWeather : Weather.currentWeather()];
        const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
        (_a = weather.multipliers) === null || _a === void 0 ? void 0 : _a.forEach(value => {
            if (value.type == dataPokemon.type1) {
                attack *= value.multiplier;
            }
            if (value.type == dataPokemon.type2) {
                attack *= value.multiplier;
            }
        });
        // Should we take flute boost into account
        if (includeFlute) {
            const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
            FluteEffectRunner.activeGemTypes().forEach(value => {
                if (value == dataPokemon.type1) {
                    attack *= GameConstants.FLUTE_TYPE_ATTACK_MULTIPLIER;
                }
                if (value == dataPokemon.type2) {
                    attack *= GameConstants.FLUTE_TYPE_ATTACK_MULTIPLIER;
                }
            });
        }
        return attack;
    }
    getRegionAttackMultiplier(highestRegion = player.highestRegion()) {
        // between 0.2 -> 1 based on highest region
        return Math.min(1, Math.max(0.2, 0.1 + (highestRegion / 10)));
    }
    getPokemon(id) {
        for (let i = 0; i < this.caughtPokemon.length; i++) {
            if (this.caughtPokemon[i].id === id) {
                return this.caughtPokemon[i];
            }
        }
    }
    alreadyCaughtPokemonByName(name, shiny = false) {
        return this.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(name).id, shiny);
    }
    alreadyCaughtPokemon(id, shiny = false) {
        const pokemon = this.caughtPokemon.find(p => p.id == id);
        if (pokemon) {
            return (!shiny || pokemon.shiny);
        }
        return false;
    }
    calculateClickAttack(useItem = false) {
        // Base power
        // Shiny pokemon help with a 50% boost
        const clickAttack = Math.pow(this.caughtPokemon.length + (this.caughtPokemon.filter(p => p.shiny).length / 2) + 1, 1.4) * (1 + AchievementHandler.achievementBonus());
        const bonus = this.multiplier.getBonus('clickAttack', useItem);
        return Math.floor(clickAttack * bonus);
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        const caughtPokemonSave = json['caughtPokemon'];
        for (let i = 0; i < caughtPokemonSave.length; i++) {
            const partyPokemon = PokemonFactory.generatePartyPokemon(caughtPokemonSave[i].id);
            partyPokemon.fromJSON(caughtPokemonSave[i]);
            this._caughtPokemon.push(partyPokemon);
        }
    }
    initialize() {
    }
    toJSON() {
        return {
            caughtPokemon: this._caughtPokemon().map(x => x.toJSON()),
        };
    }
    update(delta) {
        // This method intentionally left blank
    }
    get caughtPokemon() {
        return this._caughtPokemon();
    }
    set caughtPokemon(pokemon) {
        this._caughtPokemon(pokemon);
    }
}
class PartyController {
    static getCaughtStatusByName(name) {
        return this.getCaughtStatus(PokemonHelper.getPokemonByName(name).id);
    }
    static getCaughtStatus(id) {
        if (App.game.party.alreadyCaughtPokemon(id, true)) {
            return CaughtStatus.CaughtShiny;
        }
        if (App.game.party.alreadyCaughtPokemon(id, false)) {
            return CaughtStatus.Caught;
        }
        return CaughtStatus.NotCaught;
    }
    static getStoneEvolutionsCaughtStatus(id, evoType) {
        const pokemon = App.game.party.caughtPokemon.find(p => p.id == id);
        const statuses = [];
        if (pokemon) {
            for (const evolution of pokemon.evolutions) {
                // skip other Restrictions to show all eevee evolutions for the region
                const regionStatisfied = PokemonHelper.calcNativeRegion(evolution.getEvolvedPokemon()) <= player.highestRegion();
                if (evolution instanceof StoneEvolution && evolution.stone == evoType && regionStatisfied) {
                    const pStatus = this.getCaughtStatusByName(evolution.getEvolvedPokemon());
                    statuses.push(pStatus);
                }
            }
        }
        return statuses;
    }
    static hasMultipleStoneEvolutionsAvailable(pokemonName, evoType) {
        const pokemon = App.game.party.caughtPokemon.find(p => p.name == pokemonName);
        // We only want to check against pokemon that have multiple possible evolutions that can happen now
        let found = false;
        if (pokemon) {
            for (const evolution of pokemon.evolutions) {
                if (evolution instanceof StoneEvolution && evolution.stone == evoType && evolution.isSatisfied()) {
                    // If we've already found 1 evolution, then there are multiple possible evolutions
                    if (found) {
                        return true;
                    }
                    // We've found 1 possible evolution
                    found = true;
                }
            }
        }
        return false;
    }
    static getMaxLevelPokemonList() {
        return App.game.party.caughtPokemon.filter((partyPokemon) => {
            return !partyPokemon.breeding && partyPokemon.level >= 100;
        });
    }
    static compareBy(option, direction) {
        return function (a, b) {
            let res, dir = (direction) ? -1 : 1;
            const config = SortOptionConfigs[option];
            const aValue = config.getValue(a);
            const bValue = config.getValue(b);
            if (config.invert) {
                dir *= -1;
            }
            //Compare by provided property
            if (aValue == bValue) {
                //If they are equal according to provided property, sort by id
                return a.id - b.id;
            }
            else if (aValue < bValue) {
                res = -1;
            }
            else if (aValue > bValue) {
                res = 1;
            }
            else {
                res = 0;
            }
            return res * dir;
        };
    }
}
PartyController.getSortedList = ko.pureComputed(() => {
    const list = [...App.game.party.caughtPokemon];
    return list.sort(PartyController.compareBy(Settings.getSetting('partySort').observableValue(), Settings.getSetting('partySortDirection').observableValue()));
}).extend({ rateLimit: 500 });
PartyController.hatcherySortedList = [];
PartyController.getHatcherySortedList = ko.pureComputed(() => {
    // If the breeding modal is open, we should sort it.
    if (modalUtils.observableState['breedingModal'] === 'show') {
        PartyController.hatcherySortedList = [...App.game.party.caughtPokemon];
        return PartyController.hatcherySortedList.sort(PartyController.compareBy(Settings.getSetting('hatcherySort').observableValue(), Settings.getSetting('hatcherySortDirection').observableValue()));
    }
    return PartyController.hatcherySortedList;
}).extend({ rateLimit: 500 });
PartyController.proteinSortedList = [];
PartyController.getProteinSortedList = ko.pureComputed(() => {
    // If the protein modal is open, we should sort it.
    if (modalUtils.observableState['pokemonSelectorModal'] === 'show') {
        PartyController.proteinSortedList = [...App.game.party.caughtPokemon];
        return PartyController.proteinSortedList.sort(PartyController.compareBy(Settings.getSetting('proteinSort').observableValue(), Settings.getSetting('proteinSortDirection').observableValue()));
    }
    return PartyController.proteinSortedList;
}).extend({ rateLimit: 500 });
var PartyPokemonSaveKeys;
(function (PartyPokemonSaveKeys) {
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["attackBonusPercent"] = 0] = "attackBonusPercent";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["attackBonusAmount"] = 1] = "attackBonusAmount";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["proteinsUsed"] = 2] = "proteinsUsed";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["exp"] = 3] = "exp";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["breeding"] = 4] = "breeding";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["shiny"] = 5] = "shiny";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["category"] = 6] = "category";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["levelEvolutionTriggered"] = 7] = "levelEvolutionTriggered";
})(PartyPokemonSaveKeys || (PartyPokemonSaveKeys = {}));
class PartyPokemon {
    constructor(id, name, evolutions, baseAttack, attackBonusPercent = 0, attackBonusAmount = 0, proteinsUsed, exp = 0, breeding = false, shiny = false, category = 0) {
        this.id = id;
        this.name = name;
        this.evolutions = evolutions;
        this.baseAttack = baseAttack;
        this.exp = exp;
        this.defaults = {
            attackBonusPercent: 0,
            attackBonusAmount: 0,
            proteinsUsed: 0,
            exp: 0,
            breeding: false,
            shiny: false,
            category: 0,
            levelEvolutionTriggered: false,
        };
        this.proteinUsesRemaining = () => {
            // Allow 5 for every region visited (including Kanto)
            return (player.highestRegion() + 1) * 5 - this.proteinsUsed();
        };
        this.hideFromProteinList = () => {
            return this.breeding ||
                (this.proteinUsesRemaining() == 0 && Settings.getSetting('proteinHideMaxedPokemon').observableValue()) ||
                (this.shiny && Settings.getSetting('proteinHideShinyPokemon').observableValue());
        };
        this.proteinsUsed = ko.observable(proteinsUsed);
        this._breeding = ko.observable(breeding);
        this._shiny = ko.observable(shiny);
        this._level = ko.observable(1);
        this._attackBonusPercent = ko.observable(attackBonusPercent);
        this._attackBonusAmount = ko.observable(attackBonusAmount);
        this._attack = ko.observable(this.calculateAttack());
        this._category = ko.observable(category);
    }
    calculateAttack(ignoreLevel = false) {
        const attackBonusMultiplier = 1 + (this.attackBonusPercent / 100);
        const levelMultiplier = ignoreLevel ? 1 : this.level / 100;
        return Math.max(1, Math.floor((this.baseAttack * attackBonusMultiplier + this.attackBonusAmount) * levelMultiplier));
    }
    calculateLevelFromExp() {
        const levelType = PokemonHelper.getPokemonByName(this.name).levelType;
        for (let i = this.level - 1; i < levelRequirements[levelType].length; i++) {
            if (levelRequirements[levelType][i] > this.exp) {
                return i;
            }
        }
        return this.level;
    }
    gainExp(exp) {
        this.exp += exp;
        const oldLevel = this.level;
        const newLevel = this.calculateLevelFromExp();
        if (oldLevel !== newLevel) {
            this.level = newLevel;
            this.attack = this.calculateAttack();
            this.checkForLevelEvolution();
        }
    }
    checkForLevelEvolution() {
        if (this.breeding || this.evolutions == null || this.evolutions.length == 0) {
            return;
        }
        for (const evolution of this.evolutions) {
            if (evolution instanceof LevelEvolution && evolution.isSatisfied()) {
                evolution.evolve();
            }
        }
    }
    useStone(stoneType) {
        const possibleEvolutions = [];
        for (const evolution of this.evolutions) {
            if (evolution instanceof StoneEvolution && evolution.stone == stoneType && evolution.isSatisfied()) {
                possibleEvolutions.push(evolution);
            }
        }
        if (possibleEvolutions.length !== 0) {
            return Rand.fromArray(possibleEvolutions).evolve();
        }
        return false;
    }
    useProtein(amount) {
        if (App.game.challenges.list.disableProteins.active()) {
            Notifier.notify({
                title: 'Challenge Mode',
                message: 'Proteins are disabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return;
        }
        const usesRemaining = this.proteinUsesRemaining();
        // If no more proteins can be used on this Pokemon
        if (!usesRemaining) {
            Notifier.notify({
                message: 'This Pokémon cannot increase their power any higher!',
                type: NotificationConstants.NotificationOption.warning,
            });
            return;
        }
        // The lowest number of amount they want to use, total in inventory, uses remaining for this Pokemon
        amount = Math.min(amount, player.itemList.Protein(), usesRemaining);
        // Apply the proteins
        if (ItemHandler.useItem('Protein', amount)) {
            GameHelper.incrementObservable(this.proteinsUsed, amount);
        }
    }
    fromJSON(json) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (json == null) {
            return;
        }
        if (json['id'] == null) {
            return;
        }
        this.attackBonusPercent = (_a = json[PartyPokemonSaveKeys.attackBonusPercent]) !== null && _a !== void 0 ? _a : this.defaults.attackBonusPercent;
        this.attackBonusAmount = (_b = json[PartyPokemonSaveKeys.attackBonusAmount]) !== null && _b !== void 0 ? _b : this.defaults.attackBonusAmount;
        this.proteinsUsed = ko.observable((_c = json[PartyPokemonSaveKeys.proteinsUsed]) !== null && _c !== void 0 ? _c : this.defaults.proteinsUsed);
        this.exp = (_d = json[PartyPokemonSaveKeys.exp]) !== null && _d !== void 0 ? _d : this.defaults.exp;
        this.breeding = (_e = json[PartyPokemonSaveKeys.breeding]) !== null && _e !== void 0 ? _e : this.defaults.breeding;
        this.shiny = (_f = json[PartyPokemonSaveKeys.shiny]) !== null && _f !== void 0 ? _f : this.defaults.shiny;
        this.category = (_g = json[PartyPokemonSaveKeys.category]) !== null && _g !== void 0 ? _g : this.defaults.category;
        this.level = this.calculateLevelFromExp();
        this.attack = this.calculateAttack();
        if (this.evolutions != null) {
            for (const evolution of this.evolutions) {
                if (evolution instanceof LevelEvolution) {
                    evolution.triggered = (_h = json[PartyPokemonSaveKeys.levelEvolutionTriggered]) !== null && _h !== void 0 ? _h : this.defaults.levelEvolutionTriggered;
                }
            }
        }
    }
    toJSON() {
        let levelEvolutionTriggered = false;
        if (this.evolutions != null) {
            for (const evolution of this.evolutions) {
                if (evolution instanceof LevelEvolution && evolution.triggered) {
                    levelEvolutionTriggered = true;
                }
            }
        }
        const output = {
            id: this.id,
            [PartyPokemonSaveKeys.attackBonusPercent]: this.attackBonusPercent,
            [PartyPokemonSaveKeys.attackBonusAmount]: this.attackBonusAmount,
            [PartyPokemonSaveKeys.proteinsUsed]: this.proteinsUsed(),
            [PartyPokemonSaveKeys.exp]: this.exp,
            [PartyPokemonSaveKeys.breeding]: this.breeding,
            [PartyPokemonSaveKeys.shiny]: this.shiny,
            [PartyPokemonSaveKeys.levelEvolutionTriggered]: levelEvolutionTriggered,
            [PartyPokemonSaveKeys.category]: this.category,
        };
        // Don't save anything that is the default option
        Object.entries(output).forEach(([key, value]) => {
            if (value === this.defaults[PartyPokemonSaveKeys[key]]) {
                delete output[key];
            }
        });
        return output;
    }
    // Knockout getters/setter
    get level() {
        return this._level();
    }
    set level(level) {
        this._level(level);
    }
    get attack() {
        return this._attack();
    }
    set attack(attack) {
        this._attack(attack);
    }
    get attackBonusAmount() {
        return this._attackBonusAmount();
    }
    set attackBonusAmount(attackBonusAmount) {
        this._attackBonusAmount(attackBonusAmount);
    }
    get attackBonusPercent() {
        return this._attackBonusPercent();
    }
    set attackBonusPercent(attackBonusPercent) {
        this._attackBonusPercent(attackBonusPercent);
    }
    get breeding() {
        return this._breeding();
    }
    set breeding(bool) {
        this._breeding(bool);
    }
    get shiny() {
        return this._shiny();
    }
    set shiny(bool) {
        this._shiny(bool);
    }
    get category() {
        return this._category();
    }
    set category(index) {
        this._category(index);
    }
}
/// <reference path="./LocationRestriction.ts" />
function ByRegion(Base) {
    return class extends Base {
        constructor(...args) {
            const [region, ...rest] = args;
            super(...rest);
            this.region = region;
        }
        atLocation() {
            return player.region == this.region;
        }
    };
}
function RegionRestricted(Base) {
    return LocationRestricted(ByRegion(Base));
}
class Pokeball {
    constructor(type, catchBonus, catchTime, description, unlockRequirement = new MultiRequirement(), quantity = 0) {
        this.type = type;
        this.catchBonus = catchBonus;
        this.catchTime = catchTime;
        this.description = description;
        this.unlockRequirement = unlockRequirement;
        this.quantity = ko.observable(quantity);
    }
    unlocked() {
        return this.unlockRequirement.isCompleted();
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="Pokeball.ts" />
class Pokeballs {
    constructor() {
        this.name = 'Pokeballs';
        this.saveKey = 'pokeballs';
        this.defaults = {
            alreadyCaughtSelection: GameConstants.Pokeball.None,
            alreadyCaughtShinySelection: GameConstants.Pokeball.Pokeball,
            notCaughtSelection: GameConstants.Pokeball.Pokeball,
            notCaughtShinySelection: GameConstants.Pokeball.Pokeball,
        };
        this.pokeballs = [
            new Pokeball(GameConstants.Pokeball.Pokeball, () => 0, 1250, 'A standard Scan Module', undefined, 25),
            new Pokeball(GameConstants.Pokeball.Greatball, () => 5, 1000, '+5% chance to catch'),
            new Pokeball(GameConstants.Pokeball.Ultraball, () => 10, 750, '+10% chance to catch'),
            new Pokeball(GameConstants.Pokeball.Masterball, () => 100, 500, '100% chance to catch'),
            new Pokeball(GameConstants.Pokeball.Fastball, () => 0, 500, 'Reduced catch time', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Quickball, () => {
                var _a, _b;
                if (App.game.gameState == GameConstants.GameState.fighting && player.route()) {
                    const kills = ((_b = (_a = App.game.statistics.routeKills[GameConstants.Region[player.region]]) === null || _a === void 0 ? void 0 : _a[player.route()]) === null || _b === void 0 ? void 0 : _b.call(_a)) || 0;
                    // between 15 (0 kills) → 0 (4012 kills)
                    return Math.min(15, Math.max(0, Math.pow(16, 1 - Math.pow(Math.max(0, kills - 10), 0.6) / 145) - 1));
                }
                if (App.game.gameState == GameConstants.GameState.dungeon) {
                    return Math.min(15, Math.pow(DungeonRunner.timeLeftPercentage(), 2) / 500);
                }
                return 0;
            }, 1000, 'Increased catch rate on routes with less Digimon defeated', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Timerball, () => {
                var _a, _b;
                if (App.game.gameState == GameConstants.GameState.fighting && player.route()) {
                    const kills = ((_b = (_a = App.game.statistics.routeKills[GameConstants.Region[player.region]]) === null || _a === void 0 ? void 0 : _a[player.route()]) === null || _b === void 0 ? void 0 : _b.call(_a)) || 0;
                    // between 0 (0 kills) → 15 (9920 kills)
                    return Math.min(15, Math.max(0, Math.pow(16, Math.pow(kills, 0.6) / 250) - 1));
                }
                if (App.game.gameState == GameConstants.GameState.dungeon) {
                    const maxBonus = 15;
                    const timeLeftPercent = DungeonRunner.timeLeftPercentage();
                    const timeLeftPercentWhenMax = 15;
                    return (timeLeftPercentWhenMax < timeLeftPercent) ? (200 / timeLeftPercent - 2) : maxBonus;
                }
                return 0;
            }, 1000, 'Increased catch rate on routes with more Digimon defeated', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Duskball, () => {
                const now = new Date();
                // If player in a dungeon or it's night time
                if (App.game.gameState == GameConstants.GameState.dungeon || now.getHours() >= 18 || now.getHours() < 6) {
                    return 15;
                }
                return 0;
            }, 1000, 'Increased catch rate at night time or in dungeons', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            // TODO: this needs some sort of bonus, possibly extra dungeon tokens
            new Pokeball(GameConstants.Pokeball.Luxuryball, () => 0, 1250, 'A Luxury Pokéball', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Diveball, () => {
                // If area is a water environment,
                if (MapHelper.getCurrentEnvironment() == 'Water') {
                    return 15;
                }
                return 0;
            }, 1250, 'Increased catch rate on water routes', new RouteKillRequirement(10, GameConstants.Region.hoenn, 101)),
            new Pokeball(GameConstants.Pokeball.Lureball, () => {
                const numLandPokemon = Routes.getRoute(player.region, player.route()).pokemon.land.length > 0;
                const isWaterPokemon = Routes.getRoute(player.region, player.route()).pokemon.water.includes(Battle.enemyPokemon().name);
                // If route has Land Digimon and the current Digimon is a Water Digimon
                if (numLandPokemon == true && isWaterPokemon == true) {
                    return 15;
                }
                return 0;
            }, 1250, 'Increased catch rate on fished Digimon', new RouteKillRequirement(10, GameConstants.Region.hoenn, 101)),
            new Pokeball(GameConstants.Pokeball.Nestball, () => {
                const maxRoute = MapHelper.normalizeRoute(Routes.getRoute(player.highestRegion(), Routes.getRoutesByRegion(player.highestRegion()).length - 1).number, player.highestRegion());
                const currentRoute = MapHelper.normalizeRoute(player.route(), player.region);
                // Increased rate for earlier routes, scales with regional progression
                return Math.min(15, Math.max(1, player.highestRegion()) * Math.max(1, (maxRoute / currentRoute)));
            }, 1250, 'Increased catch rate on earlier routes', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Repeatball, () => {
                const amountCaught = App.game.statistics.digimonScanned[Battle.enemyPokemon().id]();
                return Math.min(15, Math.pow(amountCaught, 2) / 5000);
            }, 1250, 'Increased catch rate with more catches', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
        ];
        this._alreadyCaughtSelection = ko.observable(this.defaults.alreadyCaughtSelection);
        this._alreadyCaughtShinySelection = ko.observable(this.defaults.alreadyCaughtShinySelection);
        this._notCaughtSelection = ko.observable(this.defaults.notCaughtSelection);
        this._notCaughtShinySelection = ko.observable(this.defaults.notCaughtShinySelection);
        this.selectedTitle = ko.observable('');
        this.selectedSelection = ko.observable(this._alreadyCaughtSelection);
    }
    initialize() {
        ([
            this._alreadyCaughtSelection,
            this._alreadyCaughtShinySelection,
            this._notCaughtSelection,
            this._notCaughtShinySelection,
        ]).forEach(selection => {
            selection.subscribe(value => {
                var _a;
                // switch to Ultraball if Masterball is selected
                if (value == GameConstants.Pokeball.Masterball && App.game.challenges.list.disableMasterballs.active()) {
                    selection(GameConstants.Pokeball.Ultraball);
                    Notifier.notify({
                        title: 'Challenge Mode',
                        message: 'Masterballs are disabled!',
                        type: NotificationConstants.NotificationOption.danger,
                    });
                }
                else if (!((_a = this.pokeballs[value]) === null || _a === void 0 ? void 0 : _a.unlocked())) {
                    selection(GameConstants.Pokeball.None);
                }
            });
        });
    }
    /**
     * Checks the players preferences to see what pokéball needs to be used on the next throw.
     * Checks from the players pref to the most basic ball to see if the player has any.
     * @param id the pokemon we are trying to catch.
     * @param isShiny if the Digimon is shiny.
     * @returns {GameConstants.Pokeball} pokéball to use.
     */
    calculatePokeballToUse(id, isShiny) {
        var _a;
        const alreadyCaught = App.game.party.alreadyCaughtPokemon(id);
        const alreadyCaughtShiny = App.game.party.alreadyCaughtPokemon(id, true);
        let pref;
        // just check against alreadyCaughtShiny as this returns false when you don't have the pokemon yet.
        if (isShiny) {
            if (!alreadyCaughtShiny) {
                // if the pokemon is also not caught, use the higher selection since a notCaughtShiny is also a notCaught pokemon
                pref = !alreadyCaught ? Math.max(this.notCaughtSelection, this.notCaughtShinySelection) : this.notCaughtShinySelection;
            }
            else {
                // if the shiny is already caught, use the higher selection since the pokemon is also a caught pokemon
                pref = Math.max(this.alreadyCaughtSelection, this.alreadyCaughtShinySelection);
            }
        }
        else {
            if (!alreadyCaught) {
                pref = this.notCaughtSelection;
            }
            else {
                pref = this.alreadyCaughtSelection;
            }
        }
        let use = GameConstants.Pokeball.None;
        if ((_a = this.pokeballs[pref]) === null || _a === void 0 ? void 0 : _a.quantity()) {
            return pref;
        }
        else if (pref <= GameConstants.Pokeball.Masterball) {
            // Check which Pokeballs we have in stock that are of equal or lesser than selection (upto Masterball)
            for (let i = pref; i >= 0; i--) {
                if (this.pokeballs[i].quantity() > 0) {
                    use = i;
                    break;
                }
            }
            return use;
        }
        else {
            // Use a normal Pokeball or None if we don't have Pokeballs in stock
            return this.pokeballs[GameConstants.Pokeball.Pokeball].quantity() ? GameConstants.Pokeball.Pokeball : GameConstants.Pokeball.None;
        }
    }
    calculateCatchTime(ball) {
        return this.pokeballs[ball].catchTime;
    }
    gainPokeballs(ball, amount, purchase = true) {
        GameHelper.incrementObservable(this.pokeballs[ball].quantity, amount);
        GameHelper.incrementObservable(App.game.statistics.digiscansObtained[ball], amount);
        if (purchase === true) {
            GameHelper.incrementObservable(App.game.statistics.digiscansBought[ball], amount);
        }
    }
    usePokeball(ball) {
        GameHelper.incrementObservable(this.pokeballs[ball].quantity, -1);
        GameHelper.incrementObservable(App.game.statistics.digiscansUsed[ball]);
    }
    getCatchBonus(ball) {
        return this.pokeballs[ball].catchBonus();
    }
    getBallQuantity(ball) {
        const pokeball = this.pokeballs[ball];
        return pokeball ? pokeball.quantity() : 0;
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        var _a, _b, _c, _d;
        if (json == null) {
            return;
        }
        if (json['pokeballs'] != null) {
            json['pokeballs'].map((amt, type) => this.pokeballs[type].quantity(amt));
        }
        this.notCaughtSelection = (_a = json['notCaughtSelection']) !== null && _a !== void 0 ? _a : this.defaults.notCaughtSelection;
        this.notCaughtShinySelection = (_b = json['notCaughtShinySelection']) !== null && _b !== void 0 ? _b : this.defaults.notCaughtShinySelection;
        this.alreadyCaughtSelection = (_c = json['alreadyCaughtSelection']) !== null && _c !== void 0 ? _c : this.defaults.alreadyCaughtSelection;
        this.alreadyCaughtShinySelection = (_d = json['alreadyCaughtShinySelection']) !== null && _d !== void 0 ? _d : this.defaults.alreadyCaughtShinySelection;
    }
    toJSON() {
        return {
            'pokeballs': this.pokeballs.map(p => p.quantity()),
            'notCaughtSelection': this.notCaughtSelection,
            'notCaughtShinySelection': this.notCaughtShinySelection,
            'alreadyCaughtSelection': this.alreadyCaughtSelection,
            'alreadyCaughtShinySelection': this.alreadyCaughtShinySelection,
        };
    }
    update(delta) {
        // This method intentionally left blank
    }
    // Knockout getters/setters
    get notCaughtSelection() {
        return this._notCaughtSelection();
    }
    set notCaughtSelection(ball) {
        this._notCaughtSelection(ball);
    }
    get notCaughtShinySelection() {
        return this._notCaughtShinySelection();
    }
    set notCaughtShinySelection(ball) {
        this._notCaughtShinySelection(ball);
    }
    get alreadyCaughtSelection() {
        return this._alreadyCaughtSelection();
    }
    set alreadyCaughtSelection(ball) {
        this._alreadyCaughtSelection(ball);
    }
    get alreadyCaughtShinySelection() {
        return this._alreadyCaughtShinySelection();
    }
    set alreadyCaughtShinySelection(ball) {
        this._alreadyCaughtShinySelection(ball);
    }
}
var TypeColor = GameConstants.TypeColor;
class PokedexHelper {
    static getBackgroundColors(name) {
        const pokemon = PokemonHelper.getPokemonByName(name);
        if (!this.pokemonSeen(pokemon.id)()) {
            return 'grey';
        }
        if (pokemon.type2 == PokemonType.None) {
            return TypeColor[pokemon.type1];
        }
        return `linear-gradient(90deg,${TypeColor[pokemon.type1]} 50%, ${TypeColor[pokemon.type2]} 50%)`;
    }
    /**
     * Returns true if you have seen the pokemon
     * @param {number} id
     * @returns {boolean}
     */
    static pokemonSeen(id) {
        return ko.pureComputed(() => {
            try {
                return App.game.statistics.digimonEncountered[id]() > 0 || App.game.statistics.digimonDefeated[id]() > 0 || App.game.statistics.digimonScanned[id]() > 0 || App.game.party.alreadyCaughtPokemon(id);
            }
            catch (error) {
                return false;
            }
        });
    }
    static pokemonScanned(id) {
        return ko.pureComputed(() => {
            try {
                return App.game.statistics.digimonScanned[id]() > 0 || App.game.party.alreadyCaughtPokemon(id) || id === 0;
            }
            catch (error) {
                return false;
            }
        });
    }
    static populateFilters() {
        let options = $('#pokedex-filter-type1');
        $.each(PokemonType, function () {
            if (isNaN(Number(this)) && this != PokemonType.None) {
                options.append($('<option />').val(PokemonType[this]).text(this));
            }
        });
        options = $('#pokedex-filter-type2');
        $.each(PokemonType, function () {
            if (isNaN(Number(this)) && this != PokemonType.None) {
                options.append($('<option />').val(PokemonType[this]).text(this));
            }
        });
        options = $('#pokedex-filter-region');
        for (let i = 0; i <= GameConstants.MAX_AVAILABLE_REGION; i++) {
            options.append($('<option />').val(i).text(GameConstants.camelCaseToString(GameConstants.Region[i])));
        }
    }
    static updateList() {
        PokedexHelper.filteredList(PokedexHelper.getList());
    }
    static getList() {
        const filter = PokedexHelper.getFilters();
        const highestEncountered = App.game.statistics.digimonEncountered.highestID;
        const highestDefeated = App.game.statistics.digimonDefeated.highestID;
        const highestCaught = App.game.statistics.digimonScanned.highestID;
        const highestDex = Math.max(highestEncountered, highestDefeated, highestCaught);
        return pokemonList.filter((pokemon) => {
            // Checks based on caught/shiny status
            const alreadyCaught = App.game.party.alreadyCaughtPokemon(pokemon.id);
            const alreadyCaughtShiny = App.game.party.alreadyCaughtPokemon(pokemon.id, true);
            // If the Pokemon shouldn't be unlocked yet
            const nativeRegion = PokemonHelper.calcNativeRegion(pokemon.name);
            if (nativeRegion > GameConstants.MAX_AVAILABLE_REGION || nativeRegion == GameConstants.Region.none) {
                return false;
            }
            // If not showing this region
            const region = filter['region'] ? parseInt(filter['region'], 10) : null;
            if (region != null && region != nativeRegion) {
                return false;
            }
            // Event Pokemon
            if (pokemon.id <= 0 && !alreadyCaught) {
                return false;
            }
            // If we haven't seen a pokemon this high yet
            if (pokemon.id > highestDex) {
                return false;
            }
            // Check if the name contains the string
            if (filter['name'] && !pokemon.name.toLowerCase().includes(filter['name'].toLowerCase().trim())) {
                return false;
            }
            // Check if either of the types match
            const type1 = filter['type1'] ? parseInt(filter['type1'], 10) : null;
            const type2 = filter['type2'] ? parseInt(filter['type2'], 10) : null;
            if ([type1, type2].includes(PokemonType.None)) {
                const type = (type1 == PokemonType.None) ? type2 : type1;
                if (!PokedexHelper.isPureType(pokemon, type)) {
                    return false;
                }
            }
            else if ((type1 != null && !pokemon.type.includes(type1)) || (type2 != null && !pokemon.type.includes(type2))) {
                return false;
            }
            // Alternate forms that we haven't caught yet
            if (!alreadyCaught && pokemon.id != Math.floor(pokemon.id)) {
                return false;
            }
            // Only uncaught
            if (filter['caught-shiny'] == 'uncaught' && alreadyCaught) {
                return false;
            }
            // All caught
            if (filter['caught-shiny'] == 'caught' && !alreadyCaught) {
                return false;
            }
            // Only caught not shiny
            if (filter['caught-shiny'] == 'caught-not-shiny' && (!alreadyCaught || alreadyCaughtShiny)) {
                return false;
            }
            // Only caught shiny
            if (filter['caught-shiny'] == 'caught-shiny' && !alreadyCaughtShiny) {
                return false;
            }
            // Only pokemon with a hold item
            if (filter['held-item'] && !BagHandler.displayName(pokemon.heldItem)) {
                return false;
            }
            return true;
        });
    }
    static getFilters() {
        const res = {};
        res['name'] = $('#nameFilter').val();
        res['type1'] = $('#pokedex-filter-type1').val();
        res['type2'] = $('#pokedex-filter-type2').val();
        res['region'] = $('#pokedex-filter-region').val();
        res['caught-shiny'] = $('#pokedex-filter-shiny-caught').val();
        res['held-item'] = $('#pokedex-filter-held-item').is(':checked');
        return res;
    }
    static getImage(id) {
        let src = 'assets/images/';
        if (App.game.party.alreadyCaughtPokemon(id, true) && this.toggleAllShiny()) {
            src += 'dot';
        }
        src += `digidex/${id}.png`;
        return src;
    }
    static getImageStatistics(id) {
        let src = 'assets/images/';
        if (App.game.party.alreadyCaughtPokemon(id, true) && this.toggleStatisticShiny()) {
            src += 'shiny';
        }
        src += `pokemon/${id}.png`;
        return src;
    }
    static isPureType(pokemon, type) {
        return (pokemon.type.length === 1 && (type == null || pokemon.type[0] === type));
    }
}
PokedexHelper.toggleStatisticShiny = ko.observable(true);
PokedexHelper.toggleAllShiny = ko.observable(true);
PokedexHelper.filteredList = ko.observableArray([]);
$(document).ready(() => {
    $('#pokemonStatisticsModal').on('hidden.bs.modal', () => {
        PokedexHelper.toggleStatisticShiny(true);
    });
});
class PokedexPokemon {
    constructor(name, id, type1, type2, kills, catches, shiny) {
        this.name = name;
        this.id = id;
        this.type1 = type1;
        this.type2 = type2;
        this.kills = kills;
        this.catches = catches;
        this.shiny = shiny;
    }
}
class DataPokemon {
    constructor(id, name, catchRate, evolutions, type1, type2, attack, hitpoints, levelType, exp, eggCycles, heldItem) {
        this.id = id;
        this.name = name;
        this.catchRate = catchRate;
        this.evolutions = evolutions;
        this.type1 = type1;
        this.type2 = type2;
        this.attack = attack;
        this.hitpoints = hitpoints;
        this.levelType = levelType;
        this.exp = exp;
        this.eggCycles = eggCycles;
        this.heldItem = heldItem;
        this.shiny = false;
    }
}
class RoamingPokemon {
    constructor(pokemonName, unlockRequirement) {
        this.pokemonName = pokemonName;
        this.unlockRequirement = unlockRequirement;
        this.pokemon = pokemonMap[pokemonName];
    }
    isRoaming() {
        return this.unlockRequirement ? this.unlockRequirement.isCompleted() : true;
    }
}
/// <reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="../../declarations/subRegion/SubRegions.d.ts"/>
///<reference path="../../declarations/requirements/SubregionRequirement.d.ts"/>
///<reference path="../../declarations/requirements/OneFromManyRequirement.d.ts"/>
class RoamingPokemonList {
    constructor() { }
    static add(region, roamer) {
        if (!RoamingPokemonList.list[region]) {
            RoamingPokemonList.list[region] = [];
        }
        RoamingPokemonList.list[region].push(roamer);
    }
    static remove(region, pokemonName) {
        const index = RoamingPokemonList.list[region].findIndex(r => r.pokemon.name == pokemonName);
        if (index >= 0) {
            RoamingPokemonList.list[region].splice(index, 1);
        }
    }
    static getRegionalRoamers(region) {
        return RoamingPokemonList.list[region] ? RoamingPokemonList.list[region].filter(p => p.isRoaming()) : [];
    }
    static getIncreasedChanceRouteByRegion(region) {
        return this.increasedChanceRoute[region];
    }
    static generateIncreasedChanceRoutes(date = new Date()) {
        // Seed the random runmber generator
        SeededRand.seedWithDateHour(date, this.period);
        this.increasedChanceRoute.forEach((route, region) => {
            const routes = Routes.getRoutesByRegion(region);
            // Select a route
            const selectedRoute = SeededRand.fromArray(routes);
            route(selectedRoute);
        });
    }
}
RoamingPokemonList.list = {};
RoamingPokemonList.increasedChanceRoute = new Array(GameHelper.enumLength(GameConstants.Region)).fill(0).map((route, region) => ko.observable(null));
// How many hours between when the roaming Pokemon change routes for increased chances
RoamingPokemonList.period = 8;
// Kanto
RoamingPokemonList.add(GameConstants.Region.adventure01, new RoamingPokemon('Jijimon', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Piemon\'s Observatory'))));
// Johto
RoamingPokemonList.add(GameConstants.Region.johto, new RoamingPokemon('Burpmon', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Burned Tower'))));
RoamingPokemonList.add(GameConstants.Region.johto, new RoamingPokemon('Burpmon', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Burned Tower'))));
RoamingPokemonList.add(GameConstants.Region.johto, new RoamingPokemon('Burpmon', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Burned Tower'))));
// Hoenn
RoamingPokemonList.add(GameConstants.Region.hoenn, new RoamingPokemon('Burpmon', new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)));
RoamingPokemonList.add(GameConstants.Region.hoenn, new RoamingPokemon('Burpmon', new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)));
// TODO: these need another way to be obtained
RoamingPokemonList.add(GameConstants.Region.hoenn, new RoamingPokemon('Burpmon', new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)));
// Sinnoh
RoamingPokemonList.add(GameConstants.Region.sinnoh, new RoamingPokemon('Burpmon'));
RoamingPokemonList.add(GameConstants.Region.sinnoh, new RoamingPokemon('Burpmon', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Distortion World'))));
RoamingPokemonList.add(GameConstants.Region.sinnoh, new RoamingPokemon('Burpmon', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Fullmoon Island'))));
// Unova
RoamingPokemonList.add(GameConstants.Region.unova, new RoamingPokemon('Burpmon', new GymBadgeRequirement(BadgeEnums.Legend)));
RoamingPokemonList.add(GameConstants.Region.unova, new RoamingPokemon('Burpmon', new GymBadgeRequirement(BadgeEnums.Legend)));
RoamingPokemonList.add(GameConstants.Region.unova, new RoamingPokemon('Burpmon', new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)));
// Kalos
RoamingPokemonList.add(GameConstants.Region.kalos, new RoamingPokemon('Burpmon', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sea Spirit\'s Den'))));
RoamingPokemonList.add(GameConstants.Region.kalos, new RoamingPokemon('Burpmon', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sea Spirit\'s Den'))));
RoamingPokemonList.add(GameConstants.Region.kalos, new RoamingPokemon('Burpmon', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sea Spirit\'s Den'))));
RoamingPokemonList.add(GameConstants.Region.kalos, new RoamingPokemon('Burpmon', new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)));
//Alola
RoamingPokemonList.add(GameConstants.Region.alola, new RoamingPokemon('Burpmon', new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)));
RoamingPokemonList.add(GameConstants.Region.alola, new RoamingPokemon('Burpmon', new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)));
RoamingPokemonList.add(GameConstants.Region.alola, new RoamingPokemon('Burpmon', new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)));
//Galar
RoamingPokemonList.add(GameConstants.Region.galar, new RoamingPokemon('Burpmon', new MultiRequirement([
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Dyna Tree Hill')),
])));
//Galar - Isle of Armor
RoamingPokemonList.add(GameConstants.Region.galar, new RoamingPokemon('Burpmon', new MultiRequirement([
    new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion),
    new SubregionRequirement(GameConstants.Region.galar, SubRegions.getSubRegion(GameConstants.Region.galar, 'Isle of Armor').id),
])));
RoamingPokemonList.add(GameConstants.Region.galar, new RoamingPokemon('Burpmon', new MultiRequirement([
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Dyna Tree Hill')),
    new SubregionRequirement(GameConstants.Region.galar, SubRegions.getSubRegion(GameConstants.Region.galar, 'Isle of Armor').id),
])));
//Galar - Crown Tundra
RoamingPokemonList.add(GameConstants.Region.galar, new RoamingPokemon('Burpmon', new MultiRequirement([
    new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion),
    new SubregionRequirement(GameConstants.Region.galar, SubRegions.getSubRegion(GameConstants.Region.galar, 'Crown Tundra').id),
])));
RoamingPokemonList.add(GameConstants.Region.galar, new RoamingPokemon('Burpmon', new MultiRequirement([
    new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion),
    new SubregionRequirement(GameConstants.Region.galar, SubRegions.getSubRegion(GameConstants.Region.galar, 'Crown Tundra').id),
])));
RoamingPokemonList.add(GameConstants.Region.galar, new RoamingPokemon('Burpmon', new MultiRequirement([
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Dyna Tree Hill')),
    new SubregionRequirement(GameConstants.Region.galar, SubRegions.getSubRegion(GameConstants.Region.galar, 'Crown Tundra').id),
])));
/// <reference path="../../declarations/GameHelper.d.ts" />
class Quest {
    constructor(amount, pointsReward) {
        this.amount = amount;
        this.pointsReward = pointsReward;
        this.initial = ko.observable(null);
        this.claimed = ko.observable(false);
        this.notified = false;
        this.onLoadCalled = false;
    }
    static canComplete() {
        return true;
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : 'Generic Quest Description. This should be overriden.';
    }
    static generateData() {
        return [1, 0];
    }
    static randomizeReward(pointsReward) {
        const randomPointBonus = 0.9 + SeededRand.float(0.2); // random between 0.9 and 1.1
        return Math.ceil(pointsReward * randomPointBonus);
    }
    get xpReward() {
        return 100 + (this.pointsReward / 10);
    }
    //#region Quest Status
    claim() {
        if (this.isCompleted() && !this.claimed()) {
            App.game.quests.addXP(this.xpReward);
            this.claimed(true);
            if (this.pointsReward) {
                App.game.wallet.gainFarmPoints(this.pointsReward);
                Notifier.notify({
                    message: `You have completed your quest and claimed ${this.pointsReward} farm points!`,
                    type: NotificationConstants.NotificationOption.success,
                });
                App.game.logbook.newLog(LogBookTypes.QUEST, `Completed "${this.description}" for ${this.pointsReward} farm points.`);
            }
            else {
                Notifier.notify({
                    message: 'You have completed a quest!',
                    type: NotificationConstants.NotificationOption.success,
                });
                App.game.logbook.newLog(LogBookTypes.QUEST, `Completed "${this.description}".`);
            }
            GameHelper.incrementObservable(App.game.statistics.questsCompleted);
            return true;
        }
        return false;
    }
    quit(shouldConfirm = false) {
        if (shouldConfirm) {
            Notifier.confirm({
                title: 'Quit quest',
                message: 'Are you sure?\n\nYou can start the quest again later but you will lose all progress!',
                type: NotificationConstants.NotificationOption.warning,
                confirm: 'quit',
            }).then(confirmed => {
                if (confirmed) {
                    this.initial(null);
                }
            });
        }
        else {
            this.initial(null);
        }
    }
    begin() {
        this.initial(this.focus());
    }
    set focus(value) {
        this._focus = value;
        this.createProgressObservables();
    }
    get focus() {
        return this._focus;
    }
    createProgressObservables() {
        this.progress = ko.pureComputed(() => {
            if (this.initial() !== null) {
                return Math.min(1, (this.focus() - this.initial()) / this.amount);
            }
            else {
                return 0;
            }
        });
        this.progressText = ko.pureComputed(() => {
            if (this.initial() !== null) {
                return `${Math.min((this.focus() - this.initial()), this.amount)} / ${this.amount}`;
            }
            else {
                return `0 / ${this.amount}`;
            }
        });
        this.inProgress = ko.pureComputed(() => {
            return this.initial() !== null && !this.claimed();
        });
        // This computed has a side effect - creating a notification - so we cannot safely make it a pureComputed
        // This will only be a problem if we make it subscribe to a function which lives longer than itself
        // Since it is only subscribing to observables on `this`, and the function is being kept on `this`, we shouldn't have a problem
        this.isCompleted = ko.computed(() => {
            const completed = this.progress() == 1 || this.claimed();
            if (!this.autoComplete && completed && !this.notified) {
                Notifier.notify({
                    message: `You can complete your quest for ${this.pointsReward} quest points!`,
                    type: NotificationConstants.NotificationOption.success,
                    timeout: 5e3,
                    sound: NotificationConstants.NotificationSound.Quests.quest_ready_to_complete,
                    setting: NotificationConstants.NotificationSetting.General.quest_ready_to_complete,
                });
                this.notified = true;
            }
            return completed;
        });
    }
    onLoad() {
        if (typeof this._onLoad === 'function' && !this.onLoadCalled) {
            this._onLoad();
            this.onLoadCalled = true;
        }
    }
    complete() {
        this.initial(this.focus() - this.amount);
    }
    createAutoCompleter() {
        this.autoComplete = true;
        this.autoCompleter = this.isCompleted.subscribe(() => {
            if (this.isCompleted()) {
                this.claim();
                this.autoCompleter.dispose();
            }
        });
    }
    //#endregion
    toJSON() {
        return {
            index: this.index || 0,
            customDescription: this.customDescription,
            data: [this.amount, this.pointsReward],
            initial: this.initial(),
            claimed: this.claimed(),
            notified: this.notified,
        };
    }
    fromJSON(json) {
        if (!json) {
            this.index = 0;
            this.claimed(false);
            this.initial(null);
            this.notified = false;
        }
        this.index = json.hasOwnProperty('index') ? json['index'] : 0;
        this.claimed(json.hasOwnProperty('claimed') ? json['claimed'] : false);
        this.initial(json.hasOwnProperty('initial') ? json['initial'] : null);
        this.notified = json.hasOwnProperty('notified') ? json['notified'] : false;
    }
}
/// <reference path="../Quest.ts" />
class DefeatPokemonsQuest extends Quest {
    constructor(killsNeeded, reward, route, region) {
        super(killsNeeded, reward);
        this.route = route;
        this.region = region;
        this.focus = App.game.statistics.routeKills[this.region][this.route];
    }
    static generateData() {
        const amount = SeededRand.intBetween(100, 500);
        const region = SeededRand.intBetween(0, player.highestRegion());
        // Only use unlocked routes
        const possibleRoutes = Routes.getRoutesByRegion(region).map(route => route.number).filter(route => MapHelper.accessToRoute(route, region));
        // If no routes unlocked in this region, just use the first route of the region
        const route = possibleRoutes.length ? SeededRand.fromArray(possibleRoutes) : GameConstants.StartingRoutes[region];
        const reward = this.calcReward(amount, route, region);
        return [amount, reward, route, region];
    }
    static calcReward(killsNeeded, route, region) {
        const attacksPerPokemon = Math.ceil(Math.min(4, PokemonFactory.routeHealth(route, region) / Math.max(1, App.game.party.pokemonAttackObservable())));
        const reward = Math.ceil(GameConstants.DEFEAT_POKEMONS_BASE_REWARD * attacksPerPokemon * killsNeeded);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Defeat ${this.amount.toLocaleString('en-US')} Digimon on ${Routes.getName(this.route, this.region)}.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.route);
        json['data'].push(this.region);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class CapturePokemonsQuest extends Quest {
    constructor(capturesNeeded, reward) {
        super(capturesNeeded, reward);
        this.focus = App.game.statistics.totalDigimonScanned;
    }
    static generateData() {
        const amount = SeededRand.intBetween(100, 500);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = amount * GameConstants.CAPTURE_POKEMONS_BASE_REWARD;
        return super.randomizeReward(reward);
    }
    get description() {
        return `Scan ${this.amount.toLocaleString('en-US')} Digimon.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class CapturePokemonTypesQuest extends Quest {
    constructor(capturesNeeded, reward, type) {
        super(capturesNeeded, reward);
        this.type = type;
        this.focus = ko.pureComputed(() => pokemonMap.filter(p => p.type.includes(this.type)).map(p => App.game.statistics.digimonScanned[p.id]()).reduce((a, b) => a + b, 0));
    }
    static typeWeights() {
        const types = new Array(GameHelper.enumLength(PokemonType) - 1).fill(0);
        Routes.regionRoutes.filter(r => r.isUnlocked()).forEach(r => {
            Object.values(r.pokemon).flat().forEach(p => {
                const pokemon = pokemonMap[p];
                if (!pokemon || pokemon.id <= 0) {
                    return;
                }
                pokemon.type.forEach(t => types[t]++);
            });
        });
        const max = Math.max(...types);
        // Calculate the weight
        return types.map(v => ((-v + max) / max) * (this.maxWeight - this.minWeight))
            // map the type and rounded values
            .map((weight, type) => ({ type, weight: Math.round((weight + this.minWeight) * 100) / 100 }));
    }
    static generateData() {
        const amount = SeededRand.intBetween(50, 250);
        this.weights = this.typeWeights();
        const type = SeededRand.fromArray(this.weights.filter(w => w.weight < this.maxWeight).map(w => w.type));
        const reward = this.calcReward(amount, type);
        return [amount, reward, type];
    }
    static calcReward(amount, type) {
        const reward = amount * GameConstants.CAPTURE_POKEMONS_BASE_REWARD * this.weights[type].weight;
        return super.randomizeReward(reward);
    }
    get description() {
        return `Scan ${this.amount.toLocaleString('en-US')} ${PokemonType[this.type]} type Digimon.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.type);
        return json;
    }
}
CapturePokemonTypesQuest.maxWeight = 4;
CapturePokemonTypesQuest.minWeight = 1.2;
CapturePokemonTypesQuest.weights = [];
/// <reference path="../Quest.ts" />
class GainFarmPointsQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalFarmPoints;
    }
    static canComplete() {
        return App.game.farming.canAccess();
    }
    static generateData() {
        const amount = SeededRand.intBetween(500, 5000);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.GAIN_FARM_POINTS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Gain ${this.amount.toLocaleString('en-US')} Farm Points.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class GainMoneyQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalMoney;
    }
    static generateData() {
        const amount = SeededRand.intBetween(20000, 60000);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.GAIN_MONEY_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Gain ${this.amount.toLocaleString('en-US')} DigiDollars.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class GainTokensQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalDungeonTokens;
    }
    static generateData() {
        const amount = SeededRand.intBetween(1000, 8000);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.GAIN_TOKENS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Gain ${this.amount.toLocaleString('en-US')} Scan Coins.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class GainGemsQuest extends Quest {
    constructor(amount, reward, type) {
        super(amount, reward);
        this.type = type;
        this.focus = App.game.statistics.chipsGained[this.type];
    }
    static canComplete() {
        return App.game.gems.canAccess();
    }
    static typeWeights() {
        const types = new Array(GameHelper.enumLength(PokemonType) - 1).fill(0);
        Routes.regionRoutes.filter(r => r.isUnlocked()).forEach(r => {
            Object.values(r.pokemon).flat().forEach(p => {
                const pokemon = pokemonMap[p];
                if (!pokemon || pokemon.id <= 0) {
                    return;
                }
                pokemon.type.forEach(t => types[t]++);
            });
        });
        const max = Math.max(...types);
        // Calculate the weight
        return types.map(v => ((-v + max) / max) * (this.maxWeight - this.minWeight))
            // map the type and rounded values
            .map((weight, type) => ({ type, weight: Math.round((weight + this.minWeight) * 100) / 100 }));
    }
    static generateData() {
        const amount = SeededRand.intBetween(200, 600);
        this.weights = this.typeWeights();
        const type = SeededRand.fromArray(this.weights.filter(w => w.weight < this.maxWeight).map(w => w.type));
        const reward = this.calcReward(type, amount);
        return [amount, reward, type];
    }
    static calcReward(type, amount) {
        const reward = amount * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * this.weights[type].weight;
        return super.randomizeReward(reward);
    }
    get description() {
        return `Gain ${this.amount.toLocaleString('en-US')} ${PokemonType[this.type]} chips.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.type);
        return json;
    }
}
GainGemsQuest.maxWeight = 4;
GainGemsQuest.minWeight = 1.2;
GainGemsQuest.weights = [];
/// <reference path="../Quest.ts" />
class HatchEggsQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalDigimonHatched;
    }
    static canComplete() {
        return App.game.breeding.canAccess();
    }
    static generateData() {
        const amount = SeededRand.intBetween(1, 30);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.HATCH_EGGS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Hatch ${this.amount.toLocaleString('en-US')} Eggs.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class MineLayersQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.junkyardLayersMined;
    }
    static canComplete() {
        return App.game.underground.canAccess();
    }
    static generateData() {
        const amount = SeededRand.intBetween(1, 3);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.MINE_LAYERS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        const suffix = this.amount > 1 ? 's' : '';
        return `Dig ${this.amount.toLocaleString('en-US')} layer${suffix} in the Junkyard.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class MineItemsQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.junkyardItemsFound;
    }
    static canComplete() {
        return App.game.underground.canAccess();
    }
    static generateData() {
        const amount = SeededRand.intBetween(3, 15);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.MINE_ITEMS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        const suffix = this.amount > 1 ? 's' : '';
        return `Dig ${this.amount.toLocaleString('en-US')} item${suffix} in the Junkyard.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class CatchShiniesQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalDotDigimonScanned;
    }
    static generateData() {
        const amount = 1;
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.SHINY_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Scan ${this.amount.toLocaleString('en-US')} dot Digimon.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class DefeatGymQuest extends Quest {
    constructor(amount, reward, gymTown) {
        super(amount, reward);
        this.gymTown = gymTown;
        this.region = GameConstants.getGymRegion(this.gymTown);
        this.focus = App.game.statistics.challengesDefeated[GameConstants.getGymIndex(this.gymTown)];
    }
    static generateData() {
        const amount = SeededRand.intBetween(5, 20);
        const region = SeededRand.intBetween(0, player.highestRegion());
        // Only use unlocked gyms
        const possibleGyms = GameConstants.RegionGyms[region].filter(gymTown => GymList[gymTown].flags.quest && GymList[gymTown].isUnlocked());
        // If no gyms unlocked in this region, just use the first gym of the region
        const gymTown = possibleGyms.length ? SeededRand.fromArray(possibleGyms) : GameConstants.RegionGyms[region][0];
        const reward = this.calcReward(amount, gymTown);
        return [amount, reward, gymTown];
    }
    static calcReward(amount, gymTown) {
        const gym = GymList[gymTown];
        if (gym instanceof Champion) {
            gym.setPokemon(player.starter());
        }
        const playerDamage = App.game.party.pokemonAttackObservable();
        let attacksToWin = 0;
        for (const pokemon of gym.pokemons) {
            attacksToWin += Math.ceil(Math.min(4, pokemon.maxHealth / Math.max(1, playerDamage)));
        }
        const reward = Math.min(5000, Math.ceil(attacksToWin * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * GameConstants.ACTIVE_QUEST_MULTIPLIER * amount));
        return super.randomizeReward(reward);
    }
    get description() {
        const desc = [];
        desc.push(`Defeat the ${this.gymTown}`);
        if (!this.gymTown.includes('Elite') && !this.gymTown.includes('Champion')) {
            desc.push('tamer');
        }
        desc.push(`from ${GameConstants.camelCaseToString(GameConstants.Region[this.region])}`);
        desc.push(`${this.amount.toLocaleString('en-US')} times.`);
        return desc.join(' ');
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.gymTown);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class DefeatDungeonQuest extends Quest {
    constructor(amount, reward, dungeon) {
        super(amount, reward);
        this.dungeon = dungeon;
        this.region = GameConstants.getDungeonRegion(this.dungeon);
        this.focus = App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(this.dungeon)];
    }
    static generateData() {
        // Allow up to highest region
        const amount = SeededRand.intBetween(5, 20);
        const region = SeededRand.intBetween(0, player.highestRegion());
        // Only use unlocked dungeons
        const possibleDungeons = GameConstants.RegionDungeons[region].filter(dungeon => TownList[dungeon].isUnlocked());
        // If no dungeons unlocked in this region, just use the first dungeon of the region
        const dungeon = possibleDungeons.length ? SeededRand.fromArray(possibleDungeons) : GameConstants.RegionDungeons[region][0];
        const reward = this.calcReward(amount, dungeon);
        return [amount, reward, dungeon];
    }
    static calcReward(amount, dungeon) {
        const playerDamage = App.game.party.calculateClickAttack() + (App.game.party.pokemonAttackObservable() / GameConstants.QUEST_CLICKS_PER_SECOND);
        const attacksToDefeatPokemon = Math.ceil(Math.min(4, dungeonList[dungeon].baseHealth / playerDamage));
        const averageTilesToBoss = 13;
        const attacksToCompleteDungeon = attacksToDefeatPokemon * averageTilesToBoss;
        const completeDungeonsReward = attacksToCompleteDungeon * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * GameConstants.ACTIVE_QUEST_MULTIPLIER * amount;
        let region, route;
        for (region = player.highestRegion(); region >= 0; region--) {
            route = QuestHelper.highestOneShotRoute(region); // returns 0 if no routes in this region can be one shot
            if (route) {
                break;
            }
        }
        if (!route) {
            route = 1, region = GameConstants.Region.adventure01;
        }
        const tokens = PokemonFactory.routeDungeonTokens(route, region);
        const routeKillsPerDungeon = dungeonList[dungeon].tokenCost / tokens;
        const collectTokensReward = routeKillsPerDungeon * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * amount;
        const reward = Math.min(5000, Math.ceil(completeDungeonsReward + collectTokensReward));
        return super.randomizeReward(reward);
    }
    get description() {
        return `Defeat the ${this.dungeon} dungeon from ${GameConstants.camelCaseToString(GameConstants.Region[this.region])} ${this.amount.toLocaleString('en-US')} times.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.dungeon);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class UsePokeballQuest extends Quest {
    constructor(amount, reward, pokeball) {
        super(amount, reward);
        this.pokeball = pokeball;
        this.focus = App.game.statistics.digiscansUsed[this.pokeball];
    }
    static generateData() {
        const possiblePokeballs = [GameConstants.Pokeball.Pokeball, GameConstants.Pokeball.Greatball, GameConstants.Pokeball.Ultraball];
        const pokeball = SeededRand.fromArray(possiblePokeballs);
        const amount = SeededRand.intBetween(100, 500);
        const reward = this.calcReward(amount, pokeball);
        return [amount, reward, pokeball];
    }
    static calcReward(amount, pokeball) {
        // Reward for Greatballs is 4x Pokeballs, Ultraballs are 9x Pokeballs
        const reward = Math.ceil(amount * (pokeball + 1) * (pokeball + 1) * GameConstants.DEFEAT_POKEMONS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        if (this.pokeball === GameConstants.Pokeball.Pokeball) {
            var displayname = "Digiscan";
        }
        else if (this.pokeball === GameConstants.Pokeball.Greatball) {
            displayname = "Greatscan";
        }
        else {
            displayname = "Ultrascan";
        }
        return `Use ${this.amount.toLocaleString('en-US')} ${displayname}s.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.pokeball);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class UseOakItemQuest extends Quest {
    constructor(amount, reward, item) {
        super(amount, reward);
        this.item = item;
        this.focus = App.game.statistics.hinaItemUses[this.item];
    }
    static canComplete() {
        return App.game.oakItems.canAccess() && !App.game.challenges.list.disableOakItems.active();
    }
    static generateData() {
        const possibleItems = [
            OakItemType.Memory_Stick,
            OakItemType.Topaz,
            // OakItemType.Fancy_Cursor,
            OakItemType.Millionaire_USB,
        ];
        const oakItem = SeededRand.fromArray(possibleItems);
        const amount = SeededRand.intBetween(100, 500);
        const reward = this.calcReward(amount, oakItem);
        return [amount, reward, oakItem];
    }
    static calcReward(amount, item) {
        const reward = amount * GameConstants.USE_OAK_ITEM_BASE_REWARD;
        return super.randomizeReward(reward);
    }
    get description() {
        const desc = [];
        desc.push(`Equip the ${GameConstants.humanifyString(OakItemType[this.item])} and`);
        if (this.item == OakItemType.Memory_Stick) {
            desc.push(`scan ${this.amount.toLocaleString('en-US')} wild Digimon.`);
        }
        else if (this.item == OakItemType.Topaz) {
            desc.push(`earn DigiDollars ${this.amount.toLocaleString('en-US')} times.`);
        }
        else if (this.item == OakItemType.Millionaire_USB) {
            desc.push(`defeat ${this.amount.toLocaleString('en-US')} Digimon.`);
        }
        else {
            desc.push(`gain it\'s benefit ${this.amount.toLocaleString('en-US')} times.`);
        }
        return desc.join(' ');
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.item);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class HarvestBerriesQuest extends Quest {
    constructor(amount, reward, berryType) {
        super(amount, reward);
        this.berryType = berryType;
        this.focus = App.game.statistics.disksBurned[this.berryType];
    }
    static canComplete() {
        return App.game.farming.canAccess();
    }
    static generateData() {
        // Getting available Berries (always include Gen 1 Berries)
        const availableBerries = App.game.farming.berryData.filter(berry => App.game.farming.unlockedBerries[berry.type]() || berry.type < BerryType.Games);
        const berry = SeededRand.fromArray(availableBerries);
        const maxAmt = Math.min(300, Math.ceil(432000 / berry.growthTime[3]));
        const minAmt = Math.min(10, Math.ceil(maxAmt / 2));
        const amount = SeededRand.intBetween(minAmt, maxAmt);
        const reward = this.calcReward(amount, berry.type);
        return [amount, reward, berry.type];
    }
    static calcReward(amount, berryType) {
        const harvestTime = App.game.farming.berryData[berryType].growthTime[3];
        const harvestAmt = Math.max(4, Math.ceil(App.game.farming.berryData[berryType].harvestAmount));
        const plantAmt = amount / harvestAmt;
        const fieldAmt = plantAmt / App.game.farming.plotList.length;
        const reward = Math.ceil(fieldAmt * Math.pow(harvestTime, .7) * 10);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Burn ${this.amount.toLocaleString('en-US')} ${BerryType[this.berryType]} disks at the shop.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.berryType);
        return json;
    }
}
/// <reference path="./questTypes/DefeatPokemonsQuest.ts" />
/// <reference path="./questTypes/CapturePokemonsQuest.ts" />
/// <reference path="./questTypes/CapturePokemonTypesQuest.ts" />
/// <reference path="./questTypes/GainFarmPointsQuest.ts" />
/// <reference path="./questTypes/GainMoneyQuest.ts" />
/// <reference path="./questTypes/GainTokensQuest.ts" />
/// <reference path="./questTypes/GainGemsQuest.ts" />
/// <reference path="./questTypes/HatchEggsQuest.ts" />
/// <reference path="./questTypes/MineLayersQuest.ts" />
/// <reference path="./questTypes/MineItemsQuest.ts" />
/// <reference path="./questTypes/CatchShiniesQuest.ts" />
/// <reference path="./questTypes/DefeatGymQuest.ts" />
/// <reference path="./questTypes/DefeatDungeonQuest.ts" />
/// <reference path="./questTypes/UsePokeballQuest.ts" />
/// <reference path="./questTypes/UseOakItemQuest.ts" />
/// <reference path="./questTypes/HarvestBerriesQuest.ts" />
class QuestHelper {
    static createQuest(questType, data) {
        if (!this.quests[questType]) {
            console.error(`Error: Invalid quest type - ${questType}.`);
            return;
        }
        // Creating randomly generated quest
        if (!data) {
            const QuestClass = this.quests[questType];
            return new QuestClass(...QuestClass.generateData());
        }
        return new this.quests[questType](...data);
    }
    static generateQuestList(seed, amount = 10, uniqueQuestTypes = true) {
        const quests = [];
        SeededRand.seed(+seed);
        // Only use unlocked quest types
        const QuestTypes = new Set(Object.entries(this.quests).filter(([key, quest]) => quest.canComplete()).map(([key]) => key));
        while (quests.length < amount && QuestTypes.size) {
            const questType = SeededRand.fromArray(Array.from(QuestTypes));
            if (uniqueQuestTypes) {
                QuestTypes.delete(questType);
            }
            const quest = this.createQuest(questType);
            quest.index = quests.length;
            quests.push(quest);
        }
        return quests;
    }
    static highestOneShotRoute(region) {
        const routes = Routes.getRoutesByRegion(region).map(r => r.number);
        const first = Math.min(...routes);
        const last = Math.max(...routes);
        const attack = Math.max(1, App.game.party.calculatePokemonAttack(PokemonType.None, PokemonType.None, false, region, true, false, WeatherType.Clear));
        for (let route = last; route >= first; route--) {
            if (PokemonFactory.routeHealth(route, region) < attack) {
                return route;
            }
        }
        return 0;
    }
}
QuestHelper.quests = {
    DefeatPokemonsQuest,
    CapturePokemonsQuest,
    CapturePokemonTypesQuest,
    GainFarmPointsQuest,
    GainMoneyQuest,
    GainTokensQuest,
    GainGemsQuest,
    HatchEggsQuest,
    MineLayersQuest,
    MineItemsQuest,
    CatchShiniesQuest,
    DefeatGymQuest,
    DefeatDungeonQuest,
    UsePokeballQuest,
    UseOakItemQuest,
    HarvestBerriesQuest,
};
var QuestLineState;
(function (QuestLineState) {
    QuestLineState[QuestLineState["inactive"] = 0] = "inactive";
    QuestLineState[QuestLineState["started"] = 1] = "started";
    QuestLineState[QuestLineState["ended"] = 2] = "ended";
})(QuestLineState || (QuestLineState = {}));
class QuestLine {
    constructor(name, description) {
        this.state = ko.observable(QuestLineState.inactive).extend({ numeric: 0 });
        this.name = name;
        this.description = description;
        this.quests = ko.observableArray();
        this.totalQuests = 0;
        this.curQuest = ko.pureComputed(() => {
            const acc = 0;
            return this.quests().map((quest) => {
                return +quest.isCompleted();
            })
                .reduce((acc, iscompleted) => {
                return acc + iscompleted;
            }, 0);
        });
        this.curQuestInitial = ko.observable();
        this.curQuestInitial.equalityComparer = () => {
            return false;
        }; //Always update subscriptions, even if same data pushed in
        this.curQuestObject = ko.pureComputed(() => {
            this.quests(); //register dependency on this computed so it will update
            if (this.totalQuests > 0 && this.curQuest() < this.totalQuests) {
                return this.quests()[this.curQuest()];
            }
            else {
                return { progress: () => {
                        return 0;
                    }, progressText: () => {
                        return '';
                    } };
            }
        });
        this.autoBegin = this.curQuest.subscribe((num) => {
            if (this.curQuest() < this.totalQuests) {
                if (this.curQuestObject().initial() == null) {
                    setTimeout(() => {
                        this.beginQuest(this.curQuest());
                    }, 2000);
                }
            }
            else {
                this.state(QuestLineState.ended);
            }
        });
    }
    addQuest(quest) {
        this.totalQuests++;
        quest.index = this.totalQuests;
        quest.inQuestLine = true;
        quest.createAutoCompleter();
        this.quests.push(quest);
    }
    beginQuest(index = 0, initial) {
        const quest = this.quests()[index];
        if (initial != undefined) {
            quest.initial(initial);
        }
        else {
            quest.begin();
        }
        quest.onLoad();
        this.curQuestInitial(quest.initial());
        this.state(QuestLineState.started);
    }
    resumeAt(index, initial) {
        if (initial != undefined) {
            for (let i = 0; i < Math.min(index, this.totalQuests); i++) {
                this.quests()[i].autoCompleter.dispose();
                this.quests()[i].complete();
            }
            if (index < this.totalQuests) {
                this.beginQuest(index, initial);
            }
        }
        else {
            this.beginQuest(0);
        }
    }
    toJSON() {
        return {
            state: this.state(),
            name: this.name,
            quest: this.curQuest(),
            initial: this.curQuestInitial(),
        };
    }
}
/**
 * Static class used to handle Quest Lines
 */
class QuestLineHelper {
    static createTutorial() {
        const tutorial = new QuestLine('Tutorial Quests', 'A short set of quests to get you going');
        //Defeat Starter
        const defeatStarter = new CustomQuest(1, 10, 'Defeat the Digimon. Click to deal damage', () => App.game.statistics.totalDigimonDefeated(), 0 // Initial of 0 so it auto completes if bugged
        );
        tutorial.addQuest(defeatStarter);
        //Capture 1 pokemon
        const captureOne = new CustomQuest(1, 20, 'Scan 1 Digimon. When you defeat a Digimon, a Scan module is used. When the Scanner reaches 100% the digimon will join your party.', () => App.game.statistics.totalDigimonScanned(), 1 // Initial of 1 so it auto completes if bugged
        );
        tutorial.addQuest(captureOne);
        //Kill 5 on route 2
        const routeTwo = new CustomQuest(10, 20, 'Defeat 10 Digimon on route 2. Click route 2 on the map to move there and begin fighting.', () => App.game.statistics.routeKills[GameConstants.Region.adventure01]['2'](), 0 // Initial of 0 so it auto completes if bugged
        );
        tutorial.addQuest(routeTwo);
        //Buy pokeballs
        const buyPokeballs = new CustomQuest(10, 50, 'Buy 10 Basic Scanners. You can find these in the Primary Village Shop.', () => App.game.statistics.digiscansBought[GameConstants.Pokeball.Pokeball](), 0 // Initial of 0 so it auto completes if bugged
        );
        tutorial.addQuest(buyPokeballs);
        //Buy Dungeon ticket
        const buyDungeonTicket = new CustomQuest(1, 50, 'Buy the Dungeon ticket from the Primary Village Shop.', () => +App.game.keyItems.hasKeyItem(KeyItemType.Dungeon_ticket), 0);
        tutorial.addQuest(buyDungeonTicket);
        //Clear Viridian Forest
        const clearViridianForest = new CustomQuest(1, 50, 'Gather 50 Scan Coins by (re)scaning Digimon, then clear the Coelamon Beach dungeon.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Coelamon Beach')](), 0);
        tutorial.addQuest(clearViridianForest);
        //Defeat Pewter Gym
        const pewterReward = () => {
            Notifier.notify({ message: 'Tutorial completed!', type: NotificationConstants.NotificationOption.success });
            Information.show({
                steps: [
                    {
                        element: document.getElementById('questDisplayContainer'),
                        intro: 'Click "List" to see the current quests that can be completed for <img title="Farm points" src="assets/images/currency/farmPoint.svg" height="25px"> Farm Points.',
                    },
                    {
                        element: document.getElementById('startMenu'),
                        intro: 'See the keepsakes you\'ve earned in the Keepsake Case. Keepsakes influence the max level of your Digimon.',
                    },
                ],
            });
        };
        const pewter = new CustomQuest(1, pewterReward, 'Gather 50 Scan Coins by (re)scaning Digimon, then clear the Coelamon Beach dungeon.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Coelamon Beach')](), 0);
        tutorial.addQuest(pewter);
        App.game.quests.questLines().push(tutorial);
    }
    static createDeoxysQuestLine() {
        const deoxysQuestLine = new QuestLine('Mystery of Deoxys', 'Discover the mystery of Deoxys');
        // Defeat 50 Pokemon on route 129
        const route129 = new DefeatPokemonsQuest(50, 0, 129, GameConstants.Region.hoenn);
        deoxysQuestLine.addQuest(route129);
        // Defeat 500 Virus type Pokemon
        const psychicGemReward = () => {
            App.game.gems.gainGems(500, PokemonType.Virus);
            Notifier.notify({
                title: deoxysQuestLine.name,
                message: 'You have gained 500 Virus chips',
                type: NotificationConstants.NotificationOption.success,
            });
        };
        const defeatPsychic = new CustomQuest(500, psychicGemReward, 'Defeat 500 Virus type Digimon', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Virus)).map(p => App.game.statistics.digimonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        });
        deoxysQuestLine.addQuest(defeatPsychic);
        // Capture 200 Virus type Pokemon
        const mindPlateReward = () => {
            const mindPlate = UndergroundItem.list.find(item => item.name == 'Trojan Plate');
            if (!mindPlate) {
                return console.error('Unable to find item Trojan Plate');
            }
            Underground.gainMineItem(mindPlate.id, 20);
            Notifier.notify({
                title: deoxysQuestLine.name,
                message: `You have gained 20 ${mindPlate.name}s`,
                type: NotificationConstants.NotificationOption.success,
            });
        };
        const catchPsychic = new CustomQuest(200, mindPlateReward, 'Capture 200 Virus type Digimon', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Virus)).map(p => App.game.statistics.digimonScanned[p.id]()).reduce((a, b) => a + b, 0);
        });
        deoxysQuestLine.addQuest(catchPsychic);
        // Reach stage 100 in battle frontier
        const reachStage100Reward = () => {
            Notifier.notify({
                title: deoxysQuestLine.name,
                message: 'Quest line completed!\n<i>You have uncovered the Mystery of Deoxys</i>',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const reachStage100 = new CustomQuest(100, reachStage100Reward, 'Defeat stage 100 in the Battle Frontier', App.game.statistics.colosseumHighestStageCompleted, 0);
        deoxysQuestLine.addQuest(reachStage100);
        App.game.quests.questLines().push(deoxysQuestLine);
    }
    static createUndergroundQuestLine() {
        const undergroundQuestLine = new QuestLine('Mining Expedition', 'Explore the underground');
        //Buy Explorer Kit (no reward)
        const buyExplorerKit = new CustomQuest(1, () => { }, 'Buy the Explorer Kit from Whamon\'s Gulf Shop', () => +App.game.keyItems.hasKeyItem(KeyItemType.Explorer_kit), 0);
        undergroundQuestLine.addQuest(buyExplorerKit);
        // Mine 5 layers in the Unerground
        const oldAmberReward = () => {
            // Gain an Old Amber
            const oldAmber = UndergroundItem.list.find(item => item.name == 'Old Amber');
            if (!oldAmber) {
                return console.error('Unable to find item Old Amber');
            }
            Underground.gainMineItem(oldAmber.id);
            Notifier.notify({
                title: undergroundQuestLine.name,
                message: 'You have gained an Old Amber fossil!\n<i>You can breed this in the hatchery.</i>',
                type: NotificationConstants.NotificationOption.success,
                timeout: GameConstants.MINUTE,
            });
        };
        const mineLayers = new CustomQuest(5, oldAmberReward, 'Dig 5 layers in the Junkyard', App.game.statistics.junkyardLayersMined);
        undergroundQuestLine.addQuest(mineLayers);
        App.game.quests.questLines().push(undergroundQuestLine);
    }
    static createVivillonQuestLine() {
        const vivillonQuestLine = new QuestLine('The Great Vivillon Hunt!', 'Discover the beauty of Vivillon');
        const createVivillonQuest = (type, vivillon, dungeons, hint) => {
            // Capture 100 Water type Pokemon
            const catchType = new CustomQuest(100, undefined, `Capture 100 ${PokemonType[type]} type Pokémon`, () => {
                return pokemonMap.filter(p => p.type.includes(type)).map(p => App.game.statistics.digimonScanned[p.id]()).reduce((a, b) => a + b, 0);
            });
            vivillonQuestLine.addQuest(catchType);
            // Capture Vivillon in a dungeon
            const vivillonAdd = () => {
                dungeons.forEach(dungeon => {
                    dungeonList[dungeon].bossList.push(new DungeonBossPokemon(vivillon, 93659450, 80));
                });
                Notifier.notify({
                    title: vivillonQuestLine.name,
                    message: `A Vivillon is hiding somewhere.\n${hint}`,
                    type: NotificationConstants.NotificationOption.info,
                });
            };
            const vivillonRemove = () => {
                dungeons.forEach(dungeon => {
                    dungeonList[dungeon].bossList = dungeonList[dungeon].bossList.filter(boss => boss.name != vivillon);
                });
                Notifier.notify({
                    title: vivillonQuestLine.name,
                    message: `You caught the rare ${vivillon}`,
                    type: NotificationConstants.NotificationOption.success,
                });
            };
            const catchVivillon = new CustomQuest(1, vivillonRemove, `Find and capture the rare Vivillon!\nHint: ${hint}`, App.game.statistics.digimonScanned[pokemonMap[vivillon].id], undefined, vivillonAdd);
            vivillonQuestLine.addQuest(catchVivillon);
        };
        createVivillonQuest(PokemonType.Water, 'Burpmon', ['Lake Verity', 'Lake Valor', 'Lake Acuity'], 'It has been spotted at some Lakes.');
        createVivillonQuest(PokemonType.Virus, 'Burpmon', ['Cerulean Cave'], 'It\'s surrounded by strong Pokémon.');
        createVivillonQuest(PokemonType.Free, 'Burpmon', ['Dark Cave'], 'It\'s hiding at a dark place.');
        createVivillonQuest(PokemonType.Neutral, 'Burpmon', ['Pokéball Factory'], 'It flew into a factory.');
        createVivillonQuest(PokemonType.Fire, 'Burpmon', ['Mt. Chimney Crater'], 'It seems to like hot places.');
        createVivillonQuest(PokemonType.Vaccine, 'Burpmon', ['Sprout Tower'], 'It\'s sitting on a swaying pillar.');
        createVivillonQuest(PokemonType.Light, 'Burpmon', ['Dreamyard'], 'It\'s flying around an overgrown place full of dreams.');
        createVivillonQuest(PokemonType.Electric, 'Burpmon', ['New Mauville'], 'It\'s currently in a City full of Electric type Pokémon.');
        createVivillonQuest(PokemonType.Data, 'Burpmon', ['Eterna Forest'], 'It hides in a dark Forest.');
        createVivillonQuest(PokemonType.Wind, 'Burpmon', ['Sky Pillar'], 'It\'s high up in the sky.');
        createVivillonQuest(PokemonType.Earth, 'Burpmon', ['Relic Castle'], 'It got lost in the desert sand.');
        createVivillonQuest(PokemonType.Plant, 'Burpmon', ['Flower Paradise'], 'It only shows up amongst the most beautiful flowers.');
        createVivillonQuest(PokemonType.Dark, 'Burpmon', ['Dragonspiral Tower'], 'It\'s surrounded by dragons.');
        // Capture 200 Normal type Pokemon
        const catchNormal = new CustomQuest(200, undefined, 'Capture 200 Neutral type Digimon', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Neutral)).map(p => App.game.statistics.digimonScanned[p.id]()).reduce((a, b) => a + b, 0);
        });
        vivillonQuestLine.addQuest(catchNormal);
        // Capture Vivillon (Pokéball)
        const viviBallAdd = () => {
            BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(666, 'Vivillon (Pokéball)'));
            Notifier.notify({
                title: vivillonQuestLine.name,
                message: 'A Vivillon is hiding somewhere.\nOnly the strongest Challengers can reach it.',
                type: NotificationConstants.NotificationOption.success,
            });
        };
        const viviBalldone = () => {
            Notifier.notify({
                title: vivillonQuestLine.name,
                message: 'You caught the last rare Vivillon (Pokéball).\nCongratulations!',
                type: NotificationConstants.NotificationOption.success,
            });
        };
        const catchBall = new CustomQuest(1, viviBalldone, 'Find and capture the rare Vivillon!\nHint: Only the strongest Challengers can reach it.', App.game.statistics.digimonScanned[666.01], undefined, viviBallAdd);
        vivillonQuestLine.addQuest(catchBall);
        // Add quest to quest line
        App.game.quests.questLines().push(vivillonQuestLine);
    }
    static createRocketJohtoQuestLine() {
        const rocketJohtoQuestLine = new QuestLine('Team Rocket Again', 'Team Rocket is up to no good again!');
        const clearTeamRocketHideout = new CustomQuest(1, 0, 'Clear the Team Rockets Hideout dungeon in Mahogany Town', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Team Rockets Hideout')]());
        rocketJohtoQuestLine.addQuest(clearTeamRocketHideout);
        const radioTowerReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: rocketJohtoQuestLine.name,
                message: 'The grateful radio director gave you a Masterball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearRadioTower = new CustomQuest(1, radioTowerReward, 'Clear the Radio Tower dungeon in Goldenrod City', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Radio Tower')]());
        rocketJohtoQuestLine.addQuest(clearRadioTower);
        App.game.quests.questLines().push(rocketJohtoQuestLine);
    }
    static createAquaMagmaHoennQuestLine() {
        const aquaMagmaHoennQuestLine = new QuestLine('Land vs Water', 'Put a stop to the schemes of Team Aqua and Team Magma');
        const clearMtChimney = new CustomQuest(1, 0, 'Stop Team Magma at Mt. Chimney Crater', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Mt. Chimney Crater')]());
        aquaMagmaHoennQuestLine.addQuest(clearMtChimney);
        const clearWeatherInstitute = new CustomQuest(1, 0, 'Stop Team Aqua at the Weather Institute', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Weather Institute')]());
        aquaMagmaHoennQuestLine.addQuest(clearWeatherInstitute);
        const clearMagmaHideout = new CustomQuest(1, 0, 'Raid the Team Magma hideout', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Magma Hideout')]());
        aquaMagmaHoennQuestLine.addQuest(clearMagmaHideout);
        const clearAquaHideout = new CustomQuest(1, 0, 'Raid the Team Aqua hideout', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Aqua Hideout')]());
        aquaMagmaHoennQuestLine.addQuest(clearAquaHideout);
        const seafloorCavernReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: aquaMagmaHoennQuestLine.name,
                message: 'You found a Masterball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearSeafloorCavern = new CustomQuest(1, seafloorCavernReward, 'Team Aqua\'s leader Archie escaped from their hideout. Find him in the Seafloor Cavern and put a stop to this once and for all', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Seafloor Cavern')]());
        aquaMagmaHoennQuestLine.addQuest(clearSeafloorCavern);
        App.game.quests.questLines().push(aquaMagmaHoennQuestLine);
    }
    static createPlasmaUnovaQuestLine() {
        const plasmaUnovaQuestLine = new QuestLine('Quest for the DNA Splicers', 'Prevent Team Plasma from using these dangerous SplNeutralrs');
        const clearOpelucidGym = new CustomQuest(1, 0, 'Defeat the Opelucid City gym leader to obtain the DNA Splicers', () => App.game.statistics.challengesDefeated[GameConstants.getGymIndex('Opelucid City')]());
        plasmaUnovaQuestLine.addQuest(clearOpelucidGym);
        const clearTeamPlasmaAssault = new CustomQuest(1, 0, 'Zinzolin has stolen the DNA Splicers and is assaulting the city with his army of grunts and shadows! Defend against the Team Plasma Assault in Opelucid City!', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Team Plasma Assault')]());
        plasmaUnovaQuestLine.addQuest(clearTeamPlasmaAssault);
        const clearPlasmaFrigate = new CustomQuest(1, 0, 'Zinzolin has fled the scene with the stolen DNA Splicers. Find and clear out the Plasma Frigate', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Plasma Frigate')]());
        plasmaUnovaQuestLine.addQuest(clearPlasmaFrigate);
        const giantChasmReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: plasmaUnovaQuestLine.name,
                message: 'You found a Masterball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearGiantChasm = new CustomQuest(1, giantChasmReward, 'Team Plasma\'s leader Ghetsis plans on using the DNA Splicers on Kyurem in Giant Chasm. Clear the dungeon to end his evil plans.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Giant Chasm')]());
        plasmaUnovaQuestLine.addQuest(clearGiantChasm);
        App.game.quests.questLines().push(plasmaUnovaQuestLine);
    }
    static createFindSurpriseTogepiForEasterQuestLine() {
        const findSurpriseTogepiForEasterQuestLine = new QuestLine('Togepi Egg Hunt', 'A strange Togepi has been spotted but cannot be found!');
        const surpriseTogepi = pokemonMap['Burpmon'];
        const togepiInKantoSetup = () => {
            dungeonList['Viridian Forest'].bossList.push(new DungeonTrainer('Egg Hunter', [new GymPokemon('Burpmon', 300000, 100)], { weight: 1, requirement: new GymBadgeRequirement(BadgeEnums.Apocalymon_Data) }));
            App.game.statistics.digimonDefeated[surpriseTogepi.id](0);
        };
        const afterDefeatingTogepiInKanto = () => {
            Notifier.notify({
                title: findSurpriseTogepiForEasterQuestLine.name,
                message: 'Seems like this was just an Easter egg after all..',
                image: `assets/images/profile/trainer-${App.game.profile.trainer() || 0}.png`,
                type: NotificationConstants.NotificationOption.info,
                timeout: 3e4,
            });
            dungeonList['Viridian Forest'].bossList = dungeonList['Viridian Forest'].bossList.filter(boss => boss.name != 'Egg Hunter');
        };
        const defeatTogepiInKanto = new CustomQuest(1, afterDefeatingTogepiInKanto, 'Erika reported that a strange Togepi has been seen around Kanto. Go look for it!', App.game.statistics.digimonDefeated[surpriseTogepi.id], 0, togepiInKantoSetup);
        findSurpriseTogepiForEasterQuestLine.addQuest(defeatTogepiInKanto);
        const togepiInJohtoSetup = () => {
            dungeonList['Ilex Forest'].bossList.push(new DungeonTrainer('Egg Hunter', [new GymPokemon('Burpmon', 900000, 100)], { weight: 1, requirement: new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion) }));
        };
        const afterDefeatingTogepiInJohto = () => {
            Notifier.notify({
                title: findSurpriseTogepiForEasterQuestLine.name,
                message: 'I swear that was a Togepi.. well maybe not.',
                image: `assets/images/profile/trainer-${App.game.profile.trainer() || 0}.png`,
                type: NotificationConstants.NotificationOption.info,
                timeout: 3e4,
            });
            dungeonList['Ilex Forest'].bossList = dungeonList['Ilex Forest'].bossList.filter(boss => boss.name != 'Egg Hunter');
        };
        const encounterSurpriseTogepiInJohto = new CustomQuest(1, afterDefeatingTogepiInJohto, 'Another report just came in, stating that they saw a strange egg boarding the ferry to Johto!', App.game.statistics.digimonDefeated[surpriseTogepi.id], 1, togepiInJohtoSetup);
        findSurpriseTogepiForEasterQuestLine.addQuest(encounterSurpriseTogepiInJohto);
        const togepiInHoennSetup = () => {
            dungeonList['Petalburg Woods'].bossList.push(new DungeonTrainer('Egg Hunter', [new GymPokemon('Burpmon', 2700000, 100)], { weight: 1, requirement: new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion) }));
        };
        const afterDefeatingTogepiInHoenn = () => {
            App.game.party.gainPokemonById(surpriseTogepi.id);
            Notifier.notify({
                title: findSurpriseTogepiForEasterQuestLine.name,
                message: 'You found the special Togepi!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
            dungeonList['Petalburg Woods'].bossList = dungeonList['Petalburg Woods'].bossList.filter(boss => boss.name != 'Egg Hunter');
        };
        const encounterTogepiInHoenn = new CustomQuest(1, afterDefeatingTogepiInHoenn, 'There is a big Egg Hunt going on in Petalburg Woods right now, maybe I should take a look?', App.game.statistics.digimonDefeated[surpriseTogepi.id], 2, togepiInHoennSetup);
        findSurpriseTogepiForEasterQuestLine.addQuest(encounterTogepiInHoenn);
        App.game.quests.questLines().push(findSurpriseTogepiForEasterQuestLine);
    }
    static createSkullAetherAlolaQuestLine() {
        const skullAetherAlolaQuestLine = new QuestLine('Eater of Light', 'A dangerous Pokémon from another world threatens the Alola region.');
        const clearUltraWormhole = new CustomQuest(1, 0, 'A strange creature has appeared in Aether Paradise. Make it go away. Clear the Ultra Wormhole.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Ultra Wormhole')]());
        skullAetherAlolaQuestLine.addQuest(clearUltraWormhole);
        const clearMalieGarden = new CustomQuest(1, 0, 'Team Skull are being annoying. Get rid of them. Clear the Malie Garden dungeon.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Malie Garden')]());
        skullAetherAlolaQuestLine.addQuest(clearMalieGarden);
        const clearPoTown = new CustomQuest(1, 0, 'Team Skull have stolen a child\'s Yungoos. Raid their base. Clear the Po Town dungeon.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Po Town')]());
        skullAetherAlolaQuestLine.addQuest(clearPoTown);
        const clearAetherFoundation = new CustomQuest(1, 0, 'Aether president Lusamine has recruited Team Skull in her own plan to stop the Eater of Light. She\'s an idiot. Stop her. Clear the Aether Foundation dungeon.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Aether Foundation')]());
        skullAetherAlolaQuestLine.addQuest(clearAetherFoundation);
        const UltraMegalopolisReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: skullAetherAlolaQuestLine.name,
                message: 'You found a Masterball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearUltraMegalopolis = new CustomQuest(1, UltraMegalopolisReward, 'Stop the Eater of Light from absorbing all light in Alola. Clear Ultra Megalopolis at the Altar of the Sunne and Moone.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Ultra Megalopolis')]());
        skullAetherAlolaQuestLine.addQuest(clearUltraMegalopolis);
        App.game.quests.questLines().push(skullAetherAlolaQuestLine);
    }
    static createGalacticSinnohQuestLine() {
        const galacticSinnohQuestLine = new QuestLine('A new world', 'End Team Galactic\'s plan to destroy the world and create a new one in its place.');
        const clearValleyWindworks = new CustomQuest(1, 0, 'Team Galactic is stealing energy. Clear Valley Windworks.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Valley Windworks')]());
        galacticSinnohQuestLine.addQuest(clearValleyWindworks);
        const clearTeamGalacticEternaBuilding = new CustomQuest(1, 0, 'Team Galactic is kidnapping Pokémon now. Clear Team Galactic Eterna Building in Eterna City.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Team Galactic Eterna Building')]());
        galacticSinnohQuestLine.addQuest(clearTeamGalacticEternaBuilding);
        const clearVeilstoneCityGym = new CustomQuest(1, 0, 'All is quiet. Team Galactic isn\'t doing anything. Guess they learned their lesson. Just keep traveling I guess. Clear the Veilstone City Gym.', () => App.game.statistics.challengesDefeated[GameConstants.getGymIndex('Veilstone City')]());
        galacticSinnohQuestLine.addQuest(clearVeilstoneCityGym);
        const clearCanalaveCityGym = new CustomQuest(1, 0, 'That sure is a strange building in Veilstone City. Oh well, no use worrying about that now. Adventure awaits! Clear the Canalave City Gym.', () => App.game.statistics.challengesDefeated[GameConstants.getGymIndex('Canalave City')]());
        galacticSinnohQuestLine.addQuest(clearCanalaveCityGym);
        const clearLakeValor = new CustomQuest(1, 0, 'A commotion was heard at Lake Valor. You must protect the lake\'s guardian! Clear Lake Valor.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Lake Valor')]());
        galacticSinnohQuestLine.addQuest(clearLakeValor);
        const clearLakeVerity = new CustomQuest(1, 0, 'Lake Valor\'s guardian was taken. Better try again at the next lake. Clear Lake Verity.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Lake Verity')]());
        galacticSinnohQuestLine.addQuest(clearLakeVerity);
        const clearLakeAcuity = new CustomQuest(1, 0, 'Lake Verity\'s guardian was also taken. Only one lake remains. Clear Lake Acuity.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Lake Acuity')]());
        galacticSinnohQuestLine.addQuest(clearLakeAcuity);
        const clearTeamGalacticHQ = new CustomQuest(1, 0, 'You failed to protect any of the lake guardians. They have been taken to Veilstone City. So that\'s what that strange building was. Clear Team Galactic HQ in Veilstone City.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Team Galactic HQ')]());
        galacticSinnohQuestLine.addQuest(clearTeamGalacticHQ);
        const clearSpearPillar = new CustomQuest(1, 0, 'The lake guardians have been rescued, but Cyrus has used them to forge the Red Chain. He is taking it to the top of Mount Coronet. Follow him! Clear Spear Pillar.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Spear Pillar')]());
        galacticSinnohQuestLine.addQuest(clearSpearPillar);
        const DistortionWorldReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: galacticSinnohQuestLine.name,
                message: 'You found a Masterball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearDistortionWorld = new CustomQuest(1, DistortionWorldReward, 'Cyrus planned to use the Red Chain to enslave Dialga and Palkia, but he accidentally angered Giratina and has been taken to its realm. A portal has appeared on top of Mount Coronet. Use it to follow Cyrus and end his threat once and for all. Clear Distortion World.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Distortion World')]());
        galacticSinnohQuestLine.addQuest(clearDistortionWorld);
        App.game.quests.questLines().push(galacticSinnohQuestLine);
    }
    static isQuestLineCompleted(name) {
        var _a;
        return ((_a = App.game.quests.getQuestLine(name)) === null || _a === void 0 ? void 0 : _a.state()) == QuestLineState.ended;
    }
    static loadQuestLines() {
        this.createTutorial();
        this.createDeoxysQuestLine();
        this.createUndergroundQuestLine();
        this.createVivillonQuestLine();
        this.createRocketJohtoQuestLine();
        this.createAquaMagmaHoennQuestLine();
        this.createPlasmaUnovaQuestLine();
        this.createSkullAetherAlolaQuestLine();
        this.createFindSurpriseTogepiForEasterQuestLine();
        this.createGalacticSinnohQuestLine();
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Saveable.d.ts" />
class Quests {
    constructor() {
        this.saveKey = 'quests';
        this.defaults = {
            xp: 0,
            refreshes: 0,
            freeRefresh: false,
        };
        this.xp = ko.observable(0).extend({ numeric: 0 });
        this.refreshes = ko.observable(0);
        this.lastRefresh = new Date();
        this.lastRefreshLevel = 0;
        this.lastRefreshRegion = 0;
        this.freeRefresh = ko.observable(false);
        this.questList = ko.observableArray();
        this.questLines = ko.observableArray();
        this.level = ko.pureComputed(() => {
            return this.xpToLevel(this.xp());
        });
        this.questSlots = ko.pureComputed(() => {
            // Minimum of 1, Maximum of 4
            return Math.min(4, Math.max(1, Math.floor(this.level() / 5)));
        });
        // Get current quests by status
        this.completedQuests = ko.pureComputed(() => {
            return this.questList().filter(quest => quest.isCompleted());
        });
        this.currentQuests = ko.pureComputed(() => {
            return this.questList().filter(quest => quest.inProgress() && !quest.claimed());
        });
        this.incompleteQuests = ko.pureComputed(() => {
            return this.questList().filter(quest => !quest.isCompleted());
        });
    }
    /**
     * Gets a quest line by name
     * @param name The quest line name
     */
    getQuestLine(name) {
        return this.questLines().find(ql => ql.name.toLowerCase() == name.toLowerCase());
    }
    beginQuest(index) {
        const quest = this.questList()[index];
        // Check if we can start a new quest, and the requested quest isn't started or completed
        if (this.canStartNewQuest() && quest && !quest.inProgress() && !quest.isCompleted()) {
            quest.begin();
        }
        else {
            Notifier.notify({
                message: 'You cannot start more quests',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    quitQuest(index, shouldConfirm = false) {
        // Check if we can quit this quest
        const quest = this.questList()[index];
        if (quest && quest.inProgress()) {
            quest.quit(shouldConfirm);
        }
        else {
            Notifier.notify({
                message: 'You cannot quit this quest',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    claimQuest(index) {
        // Check if we can claim this quest
        const quest = this.questList()[index];
        if (quest && quest.isCompleted() && !quest.claimed()) {
            quest.claim();
            // Once the player completes every available quest, refresh the list for free
            if (this.allQuestClaimed()) {
                this.refreshQuests(true);
                // Give player a free refresh
                this.freeRefresh(true);
            }
            // Track quest completion and total quest completed
            LogEvent('completed quest', 'quests', `level (${this.level()})`, App.game.statistics.questsCompleted());
        }
        else {
            console.trace('cannot claim quest..');
            Notifier.notify({
                message: 'You cannot claim this quest',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    addXP(amount) {
        if (isNaN(amount)) {
            return;
        }
        const currentLevel = this.level();
        GameHelper.incrementObservable(this.xp, amount);
        // Refresh the list each time a player levels up
        if (this.level() > currentLevel) {
            Notifier.notify({
                message: 'Your quest level has increased!\n<i>You have a free quest refresh.</i>',
                type: NotificationConstants.NotificationOption.success,
                timeout: 1e4,
                sound: NotificationConstants.NotificationSound.Quests.quest_level_increased,
            });
            this.freeRefresh(true);
            // Track when users gains a quest level and how long it took in seconds
            LogEvent('gain quest level', 'quests', `level (${this.level()})`, App.game.statistics.secondsPlayed());
        }
    }
    generateQuestList(date = new Date(), level = this.level()) {
        if (this.lastRefresh.toDateString() != date.toDateString()) {
            this.refreshes(0);
        }
        this.lastRefresh = date;
        this.lastRefreshLevel = level;
        this.lastRefreshRegion = player.highestRegion();
        this.currentQuests().forEach(quest => quest.quit());
        this.questList(QuestHelper.generateQuestList(this.generateSeed(date, level), GameConstants.QUESTS_PER_SET));
    }
    generateSeed(date = new Date(), level = this.level()) {
        return Number(level * (date.getFullYear() + this.refreshes() * 10) * date.getDate() + 1000 * date.getMonth() + 100000 * date.getDate());
    }
    refreshQuests(free = this.freeRefresh(), shouldConfirm = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (free || this.canAffordRefresh()) {
                if (!free) {
                    if (shouldConfirm && !(yield Notifier.confirm({
                        title: 'Refresh quest list',
                        message: 'Are you sure you want to refresh the quest list?',
                        type: NotificationConstants.NotificationOption.warning,
                        confirm: 'refresh',
                    }))) {
                        return;
                    }
                    App.game.wallet.loseAmount(this.getRefreshCost());
                }
                // Track when users refreshes the quest list and how much it cost
                LogEvent('refresh quest list', 'quests', `level (${this.level()})`, free ? 0 : this.getRefreshCost().amount);
                this.freeRefresh(false);
                GameHelper.incrementObservable(this.refreshes);
                this.generateQuestList();
            }
            else {
                Notifier.notify({
                    message: 'You cannot afford to do that!',
                    type: NotificationConstants.NotificationOption.danger,
                });
            }
        });
    }
    resetRefreshes() {
        this.refreshes(0);
    }
    canAffordRefresh() {
        return App.game.wallet.hasAmount(this.getRefreshCost());
    }
    /**
     * Formula for the Money cost for refreshing quests
     * @returns 0 when all quests are complete, ~1 million when none are
     */
    getRefreshCost() {
        // If we have a free refersh, just assume all the quest are completed
        const notComplete = this.freeRefresh() ? 0 : this.incompleteQuests().length;
        const cost = Math.floor((250000 * Math.LOG10E * Math.log(Math.pow(notComplete, 4) + 1)) / 1000) * 1000;
        return new Amount(Math.max(0, Math.min(1e6, cost)), GameConstants.Currency.money);
    }
    canStartNewQuest() {
        // Check we haven't already used up all quest slots
        if (this.currentQuests().length >= this.questSlots()) {
            return false;
        }
        // Check at least 1 quest is either not completed or in progress
        if (this.questList().find(quest => !quest.isCompleted() && !quest.inProgress())) {
            return true;
        }
        return false;
    }
    /**
     * Determines if all quests have been completed and claimed.
     */
    allQuestClaimed() {
        return !this.incompleteQuests().length && !this.currentQuests().length;
    }
    /**
     * Formula for the amount of exp to increase quest level.
     * 1000 XP is needed for level 2, and then increases 20% each level.
     * @param level The current quest level
     */
    levelToXP(level) {
        if (level >= 2) {
            // Sum of geometric series
            const a = 1000, r = 1.2, n = level - 1;
            const sum = a * (Math.pow(r, n) - 1) / (r - 1);
            return Math.ceil(sum);
        }
        else {
            return 0;
        }
    }
    xpToLevel(xp) {
        const sum = xp, a = 1000, r = 1.2;
        const n = Math.log(1 + ((r - 1) * sum) / a) / Math.log(r);
        return Math.floor(n + 1);
    }
    percentToNextQuestLevel() {
        const current = this.level();
        const requiredForCurrent = this.levelToXP(current);
        const requiredForNext = this.levelToXP(current + 1);
        return 100 * (this.xp() - requiredForCurrent) / (requiredForNext - requiredForCurrent);
    }
    isDailyQuestsUnlocked() {
        return QuestLineHelper.isQuestLineCompleted('Tutorial Quests');
    }
    loadQuestList(questList) {
        // Sanity Check
        this.questList.removeAll();
        questList.forEach(questData => {
            try {
                if (questData.hasOwnProperty('name')) {
                    const quest = QuestHelper.createQuest(questData.name, questData.data);
                    quest.fromJSON(questData);
                    this.questList.push(quest);
                }
                else {
                    this.questList.push(new CapturePokemonsQuest(10, 1));
                }
            }
            catch (e) {
                console.error(`Quest "${questData.name}" failed to load`, questData);
                this.questList.push(new CapturePokemonsQuest(10, 1));
            }
        });
    }
    loadQuestLines(questLines) {
        questLines.forEach(questLine => {
            try {
                if (questLine.state == QuestLineState.inactive) {
                    return;
                }
                const ql = this.getQuestLine(questLine.name);
                if (ql) {
                    ql.state(questLine.state);
                    if (questLine.state == QuestLineState.started) {
                        ql.resumeAt(questLine.quest, questLine.initial);
                    }
                }
            }
            catch (e) {
                console.error(`Quest line "${questLine.name}" failed to load`, questLine);
            }
        });
    }
    toJSON() {
        return {
            xp: this.xp(),
            refreshes: this.refreshes(),
            lastRefresh: this.lastRefresh,
            lastRefreshLevel: this.lastRefreshLevel,
            lastRefreshRegion: this.lastRefreshRegion,
            freeRefresh: this.freeRefresh(),
            questList: this.questList().map(quest => quest.toJSON()),
            questLines: this.questLines(),
        };
    }
    fromJSON(json) {
        // Generate the questLines (statistics not yet loaded when constructing)
        QuestLineHelper.loadQuestLines();
        if (!json) {
            // Generate the questList
            this.generateQuestList();
            return;
        }
        this.xp(json.xp || this.defaults.xp);
        this.refreshes(json.refreshes || this.defaults.refreshes);
        this.lastRefresh = json.lastRefresh ? new Date(json.lastRefresh) : new Date();
        this.lastRefreshLevel = json.lastRefreshLevel || this.level();
        this.lastRefreshRegion = json.lastRefreshRegion || player.highestRegion();
        if (this.lastRefresh.toDateString() != new Date().toDateString()) {
            this.freeRefresh(true);
        }
        else {
            this.freeRefresh(json.freeRefresh || this.defaults.freeRefresh);
        }
        if (!json.hasOwnProperty('questList') || !json.questList.length) {
            // Generate new quest list
            this.generateQuestList(this.lastRefresh, this.lastRefreshLevel);
        }
        else {
            // Load saved quests
            this.loadQuestList(json.questList);
        }
        // Load our quest line progress
        if (json.questLines) {
            this.loadQuestLines(json.questLines);
        }
    }
}
/// <reference path="../Quest.ts" />
class BuyPokeballsQuest extends Quest {
    constructor(amount, reward, pokeball) {
        super(amount, reward);
        this.pokeball = pokeball;
        this.focus = App.game.statistics.digiscansBought[this.pokeball];
    }
    get description() {
        return `Buy ${this.amount.toLocaleString('en-US')} ${GameConstants.Pokeball[this.pokeball]}s.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.pokeball);
        return json;
    }
}
class CustomQuest extends Quest {
    constructor(amount, reward, description, focus, initialValue, onLoad) {
        const qpReward = typeof reward == 'number' ? reward : 0;
        super(amount, qpReward);
        this.customDescription = description;
        this.focus = focus;
        this.initialValue = initialValue;
        this.customReward = typeof reward == 'function' ? reward : undefined;
        this._onLoad = typeof onLoad == 'function' ? onLoad : undefined;
    }
    begin() {
        this.onLoad();
        if (this.initialValue !== undefined) {
            this.initial(this.initialValue);
        }
        else {
            super.begin();
        }
    }
    claim() {
        if (this.customReward !== undefined) {
            this.customReward();
        }
        return super.claim();
    }
}
var BaitType;
(function (BaitType) {
    BaitType[BaitType["Bait"] = 0] = "Bait";
})(BaitType || (BaitType = {}));
class Bait {
    constructor(type, name, useName, image, amount, use) {
        this.type = type;
        this.name = name;
        this.useName = useName;
        this.image = image;
        this.amount = amount;
        this.use = use;
    }
    get btnName() {
        return `${this.name} (${this.amount()})`;
    }
}
const BaitList = {};
BaitList['Bait'] = new Bait(BaitType.Bait, 'Bait', 'some bait', 'assets/images/safari/bait.png', () => '∞', (pokemon) => {
    pokemon.eatingBait = BaitType.Bait;
    pokemon.eating = Math.max(pokemon.eating, Rand.intBetween(2, 6));
    pokemon.angry = 0;
});
class Safari {
    static sizeX() {
        return Math.floor(document.querySelector('#safariModal .modal-dialog').scrollWidth / 32);
    }
    static sizeY() {
        return Math.floor((window.innerHeight - 250) / 32);
    }
    static load() {
        Safari.grid = [];
        Safari.pokemonGrid([]);
        Safari.playerXY.x = 0;
        Safari.playerXY.y = 0;
        Safari.lastDirection = 'up';
        Safari.inBattle(false);
        Safari.inProgress(true);
        Safari.balls(this.calculateStartPokeballs());
        for (let i = 0; i < this.sizeY(); i++) {
            Safari.grid.push(Array(this.sizeX()).fill(0));
        }
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.show();
    }
    static addRandomBody(body) {
        let x = Safari.getRandomCoord(this.sizeX() - 2);
        let y = Safari.getRandomCoord(this.sizeY() - 2);
        if (body.type === 'fence') {
            x = Math.max(0, x - 3);
            y = Math.max(0, y - 3);
        }
        const res = Safari.canAddBody(x, y, body);
        if (res || body.type === 'grass') {
            Safari.addBody(x, y, body);
        }
    }
    static getRandomCoord(max) {
        return Rand.intBetween(1, max - 3);
    }
    static canAddBody(x, y, body) {
        if (x == 0 ||
            y == 0 ||
            y + body.maxY() >= this.sizeY() ||
            x + body.maxX() >= this.sizeX()) {
            return false;
        }
        for (let i = 0; i < body.grid.length; i++) {
            for (let j = 0; j < body.grid[i].length; j++) {
                if ((i + y) < this.sizeY() && (j + x) < this.sizeX()) {
                    if (body.grid[i][j] !== 0) {
                        if (this.grid[i + y][j + x] !== 0) {
                            return false;
                        }
                    }
                }
                else {
                    return false;
                }
            }
        }
        return true;
    }
    static addBody(x, y, body) {
        for (let i = 0; i < body.grid.length; i++) {
            for (let j = 0; j < body.grid[i].length; j++) {
                if (body.grid[i][j] !== 0) {
                    if ((i + y) < this.sizeY() && (j + x) < this.sizeX()) {
                        if (this.grid[i + y][j + x] === 0) {
                            this.grid[i + y][j + x] = body.grid[i][j];
                        }
                    }
                }
            }
        }
    }
    static openModal() {
        if (this.canAccess()) {
            App.game.gameState = GameConstants.GameState.safari;
            $('#safariModal').modal({ backdrop: 'static', keyboard: false });
        }
        else {
            Notifier.notify({
                message: 'You need the Safari Pass to access this location.\n<i>Visit the Gym in Fuschia City</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static closeModal() {
        if (!Safari.inBattle()) {
            $('#safariModal').modal('hide');
        }
    }
    static canPay() {
        return App.game.wallet.hasAmount(Safari.cost());
    }
    static cost() {
        return new Amount(100, GameConstants.Currency.questPoint);
    }
    static payEntranceFee() {
        if (Safari.canPay()) {
            // TODO: add increasing cost back
            //typeof player.safariCostModifier == undefined ? 1 : player.safariCostModifier++;
            App.game.wallet.loseAmount(Safari.cost());
            Safari.load();
        }
    }
    static canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItemType.Safari_ticket);
    }
    static show() {
        let html = '';
        for (let i = 0; i < Safari.grid.length; i++) {
            html += '<div class="row flex-nowrap">';
            for (let j = 0; j < Safari.grid[0].length; j++) {
                html += Safari.square(i, j);
            }
            html += '</div>';
        }
        $('#safariBody').html(html);
        Safari.addPlayer(Math.floor((this.sizeX() - 1) / 2), this.sizeY() - 1);
    }
    static square(i, j) {
        const img = `assets/images/safari/${this.grid[i][j]}.png`;
        const divId = `safari-${j}-${i}`;
        return `<div id='${divId}' style=background-image:url('${img}') class='safariSquare'></div>`;
    }
    static addPlayer(i, j) {
        const topLeft = $('#safari-0-0').offset();
        const offset = {
            top: 32 * j + topLeft.top,
            left: 32 * i + topLeft.left,
        };
        $('#safariBody').append('<div id="sprite"></div>');
        document.getElementById('sprite').classList.value = `walk${Safari.lastDirection}`;
        $('#sprite').css('position', 'absolute');
        $('#sprite').offset(offset);
        Safari.playerXY.x = i;
        Safari.playerXY.y = j;
        Safari.origin = offset;
    }
    static move(dir) {
        if (!Safari.inProgress()) {
            return;
        }
        else if (!Safari.walking && !Safari.isMoving && !Safari.inBattle()) {
            Safari.queue = [];
            Safari.walking = true;
            Safari.queue.unshift(dir);
            Safari.startMoving(dir);
        }
        else {
            if (dir) {
                Safari.setNextDirection(dir);
            }
        }
    }
    static startMoving(dir) {
        Safari.nextDirection = dir;
        if (!Safari.isMoving) {
            Safari.step(dir);
        }
    }
    static step(direction) {
        Safari.lastDirection = direction;
        const directionOffset = Safari.directionToXY(direction);
        Safari.isMoving = true;
        const newPos = {
            x: Safari.playerXY.x + directionOffset.x,
            y: Safari.playerXY.y + directionOffset.y,
        };
        if (Safari.canMove(newPos.x, newPos.y)) {
            const next = $(`#safari-${newPos.x}-${newPos.y}`).offset();
            const offset = {
                top: `+=${directionOffset.y * 32}`,
                left: `+=${directionOffset.x * 32}`,
            };
            document.getElementById('sprite').classList.value = `walk${direction} moving`;
            Safari.playerXY.x = newPos.x;
            Safari.playerXY.y = newPos.y;
            $('#sprite').animate(offset, 250, 'linear', () => {
                Safari.checkBattle();
                Safari.isMoving = false;
                if (Safari.walking) {
                    if (!Safari.checkBattle() && Safari.queue[0]) {
                        Safari.step(Safari.queue[0]);
                    }
                    else {
                        document.getElementById('sprite').classList.value = `walk${direction}`;
                    }
                }
                else {
                    document.getElementById('sprite').classList.value = `walk${direction}`;
                }
            });
            App.game.breeding.progressEggs(1);
            this.spawnPokemonCheck();
            this.despawnPokemonCheck();
        }
        else {
            document.getElementById('sprite').classList.value = `walk${direction}`;
            setTimeout(() => {
                Safari.walking = false;
                Safari.isMoving = false;
                if (Safari.queue[0]) {
                    Safari.isMoving = true;
                    Safari.walking = true;
                    Safari.step(Safari.queue[0]);
                }
            }, 250);
        }
    }
    static spawnPokemonCheck() {
        this.steps++;
        if (this.steps % 10 === 0 && Rand.boolean()) {
            this.spawnRandomPokemon();
        }
    }
    static despawnPokemonCheck() {
        let index = this.pokemonGrid().length;
        while (index-- > 0) {
            if (--this.pokemonGrid()[index].steps <= 0) {
                this.pokemonGrid.splice(index, 1);
            }
        }
    }
    static spawnRandomPokemon() {
        const y = Rand.floor(this.sizeY());
        const x = Rand.floor(this.sizeX());
        if (!this.canMove(x, y) || (x == this.playerXY.x && y == this.playerXY.y) || this.pokemonGrid().find(p => p.x === x && p.y === y)) {
            return;
        }
        const pokemon = SafariPokemon.random();
        pokemon.x = x;
        pokemon.y = y;
        pokemon.steps = this.sizeX() + this.sizeY() + Rand.floor(21);
        this.pokemonGrid.push(pokemon);
    }
    static directionToXY(dir) {
        let x = 0;
        let y = 0;
        switch (dir) {
            case 'left':
                x = -1;
                break;
            case 'up':
                y = -1;
                break;
            case 'right':
                x = 1;
                break;
            case 'down':
                y = 1;
                break;
        }
        return { x: x, y: y };
    }
    static canMove(x, y) {
        if (!Safari.inProgress()) {
            return false;
        }
        for (let i = 0; i < GameConstants.LEGAL_WALK_BLOCKS.length; i++) {
            if (Safari.grid[y] && Safari.grid[y][x] === GameConstants.LEGAL_WALK_BLOCKS[i]) {
                return true;
            }
        }
        return false;
    }
    static setNextDirection(direction) {
        if (direction != Safari.lastDirection) {
            if (Safari.queue[0] != direction) {
                if (Safari.queue.length == 1) {
                    Safari.queue.unshift(direction);
                }
                else {
                    Safari.queue[0] = direction;
                }
            }
            Safari.nextDirection = direction;
            Safari.walking = true;
        }
    }
    static stop(dir) {
        for (let i = 0; i < Safari.queue.length; i++) {
            if (Safari.queue[i] == dir) {
                Safari.queue.splice(i, 1);
            }
        }
        if (!Safari.queue[0]) {
            Safari.walking = false;
        }
    }
    static checkBattle() {
        if (Safari.inBattle()) {
            return false;
        }
        const pokemonOnPlayer = this.pokemonGrid().findIndex(p => p.x === Safari.playerXY.x && p.y === Safari.playerXY.y);
        if (pokemonOnPlayer >= 0) {
            SafariBattle.load(this.pokemonGrid()[pokemonOnPlayer]);
            Safari.pokemonGrid.splice(pokemonOnPlayer, 1);
            return true;
        }
        if (Safari.grid[Safari.playerXY.y][Safari.playerXY.x] === 10) {
            if (Rand.chance(GameConstants.SAFARI_BATTLE_CHANCE)) {
                SafariBattle.load();
                return true;
            }
        }
        return false;
    }
    static calculateStartPokeballs() {
        return GameConstants.SAFARI_BASE_POKEBALL_COUNT;
    }
    static completed(shiny = false) {
        return SafariPokemon.list.reduce((all, poke) => {
            return all && App.game.party.alreadyCaughtPokemonByName(poke.name, shiny);
        }, true);
    }
}
Safari.pokemonGrid = ko.observableArray([]);
Safari.player = new Point(12, 20);
Safari.lastDirection = 'up';
Safari.steps = 0;
Safari.walking = false;
Safari.isMoving = false;
Safari.queue = [];
Safari.playerXY = { 'x': 0, 'y': 0 };
Safari.inProgress = ko.observable(false);
Safari.inBattle = ko.observable(false);
Safari.balls = ko.observable();
document.addEventListener('DOMContentLoaded', () => {
    $('#safariModal').on('hide.bs.modal', () => {
        MapHelper.moveToTown('Fuchsia City');
    });
});
class SafariBattle {
    static get enemy() {
        return SafariBattle._enemy();
    }
    static set enemy(pokemon) {
        SafariBattle._enemy(pokemon);
    }
    static load(enemy = SafariPokemon.random()) {
        // Stop left over keypresses
        GameController.simulateKey('ArrowUp', 'up');
        GameController.simulateKey('ArrowDown', 'up');
        GameController.simulateKey('ArrowLeft', 'up');
        GameController.simulateKey('ArrowRight', 'up');
        // Generate enemy
        SafariBattle.enemy = enemy;
        Safari.inBattle(true);
        SafariBattle.text('What will you do?');
        SafariBattle.escapeAttempts = 0;
        $('#safariBattleModal').modal({ backdrop: 'static', keyboard: false });
    }
    static throwBall() {
        if (!SafariBattle.busy()) {
            SafariBattle.busy(true);
            Safari.balls(Safari.balls() - 1);
            $('#safariBattleModal .enemy').css('transition-duration', `${0.75 * SafariBattle.Speed.enemyTransition}ms`);
            SafariBattle.text('You throw a ball...');
            const enemyImg = $('#safariBattleModal .enemy').offset();
            enemyImg.left += 36;
            enemyImg.top += 16;
            const ptclhtml = '<div><img id="safariBall" class="spin" src="assets/images/pokeball/Safariball.svg" height="30px"></div>';
            SafariBattle.particle = SafariBattle.dropParticle(ptclhtml, $('#safariBattleModal .pageItemFooter').offset(), enemyImg, SafariBattle.Speed.ballThrow, 'cubic-bezier(0,0,0.4,1)', true).css('z-index', 9999);
            SafariBattle.delay(1.1 * SafariBattle.Speed.ballThrow)(0) // throwing the ball
                .then(SafariBattle.startCapture) // pokemon being sucked into ball
                .then(SafariBattle.delay(0.75 * SafariBattle.Speed.enemyTransition))
                .then(SafariBattle.startBounce) // pokeball dropping to ground
                .then(SafariBattle.delay(1.7 * SafariBattle.Speed.ballBounce))
                .then(SafariBattle.calcIndex) // roll a dice for catching, use dice roll to determine how many pokeball rolls
                .then(SafariBattle.delayRoll)
                .then(SafariBattle.finishCapture); // capture pokemon or break free
        }
    }
    static delay(ms) {
        return function (pass) {
            return new Promise((resolve, reject) => {
                setTimeout((pass) => {
                    resolve(pass);
                }, ms);
            });
        };
    }
    static startCapture() {
        return new Promise((resolve, reject) => {
            $('#safariBattleModal .enemy').addClass('safariCapture');
            $('#safariBall').removeClass('spin');
            resolve();
        });
    }
    static startBounce() {
        return new Promise((resolve, reject) => {
            $('#safariBattleModal').css('animation-duration', `${1.6 * SafariBattle.Speed.ballBounce}ms`);
            $('#safariBattleModal .enemy > img').css('opacity', '0');
            SafariBattle.particle.addClass('bounce');
            resolve();
        });
    }
    static calcIndex() {
        return new Promise((resolve, reject) => {
            const random = Math.random();
            const catchF = SafariBattle.enemy.catchFactor / 100;
            const index = catchF >= 1 ? 3 : Math.floor(4 * (1 - Math.max(random, catchF)) / (1 - catchF));
            if (index != 0) {
                $('#safariBattleModal').css('animation-duration', `${SafariBattle.Speed.ballRoll}ms`);
                SafariBattle.startRoll(index);
            }
            resolve([random, index]);
        });
    }
    static delayRoll(result) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                resolve(result);
            }, (0.2 + 1.2 * result[1]) * SafariBattle.Speed.ballRoll);
        });
    }
    static finishCapture(result) {
        const [random, index] = result;
        const isgameOver = (Safari.balls() == 0);
        return new Promise((resolve, reject) => {
            if (random * 100 < SafariBattle.enemy.catchFactor) {
                SafariBattle.capturePokemon();
                $('#safariBall').css('filter', 'brightness(0.4) grayscale(100%)');
                setTimeout(() => {
                    SafariBattle.particle.remove();
                    isgameOver ? SafariBattle.gameOver() : SafariBattle.endBattle();
                }, 1.7 * SafariBattle.Speed.enemyTransition);
            }
            else {
                $('#safariBattleModal .enemy > img').css('opacity', '1');
                $('#safariBattleModal .enemy').removeClass('safariCapture');
                SafariBattle.text(SafariBattle.CATCH_MESSAGES[index]);
                SafariBattle.particle.remove();
                setTimeout(() => {
                    isgameOver ? SafariBattle.gameOver() : SafariBattle.enemyTurn();
                }, 1 * SafariBattle.Speed.enemyTransition);
            }
        });
    }
    static capturePokemon() {
        SafariBattle.text(`GOTCHA!<br>${SafariBattle.enemy.name} was caught!`);
        App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(SafariBattle.enemy.name).id, SafariBattle.enemy.shiny);
    }
    static throwBait(baitType) {
        if (!SafariBattle.busy()) {
            SafariBattle.busy(true);
            const bait = BaitList[BaitType[baitType]];
            if (bait.amount() <= 0) {
                SafariBattle.text(`You don't have enough ${bait.name}`);
                setTimeout(() => {
                    SafariBattle.text('What will you do?');
                    SafariBattle.busy(false);
                }, 1500);
                return;
            }
            SafariBattle.text(`You throw ${bait.useName} at ${SafariBattle.enemy.name}`);
            bait.use(SafariBattle.enemy);
            const enemy = $('#safariBattleModal .enemy').offset();
            enemy.left += 30;
            enemy.top += 70;
            SafariBattle.dropParticle(`<img width=16px src="${bait.image}">`, $('#safariBattleModal .pageItemFooter').offset(), enemy, 1000, 'cubic-bezier(0,0,0.4,1)').css('z-index', 9999);
            setTimeout(SafariBattle.enemyTurn, 1500);
        }
    }
    static throwRock() {
        if (!SafariBattle.busy()) {
            SafariBattle.busy(true);
            SafariBattle.text(`You throw a rock at ${SafariBattle.enemy.name}`);
            SafariBattle.enemy.angry = Math.max(SafariBattle.enemy.angry, Rand.intBetween(2, 6));
            SafariBattle.enemy.eating = 0;
            const enemy = $('#safariBattleModal .enemy').offset();
            enemy.left += 40;
            enemy.top += 10;
            SafariBattle.dropParticle('<img src="assets/images/safari/rock.png">', $('#safariBattleModal .pageItemFooter').offset(), enemy, 800, 'cubic-bezier(0,0,0.4,1)').css('z-index', 9999);
            setTimeout(() => {
                const hitSplash = $('<ptcl>').html('<img src="assets/images/safari/hit.png">').children().appendTo('#safariBattleModal');
                hitSplash.offset(enemy).css({ 'opacity': 0.8, 'z-index': 9998 });
                hitSplash.fadeOut(400, () => {
                    hitSplash.remove();
                });
                setTimeout(() => {
                    const newOffset = {
                        top: enemy.top + 4,
                        left: enemy.left - 20,
                    };
                    const ang = $('<ptcl>').html('<img src="assets/images/safari/angry.png">').children().appendTo('#safariBattleModal');
                    ang.css('position', 'absolute').css('z-index', 9999);
                    ang.offset(newOffset);
                    ang.addClass('pulse');
                    setTimeout(() => {
                        newOffset.top -= 10;
                        newOffset.left += 60;
                        ang.offset(newOffset);
                        setTimeout(() => {
                            ang.remove();
                        }, 350);
                    }, 350);
                }, 300);
            }, 800);
            setTimeout(SafariBattle.enemyTurn, 2000);
        }
    }
    static run() {
        if (!SafariBattle.busy()) {
            SafariBattle.busy(true);
            SafariBattle.text('You flee.');
            setTimeout(SafariBattle.endBattle, 1500);
        }
    }
    static enemyTurn() {
        // Enemy turn to flee;
        if (Rand.chance(SafariBattle.enemy.escapeFactor / 100)) {
            SafariBattle.text(`${SafariBattle.enemy.name} has fled.`);
            setTimeout(SafariBattle.endBattle, 1000);
        }
        else if (SafariBattle.enemy.eating > 0) {
            SafariBattle.text(`${SafariBattle.enemy.name} is eating..`);
        }
        else if (SafariBattle.enemy.angry > 0) {
            SafariBattle.text(`${SafariBattle.enemy.name} is angry!`);
        }
        else {
            SafariBattle.text(`${SafariBattle.enemy.name} is watching carefully...`);
        }
        SafariBattle.enemy.eating = Math.max(0, SafariBattle.enemy.eating - 1);
        SafariBattle.enemy.angry = Math.max(0, SafariBattle.enemy.angry - 1);
        setTimeout(() => {
            SafariBattle.text('What will you do?');
            SafariBattle.busy(false);
        }, 1500);
    }
    static endBattle() {
        $('#safariBattleModal').one('hidden.bs.modal', () => {
            Safari.inBattle(false);
            SafariBattle.busy(false);
        }).modal('hide');
    }
    static gameOver() {
        SafariBattle.text(GameConstants.SAFARI_OUT_OF_BALLS);
        setTimeout(() => {
            Safari.inBattle(false);
            Safari.inProgress(false);
            SafariBattle.busy(false);
            $('#safariBattleModal').modal('hide');
            $('#safariModal').modal('hide');
        }, 2000);
    }
    static dropParticle(html, pos, target, time = 2, top, persistentParticle = false) {
        const p = $('<ptcl>').html(html).children().appendTo('#safariBattleModal');
        p.css('position', 'absolute');
        p.offset(pos);
        if (!top) {
            top = 'cubic-bezier(0.6, -0.3, 0.7, 0)';
        }
        p[0].style.transition = `left ${time}ms linear, top ${time}ms ${top}`;
        p.offset(target);
        if (!persistentParticle) {
            setTimeout(() => {
                p.fadeOut();
            }, time - 200);
            setTimeout(() => {
                p.remove();
            }, time);
        }
        return p;
    }
}
SafariBattle._enemy = ko.observable();
SafariBattle.busy = ko.observable(false).extend({ boolean: null });
SafariBattle.text = ko.observable('What will you do?');
SafariBattle.escapeAttempts = 0;
SafariBattle.startRoll = function (n) {
    if (n == 4) {
        n--;
    }
    $('#safariBall').addClass('safari-roll-left');
    setTimeout(() => {
        SafariBattle.safariRoll(n - 1);
    }, 1200);
};
SafariBattle.safariRoll = function (n) {
    if (n != 0) {
        $('#safariBall').toggleClass('safari-roll-left').toggleClass('safari-roll-right');
        setTimeout(() => {
            SafariBattle.safariRoll(n - 1);
        }, 1200);
    }
};
(function (SafariBattle) {
    SafariBattle.Speed = {
        animation: 1000,
        ballThrow: 750,
        ballBounce: 850,
        ballRoll: 700,
        enemyTransition: 1000,
    };
    SafariBattle.CATCH_MESSAGES = [
        'Oh, no!<br>The Pokémon broke free!',
        'Aww! It appeared to be caught!',
        'Aargh! Almost had it!',
        'Shoot! It was so close, too!',
    ];
})(SafariBattle || (SafariBattle = {}));
class SafariBody {
    constructor() {
    }
    getTileNeighbours(x, y) {
        const ret = Array(4); //["N", "E", "S", "W"]
        const cross = Array(4); //["NE", "SE", "SW", "NW"]
        if (x === 0) {
            ret[3] = false;
        }
        else {
            ret[3] = this.grid[y][x - 1] !== 0;
        }
        if (y === 0) {
            ret[0] = false;
        }
        else {
            ret[0] = this.grid[y - 1][x] !== 0;
        }
        if (x === this.grid[0].length - 1) {
            ret[1] = false;
        }
        else {
            ret[1] = this.grid[y][x + 1] !== 0;
        }
        if (y === this.grid.length - 1) {
            ret[2] = false;
        }
        else {
            ret[2] = this.grid[y + 1][x] !== 0 && this.grid[y + 1][x] !== undefined;
        }
        if (ret.equals([true, true, true, true])) {
            cross[0] = this.grid[y - 1][x + 1] !== 0;
            cross[1] = this.grid[y + 1][x + 1] !== 0;
            cross[2] = this.grid[y + 1][x - 1] !== 0;
            cross[3] = this.grid[y - 1][x - 1] !== 0;
        }
        return {
            plus: ret,
            cross: cross,
        };
    }
    //duplicated in DungeonMap
    static shuffle(a) {
        let j, x, i;
        for (i = a.length; i; i--) {
            j = Rand.floor(i);
            x = a[i - 1];
            a[i - 1] = a[j];
            a[j] = x;
        }
    }
    maxY() {
        return this.grid.length;
    }
    maxX() {
        let max = 0;
        for (const row of this.grid) {
            if (row.length > max) {
                max = row.length;
            }
        }
        return max;
    }
}
class SandBody extends SafariBody {
    constructor(x = SandBody.randomInt(), y = SandBody.randomInt(), type = 'sand') {
        super();
        this.edgeDetectCheck = 15;
        this.type = type;
        this.grid = this.generateCube(x, y);
        this.edgeDetect();
    }
    static randomInt() {
        return Rand.intBetween(3, 5);
    }
    generateCube(sizeX, sizeY) {
        let body = [];
        for (let i = 0; i < sizeY; i++) {
            const row = [...Array(sizeX)].map(Number.prototype.valueOf, 0);
            body.push(row);
        }
        const amount = this.type === 'fence' ? 20 : 4;
        for (let i = 0; i < amount; i++) {
            const x = Rand.floor(sizeX - 2);
            const y = Rand.floor(sizeY - 2);
            body = SandBody.addCube(x, y, body);
        }
        return body;
    }
    static addCube(x, y, body) {
        if (Rand.boolean()) {
            body[y + 2][x] = 15;
            body[y + 2][x + 1] = 15;
            body[y][x + 2] = 15;
            body[y + 1][x + 2] = 15;
            body[y + 2][x + 2] = 15;
        }
        body[y][x] = 15;
        body[y + 1][x] = 15;
        body[y][x + 1] = 15;
        body[y + 1][x + 1] = 15;
        return body;
    }
    edgeDetect() {
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[i].length; j++) {
                if (this.grid[i][j] === this.edgeDetectCheck) {
                    this.grid[i][j] = this.getNumber(this.getTileNeighbours(j, i));
                }
            }
        }
    }
    getNumber(neighbours) {
        const plus = neighbours.plus;
        const cross = neighbours.cross;
        if (plus.equals([false, true, true, false])) {
            return 11;
        }
        if (plus.equals([false, true, true, true])) {
            return 12;
        }
        if (plus.equals([false, false, true, true])) {
            return 13;
        }
        if (plus.equals([true, true, true, false])) {
            return 14;
        }
        if (plus.equals([true, true, true, true])) {
            if (!cross[0]) {
                return 21;
            }
            if (!cross[1]) {
                return 22;
            }
            if (!cross[2]) {
                return 23;
            }
            if (!cross[3]) {
                return 24;
            }
            return 15;
        }
        if (plus.equals([true, false, true, true])) {
            return 16;
        }
        if (plus.equals([true, true, false, false])) {
            return 17;
        }
        if (plus.equals([true, true, false, true])) {
            return 18;
        }
        if (plus.equals([true, false, false, true])) {
            return 19;
        }
        return 10;
    }
}
class FenceBody extends SandBody {
    constructor() {
        super(7, 7, 'fence');
        this.edgeDetectCheck = 0;
        this.openFence();
    }
    getNumber(neighbours) {
        const plus = neighbours.plus;
        const cross = neighbours.cross;
        if (plus.equals([false, true, true, false])) {
            return 25;
        }
        if (plus.equals([false, true, true, true])) {
            return 26;
        }
        if (plus.equals([false, false, true, true])) {
            return 27;
        }
        if (plus.equals([true, true, true, false])) {
            return 28;
        }
        if (plus.equals([true, true, true, true])) {
            if (!cross[0]) {
                return 33;
            }
            if (!cross[1]) {
                return 34;
            }
            if (!cross[2]) {
                return 35;
            }
            if (!cross[3]) {
                return 36;
            }
            return 10;
        }
        if (plus.equals([true, false, true, true])) {
            return 29;
        }
        if (plus.equals([true, true, false, false])) {
            return 30;
        }
        if (plus.equals([true, true, false, true])) {
            return 31;
        }
        if (plus.equals([true, false, false, true])) {
            return 32;
        }
        return 10;
    }
    openFence() {
        const options = [26, 28, 29, 31];
        const pick = Rand.fromArray(options);
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === pick) {
                    this.grid[i][j] = 0;
                }
            }
        }
    }
}
class WaterBody extends SafariBody {
    constructor() {
        super();
        const x = Rand.intBetween(3, 5);
        const y = Rand.intBetween(3, 5);
        const body = [];
        for (let i = 0; i < y; i++) {
            const row = [];
            for (let j = 0; j < x; j++) {
                if (i === 0) {
                    if (j === 0) {
                        row.push(1);
                    }
                    else if (j < x - 1) {
                        row.push(2);
                    }
                    else if (j === x - 1) {
                        row.push(3);
                    }
                }
                else if (i < y - 1) {
                    if (j === 0) {
                        row.push(4);
                    }
                    else if (j < x - 1) {
                        row.push(5);
                    }
                    else if (j === x - 1) {
                        row.push(6);
                    }
                }
                else if (i === y - 1) {
                    if (j === 0) {
                        row.push(7);
                    }
                    else if (j < x - 1) {
                        row.push(8);
                    }
                    else if (j === x - 1) {
                        row.push(9);
                    }
                }
            }
            body.push(row);
        }
        this.grid = body;
        this.type = 'water';
    }
}
class GrassBody extends SafariBody {
    constructor() {
        super();
        const x = Rand.intBetween(4, 6);
        const y = Rand.intBetween(4, 6);
        const body = [];
        for (let i = 0; i < y; i++) {
            const row = [];
            for (let j = 0; j < x; j++) {
                if (j < x * 2 / 3 - 1) {
                    row.push(10);
                }
                else {
                    row.push(0);
                }
            }
            SafariBody.shuffle(row);
            body.push(row);
        }
        this.grid = body;
        this.fillHoles();
        this.type = 'grass';
    }
    fillHoles() {
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === 0) {
                    if (i !== 0 && i !== this.grid.length - 1) {
                        if (this.grid[i - 1][j] === 10 && this.grid[i + 1][j] === 10) {
                            this.grid[i][j] = 10;
                        }
                    }
                }
            }
        }
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === 0) {
                    if (j !== 0 && j !== this.grid[0].length - 1) {
                        if (this.grid[i][j - 1] === 10 && this.grid[i][j + 1] === 10) {
                            this.grid[i][j] = 10;
                        }
                    }
                }
            }
        }
    }
}
class TreeBody extends SafariBody {
    constructor() {
        super();
        this.grid = [[37, 38, 39], [40, 41, 42], [43, 44, 45], [46, 47, 48]];
        this.type = 'tree';
    }
}
Array.prototype.equals = function (array) {
    // if the other array is a falsy value, return
    if (!array) {
        return false;
    }
    // compare lengths - can save a lot of time
    if (this.length != array.length) {
        return false;
    }
    for (let i = 0, l = this.length; i < l; i++) {
        // Check if we have nested arrays
        if (this[i] instanceof Array && array[i] instanceof Array) {
            // recurse into the nested arrays
            if (!this[i].equals(array[i])) {
                return false;
            }
        }
        else if (this[i] != array[i]) {
            // Warning - two different object instances will never be equal: {x:20} != {x:20}
            return false;
        }
    }
    return true;
};
class SafariPokemon {
    constructor(name) {
        // Used for overworld sprites
        this.x = 0;
        this.y = 0;
        this.steps = 0;
        const data = PokemonHelper.getPokemonByName(name);
        this.name = data.name;
        this.id = data.id;
        this.type1 = data.type1;
        this.type2 = data.type2;
        this.shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SAFARI);
        GameHelper.incrementObservable(App.game.statistics.digimonEncountered[this.id]);
        GameHelper.incrementObservable(App.game.statistics.totalDigimonEncountered);
        if (this.shiny) {
            GameHelper.incrementObservable(App.game.statistics.dotDigimonEncountered[this.id]);
            GameHelper.incrementObservable(App.game.statistics.totalDotDigimonEncountered);
            Notifier.notify({
                message: `👾 You encountered a dot ${name}! 👾`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.shiny_long,
                setting: NotificationConstants.NotificationSetting.General.encountered_shiny,
            });
            // Track shinies encountered, and rate of shinies
            LogEvent('encountered shiny', 'shiny pokemon', 'safari encounter', Math.floor(App.game.statistics.totalDigimonEncountered() / App.game.statistics.totalDotDigimonEncountered()));
        }
        this.baseCatchFactor = data.catchRate * 1 / 6;
        this.baseEscapeFactor = 30;
        this._angry = ko.observable(0);
        this._eating = ko.observable(0);
        this._eatingBait = ko.observable(BaitType.Bait);
    }
    static calcPokemonWeight(pokemon) {
        return pokemon.weight * (App.game.party.alreadyCaughtPokemonByName(pokemon.name) ? 1 : 2);
    }
    get catchFactor() {
        const oakBonus = App.game.oakItems.calculateBonus(OakItemType.Memory_Stick);
        let catchF = this.baseCatchFactor + oakBonus;
        if (this.eating > 0) {
            catchF /= 2;
        }
        if (this.angry > 0) {
            catchF *= 2;
        }
        return Math.min(100, catchF);
    }
    get escapeFactor() {
        let escapeF = this.baseEscapeFactor;
        if (this.eating > 0) {
            escapeF /= 4;
        }
        if (this.angry > 0) {
            escapeF *= 2;
        }
        return escapeF;
    }
    get angry() {
        return this._angry();
    }
    set angry(value) {
        this._angry(value);
    }
    get eating() {
        return this._eating();
    }
    set eating(value) {
        this._eating(value);
    }
    get eatingBait() {
        return this._eatingBait();
    }
    set eatingBait(value) {
        this._eatingBait(value);
    }
    static random() {
        const pokemon = Rand.fromWeightedArray(SafariPokemon.list, SafariPokemon.list.map(p => p.weight));
        return new SafariPokemon(pokemon.name);
    }
}
// Lower weighted pokemon will appear less frequently, equally weighted are equally likely to appear
SafariPokemon.list = [
    { name: 'Burpmon', weight: 15 },
    { name: 'Burpmon', weight: 10 },
    { name: 'Burpmon', weight: 25 },
    { name: 'Burpmon', weight: 10 },
    { name: 'Burpmon', weight: 20 },
    { name: 'Burpmon', weight: 5 },
    { name: 'Burpmon', weight: 15 },
    { name: 'Burpmon', weight: 10 },
    { name: 'Burpmon', weight: 4 },
    { name: 'Burpmon', weight: 4 },
    { name: 'Burpmon', weight: 4 },
    { name: 'Burpmon', weight: 15 },
    { name: 'Burpmon', weight: 10 },
    { name: 'Burpmon', weight: 10 },
    { name: 'Burpmon', weight: 5 },
    { name: 'Burpmon', weight: 4 },
];
class BerryMasterShop extends Shop {
    constructor(items, name = 'Berry Master') {
        super(items, name);
        this.items = items;
        this.name = name;
        this.amountInput = () => $('#berryMasterModal').find('input[name="amountOfItems"]');
    }
    onclick() {
        ShopHandler.showShop(this);
        $('#berryMasterModal').modal('show');
    }
}
class GemMasterShop extends Shop {
    constructor(items, name = 'Gem Master') {
        super(items, name);
        this.items = items;
        this.name = name;
    }
    onclick() {
        ShopHandler.showShop(this);
        $('#gemMasterModal').modal('show');
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
class SpecialEvents {
    constructor() {
        this.name = 'Events';
        this.saveKey = 'events';
    }
    static newEvent(title, description, startTime, startFunction, endTime, endFunction) {
        // Check if the event exist before adding it again
        if (!SpecialEvents.events.find(event => event.title == title)) {
            SpecialEvents.events.push(new SpecialEvent(title, description, startTime, startFunction, endTime, endFunction));
        }
    }
    initialize() {
        SpecialEvents.events.forEach(event => event.initialize());
    }
    fromJSON(json) {
        if (!json) {
            return;
        }
    }
    toJSON() {
        return {
        // no data to save yet
        };
    }
    canAccess() {
        return true;
    }
    update(delta) { } // This method intentionally left blank
}
SpecialEvents.events = [];
// TODO: Fetch events from a server each 1/2/3/6/12/24 hours?
// Create our events here for now (yearly)
// Lunar New Year
SpecialEvents.newEvent('Lunar New Year', 'Placeholder Message Map 6.', 
// Start
new Date(new Date().getFullYear(), 0, 24, 1), () => {
    RoamingPokemonList.add(GameConstants.Region.kalos, new RoamingPokemon('Burpmon'));
}, 
// End
new Date(new Date().getFullYear(), 1, 7, 23), () => {
    RoamingPokemonList.remove(GameConstants.Region.kalos, 'Burpmon');
});
// Easter
SpecialEvents.newEvent('Easter', 'Placeholder Message Map 1-2-3.', 
// Start
new Date(new Date().getFullYear(), 3, 8, 1), () => {
    const togepiEggHuntQuestLine = App.game.quests.getQuestLine('Burpmon');
    if (togepiEggHuntQuestLine.state() == QuestLineState.inactive) {
        App.game.quests.getQuestLine('Burpmon').beginQuest();
    }
}, 
// End
new Date(new Date().getFullYear(), 3, 29, 23), () => {
    // do not end questline, so ppl can finish it
});
// First Event
SpecialEvents.newEvent('One Lost Digimon', 'Placeholder Message Map 1.', 
// Start
new Date(new Date().getFullYear(), 6, 6, 1), () => {
    RoamingPokemonList.add(GameConstants.Region.adventure01, new RoamingPokemon('Damemon Cmon'));
}, 
// End
new Date(new Date().getFullYear(), 6, 12, 23), () => {
    RoamingPokemonList.remove(GameConstants.Region.adventure01, 'Damemon Cmon');
});
// Pokemon the first movie release date
SpecialEvents.newEvent('Odaiba Memorial Day!', 'Placeholder Message Map 1.', 
// Start
new Date(new Date().getFullYear(), 7, 1, 1), () => {
    dungeonList['Cerulean Cave'].bossList.push(new DungeonBossPokemon('Burpmon', 1000000, 80));
    RoamingPokemonList.add(GameConstants.Region.adventure01, new RoamingPokemon('Burpmon'));
    RoamingPokemonList.add(GameConstants.Region.adventure01, new RoamingPokemon('Burpmon'));
    RoamingPokemonList.add(GameConstants.Region.adventure01, new RoamingPokemon('Burpmon'));
}, 
// End
new Date(new Date().getFullYear(), 7, 24, 23), () => {
    dungeonList['Cerulean Cave'].bossList = dungeonList['Cerulean Cave'].bossList.filter(boss => boss.name != 'Burpmon');
    RoamingPokemonList.list[GameConstants.Region.adventure01] = RoamingPokemonList.list[GameConstants.Region.adventure01].filter(r => !['Burpmon', 'Burpmon', ''].includes(r.pokemon.name));
});
// Halloween
SpecialEvents.newEvent('Halloween!', 'Placeholder Message Map 1-2-3.', 
// Start
new Date(new Date().getFullYear(), 9, 30, 1), () => {
    SeededRand.seed(new Date().getFullYear());
    Routes.getRoutesByRegion(GameConstants.Region.adventure01).forEach(route => {
        SeededRand.boolean() ? route.pokemon.land.push('Burpmon') : null;
        SeededRand.boolean() ? route.pokemon.land.push('Burpmon') : null;
    });
    Routes.getRoutesByRegion(GameConstants.Region.johto).forEach(route => {
        SeededRand.boolean() ? route.pokemon.land.push('Burpmon') : null;
        SeededRand.boolean() ? route.pokemon.land.push('Burpmon') : null;
    });
    Routes.getRoutesByRegion(GameConstants.Region.hoenn).forEach(route => {
        SeededRand.boolean() ? route.pokemon.land.push('Burpmon') : null;
        SeededRand.boolean() ? route.pokemon.land.push('Burpmon') : null;
        SeededRand.boolean() ? route.pokemon.land.push('Burpmon') : null;
    });
}, 
// End
new Date(new Date().getFullYear(), 10, 5, 23), () => {
    Routes.getRoutesByRegion(GameConstants.Region.adventure01).forEach(route => route.pokemon.land = route.pokemon.land.filter(p => !['Spooky Bulbasaur', 'Gastly'].includes(p)));
    Routes.getRoutesByRegion(GameConstants.Region.johto).forEach(route => route.pokemon.land = route.pokemon.land.filter(p => !['Spooky Togepi', 'Misdreavus'].includes(p)));
    Routes.getRoutesByRegion(GameConstants.Region.hoenn).forEach(route => route.pokemon.land = route.pokemon.land.filter(p => !['Pikachu (Gengar)', 'Shuppet', 'Duskull'].includes(p)));
});
// Let's Go P/E release date
SpecialEvents.newEvent('Survive!', 'Placeholder Message Map 1.', 
// Start
new Date(new Date().getFullYear(), 10, 16, 1), () => {
    RoamingPokemonList.add(GameConstants.Region.adventure01, new RoamingPokemon('Burpmon'));
    RoamingPokemonList.add(GameConstants.Region.adventure01, new RoamingPokemon('Burpmon'));
}, 
// End
new Date(new Date().getFullYear(), 10, 23, 23), () => {
    RoamingPokemonList.remove(GameConstants.Region.adventure01, 'Burpmon');
    RoamingPokemonList.remove(GameConstants.Region.adventure01, 'Burpmon');
});
// Christmas
SpecialEvents.newEvent('Merry Christmas!', 'Encounter a special Agumon roaming the Adventure02 map.', 
// Start
new Date(new Date().getFullYear(), 11, 24, 1), () => {
    // Add to every region excluding None
    GameHelper.enumNumbers(GameConstants.Region).filter(i => i != GameConstants.Region.none).forEach(region => {
        RoamingPokemonList.add(region, new RoamingPokemon('Santa Agumon'));
    });
    dungeonList['Ilex Forest'].bossList.push(new DungeonBossPokemon('Santa Agumon', 1600000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion) }));
}, 
// End
new Date(new Date().getFullYear(), 11, 30, 23), () => {
    // Remove from every region excluding None
    GameHelper.enumNumbers(GameConstants.Region).filter(i => i != GameConstants.Region.none).forEach(region => {
        RoamingPokemonList.remove(region, 'Burpmon');
    });
    dungeonList['Ilex Forest'].bossList = dungeonList['Ilex Forest'].bossList.filter(boss => boss.name != 'Burpmon');
});
// Golden Week
SpecialEvents.newEvent('Golden Week', 'Placeholder Message Map 4.', 
// Start
new Date(new Date().getFullYear(), 3, 29, 1), () => {
    dungeonList['Flower Paradise'].bossList.push(new DungeonBossPokemon('Burpmon', 1600000, 100, { requirement: new ClearDungeonRequirement(10, GameConstants.getDungeonIndex('Flower Paradise')) }));
}, 
// End
new Date(new Date().getFullYear(), 4, 6, 23), () => {
    dungeonList['Flower Paradise'].bossList = dungeonList['Flower Paradise'].bossList.filter(boss => boss.name != 'Burpmon');
});
class TemporaryBattle extends TownContent {
    constructor(name, pokemons, defeatMessage, requirements = [], completeRequirements = [], rewardFunction = () => { }, isTrainerBattle = true) {
        super(requirements);
        this.name = name;
        this.pokemons = pokemons;
        this.defeatMessage = defeatMessage;
        this.rewardFunction = rewardFunction;
        this.isTrainerBattle = isTrainerBattle;
        if (completeRequirements.length == 0) {
            completeRequirements = [new TemporaryBattleRequirement(name)];
        }
        this.completeRequirements = completeRequirements;
    }
    cssClass() {
        return 'btn btn-secondary';
    }
    text() {
        return `Fight ${this.name}`;
    }
    isVisible() {
        return this.isUnlocked() && !this.completeRequirements.every(r => r.isCompleted());
    }
    onclick() {
        TemporaryBattleRunner.startBattle(this);
    }
    areaStatus() {
        if (App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex(this.name)]() == 0) {
            return areaStatus.unlockedUnfinished;
        }
        else {
            return areaStatus.completed;
        }
    }
}
///<reference path="../Battle.ts"/>
class TemporaryBattleBattle extends Battle {
    static pokemonAttack() {
        if (TemporaryBattleRunner.running()) {
            super.pokemonAttack();
        }
    }
    static clickAttack() {
        if (TemporaryBattleRunner.running()) {
            super.clickAttack();
        }
    }
    /**
     * Award the player with exp, and go to the next pokemon
     */
    static defeatPokemon() {
        TemporaryBattleBattle.enemyPokemon().defeat(this.battle.isTrainerBattle);
        // Make gym "route" regionless
        // App.game.breeding.progressEggsBattle(0, GameConstants.Region.none); TODO: set this
        TemporaryBattleBattle.index(TemporaryBattleBattle.index() + 1);
        if (TemporaryBattleBattle.index() >= TemporaryBattleBattle.battle.pokemons.length) {
            TemporaryBattleRunner.battleWon(TemporaryBattleBattle.battle);
        }
        else {
            TemporaryBattleBattle.generateNewEnemy();
        }
        player.lowerItemMultipliers(MultiplierDecreaser.Battle);
    }
    /**
     * Reset the counter.
     */
    static generateNewEnemy() {
        TemporaryBattleBattle.counter = 0;
        TemporaryBattleBattle.enemyPokemon(PokemonFactory.generateTemporaryBattlePokemon(TemporaryBattleBattle.battle, TemporaryBattleBattle.index()));
    }
}
TemporaryBattleBattle.index = ko.observable(0);
TemporaryBattleBattle.totalPokemons = ko.observable(0);
TemporaryBattleBattle.pokemonsDefeatedComputable = ko.pureComputed(() => {
    return TemporaryBattleBattle.index();
});
TemporaryBattleBattle.pokemonsUndefeatedComputable = ko.pureComputed(() => {
    return TemporaryBattleBattle.totalPokemons() - TemporaryBattleBattle.index();
});
const TemporaryBattleList = {};
TemporaryBattleList['Ultra Wormhole'] = new TemporaryBattle('Ultra Wormhole', [new GymPokemon('???', 264590972, 27)], 'The creature escaped back into the ultra wormhole.', [new GymBadgeRequirement(BadgeEnums.RockiumZ)]);
TemporaryBattleList['Ultra Megalopolis'] = new TemporaryBattle('Ultra Megalopolis', [new GymPokemon('Burpmon', 282601920, 60)], 'Necrozma fled.', [new GymBadgeRequirement(BadgeEnums.DarkiniumZ)]);
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/enums/Badges.d.ts" />
class TemporaryBattleRunner {
    static startBattle(battle) {
        this.running(false);
        this.battleObservable(battle);
        App.game.gameState = GameConstants.GameState.idle;
        this.timeLeft(GameConstants.TEMP_BATTLE_TIME);
        this.timeLeftPercentage(100);
        TemporaryBattleBattle.battle = battle;
        TemporaryBattleBattle.totalPokemons(battle.pokemons.length);
        TemporaryBattleBattle.index(0);
        TemporaryBattleBattle.generateNewEnemy();
        App.game.gameState = GameConstants.GameState.temporaryBattle;
        this.running(true);
        this.resetGif();
        setTimeout(() => {
            this.hideGif();
        }, GameConstants.GYM_COUNTDOWN);
    }
    static hideGif() {
        $('#temporaryBattleGoContainer').hide();
    }
    static resetGif() {
        if (!Settings.getSetting('showGymGoAnimation').value) {
            return;
        }
        $('#temporaryBattleGoContainer').show();
        setTimeout(() => {
            $('#temporaryBattleGo').attr('src', 'assets/gifs/go.gif');
        }, 0);
    }
    static tick() {
        if (!this.running()) {
            return;
        }
        if (this.timeLeft() < 0) {
            this.battleLost();
        }
        this.timeLeft(this.timeLeft() - GameConstants.TEMP_BATTLE_TICK);
        this.timeLeftPercentage(Math.floor(this.timeLeft() / GameConstants.TEMP_BATTLE_TIME * 100));
    }
    static battleLost() {
        if (this.running()) {
            this.running(false);
            Notifier.notify({
                message: `It appears you are not strong enough to defeat ${TemporaryBattleBattle.battle.name}`,
                type: NotificationConstants.NotificationOption.danger,
            });
            player.town(TemporaryBattleBattle.battle.parent);
            App.game.gameState = GameConstants.GameState.town;
        }
    }
    static battleWon(battle) {
        if (this.running()) {
            this.running(false);
            if (App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex(battle.name)]() == 0) {
                battle.rewardFunction();
                if (battle.defeatMessage) {
                    $('#temporaryBattleWonModal').modal('show');
                }
            }
            GameHelper.incrementObservable(App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex(battle.name)]);
            player.town(battle.parent);
            App.game.gameState = GameConstants.GameState.town;
        }
    }
}
TemporaryBattleRunner.timeLeft = ko.observable(GameConstants.TEMP_BATTLE_TIME);
TemporaryBattleRunner.timeLeftPercentage = ko.observable(100);
TemporaryBattleRunner.battleObservable = ko.observable();
TemporaryBattleRunner.running = ko.observable(false);
TemporaryBattleRunner.timeLeftSeconds = ko.pureComputed(() => {
    return (Math.ceil(TemporaryBattleRunner.timeLeft() / 100) / 10).toFixed(1);
});
class NPC {
    constructor(name, dialog, options = {}) {
        this.name = name;
        this.dialog = dialog;
        this.options = options;
    }
    get dialogHTML() {
        return this.dialog.map(line => `<p>${line}</p>`).join('\n');
    }
    isVisible() {
        var _a, _b;
        return (_b = (_a = this.options.requirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true;
    }
    openDialog() {
        $('#npc-modal .npc-name').text(this.name);
        $('#npc-modal .npc-dialog').html(this.dialogHTML);
        if (this.options.image) {
            $('#npc-modal .npc-image').attr('src', this.options.image);
            $('#npc-modal .npc-image').show();
        }
        else {
            $('#npc-modal .npc-image').hide();
        }
        $('#npc-modal').modal();
        return;
    }
}
///<reference path="./NPC.ts"/>
class KantoBerryMasterNPC extends NPC {
    constructor(name, dialog) {
        super(name, dialog);
        this.name = name;
        this.dialog = dialog;
    }
    get dialogHTML() {
        // Before the player has unlocked the farm
        if (!App.game.farming.canAccess()) {
            return super.dialogHTML;
        }
        // After the farm is unlocked
        return `<p>${KantoBerryMasterNPC.generateMessage(new Date())}</p>`;
    }
    static generateMessage(date) {
        if (App.game.farming.unlockedBerries.every(berry => berry())) {
            return 'The disciple has surpassed the master. I have nothing more to teach you.';
        }
        const possibleMutations = App.game.farming.mutations.filter((mut) => mut.unlocked && mut.showHint && !App.game.farming.unlockedBerries[mut.mutatedBerry]());
        if (possibleMutations.length === 0) {
            return 'It seems as though you have hit a roadblock in your Berry progress. Focus on other areas before returning.';
        }
        SeededRand.seedWithDate(date);
        possibleMutations.forEach(b => SeededRand.boolean());
        const mutationToShow = SeededRand.fromArray(possibleMutations);
        mutationToShow.hintSeen = true;
        if (mutationToShow instanceof EnigmaMutation) {
            if (App.game.discord.ID()) {
                mutationToShow.hintsSeen[mutationToShow.hintIndex](true);
            }
            return mutationToShow.partialHint;
        }
        return mutationToShow.hint;
    }
}
class ProfNPC extends NPC {
    constructor(name, region, pokedexCompleteText, nextRegionUnlockedText, image = undefined) {
        super(name, undefined, { image: image });
        this.name = name;
        this.region = region;
        this.pokedexCompleteText = pokedexCompleteText;
        this.nextRegionUnlockedText = nextRegionUnlockedText;
    }
    get dialogHTML() {
        var _a, _b;
        const requiresCompleteDex = App.game.challenges.list.requireCompletePokedex.active();
        const nextRegionUnlocked = (_b = (_a = TownList[GameConstants.StartingTowns[this.region + 1]]) === null || _a === void 0 ? void 0 : _a.isUnlocked()) !== null && _b !== void 0 ? _b : false;
        const completeDexAchievement = AchievementHandler.findByName(`${GameConstants.camelCaseToString(GameConstants.Region[this.region])} Master`);
        if (!nextRegionUnlocked) {
            return `<p>Hello, new Champion, you've come a long way!</p>
                    <p>Come see me once you've beat the Elite Four!</p>`;
        }
        let html = '';
        if (completeDexAchievement.isCompleted()) {
            html += `<p>${this.pokedexCompleteText}</p>`;
        }
        else {
            if (requiresCompleteDex) {
                html += '<p>To progress to the next region, you need to catch all Pokémon native to this region.</p>';
            }
            html += `<p>You still have ${completeDexAchievement.property.requiredValue - completeDexAchievement.getProgress()} left to catch in this region! You're almost there!</p>`;
        }
        if (nextRegionUnlocked && (completeDexAchievement.isCompleted() || !requiresCompleteDex)) {
            html += `<p>${this.nextRegionUnlockedText}</p>`;
        }
        return html;
    }
}
class RoamerNPC extends NPC {
    constructor(name, dialog, region) {
        super(name, dialog);
        this.name = name;
        this.dialog = dialog;
        this.region = region;
    }
    get dialogHTML() {
        var _a;
        const route = RoamingPokemonList.getIncreasedChanceRouteByRegion(this.region);
        const roamers = RoamingPokemonList.getRegionalRoamers(this.region);
        // If no roaming Pokemon yet
        if (!roamers.length) {
            return `There hasn't been any reports of roaming Digimon around ${GameConstants.camelCaseToString(GameConstants.Region[this.region])} lately.`;
        }
        const roamersHTML = roamers.map(r => `<img width="64px" src="assets/images/digidex/${r.pokemon.id}.png" />`).join('');
        return super.dialogHTML.replace(/{ROUTE_NAME}/g, (_a = route()) === null || _a === void 0 ? void 0 : _a.routeName) + roamersHTML;
    }
}
///<reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="NPC.ts"/>
///<reference path="KantoBerryMasterNPC.ts"/>
///<reference path="ProfNPC.ts"/>
///<reference path="RoamerNPC.ts"/>
///<reference path="TownContent.ts"/>
class Town {
    constructor(name, region, content = [], 
    // Optional arguments are in a named object, so that we don't need
    // to pass undefined to get to the one we want
    optional = {}) {
        this.name = name;
        this.region = region;
        this.requirements = optional.requirements || [];
        this.npcs = optional.npcs;
        this.startingTown = GameConstants.StartingTowns.includes(this.name);
        this.content = content;
        if (GymList[name]) {
            const gym = GymList[name];
            this.content.unshift(gym);
        }
        if (GameConstants.DockTowns.includes(name)) {
            this.content.push(new DockTownContent());
        }
        if (GameConstants.StartingTowns.includes(name)) {
            this.content.push(new NextRegionTownContent());
        }
        content.forEach((c) => {
            c.addParent(this);
        });
    }
    isUnlocked() {
        return this.requirements.every(requirement => requirement.isCompleted());
    }
}
class DungeonTown extends Town {
    constructor(name, region, requirements = []) {
        super(name, region, [], { requirements });
        this.dungeon = dungeonList[name];
    }
}
/* eslint-disable array-bracket-newline */
///<reference path="../../declarations/requirements/RouteKillRequirement.d.ts"/>
///<reference path="../../declarations/requirements/GymBadgeRequirement.d.ts"/>
///<reference path="../../declarations/requirements/OneFromManyRequirement.d.ts"/>
const TownList = {};
const pokeMartShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Greatball'],
    ItemList['Ultraball'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Lucky_pill'],
    ItemList['Intel_floppy'],
    ItemList['Item_magnet'],
    ItemList['Lucky_floppy'],
    ItemList['SmallRestore'],
    ItemList['MediumRestore'],
    ItemList['LargeRestore'],
], 'Explorers Digi Mart');
const DepartmentStoreShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Greatball'],
    ItemList['Ultraball'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Lucky_pill'],
    ItemList['Item_magnet'],
    ItemList['Intel_floppy'],
    ItemList['Lucky_floppy'],
    ItemList['SmallRestore'],
    ItemList['MediumRestore'],
    ItemList['LargeRestore'],
], 'Department Store');
const pokeLeagueShop = () => new Shop([
    new PokeballItem(GameConstants.Pokeball.Masterball, 10000000, GameConstants.Currency.money, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.money]}` }),
    new PokeballItem(GameConstants.Pokeball.Masterball, 75000, GameConstants.Currency.explorecoin, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.explorecoin]}` }),
    new PokeballItem(GameConstants.Pokeball.Masterball, 3000, GameConstants.Currency.farmPoint, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.farmPoint]}` }),
    new PokeballItem(GameConstants.Pokeball.Masterball, 50, GameConstants.Currency.diamond, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.diamond]}` }),
    //ItemList['RareCandy'],
    ItemList['Protein'],
]);
//Kanto Shops
const PewterCityShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Lucky_pill'],
    ItemList['Mystery_egg'],
]);
const Route3Shop = new Shop([
    ItemList['Burpmon'],
]);
const CeruleanCityShop = new Shop([
    ItemList['Courage_Digimental'],
    ItemList['xAttack'],
    ItemList['Fire_egg'],
]);
const VermilionCityShop = new Shop([
    ItemList['Greatball'],
    ItemList['Lucky_pill'],
    ItemList['Intel_floppy'],
]);
const CeladonCityShop = new Shop([
    ItemList['xClick'],
    ItemList['Wind_egg'],
    ItemList['HatcheryHelperKris'],
]);
const CeladonDepartmentStoreShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Greatball'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Lucky_pill'],
    ItemList['Item_magnet'],
    ItemList['Intel_floppy'],
    ItemList['Lucky_floppy'],
], 'Department Store');
const SaffronCityShop = new Shop([
    ItemList['Hope_Digimental'],
    ItemList['SmallRestore'],
    ItemList['Earth_egg'],
]);
const FuchsiaCityShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Purity_Digimental'],
    ItemList['Lucky_pill'],
    ItemList['Plant_egg'],
]);
const CinnabarIslandShop = new Shop([
    ItemList['Sincerity_Digimental'],
    ItemList['Water_egg'],
    ItemList['Explorer_kit'],
    ItemList['Golden_DVD'],
    ItemList['Shiny_Mirror'],
]);
const ViridianCityShop = new Shop([
    ItemList['Pokeball'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Dungeon_ticket'],
]);
const LavenderTownShop = new Shop([
    ItemList['Knowledge_Digimental'],
    ItemList['Item_magnet'],
    ItemList['Lucky_floppy'],
    ItemList['Electric_egg'],
]);
// Kanto NPCs
const PalletProfOak = new ProfNPC('Hina', GameConstants.Region.adventure01, 'Congratulations on completing your Adventure01 journey!', 'Your task isn\'t over yet, a whole world awaits you! Onwards to Adventure02!', 'assets/images/oak.png');
const ViridianCityOldMan = new NPC('Tamer Echo', [
    'In order to reduce server costs a caching system is in place.',
    'Sometimes when you venture in dungeons you might encounter hostile cached echos of tamers who were there before you.',
]);
const PewterBattleItemRival = new NPC('Battle Item Echo', [
    'Hey kid, you look new! Let me offer some advice, Battle Items like xAttack can be acquired along Routes, inside Dungeons and in Shops!',
    'Use them to help you out whenever you feel like time is against you!',
]);
const Route3ShadySalesman = new NPC('Shady Salesman', [
    'Have I got a deal just for you!',
    'I\'ll let you have a super secret Pokémon. For the right price!',
]);
const CeruleanKantoBerryMaster = new KantoBerryMasterNPC('Disk Master', [
    'Bah! You younglings have no appreciation of the art of physical media!',
    'Come back when you are ready to learn!',
]);
const VermilionFanClubChairman = new NPC('Breeder Echo', [
    'You won’t find a Digimon as wonderful as my favorite Psychemon in those Typed Eggs in the shops, but they might hatch rare Pokémon you can’t find anywhere else!',
]);
const LavenderMrFuji = new NPC('Collector Echo', [
    'Did you know that dot Digimon are more often found in Dungeons, at the Disk Shop, from Eggs, and even when Evolving from Items?',
]);
const BigSpender = new NPC('Big Spender Echo', [
    'I love shopping! When I come in, the cashiers know I want tons of items.',
    'You can use the Shop Amount Button settings to make it easy for big purchases, too!',
]);
const SaffronBattleItemRival = new NPC('Battle Item Master', [
    'Do I know you? Wait... Have you met my worthless rival? Ha! Let me guess, he gave you some unwanted advice?',
    'I bet he forget to tell you that although all Battle Items only last for 30 seconds they can stack and last for days! Now scram!',
]);
const FuchsiaKantoRoamerNPC = new RoamerNPC('Scouting Echo', [
    'There\'s been some recent sightings of roaming Digimon on {ROUTE_NAME}!',
], GameConstants.Region.adventure01);
const CinnabarIslandResearcher = new NPC('Researcher Echo', [
    'I heard what sounded like Digimon arguing from the forest last night. It was something about having a different color or something.',
    'Apparently others have heard the same ramblings all over the map!',
]);
//Kanto Towns
TownList['Primary Village'] = new Town('Primary Village', GameConstants.Region.adventure01, [ViridianCityShop], {
    npcs: [PalletProfOak],
});
TownList['Toy Town'] = new Town('Toy Town', GameConstants.Region.adventure01, [PewterCityShop], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.adventure01, 5),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Andromon\'s Factory')),
    ],
    npcs: [PewterBattleItemRival],
});
TownList['Koromon Village'] = new Town('Koromon Village', GameConstants.Region.adventure01, [CeruleanCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.adventure01, 10)],
    npcs: [CeruleanKantoBerryMaster],
});
TownList['Piccolomon\'s'] = new Town('Piccolomon\'s', GameConstants.Region.adventure01, [VermilionCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.adventure01, 13)],
    npcs: [VermilionFanClubChairman],
});
TownList['Vademon Dimension'] = new Town('Vademon Dimension', GameConstants.Region.adventure01, [LavenderTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.adventure01, 14)],
    npcs: [LavenderMrFuji],
});
TownList['Gennai\'s'] = new Town('Gennai\'s', GameConstants.Region.adventure01, [SaffronCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.adventure01, 17)],
    npcs: [SaffronBattleItemRival],
});
TownList['Tokyo City'] = new Town('Tokyo City', GameConstants.Region.adventure01, [CeladonDepartmentStoreShop], {
    requirements: [
        new GymBadgeRequirement(BadgeEnums.Purity_Crest),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Vamdemon\'s Castle')),
    ],
    npcs: [BigSpender],
});
TownList['ShogunGekomon\'s Castle'] = new Town('ShogunGekomon\'s Castle', GameConstants.Region.adventure01, [FuchsiaCityShop], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.adventure01, 15),
        new GymBadgeRequirement(BadgeEnums.Knowledge_Crest)
    ],
    npcs: [FuchsiaKantoRoamerNPC],
});
TownList['Whamon\'s Gulf'] = new Town('Whamon\'s Gulf', GameConstants.Region.adventure01, [CinnabarIslandShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('VenomVamdemon Rampage')),],
    npcs: [CinnabarIslandResearcher],
});
TownList['Pyokomon Village'] = new Town('Pyokomon Village', GameConstants.Region.adventure01, [CeladonCityShop], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.adventure01, 2),
        new RouteKillRequirement(10, GameConstants.Region.adventure01, 3),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Coelamon Beach')),
    ],
    npcs: [ViridianCityOldMan],
});
TownList['Apocalymon Space'] = new Town('Apocalymon Space', GameConstants.Region.adventure01, [GymList['Ocean Data'], GymList['Forest Data'], GymList['City Data'], GymList['Wasteland Data'], GymList['Apocalymon Data'], pokeLeagueShop()], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.adventure01, 23),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Piemon\'s Observatory')),
    ],
});
//Kanto Dungeons
TownList['Coelamon Beach'] = new DungeonTown('Coelamon Beach', GameConstants.Region.adventure01, [new RouteKillRequirement(10, GameConstants.Region.adventure01, 2)]);
TownList['Andromon\'s Factory'] = new DungeonTown('Andromon\'s Factory', GameConstants.Region.adventure01, [new RouteKillRequirement(10, GameConstants.Region.adventure01, 4)]);
TownList['Lost Colosseum'] = new DungeonTown('Lost Colosseum', GameConstants.Region.adventure01, [new RouteKillRequirement(10, GameConstants.Region.adventure01, 11)]);
TownList['Mugendramon\'s Mill'] = new DungeonTown('Mugendramon\'s Mill', GameConstants.Region.adventure01, [new RouteKillRequirement(10, GameConstants.Region.adventure01, 22)]);
TownList['Digivice Temple'] = new DungeonTown('Digivice Temple', GameConstants.Region.adventure01, [new RouteKillRequirement(10, GameConstants.Region.adventure01, 7)]);
TownList['Metal Seadramon\'s Lair'] = new DungeonTown('Metal Seadramon\'s Lair', GameConstants.Region.adventure01, [
    new RouteKillRequirement(10, GameConstants.Region.adventure01, 20),
    new GymBadgeRequirement(BadgeEnums.Sincerity_Crest),
]);
TownList['Devimon Battle'] = new DungeonTown('Devimon Battle', GameConstants.Region.adventure01, [new RouteKillRequirement(10, GameConstants.Region.adventure01, 8)]);
TownList['Etemon\'s Pyramid'] = new DungeonTown('Etemon\'s Pyramid', GameConstants.Region.adventure01, [new RouteKillRequirement(10, GameConstants.Region.adventure01, 13)]);
TownList['VenomVamdemon Rampage'] = new DungeonTown('VenomVamdemon Rampage', GameConstants.Region.adventure01, [
    new RouteKillRequirement(10, GameConstants.Region.adventure01, 19),
    new RouteKillRequirement(10, GameConstants.Region.adventure01, 18)
]);
TownList['Pinochimon\'s House'] = new DungeonTown('Pinochimon\'s House', GameConstants.Region.adventure01, [
    new RouteKillRequirement(10, GameConstants.Region.adventure01, 21),
    new GymBadgeRequirement(BadgeEnums.Light_Crest),
]);
TownList['Vamdemon\'s Castle'] = new DungeonTown('Vamdemon\'s Castle', GameConstants.Region.adventure01, [
    new RouteKillRequirement(10, GameConstants.Region.adventure01, 16),
    new RouteKillRequirement(10, GameConstants.Region.adventure01, 17),
    new GymBadgeRequirement(BadgeEnums.Love_Crest),
]);
TownList['Piemon\'s Observatory'] = new DungeonTown('Piemon\'s Observatory', GameConstants.Region.adventure01, [
    new RouteKillRequirement(10, GameConstants.Region.adventure01, 23),
    new GymBadgeRequirement(BadgeEnums.Hope_Crest)
]);
TownList['Our War Game'] = new DungeonTown('Our War Game', GameConstants.Region.adventure01, [new GymBadgeRequirement(BadgeEnums.Apocalymon_Data)]);
//Johto Shops
const NewBarkTownShop = new Shop([
    ItemList['Pokeball'],
]);
const VioletCityShop = new Shop([
    ItemList['MediumRestore'],
    ItemList['Burpmon'],
    ItemList['Mystery_egg'],
]);
const AzaleaTownShop = new Shop([
    ItemList['Kings_rock'],
    ItemList['Plant_egg'],
    ItemList['Purity_Digimental'],
]);
const GoldenrodDepartmentStoreShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Greatball'],
    ItemList['Ultraball'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Lucky_pill'],
    ItemList['Item_magnet'],
    ItemList['Intel_floppy'],
    ItemList['Lucky_floppy'],
    ItemList['SmallRestore'],
    ItemList['MediumRestore'],
], 'Department Store');
const EcruteakCityShop = new Shop([
    ItemList['Greatball'],
    ItemList['Fire_egg'],
    ItemList['Soothe_bell'],
    ItemList['Courage_Digimental'],
]);
const OlivineCityShop = new Shop([
    ItemList['Metal_coat'],
    ItemList['Water_egg'],
    ItemList['Electric_egg'],
    ItemList['Sincerity_Digimental'],
    ItemList['Knowledge_Digimental'],
    ItemList['HatcheryHelperCarey'],
]);
const CianwoodCityShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Earth_egg'],
    ItemList['Love_Digimental'],
]);
const MahoganyTownShop = new Shop([
    ItemList['Upgrade'],
    ItemList['Kindness_Digimental'],
    ItemList['HatcheryHelperDakota'],
]);
const BlackthornCityShop = new Shop([
    ItemList['LargeRestore'],
    ItemList['Dragon_scale'],
    ItemList['Wind_egg'],
]);
// Johto NPCs
const JohtoBerryMaster = new BerryMasterShop([
    ItemList['Speed_Boost'],
    ItemList['Space_Boost'],
    ItemList['Surprise_Boost'],
    ItemList['Quality_Boost'],
    ItemList['Berry_Shovel'],
    ItemList['Mulch_Shovel'],
    ItemList['Demo_Disk'],
    ItemList['FarmHandBailey'],
    ItemList['PuzzleDisk'],
    ItemList['FortuneDisk'],
    ItemList['ExerciseDisk'],
    ItemList['LibraryDisk'],
]);
const NewBarkTechnologyEnthusiast = new NPC('Tech Enthusiast', [
    'Technology is amazing! I have heard that picking up items in chests in Dungeons can make it easier to see! But the Dungeons seem to get harder with each chest you pick up...',
]);
const CherrygroveMrPokemon = new NPC('Mr. Pokémon', [
    'Welcome to Johto! This is where the first ever Pokémon egg was found long ago.',
    'Astounding breakthroughs have been made since then. We can now store Pokémon eggs for longer and queue them up for breeding.',
    'This new technology only allows up to four stored eggs, for now.',
]);
const VioletEarlDervish = new NPC('Earl Dervish', [
    'Earl I am! Teach you I will to be a better trainer!',
    'Some Pokémon babies, only from Day Care they come! Hatch! Hatch! Hatch!',
]);
const AzaleaOldMan = new NPC('Wise Old Man', [
    'There is an old tale about the Guardian of Ilex Forest.',
    'It says that the mythical Pokémon Celebi will appear before anyone who has proven they are a Champion Pokémon Trainer.',
]);
const EcruteakKimonoGirl = new NPC('Kimono Girl', [
    'Legends say that Ho-Oh is searching for a trainer of pure heart.',
    'To prove yourself, you must tame the three legendary beasts of Johto, and bring them to the nearby Tin Tower.',
]);
const OlivineSSAquaCaptain = new NPC('SS Aqua Captain', [
    'Aye! At this here dock you can travel to far away regions! But only ones you’ve travelled to before, I’ve heard the Professor has his own vessel to take ye’ to new lands!',
]);
const CianwoodPhotographyAide = new NPC('Photography Aide', [
    'Cameron the Photographer isn’t here right now, he’s off taking photos of Pokémon on Berry Farms. Did you know that some Berries can even attract rare Pokémon?',
]);
const MahoganySouvenirShopAttendant = new NPC('Souvenir Shop Attendant', [
    'We’ve got stuff here nobody else has got! But keep any Item Magnets you have away from the merchandise… especially the RageCandyBars. Keep ‘em outside where they belong, I’ve heard magnets can attract Pokémon with held items more often, and even more so in Dungeons!',
]);
const BlackthornJohtoRoamerNPC = new RoamerNPC('Pokéfan Trevor', [
    'On the news they are getting more reports of roaming Pokémon appearing on {ROUTE_NAME}!',
], GameConstants.Region.johto);
const ProfElm = new ProfNPC('Prof. Elm', GameConstants.Region.johto, 'Oh, another regional Pokédex completed so soon?', 'Amazing! Next stop is Hoenn, enjoy the sunshine while you\'re there!');
//Johto Towns
TownList['New Bark Town'] = new Town('New Bark Town', GameConstants.Region.johto, [NewBarkTownShop], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Apocalymon_Data)],
    npcs: [ProfElm, NewBarkTechnologyEnthusiast],
});
TownList['Cherrygrove City'] = new Town('Cherrygrove City', GameConstants.Region.johto, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 29)],
    npcs: [CherrygroveMrPokemon],
});
TownList['Violet City'] = new Town('Violet City', GameConstants.Region.johto, [VioletCityShop, new MoveToDungeon(dungeonList['Sprout Tower'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 31)],
    npcs: [VioletEarlDervish],
});
TownList['Azalea Town'] = new Town('Azalea Town', GameConstants.Region.johto, [AzaleaTownShop, new MoveToDungeon(dungeonList['Slowpoke Well'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 33)],
    npcs: [AzaleaOldMan],
});
TownList['Goldenrod City'] = new Town('Goldenrod City', GameConstants.Region.johto, [GoldenrodDepartmentStoreShop, JohtoBerryMaster, new MoveToDungeon(dungeonList['Radio Tower'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 34)],
    npcs: [BigSpender],
});
TownList['Ecruteak City'] = new Town('Ecruteak City', GameConstants.Region.johto, [EcruteakCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 37)],
    npcs: [EcruteakKimonoGirl],
});
TownList['Olivine City'] = new Town('Olivine City', GameConstants.Region.johto, [OlivineCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 39)],
    npcs: [OlivineSSAquaCaptain],
});
TownList['Cianwood City'] = new Town('Cianwood City', GameConstants.Region.johto, [CianwoodCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 41)],
    npcs: [CianwoodPhotographyAide],
});
TownList['Mahogany Town'] = new Town('Mahogany Town', GameConstants.Region.johto, [MahoganyTownShop, new MoveToDungeon(dungeonList['Team Rockets Hideout'])], {
    requirements: [new OneFromManyRequirement([
            new RouteKillRequirement(10, GameConstants.Region.johto, 42),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt Mortar')),
        ])],
    npcs: [MahoganySouvenirShopAttendant],
});
TownList['Blackthorn City'] = new Town('Blackthorn City', GameConstants.Region.johto, [BlackthornCityShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ice Path'))],
    npcs: [BlackthornJohtoRoamerNPC],
});
TownList['Indigo Plateau Johto'] = new Town('Indigo Plateau Johto', GameConstants.Region.johto, [GymList['Elite Will'], GymList['Elite Koga'], GymList['Elite Bruno2'], GymList['Elite Karen'], GymList['Champion Lance'], pokeLeagueShop()], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.johto, 26),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Johto')),
    ],
});
//Johto Dungeons
TownList['Sprout Tower'] = new DungeonTown('Sprout Tower', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 31)]);
TownList['Ruins of Alph'] = new DungeonTown('Ruins of Alph', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 32)]);
TownList['Union Cave'] = new DungeonTown('Union Cave', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 32)]);
TownList['Slowpoke Well'] = new DungeonTown('Slowpoke Well', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 33)]);
TownList['Ilex Forest'] = new DungeonTown('Ilex Forest', GameConstants.Region.johto, [new GymBadgeRequirement(BadgeEnums.Hive)]);
TownList['Burned Tower'] = new DungeonTown('Burned Tower', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 37)]);
TownList['Tin Tower'] = new DungeonTown('Tin Tower', GameConstants.Region.johto, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Radio Tower'))]);
TownList['Whirl Islands'] = new DungeonTown('Whirl Islands', GameConstants.Region.johto, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Radio Tower'))]);
TownList['Mt Mortar'] = new DungeonTown('Mt Mortar', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 37)]);
TownList['Team Rockets Hideout'] = new DungeonTown('Team Rockets Hideout', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 43)]);
TownList['Radio Tower'] = new DungeonTown('Radio Tower', GameConstants.Region.johto, [
    new GymBadgeRequirement(BadgeEnums.Mineral),
    new GymBadgeRequirement(BadgeEnums.Glacier),
]);
TownList['Ice Path'] = new DungeonTown('Ice Path', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 44)]);
TownList['Dark Cave'] = new DungeonTown('Dark Cave', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 45)]);
TownList['Victory Road Johto'] = new DungeonTown('Victory Road Johto', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 26)]);
TownList['Mt Silver'] = new DungeonTown('Mt Silver', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 28)]);
//Hoenn Shops
const LittleRootTownShop = new Shop([
    ItemList['Pokeball'],
]);
const PetalburgCityShop = new Shop([
    ItemList['Kings_rock'],
]);
const RustboroCityShop = new Shop([
    ItemList['Mystery_egg'],
]);
const DewfordTownShop = new Shop([
    ItemList['Earth_egg'],
]);
const SlateportCityShop = new Shop([
    ItemList['Greatball'],
    ItemList['Water_egg'],
    ItemList['Kindness_Digimental'],
]);
const MauvilleCityShop = new Shop([
    ItemList['Electric_egg'],
    ItemList['Knowledge_Digimental'],
    ItemList['Metal_coat'],
    ItemList['HatcheryHelperJasmine'],
]);
const VerdanturfTownShop = new Shop([
    ItemList['Plant_egg'],
    ItemList['Soothe_bell'],
]);
const LavaridgeTownShop = new Shop([
    ItemList['Fire_egg'],
    ItemList['Courage_Digimental'],
]);
const FallarborTownShop = new Shop([
    ItemList['Hope_Digimental'],
    ItemList['Love_Digimental'],
]);
const FortreeCityShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Purity_Digimental'],
]);
const MossdeepCityShop = new Shop([
    ItemList['Burpmon'],
    ItemList['Prism_scale'],
    ItemList['Upgrade'],
]);
const SootopolisCityShop = new Shop([
    ItemList['Sincerity_Digimental'],
]);
const PacifidlogTownShop = new Shop([
    ItemList['Deepsea_tooth'],
    ItemList['Deepsea_scale'],
]);
const EverGrandeCityShop = new Shop([
    ItemList['Wind_egg'],
    ItemList['Dragon_scale'],
]);
// TODO: finalize items and prices
const BattleFrontierShop = new Shop([
    new PokeballItem(GameConstants.Pokeball.Ultraball, 1, GameConstants.Currency.battlePoint),
    new PokeballItem(GameConstants.Pokeball.Masterball, 500, GameConstants.Currency.battlePoint, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.battlePoint]}` }),
    new EnergyRestore(GameConstants.EnergyRestoreSize.SmallRestore, 10, GameConstants.Currency.battlePoint),
    new EnergyRestore(GameConstants.EnergyRestoreSize.MediumRestore, 20, GameConstants.Currency.battlePoint),
    new EnergyRestore(GameConstants.EnergyRestoreSize.LargeRestore, 40, GameConstants.Currency.battlePoint),
    ItemList['FarmHandJamie'],
    ItemList['HatcheryHelperNoel'],
]);
//Hoenn Berry Master
const HoennBerryMaster = new BerryMasterShop([
    ItemList['Speed_Boost'],
    ItemList['Space_Boost'],
    ItemList['Surprise_Boost'],
    ItemList['Quality_Boost'],
    ItemList['Berry_Shovel'],
    ItemList['Mulch_Shovel'],
    ItemList['Failure_Prevent'],
    ItemList['FarmHandKerry'],
]);
//Hoenn Flute Master
const HoennFluteMaster = new GemMasterShop([]);
//Hoenn NPCs
const LittlerootAide = new NPC('Professor Birch\'s Aide', [
    'We have received word from Mr. Pokémon in Johto! He has made another breakthrough.',
    'You can now store an additional four eggs in the queue! His research has really gained speed.',
    'He wants you to know that he will have an additional eight slots ready by the time you reach Sinnoh.',
]);
const OldaleTrackingScientist = new NPC('Tracking Scientist', [
    'Hey trainer, look at these footprints! Huh, I’ve never seen footprints like these before… They look like they came from two different Pokémon, and I saw two blurs, one red and one blue, quickly fly away just as I exited the Pokémon Center.',
    'They were flying really fast, I bet Pokémon that fast will only challenge trainers who have proven they are as strong as Champion Wallace...',
]);
const SlateportHoennRoamerNPC = new RoamerNPC('Reporter Gabby', [
    'Our sources indicate that roaming Pokémon are gathering on {ROUTE_NAME}!',
], GameConstants.Region.hoenn);
const FallarborProfessorCozmo = new NPC('Prof. Cozmo', [
    'Oh! Welcome, welcome. Do you by any chance have any Meteorites? No? Ah well, I’m studying the Pokémon Deoxys and I’ve heard that a Meteorite can cause it to change forms!',
    'I’ve also heard that the Battle Frontier may have some secrets relevant to Deoxys and its forms… but I’m not strong enough to find out...',
]);
const LavaridgeSootCollector = new NPC('Soot Collector', [
    'Blegh! I\'ve taken three soaks in the hot springs and I can still taste the soot!',
    'People say they have truly mystical powers, but that they require Chips of different types to use. Also, using more Spirits at the same time costs more Chips to use',
]);
const FortreeWeatherman = new NPC('Weatherman', [
    'Castform is a very finnicky pokemon.',
    'It changes forms when the weather is drastically different.',
    'If you want to collect them all, wait for the weather to change.',
]);
const MossdeepAstronomer = new NPC('Astronomer', [
    'Hey did you know about the Millennium Comet? We can see it in the sky right now, and it only comes around once every thousand years!',
    'There’s a legend that a mythical Wish Pokémon awakens when it passes over us. If you’re as strong as the Champion, maybe you’ll find it roaming around Hoenn granting wishes!',
]);
const PacifidlogDiver = new NPC('Diver', [
    'Yo! Find any cool stuff in chests lately?',
    ' I\'ve heard that if you beat a Dungeon a lot then the stuff you find in chests gets even more awesome.',
]);
const SootopolisWallace = new NPC('Gym Leader Wallace', [
    'The creators of the lands and ocean slumber within the Cave of Origin.',
    'However, they will only awaken when in the presence of a truly great trainer.',
    'You will have to overcome the Pokémon League before you have any chance to encounter them.',
]);
const ProfBirch = new ProfNPC('Prof. Birch', GameConstants.Region.hoenn, 'That\'s another regional Pokédex completed! Fantastic.', 'I really appreciate being able to see your outstanding progress, thank you! Sinnoh is next up.');
//Hoenn Towns
TownList['Littleroot Town'] = new Town('Littleroot Town', GameConstants.Region.hoenn, [LittleRootTownShop], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion)],
    npcs: [ProfBirch, LittlerootAide],
});
TownList['Oldale Town'] = new Town('Oldale Town', GameConstants.Region.hoenn, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 101)],
    npcs: [OldaleTrackingScientist],
});
TownList['Petalburg City'] = new Town('Petalburg City', GameConstants.Region.hoenn, [PetalburgCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 102)],
});
TownList['Rustboro City'] = new Town('Rustboro City', GameConstants.Region.hoenn, [RustboroCityShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Petalburg Woods'))],
});
TownList['Dewford Town'] = new Town('Dewford Town', GameConstants.Region.hoenn, [DewfordTownShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rusturf Tunnel'))],
});
TownList['Slateport City'] = new Town('Slateport City', GameConstants.Region.hoenn, [SlateportCityShop], {
    requirements: [
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Granite Cave')),
        new GymBadgeRequirement(BadgeEnums.Knuckle),
    ],
    npcs: [SlateportHoennRoamerNPC],
});
TownList['Mauville City'] = new Town('Mauville City', GameConstants.Region.hoenn, [MauvilleCityShop, HoennBerryMaster], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 110)],
});
TownList['Verdanturf Town'] = new Town('Verdanturf Town', GameConstants.Region.hoenn, [VerdanturfTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 117)],
});
TownList['Mt. Chimney'] = new Town('Mt. Chimney', GameConstants.Region.hoenn, [new MoveToDungeon(dungeonList['Fiery Path']), new MoveToDungeon(dungeonList['Mt. Chimney Crater']), new MoveToDungeon(dungeonList['Jagged Pass']), new MoveToDungeon(dungeonList['Magma Hideout'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 112)],
});
TownList['Lavaridge Town'] = new Town('Lavaridge Town', GameConstants.Region.hoenn, [LavaridgeTownShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Jagged Pass'))],
});
TownList['Fallarbor Town'] = new Town('Fallarbor Town', GameConstants.Region.hoenn, [FallarborTownShop, HoennFluteMaster], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 113)],
    npcs: [FallarborProfessorCozmo],
});
TownList['Fortree City'] = new Town('Fortree City', GameConstants.Region.hoenn, [FortreeCityShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Weather Institute'))],
    npcs: [FortreeWeatherman],
});
TownList['LilyCove City'] = new Town('LilyCove City', GameConstants.Region.hoenn, [DepartmentStoreShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 121)],
    npcs: [BigSpender],
});
TownList['Mossdeep City'] = new Town('Mossdeep City', GameConstants.Region.hoenn, [MossdeepCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 125)],
    npcs: [MossdeepAstronomer],
});
TownList['Pacifidlog Town'] = new Town('Pacifidlog Town', GameConstants.Region.hoenn, [PacifidlogTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 131)],
    npcs: [PacifidlogDiver],
});
TownList['Sootopolis City'] = new Town('Sootopolis City', GameConstants.Region.hoenn, [SootopolisCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 126), new GymBadgeRequirement(BadgeEnums.Mind)],
    npcs: [SootopolisWallace],
});
TownList['Ever Grande City'] = new Town('Ever Grande City', GameConstants.Region.hoenn, [EverGrandeCityShop], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Rain)],
});
TownList['Battle Frontier'] = new Town('Battle Frontier', GameConstants.Region.hoenn, [BattleFrontierShop, new BattleFrontierTownContent()], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)],
});
TownList['Pokémon League Hoenn'] = new Town('Pokémon League Hoenn', GameConstants.Region.hoenn, [GymList['Elite Sidney'], GymList['Elite Phoebe'], GymList['Elite Glacia'], GymList['Elite Drake'], GymList['Champion Wallace'], pokeLeagueShop()], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 128),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Hoenn')),
    ],
});
//Hoenn Dungeons
TownList['Petalburg Woods'] = new DungeonTown('Petalburg Woods', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 104)]);
TownList['Rusturf Tunnel'] = new DungeonTown('Rusturf Tunnel', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 116),
    new GymBadgeRequirement(BadgeEnums.Stone),
]);
TownList['Granite Cave'] = new DungeonTown('Granite Cave', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rusturf Tunnel'))]);
TownList['Fiery Path'] = new DungeonTown('Fiery Path', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 112)]);
TownList['Meteor Falls'] = new DungeonTown('Meteor Falls', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 114)]);
TownList['Mt. Chimney Crater'] = new DungeonTown('Mt. Chimney Crater', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Meteor Falls'))]);
TownList['Jagged Pass'] = new DungeonTown('Jagged Pass', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Chimney Crater'))]);
TownList['New Mauville'] = new DungeonTown('New Mauville', GameConstants.Region.hoenn, [new GymBadgeRequirement(BadgeEnums.Balance)]);
TownList['Weather Institute'] = new DungeonTown('Weather Institute', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 119)]);
TownList['Mt. Pyre'] = new DungeonTown('Mt. Pyre', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 122)]);
TownList['Magma Hideout'] = new DungeonTown('Magma Hideout', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Pyre'))]);
TownList['Aqua Hideout'] = new DungeonTown('Aqua Hideout', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Magma Hideout'))]);
TownList['Shoal Cave'] = new DungeonTown('Shoal Cave', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 125)]);
TownList['Cave of Origin'] = new DungeonTown('Cave of Origin', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 126),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Seafloor Cavern')),
]);
TownList['Seafloor Cavern'] = new DungeonTown('Seafloor Cavern', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 128),
    new GymBadgeRequirement(BadgeEnums.Mind),
]);
TownList['Sky Pillar'] = new DungeonTown('Sky Pillar', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 131),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Cave of Origin')),
]);
TownList['Victory Road Hoenn'] = new DungeonTown('Victory Road Hoenn', GameConstants.Region.hoenn, [new GymBadgeRequirement(BadgeEnums.Rain)]);
TownList['Sealed Chamber'] = new DungeonTown('Sealed Chamber', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 134),
    new GymBadgeRequirement(BadgeEnums.Mind),
]);
//Sinnoh Shops
const TwinleafTownShop = new Shop([
    ItemList['Pokeball'],
]);
const JubilifeCityShop = new Shop([
    ItemList['Hope_Digimental'],
    ItemList['Love_Digimental'],
]);
const OreburghCityShop = new Shop([
    ItemList['Mystery_egg'],
]);
const FloaromaTownShop = new Shop([
    ItemList['Kings_rock'],
    ItemList['Kindness_Digimental'],
]);
const EternaCityShop = new Shop([
    ItemList['Plant_egg'],
    ItemList['Purity_Digimental'],
]);
const HearthomeCityShop = new Shop([
    ItemList['Greatball'],
    ItemList['Soothe_bell'],
    ItemList['Fire_egg'],
    ItemList['Courage_Digimental'],
]);
const SolaceonTownShop = new Shop([
    ItemList['Light_Digimental'],
    ItemList['Fate_Digimental'],
    ItemList['Miracles_Digimental'],
    ItemList['Spiritomb'],
]);
const CelesticTownShop = new Shop([
    ItemList['Wind_egg'],
    ItemList['Dragon_scale'],
]);
const CanalaveCityShop = new Shop([
    ItemList['Earth_egg'],
    ItemList['Metal_coat'],
]);
const PalParkShop = new Shop([
    ItemList['Razor_claw'],
    ItemList['Razor_fang'],
    ItemList['Burpmon'],
    ItemList['Burpmon'],
    ItemList['Burpmon'],
]);
const SnowpointCityShop = new Shop([
    ItemList['Upgrade'],
]);
const SunyshoreCityShop = new Shop([
    ItemList['Electric_egg'],
    ItemList['Knowledge_Digimental'],
    ItemList['Deepsea_scale'],
    ItemList['Deepsea_tooth'],
]);
const SurvivalAreaShop = new Shop([
    ItemList['Electirizer'],
    ItemList['Magmarizer'],
]);
const ResortAreaShop = new Shop([
    ItemList['Reaper_cloth'],
    ItemList['Dubious_disc'],
    ItemList['Protector'],
]);
const PastoriaShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Burpmon'],
    ItemList['Water_egg'],
    ItemList['Sincerity_Digimental'],
    ItemList['Prism_scale'],
]);
//Sinnoh Berry Master
const SinnohBerryMaster = new BerryMasterShop([
    ItemList['Speed_Boost'],
    ItemList['Space_Boost'],
    ItemList['Surprise_Boost'],
    ItemList['Quality_Boost'],
    ItemList['Berry_Shovel'],
    ItemList['Mulch_Shovel'],
    ItemList['FarmHandRiley'],
]);
//Sinnoh NPCs
const TwinleafContestChampion = new NPC('Contest Champion', [
    'Welcome to Sinnoh! There are many legends and myths here. For example, it is said that trainers that conquer the Lake nearby, Lake Verity, will meet a mythical Pokémon known for Emotion roaming around the region. It sure would have been awesome to partner with that Pokémon in one of my routines!',
]);
const SandgemBeachcomber = new NPC('Beachcomber', [
    'Hmmm… Oh! Sorry, I Didn’t see you there! Sometimes the strangest things wash up on this beach, I just got caught up in the search.',
    'Just last week a weird blue egg with a red center showed up. I went to go pick it up, but then it hatched! I was so surprised that the little blue Pokémon just hopped right back into the ocean. Who knows, maybe you’ll find it roaming around the region!',
]);
const FloaromaFlowerGirl = new NPC('Flower Girl', [
    'Something amazing just happened!',
    'My friend was taking their Eevee on a walk through Eterna Forest, and it suddenly evolved!',
    'Can you believe that?',
]);
const EternaLassCaroline = new NPC('Lass Caroline', [
    'Oh you came from the Forest! That Old Chateau is so creepy isn’t it? I’ve heard that trainers that catch the weird ghost in the TV have found ghosts in other appliances. Even lawnmowers!',
]);
const OreburghConstructionWorker = new NPC('Construction Worker', [
    'I was doing some exploring in Mt. Coronet last week, and my Nosepass gained a lot of levels.',
    'I had a big suprise when he reached level 20 though!',
]);
const HearthomeContestFan = new NPC('Contest Fan', [
    'My favourite contestant had a big reveal for us this week!',
    'Their prized Magneton had evolved into a Magnezone!',
    'I\'m so happy for them, all of that training in Mt. Coronet must have paid off!',
]);
const PalParkWarden = new NPC('Pal Park Warden', [
    'Hey! Welcome to the Pal Park, have you been to my Dad’s Safari Zone in Kanto? We don’t have as many Pokémon here, but I’ve heard that a flower Pokémon found here can bloom when it’s sunny outside!',
]);
const CanalaveYoungBoy = new NPC('Young Boy', [
    'Oh hello! Say, have you ever heard of Cresselia? Once when I was really little I had a really bad dream I couldn’t wake up from, but then a kind trainer went to an island near here and got help from Cresselia to cure me!',
    'Maybe if you can prove yourself by conquering that island you could find Cresselia roaming around the region...',
]);
const SnowpointYoungGirl = new NPC('Young Girl', [
    'Someone told me that training an Eevee in Lake Acuity will make it evolve.',
    'They must be lying, how can that be true?!',
]);
const SunyshoreRibbonerJulia = new NPC('Ribboner Julia', [
    'Oh! I don’t get visitors often. My husband is a sailor who visits far away lands… he always tells me these fantastic things.',
    'Did you know that in Johto they don’t see Pokémon like Mamoswine? It’s strange too, because you don’t even need a stone to evolve Piloswine… maybe they should try the Day Care?',
]);
const SurvivalAreaSinnohRoamerNPC = new RoamerNPC('Hiker Kevin', [
    'I spotted a bunch of roaming Pokémon on {ROUTE_NAME}!',
], GameConstants.Region.sinnoh);
const ProfRowan = new ProfNPC('Prof. Rowan', GameConstants.Region.sinnoh, 'Congratulations, you\'re more than half-way completed on the national Pokédex!', 'Next stop is Unova! I\'ve always wanted to visit Castelia City personally...');
//Sinnoh Towns
TownList['Twinleaf Town'] = new Town('Twinleaf Town', GameConstants.Region.sinnoh, [TwinleafTownShop], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)],
    npcs: [TwinleafContestChampion],
});
TownList['Sandgem Town'] = new Town('Sandgem Town', GameConstants.Region.sinnoh, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 201)],
    npcs: [ProfRowan, SandgemBeachcomber],
});
TownList['Jubilife City'] = new Town('Jubilife City', GameConstants.Region.sinnoh, [JubilifeCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 202)],
});
TownList['Oreburgh City'] = new Town('Oreburgh City', GameConstants.Region.sinnoh, [OreburghCityShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Oreburgh Gate'))],
    npcs: [OreburghConstructionWorker],
});
TownList['Floaroma Town'] = new Town('Floaroma Town', GameConstants.Region.sinnoh, [FloaromaTownShop], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.sinnoh, 204),
        new GymBadgeRequirement(BadgeEnums.Coal),
    ],
    npcs: [FloaromaFlowerGirl],
});
TownList['Eterna City'] = new Town('Eterna City', GameConstants.Region.sinnoh, [EternaCityShop, new MoveToDungeon(dungeonList['Team Galactic Eterna Building'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Eterna Forest'))],
    npcs: [EternaLassCaroline],
});
TownList['Mt. Coronet'] = new Town('Mt. Coronet', GameConstants.Region.sinnoh, [new MoveToDungeon(dungeonList['Mt. Coronet South']), new MoveToDungeon(dungeonList['Mt. Coronet North']), new MoveToDungeon(dungeonList['Spear Pillar']), new MoveToDungeon(dungeonList['Hall of Origin'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 207)],
});
TownList['Hearthome City'] = new Town('Hearthome City', GameConstants.Region.sinnoh, [HearthomeCityShop, SinnohBerryMaster], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 208)],
    npcs: [HearthomeContestFan],
});
TownList['Solaceon Town'] = new Town('Solaceon Town', GameConstants.Region.sinnoh, [SolaceonTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 209)],
});
TownList['Veilstone City'] = new Town('Veilstone City', GameConstants.Region.sinnoh, [DepartmentStoreShop, new MoveToDungeon(dungeonList['Team Galactic HQ'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 215)],
    npcs: [BigSpender],
});
TownList['Pastoria City'] = new Town('Pastoria City', GameConstants.Region.sinnoh, [PastoriaShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 213)],
});
TownList['Celestic Town'] = new Town('Celestic Town', GameConstants.Region.sinnoh, [CelesticTownShop], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Fen)],
});
TownList['Pal Park'] = new Town('Pal Park', GameConstants.Region.sinnoh, [PalParkShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 221)],
    npcs: [PalParkWarden],
});
TownList['Canalave City'] = new Town('Canalave City', GameConstants.Region.sinnoh, [CanalaveCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 218)],
    npcs: [CanalaveYoungBoy],
});
TownList['Snowpoint City'] = new Town('Snowpoint City', GameConstants.Region.sinnoh, [SnowpointCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 217)],
    npcs: [SnowpointYoungGirl],
});
TownList['Sunyshore City'] = new Town('Sunyshore City', GameConstants.Region.sinnoh, [SunyshoreCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 222)],
    npcs: [SunyshoreRibbonerJulia],
});
TownList['Pokémon League Sinnoh'] = new Town('Pokémon League Sinnoh', GameConstants.Region.sinnoh, [], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Sinnoh'))],
});
TownList['Fight Area'] = new Town('Fight Area', GameConstants.Region.sinnoh, [], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)],
});
TownList['Survival Area'] = new Town('Survival Area', GameConstants.Region.sinnoh, [SurvivalAreaShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 225)],
    npcs: [SurvivalAreaSinnohRoamerNPC],
});
TownList['Resort Area'] = new Town('Resort Area', GameConstants.Region.sinnoh, [ResortAreaShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 229)],
});
TownList['Pokémon League Sinnoh'] = new Town('Pokémon League Sinnoh', GameConstants.Region.sinnoh, [GymList['Elite Aaron'], GymList['Elite Bertha'], GymList['Elite Flint'], GymList['Elite Lucian'], GymList['Champion Cynthia'], pokeLeagueShop()], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.sinnoh, 223),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Sinnoh')),
    ],
});
//Sinnoh Dungeons
TownList['Oreburgh Gate'] = new DungeonTown('Oreburgh Gate', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 203)]);
TownList['Valley Windworks'] = new DungeonTown('Valley Windworks', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 204),
    new GymBadgeRequirement(BadgeEnums.Coal),
]);
TownList['Eterna Forest'] = new DungeonTown('Eterna Forest', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 205),
    new GymBadgeRequirement(BadgeEnums.Coal),
]);
TownList['Old Chateau'] = new DungeonTown('Old Chateau', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 205),
    new GymBadgeRequirement(BadgeEnums.Forest),
]);
TownList['Team Galactic Eterna Building'] = new DungeonTown('Team Galactic Eterna Building', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Forest)]);
TownList['Wayward Cave'] = new DungeonTown('Wayward Cave', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 206)]);
TownList['Mt. Coronet South'] = new DungeonTown('Mt. Coronet South', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 207)]);
TownList['Solaceon Ruins'] = new DungeonTown('Solaceon Ruins', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 209)]);
TownList['Iron Island'] = new DungeonTown('Iron Island', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 218)]);
TownList['Lake Valor'] = new DungeonTown('Lake Valor', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Mine)]);
TownList['Lake Verity'] = new DungeonTown('Lake Verity', GameConstants.Region.sinnoh, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lake Valor'))]);
TownList['Mt. Coronet North'] = new DungeonTown('Mt. Coronet North', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 211),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lake Verity')),
]);
TownList['Lake Acuity'] = new DungeonTown('Lake Acuity', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Icicle)]);
TownList['Team Galactic HQ'] = new DungeonTown('Team Galactic HQ', GameConstants.Region.sinnoh, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lake Acuity'))]);
TownList['Spear Pillar'] = new DungeonTown('Spear Pillar', GameConstants.Region.sinnoh, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic HQ'))]);
TownList['Distortion World'] = new DungeonTown('Distortion World', GameConstants.Region.sinnoh, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Spear Pillar'))]);
TownList['Victory Road Sinnoh'] = new DungeonTown('Victory Road Sinnoh', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 223)]);
TownList['Sendoff Spring'] = new DungeonTown('Sendoff Spring', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]);
TownList['Hall of Origin'] = new DungeonTown('Hall of Origin', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]);
TownList['Fullmoon Island'] = new DungeonTown('Fullmoon Island', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]);
TownList['Newmoon Island'] = new DungeonTown('Newmoon Island', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]);
TownList['Flower Paradise'] = new DungeonTown('Flower Paradise', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 224),
    new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion),
]);
TownList['Stark Mountain'] = new DungeonTown('Stark Mountain', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 227)]);
TownList['Snowpoint Temple'] = new DungeonTown('Snowpoint Temple', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]);
//Unova Shops
const AspertiaCityShop = new Shop([
    ItemList['Pokeball'],
]);
const FloccesyTownShop = new Shop([
    ItemList['Mystery_egg'],
]);
const VirbankCityShop = new Shop([
    ItemList['Greatball'],
]);
const CasteliaCityShop = new Shop([
    ItemList['Kindness_Digimental'],
    ItemList['Water_egg'],
    ItemList['Kings_rock'],
]);
const NimbasaCityShop = new Shop([
    ItemList['Plant_egg'],
    ItemList['Electric_egg'],
    ItemList['Metal_coat'],
]);
const DriftveilCityShop = new Shop([
    ItemList['Burpmon'],
    ItemList['Razor_claw'],
    ItemList['Razor_fang'],
]);
const MistraltonCityShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Knowledge_Digimental'],
    ItemList['Upgrade'],
]);
const LentimasTownShop = new Shop([
    ItemList['Fire_egg'],
]);
const UndellaTownShop = new Shop([
    ItemList['Deepsea_scale'],
    ItemList['Deepsea_tooth'],
]);
const LacunosaTownShop = new Shop([
    ItemList['Earth_egg'],
]);
const OpelucidCityShop = new Shop([
    ItemList['Wind_egg'],
    ItemList['Dragon_scale'],
]);
const HumilauCityShop = new Shop([
    ItemList['Prism_scale'],
]);
const IcirrusCityShop = new Shop([
    ItemList['Dubious_disc'],
    ItemList['Reaper_cloth'],
    ItemList['Protector'],
]);
const BlackAndWhiteParkShop = new Shop([
    ItemList['Hope_Digimental'],
    ItemList['Love_Digimental'],
]);
const NacreneCityShop = new Shop([
    ItemList['Soothe_bell'],
]);
const StriatonCityShop = new Shop([
    ItemList['Purity_Digimental'],
    ItemList['Sincerity_Digimental'],
    ItemList['Courage_Digimental'],
]);
const AccumulaTownShop = new Shop([
    ItemList['Fate_Digimental'],
    ItemList['Miracles_Digimental'],
    ItemList['Light_Digimental'],
]);
const NuvemaTownShop = new Shop([
    ItemList['Electirizer'],
    ItemList['Magmarizer'],
]);
const AnvilleTownShop = new Shop([
    ItemList['Burpmon'],
]);
//Unova Gem Master
const UnovaFluteMaster = new GemMasterShop([]);
//Unova NPCs
const ExcitedChild = new NPC('Excited Child', [
    'Did you hear? Did you see? It was on TV!',
    'I was just watching my favorite show, The National Gymquirer. It was a live segment! Some hot shot trainer from Kanto defeated Drayden! It was amazing! That trainer is so cool! Drayden is like unbeatable.',
    'Then my programme got interrupted by an emergency broadcast. A report on the first confirmed sightings of Tornadus and Thundurus in over twenty-five years! I\'ve read so much about them, they are my favorites.',
    'Last time they were spotted they just roamed around, causing all kinds of mischief. According to my books anyway. I\'m sure that amazing trainer from the TV will want to catch these mighty forces of nature.',
]);
const CasteliaMusician = new NPC('Musician', [
    'Sup. Ya like jazz? No? Well then you should check out me and my band at the Sonata Cafe where we never play Jazz.',
    'Sometimes a cool singing Pokémon shows up and joins in on our set. I’ve heard that trainers as strong as the Champion have found it roaming around the region looking for Pokémon battles… but even I wouldn’t challenge it to a Music battle.',
]);
const NimbasaExplorer = new NPC('Explorer', [
    'Whew! The desert is rough out there, glad you\'ve made it all the way to Nimbasa.',
    'Sometimes I find some weird stuff out in the sand, sometimes even Pokémon hiding in Chests. Like this one time in Relic Castle, I found a Pokémon that looks like a statue that I\'ve never seen before!',
]);
const IcirrusFanClubChairman = new NPC('Fan Club Chairman', [
    'Legends say Kyurem is missing a part of itself. It is waiting for a hero to fill in the missing parts of its body with Truth or Ideals.',
    'The legendary dragons of Dragonspiral Tower are said to embody these very concepts. They sometimes leave a piece of their DNA behind after a battle.',
    'If you have DNA splicers, perhaps you can make Kyurem whole again.',
    'I\'ve never seen it, but supposedly it works just like any evolution stone.',
]);
const UnovaRoamerNPC = new RoamerNPC('Professor Juniper\'s Aide', [
    'Our research indicates a higher concentration of roaming Pokémon on {ROUTE_NAME}!',
], GameConstants.Region.unova);
const ProfJuniper = new ProfNPC('Prof. Juniper', GameConstants.Region.unova, 'Let me see your progress...Ah, fantastic, as usual!', 'Allow me some time to arrange tickets for your next destination.');
//Unova Towns
TownList['Aspertia City'] = new Town('Aspertia City', GameConstants.Region.unova, [AspertiaCityShop], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)],
    npcs: [],
});
TownList['Floccesy Town'] = new Town('Floccesy Town', GameConstants.Region.unova, [FloccesyTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 19)],
});
TownList['Virbank City'] = new Town('Virbank City', GameConstants.Region.unova, [VirbankCityShop], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Basic)],
});
TownList['Castelia City'] = new Town('Castelia City', GameConstants.Region.unova, [CasteliaCityShop, new MoveToDungeon(dungeonList['Castelia Sewers'])], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Toxic)],
    npcs: [CasteliaMusician],
});
TownList['Nimbasa City'] = new Town('Nimbasa City', GameConstants.Region.unova, [NimbasaCityShop], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.unova, 4),
        new GymBadgeRequirement(BadgeEnums.Insect),
    ],
    npcs: [NimbasaExplorer],
});
TownList['Driftveil City'] = new Town('Driftveil City', GameConstants.Region.unova, [DriftveilCityShop], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.unova, 5),
        new GymBadgeRequirement(BadgeEnums.Bolt),
    ],
});
TownList['Mistralton City'] = new Town('Mistralton City', GameConstants.Region.unova, [MistraltonCityShop], {
    requirements: [
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Chargestone Cave')),
        new GymBadgeRequirement(BadgeEnums.Quake),
    ],
});
TownList['Lentimas Town'] = new Town('Lentimas Town', GameConstants.Region.unova, [LentimasTownShop], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Jet)],
});
TownList['Undella Town'] = new Town('Undella Town', GameConstants.Region.unova, [UndellaTownShop, UnovaFluteMaster], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))],
});
TownList['Lacunosa Town'] = new Town('Lacunosa Town', GameConstants.Region.unova, [LacunosaTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 13)],
});
TownList['Opelucid City'] = new Town('Opelucid City', GameConstants.Region.unova, [OpelucidCityShop, new MoveToDungeon(dungeonList['Team Plasma Assault'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 11)],
});
TownList['Shopping Mall Nine'] = new Town('Shopping Mall Nine', GameConstants.Region.unova, [DepartmentStoreShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 9)],
});
TownList['Humilau City'] = new Town('Humilau City', GameConstants.Region.unova, [HumilauCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 21)],
    npcs: [ExcitedChild],
});
TownList['Icirrus City'] = new Town('Icirrus City', GameConstants.Region.unova, [IcirrusCityShop], {
    requirements: [new OneFromManyRequirement([
            new RouteKillRequirement(10, GameConstants.Region.unova, 8),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Twist Mountain')),
        ])],
    npcs: [IcirrusFanClubChairman],
});
TownList['Black and White Park'] = new Town('Black and White Park', GameConstants.Region.unova, [BlackAndWhiteParkShop], {
    requirements: [new OneFromManyRequirement([
            new MultiRequirement([
                new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
                new RouteKillRequirement(10, GameConstants.Region.unova, 14),
            ]),
            new RouteKillRequirement(10, GameConstants.Region.unova, 15),
        ])],
});
TownList['Nacrene City'] = new Town('Nacrene City', GameConstants.Region.unova, [NacreneCityShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pinwheel Forest'))],
});
TownList['Striaton City'] = new Town('Striaton City', GameConstants.Region.unova, [StriatonCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 3)],
});
TownList['Accumula Town'] = new Town('Accumula Town', GameConstants.Region.unova, [AccumulaTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 2)],
});
TownList['Nuvema Town'] = new Town('Nuvema Town', GameConstants.Region.unova, [NuvemaTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 1)],
    npcs: [ProfJuniper, UnovaRoamerNPC],
});
TownList['Anville Town'] = new Town('Anville Town', GameConstants.Region.unova, [AnvilleTownShop], {
    requirements: [
        new ObtainedPokemonRequirement(pokemonMap['Meloetta (aria)']),
        new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
    ],
});
TownList['Pokémon League Unova'] = new Town('Pokémon League Unova', GameConstants.Region.unova, [GymList['Elite Shauntal'], GymList['Elite Marshal'], GymList['Elite Grimsley'], GymList['Elite Caitlin'], GymList['Champion Iris'], pokeLeagueShop()], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.unova, 23),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Unova')),
    ],
});
//Unova Dungeons
TownList['Pledge Grove'] = new DungeonTown('Pledge Grove', GameConstants.Region.unova, [
    new ObtainedPokemonRequirement(pokemonMap.Burpmon),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Moor of Icirrus')),
]);
TownList['Floccesy Ranch'] = new DungeonTown('Floccesy Ranch', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 20)]);
TownList['Liberty Garden'] = new DungeonTown('Liberty Garden', GameConstants.Region.unova, 
//Victini dungeon, maybe unlock later
[new GymBadgeRequirement(BadgeEnums.Toxic)]);
TownList['Castelia Sewers'] = new DungeonTown('Castelia Sewers', GameConstants.Region.unova, [new GymBadgeRequirement(BadgeEnums.Toxic)]);
TownList['Relic Passage'] = new DungeonTown('Relic Passage', GameConstants.Region.unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 5),
    new GymBadgeRequirement(BadgeEnums.Bolt),
]);
TownList['Relic Castle'] = new DungeonTown('Relic Castle', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 25)]);
TownList['Lostlorn Forest'] = new DungeonTown('Lostlorn Forest', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 16)]);
TownList['Chargestone Cave'] = new DungeonTown('Chargestone Cave', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 6)]);
TownList['Mistralton Cave'] = new DungeonTown('Mistralton Cave', GameConstants.Region.unova, [
    new GymBadgeRequirement(BadgeEnums.Quake),
    new RouteKillRequirement(10, GameConstants.Region.unova, 6),
]);
TownList['Celestial Tower'] = new DungeonTown('Celestial Tower', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 7)]);
TownList['Reversal Mountain'] = new DungeonTown('Reversal Mountain', GameConstants.Region.unova, [new GymBadgeRequirement(BadgeEnums.Jet)]);
TownList['Team Plasma Assault'] = new DungeonTown('Team Plasma Assault', GameConstants.Region.unova, [
    new GymBadgeRequirement(BadgeEnums.Legend),
]);
TownList['Seaside Cave'] = new DungeonTown('Seaside Cave', GameConstants.Region.unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 24),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Plasma Assault')),
]);
TownList['Plasma Frigate'] = new DungeonTown('Plasma Frigate', GameConstants.Region.unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 22),
    new GymBadgeRequirement(BadgeEnums.Wave),
]);
TownList['Giant Chasm'] = new DungeonTown('Giant Chasm', GameConstants.Region.unova, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Plasma Frigate'))]);
TownList['Cave of Being'] = new DungeonTown('Cave of Being', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 23)]);
TownList['Abundant Shrine'] = new DungeonTown('Abundant Shrine', GameConstants.Region.unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 23),
    new RouteKillRequirement(10, GameConstants.Region.unova, 14),
    new ObtainedPokemonRequirement(pokemonMap.Burpmon),
    new ObtainedPokemonRequirement(pokemonMap.Burpmon),
]);
TownList['Victory Road Unova'] = new DungeonTown('Victory Road Unova', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 23)]);
TownList['Twist Mountain'] = new DungeonTown('Twist Mountain', GameConstants.Region.unova, [new OneFromManyRequirement([
        new MultiRequirement([
            new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
            new RouteKillRequirement(10, GameConstants.Region.unova, 7),
        ]),
        new RouteKillRequirement(10, GameConstants.Region.unova, 8),
    ])]);
TownList['Dragonspiral Tower'] = new DungeonTown('Dragonspiral Tower', GameConstants.Region.unova, [new OneFromManyRequirement([
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Twist Mountain')),
        new RouteKillRequirement(10, GameConstants.Region.unova, 8),
    ])]);
TownList['Moor of Icirrus'] = new DungeonTown('Moor of Icirrus', GameConstants.Region.unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 8),
    new ObtainedPokemonRequirement(pokemonMap.Burpmon),
    new ObtainedPokemonRequirement(pokemonMap.Burpmon),
    new ObtainedPokemonRequirement(pokemonMap.Burpmon),
]);
TownList['Pinwheel Forest'] = new DungeonTown('Pinwheel Forest', GameConstants.Region.unova, [new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)]);
TownList['Dreamyard'] = new DungeonTown('Dreamyard', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 3)]);
TownList['P2 Laboratory'] = new DungeonTown('P2 Laboratory', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 17)]);
//Kalos Shops
const VanivilleTownShop = new Shop([
    ItemList['Pokeball'],
]);
const SantaluneCityShop = new Shop([
    ItemList['Mystery_egg'],
]);
const CamphrierTownShop = new Shop([
    ItemList['Greatball'],
    ItemList['Knowledge_Digimental'],
    ItemList['Electric_egg'],
]);
const AmbretteTownShop = new Shop([
    ItemList['Water_egg'],
    ItemList['Sincerity_Digimental'],
]);
const GeosengeTownShop = new Shop([
    ItemList['Fire_egg'],
    ItemList['Courage_Digimental'],
    ItemList['Kings_rock'],
]);
const ShalourCityShop = new Shop([
    ItemList['Earth_egg'],
    ItemList['Metal_coat'],
    ItemList['Kindness_Digimental'],
]);
const CoumarineCityShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Plant_egg'],
    ItemList['Purity_Digimental'],
    ItemList['Electirizer'],
    ItemList['Magmarizer'],
]);
const LaverreCityShop = new Shop([
    ItemList['Sachet'],
    ItemList['Whipped_dream'],
    ItemList['Deepsea_scale'],
    ItemList['Deepsea_tooth'],
]);
const DendemilleTownShop = new Shop([
    ItemList['Fate_Digimental'],
    ItemList['Miracles_Digimental'],
    ItemList['Light_Digimental'],
    ItemList['Upgrade'],
]);
const AnistarCityShop = new Shop([
    ItemList['Love_Digimental'],
    ItemList['Hope_Digimental'],
    ItemList['Razor_claw'],
    ItemList['Razor_fang'],
]);
const CouriwayTownShop = new Shop([
    ItemList['Wind_egg'],
    ItemList['Dragon_scale'],
    ItemList['Prism_scale'],
]);
const SnowbelleCityShop = new Shop([
    ItemList['Protector'],
    ItemList['Reaper_cloth'],
    ItemList['Dubious_disc'],
]);
//Kalos NPCs
const LumioseEngineer = new NPC('Engineer', [
    'I\'m glad to be back in the city after so long at the Power Plant, it\'s so dusty out there!.',
    'Rumor has it that if you conquer the Kalos Power Plant enough times that a strong Pokémon will challenge you made of Fire and Water. But I bet you’d have to be the Champion before it finds you worthy… I certainly have never seen it!',
]);
const CamphrierFlabébéEnthusiast = new NPC('Flabébé Enthusiast', [
    'Ah, isn\'t Flabébé such an eye-catching Pokémon? All these different lovely colors…',
    'If you\'re searching for the yellow and blue kinds, look no further than the Farm!',
    'They simply can\'t resist berries that match their colors - just plant a few and they\'ll soon come wandering in.',
]);
const CoumarineBirdwatcher = new NPC('Birdwatcher', [
    'I\'ve heard there is a cave you can find if you go out on the ocean a little ways.',
    'Apparently defeating a strong creature there unleashes some energy.',
    'There are rumors that the energy calls some legendary birds to roam Kalos!',
]);
const LaverreFurisodeGirlKatherine = new NPC('Furisode Girl Katherine', [
    'Don\'t you find Goomy to be an interesting Pokémon? I certainly think so, even though it isn\'t a problem for my Pokémon~',
    'I\'ve heard its evolutionary line loves damp conditions, and apparently if you train a Sliggoo during rainy or foggy weather something marvelous happens!',
]);
const AnistarKalosRoamerNPC = new RoamerNPC('Hex Maniac Melanie', [
    'The spirits tell me roaming Pokémon have been spotted on {ROUTE_NAME}!',
], GameConstants.Region.kalos);
const KiloudeConfusedHiker = new NPC('Confused Hiker', [
    'Whoa! What the- Where am I? How did I get here? Last thing I can remember I was in Reflection Cave when this little Pokémon with hoops threw something at me… Oh you’ve beaten the Pokémon League? Maybe you can find it roaming around the region so you can tame that little prankster. Now how am I gonna get home…',
]);
const ProfSycamore = new ProfNPC('Prof. Sycamore', GameConstants.Region.kalos, 'You\'re encountering Pokémon at a really good clip, aren\'t you? Congratulations! You completed the Pokédex!', 'Onward to Alola, shall we?');
//Kalos Towns
TownList['Vaniville Town'] = new Town('Vaniville Town', GameConstants.Region.kalos, [VanivilleTownShop], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)],
    npcs: [],
});
TownList['Aquacorde Town'] = new Town('Aquacorde Town', GameConstants.Region.kalos, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 1)],
});
TownList['Santalune City'] = new Town('Santalune City', GameConstants.Region.kalos, [SantaluneCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 3)],
});
TownList['Lumiose City'] = new Town('Lumiose City', GameConstants.Region.kalos, [DepartmentStoreShop, SantaluneCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 4)],
    npcs: [ProfSycamore, LumioseEngineer],
});
TownList['Camphrier Town'] = new Town('Camphrier Town', GameConstants.Region.kalos, [CamphrierTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 5)],
    npcs: [CamphrierFlabébéEnthusiast],
});
TownList['Ambrette Town'] = new Town('Ambrette Town', GameConstants.Region.kalos, [AmbretteTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 8)],
});
TownList['Cyllage City'] = new Town('Cyllage City', GameConstants.Region.kalos, [], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glittering Cave'))],
});
TownList['Geosenge Town'] = new Town('Geosenge Town', GameConstants.Region.kalos, [GeosengeTownShop, new MoveToDungeon(dungeonList['Team Flare Secret HQ'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 10)],
});
TownList['Shalour City'] = new Town('Shalour City', GameConstants.Region.kalos, [ShalourCityShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reflection Cave'))],
});
TownList['Coumarine City'] = new Town('Coumarine City', GameConstants.Region.kalos, [CoumarineCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 12)],
    npcs: [CoumarineBirdwatcher],
});
TownList['Laverre City'] = new Town('Laverre City', GameConstants.Region.kalos, [LaverreCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 14)],
    npcs: [LaverreFurisodeGirlKatherine],
});
TownList['Dendemille Town'] = new Town('Dendemille Town', GameConstants.Region.kalos, [DendemilleTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 15)],
});
TownList['Anistar City'] = new Town('Anistar City', GameConstants.Region.kalos, [AnistarCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 17)],
    npcs: [AnistarKalosRoamerNPC],
});
TownList['Couriway Town'] = new Town('Couriway Town', GameConstants.Region.kalos, [CouriwayTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 18)],
});
TownList['Snowbelle City'] = new Town('Snowbelle City', GameConstants.Region.kalos, [SnowbelleCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 19)],
});
TownList['Kiloude City'] = new Town('Kiloude City', GameConstants.Region.kalos, [], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)],
    npcs: [KiloudeConfusedHiker],
});
TownList['Pokémon League Kalos'] = new Town('Pokémon League Kalos', GameConstants.Region.kalos, [GymList['Elite Malva'], GymList['Elite Siebold'], GymList['Elite Wikstrom'], GymList['Elite Drasna'], GymList['Champion Diantha'], pokeLeagueShop()], {
    requirements: [
        new OneFromManyRequirement([
            new RouteKillRequirement(10, GameConstants.Region.kalos, 21),
            new RouteKillRequirement(10, GameConstants.Region.kalos, 22),
        ]),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Kalos')),
    ],
});
//Kalos Dungeons
TownList['Santalune Forest'] = new DungeonTown('Santalune Forest', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 2)]);
TownList['Parfum Palace'] = new DungeonTown('Parfum Palace', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 6)]);
TownList['Connecting Cave'] = new DungeonTown('Connecting Cave', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 7)]);
TownList['Glittering Cave'] = new DungeonTown('Glittering Cave', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 9)]);
TownList['Reflection Cave'] = new DungeonTown('Reflection Cave', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 11)]);
//Tower of Mastery?
TownList['Sea Spirit\'s Den'] = new DungeonTown('Sea Spirit\'s Den', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 23)]);
TownList['Pokéball Factory'] = new DungeonTown('Pokéball Factory', GameConstants.Region.kalos, [new GymBadgeRequirement(BadgeEnums.Fairy)]);
TownList['Kalos Power Plant'] = new DungeonTown('Kalos Power Plant', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 13), new GymBadgeRequirement(BadgeEnums.Plant)]);
TownList['Lost Hotel'] = new DungeonTown('Lost Hotel', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 15)]);
TownList['Frost Cavern'] = new DungeonTown('Frost Cavern', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 15)]);
TownList['Team Flare Secret HQ'] = new DungeonTown('Team Flare Secret HQ', GameConstants.Region.kalos, [new GymBadgeRequirement(BadgeEnums.Psychic)]);
TownList['Terminus Cave'] = new DungeonTown('Terminus Cave', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 18)]);
TownList['Pokémon Village'] = new DungeonTown('Pokémon Village', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 20)]);
TownList['Victory Road Kalos'] = new DungeonTown('Victory Road Kalos', GameConstants.Region.kalos, [
    new GymBadgeRequirement(BadgeEnums.Iceberg),
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kalos, 21),
        new RouteKillRequirement(10, GameConstants.Region.kalos, 22),
    ]),
]);
//Unknown Cave?
//Alola Shops
const IkiTownOutskirtsShop = new Shop([
    ItemList['Pokeball'],
]);
const HauoliCityShop = new Shop([
    ItemList['Mystery_egg'],
    ItemList['Miracles_Digimental'],
    ItemList['Fate_Digimental'],
    ItemList['Light_Digimental'],
]);
const HeaheaCityShop = new Shop([
    ItemList['Greatball'],
    ItemList['Sincerity_Digimental'],
    ItemList['Metal_coat'],
    ItemList['Kings_rock'],
]);
const PaniolaTownShop = new Shop([
    ItemList['Plant_egg'],
    ItemList['Fire_egg'],
    ItemList['Water_egg'],
]);
const KonikoniCityShop = new Shop([
    ItemList['Courage_Digimental'],
    ItemList['Soothe_bell'],
    ItemList['Kindness_Digimental'],
]);
const AetherParadiseShop = new Shop([
    ItemList['Type: Null'],
    ItemList['Upgrade'],
]);
const MalieCityShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Knowledge_Digimental'],
    ItemList['Electric_egg'],
    ItemList['Magmarizer'],
    ItemList['Electirizer'],
]);
const TapuVillageShop = new Shop([
    ItemList['Friendship_Digimental'],
    ItemList['Razor_claw'],
    ItemList['Razor_fang'],
]);
const SeafolkVillageShop = new Shop([
    ItemList['Earth_egg'],
    ItemList['Deepsea_scale'],
    ItemList['Deepsea_tooth'],
    ItemList['Prism_scale'],
    ItemList['Sachet'],
    ItemList['Whipped_dream'],
]);
const ExeggutorIslandShop = new Shop([
    ItemList['Wind_egg'],
    ItemList['Purity_Digimental'],
    ItemList['Dragon_scale'],
    ItemList['Protector'],
    ItemList['Dubious_disc'],
    ItemList['Reaper_cloth'],
]);
const AltaroftheSunneandMooneShop = new Shop([
    ItemList['Poipole'],
    ItemList['Love_Digimental'],
    ItemList['Hope_Digimental'],
]);
//Alola NPCs
const IkiOutskirtsMom = new NPC('Scratch Cat Girl', [
    'I love cats very much, but dogs aren\'t so bad either.',
    'Out of all the dog like Pokémon, I think Rockruff is definitely the most adorable. And it even has three evolutions! One during the day, one at night and one in between, from 5 to 6 o\'clock.',
    'What\'s that? AM or PM?',
    'Yes.',
]);
const KukuisLabProfessor = new NPC('Professor Kukui', [
    'Are you looking for some rare Pokémon? Maybe I can help with that. Ask away!',
    'Ultra Beast? Never heard of it. I have no idea what that is. As far as I know they simply do not exist.',
    'Meltan? What\'s a Meltan? Nope, don\'t know about that one either.',
    'You seem very sure about this. Look, if you\'re so certain that these things you are talking about are real, I\'m sure they will show up sooner or later. If you\'re patient...',
    'You got me all excited. We\'ll WAIT FOR these new rare Pokémon together. Hold on, let me just UPDATE my calendar. Just to be sure I\'m free to investigate these new Pokémon that only you know about when they show up. I wouldn\'t miss this for the world.',
]);
const IkiKahuna = new NPC('Kahuna Hala', [
    'Welcome to Alola!',
    'Here we don\'t have gyms. We have the Island Challenge. On each of our four islands you will complete one or more trials.',
    'After completing all of an island\'s trials you will battle that island\'s Kahuna in a Grand trial.',
    'This island only has one trial: Captain Ilima\'s trial in Verdant Cavern, below the Melemele Woods. Come back here after clearing that challenge for your Grand trial battle.',
]);
const HeaheaCafeOwner = new NPC('Café Owner', [
    'Akala Island has three trials.',
    'Captain Lana\'s trial in Brooklet Hill, Captain Kiawe\'s trial in Wela Volcano Park and Captain Mallow\'s trial in Lush Jungle.',
    'For what it\'s worth, I say don\'t go to any of those places. Too wet, too hot and too... jungly. Why not stay here? Have a coffee! Enjoy the city!',
    'Or go to Konikoni City down south. You might even meet our Kahuna there!',
]);
const PaniolaTownActor = new NPC('Actor Meredith', [
    'I love Oricorio. I can tell you all about it!',
    'Each of the four islands in Alola has its own meadow, and each meadow has its own form of Oricorio. Each island, except for Akala Island. So you\'d think there\'s only three forms of Oricorio, right?',
    'Wrong! There is a fourth! Did you know you can find all of the Oricorio forms on the farm? One of them doesn\'t appear anywhere else!',
    'Each Oricorio form is attracted to the berry color that matches its own style. Red for Baile style, yellow for Pom-Pom style, pink for Pa\'u style and purple for Sensu style.',
    'You want to know which one can only be found on the farm? I\'m sure you can figure that out yourself. Simple process of elimination really.',
]);
const RoyalAvenueSpectator = new NPC('Spectator', [
    'I think battles in the Battle Royal Dome are more like games of chance. But Battle Royals are nothing compared to trying to evolve an Alolan Raichu with a Thunderstone.',
    'Evolving Pikachu or Exeggcute in Alola can result in a new form! Sometimes.',
]);
const KonikoniKahuna = new NPC('Kahuna Olivia', [
    'What do you mean Grand trials are just like gym battles? It\'s a totally different thing!',
    'Come fight me in our very special and unique brand new Pokémon League and see if you still think our Island Challenge is nothing special!',
]);
const MalieKahuna = new NPC('Kahuna Nanu', [
    'A trial-goer, huh? Figures.',
    'Just go clear Captain Sophocles\' trial at the Hokulani Observatory and Captain Acerola\'s Trial at the Thrifty Megamart. And take care of those Team Skull punks in Po Town while you\'re at it.',
    'Then come back here so we can get this Grand trial over with.',
]);
const TapuWorker = new NPC('Worker', [
    'Yesterday was my first day working on Mount Lanakila. I was up there maintaining the paths to the new Pokémon League.',
    'My trusty Crabrawler was with me. He was smashing some rocks that were blocking the path, having a grand ol\' time like usual, when suddenly we were attacked by a wild pokémon!',
    'After the battle Crabrawler evolved! I didn\'t even know he could do that. He\'s so different now. But I still love him. He\'s my best friend, and he\'s even better at rock smashing now!',
]);
const SeafolkCaptain = new NPC('Captain Mina', [
    'My trial is in this town. Right there, inside my very own houseboat. However, I want you to clear the trial in Vast Poni Canyon first. It has no Captain, so you\'ll be all on your own. Be careful.',
    'If you can clear my trial you\'ll find our Kahuna on Exeggutor Island.',
]);
const AetherParadiseAlolaRoamerNPC = new RoamerNPC('Assistant Branch Chief Wicke', [
    'Some very rare Pokémon have been sighted on {ROUTE_NAME}. I hope we can learn more about them.',
], GameConstants.Region.alola);
const ProfKukui = new ProfNPC('Prof. Kukui', GameConstants.Region.alola, 'TODO', 'TODO');
//Alola Towns
TownList['Iki Town Outskirts'] = new Town('Iki Town Outskirts', GameConstants.Region.alola, [IkiTownOutskirtsShop], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)],
    npcs: [IkiOutskirtsMom],
});
TownList['Iki Town'] = new Town('Iki Town', GameConstants.Region.alola, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 1)],
    npcs: [IkiKahuna],
});
TownList['Professor Kukui\'s Lab'] = new Town('Professor Kukui\'s Lab', GameConstants.Region.alola, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 18)],
    npcs: [KukuisLabProfessor /*ProfKukui*/],
});
TownList['Hau\'oli City'] = new Town('Hau\'oli City', GameConstants.Region.alola, [HauoliCityShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Trainers\' School'))],
});
TownList['Melemele Woods'] = new Town('Melemele Woods', GameConstants.Region.alola, [new MoveToDungeon(dungeonList['Verdant Cavern']), new MoveToDungeon(dungeonList['Melemele Meadow']), new MoveToDungeon(dungeonList['Ruins of Conflict'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 2)],
});
//TODO: Change requirement when UB questline is merged.
TownList['Roadside Motel'] = new Town('Roadside Motel', GameConstants.Region.alola, [], {
    // requirements: [new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)],
    requirements: [new NullRequirement()],
});
TownList['Heahea City'] = new Town('Heahea City', GameConstants.Region.alola, [HeaheaCityShop, new DockTownContent()], {
    requirements: [new GymBadgeRequirement(BadgeEnums.FightiniumZ)],
    npcs: [HeaheaCafeOwner],
});
TownList['Paniola Town'] = new Town('Paniola Town', GameConstants.Region.alola, [PaniolaTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 4)],
    npcs: [PaniolaTownActor],
});
TownList['Royal Avenue'] = new Town('Royal Avenue', GameConstants.Region.alola, [DepartmentStoreShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 6)],
    npcs: [RoyalAvenueSpectator],
});
TownList['Konikoni City'] = new Town('Konikoni City', GameConstants.Region.alola, [KonikoniCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 9)],
    npcs: [KonikoniKahuna],
});
TownList['Aether Paradise'] = new Town('Aether Paradise', GameConstants.Region.alola, [TemporaryBattleList['Ultra Wormhole'], AetherParadiseShop, new MoveToDungeon(dungeonList['Aether Foundation'])], {
    requirements: [new GymBadgeRequirement(BadgeEnums.RockiumZ)],
    npcs: [AetherParadiseAlolaRoamerNPC],
});
TownList['Malie City'] = new Town('Malie City', GameConstants.Region.alola, [MalieCityShop, new DockTownContent()], {
    requirements: [new TemporaryBattleRequirement('Ultra Wormhole')],
    npcs: [MalieKahuna],
});
TownList['Tapu Village'] = new Town('Tapu Village', GameConstants.Region.alola, [TapuVillageShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 13)],
    npcs: [TapuWorker],
});
TownList['Seafolk Village'] = new Town('Seafolk Village', GameConstants.Region.alola, [SeafolkVillageShop, new MoveToDungeon(dungeonList['Mina\'s Houseboat'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Aether Foundation'))],
    npcs: [SeafolkCaptain],
});
TownList['Exeggutor Island'] = new Town('Exeggutor Island', GameConstants.Region.alola, [ExeggutorIslandShop, new MoveToDungeon(dungeonList['Exeggutor Island Hill'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 25)],
});
TownList['Altar of the Sunne and Moone'] = new Town('Altar of the Sunne and Moone', GameConstants.Region.alola, [TemporaryBattleList['Ultra Megalopolis'], AltaroftheSunneandMooneShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Vast Poni Canyon'))],
});
TownList['Pokémon League Alola'] = new Town('Pokémon League Alola', GameConstants.Region.alola, [GymList['Elite Molayne'], GymList['Elite Olivia'], GymList['Elite Acerola'], GymList['Elite Kahili'], GymList['Champion Hau'], pokeLeagueShop()], {
    requirements: [
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mount Lanakila')),
    ],
});
//Alola Dungeons
TownList['Trainers\' School'] = new DungeonTown('Trainers\' School', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 18)]);
TownList['Hau\'oli Cemetery'] = new DungeonTown('Hau\'oli Cemetery', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 2)]);
TownList['Verdant Cavern'] = new DungeonTown('Verdant Cavern', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 2)]);
TownList['Melemele Meadow'] = new DungeonTown('Melemele Meadow', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 3)]);
TownList['Seaward Cave'] = new DungeonTown('Seaward Cave', GameConstants.Region.alola, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Melemele Meadow'))]);
TownList['Ten Carat Hill'] = new DungeonTown('Ten Carat Hill', GameConstants.Region.alola, [new GymBadgeRequirement(BadgeEnums.FightiniumZ)]);
TownList['Pikachu Valley'] = new DungeonTown('Pikachu Valley', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 4)]);
TownList['Paniola Ranch'] = new DungeonTown('Paniola Ranch', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 4)]);
TownList['Brooklet Hill'] = new DungeonTown('Brooklet Hill', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 5)]);
TownList['Wela Volcano Park'] = new DungeonTown('Wela Volcano Park', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 7)]);
TownList['Lush Jungle'] = new DungeonTown('Lush Jungle', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 8)]);
TownList['Diglett\'s Tunnel'] = new DungeonTown('Diglett\'s Tunnel', GameConstants.Region.alola, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lush Jungle'))]);
TownList['Memorial Hill'] = new DungeonTown('Memorial Hill', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 9)]);
TownList['Malie Garden'] = new DungeonTown('Malie Garden', GameConstants.Region.alola, [new TemporaryBattleRequirement('Ultra Wormhole')] //Replace with Ather Paradise 1 if implemented
);
TownList['Hokulani Observatory'] = new DungeonTown('Hokulani Observatory', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 22)]);
TownList['Thrifty Megamart'] = new DungeonTown('Thrifty Megamart', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 14)]);
TownList['Ula\'ula Meadow'] = new DungeonTown('Ula\'ula Meadow', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 16)]);
TownList['Po Town'] = new DungeonTown('Po Town', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 17)]);
TownList['Aether Foundation'] = new DungeonTown('Aether Foundation', GameConstants.Region.alola, [new GymBadgeRequirement(BadgeEnums.DarkiniumZ)]);
TownList['Exeggutor Island Hill'] = new DungeonTown('Exeggutor Island Hill', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 25)]);
TownList['Vast Poni Canyon'] = new DungeonTown('Vast Poni Canyon', GameConstants.Region.alola, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Exeggutor Island Hill'))]);
TownList['Mina\'s Houseboat'] = new DungeonTown('Mina\'s Houseboat', GameConstants.Region.alola, [new TemporaryBattleRequirement('Ultra Megalopolis')]);
TownList['Mount Lanakila'] = new DungeonTown('Mount Lanakila', GameConstants.Region.alola, [new GymBadgeRequirement(BadgeEnums.GroundiumZ)]);
TownList['Lake of the Sunne and Moone'] = new DungeonTown('Lake of the Sunne and Moone', GameConstants.Region.alola, [new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)]);
TownList['Ruins of Conflict'] = new DungeonTown('Ruins of Conflict', GameConstants.Region.alola, [new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)]);
TownList['Ruins of Life'] = new DungeonTown('Ruins of Life', GameConstants.Region.alola, [
    new RouteKillRequirement(10, GameConstants.Region.alola, 21),
    new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion),
]);
TownList['Ruins of Abundance'] = new DungeonTown('Ruins of Abundance', GameConstants.Region.alola, [
    new RouteKillRequirement(10, GameConstants.Region.alola, 23),
    new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion),
]);
TownList['Ruins of Hope'] = new DungeonTown('Ruins of Hope', GameConstants.Region.alola, [
    new RouteKillRequirement(10, GameConstants.Region.alola, 26),
    new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion),
]);
TownList['Poni Meadow'] = new DungeonTown('Poni Meadow', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 28)]);
//TODO: Change requirement when UB questline is merged.
TownList['Resolution Cave'] = new DungeonTown('Resolution Cave', GameConstants.Region.alola, 
//[new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Poni Meadow'))]
[new NullRequirement()]);
//Galar Shops
const PostwickShop = new Shop([
    ItemList['Pokeball'],
]);
const WedgehurstShop = new Shop([
    ItemList['Greatball'],
    ItemList['Mystery_egg'],
]);
const CirchesterShop = new Shop([
    ItemList['Friendship_Digimental'],
]);
const TurffieldShop = new Shop([
    ItemList['Plant_egg'],
]);
const HulburyShop = new Shop([
    ItemList['Water_egg'],
    ItemList['Toxel'],
]);
const MotostokeShop = new Shop([
    ItemList['Fire_egg'],
]);
const HammerlockeShop = new Shop([
    ItemList['Wind_egg'],
    ItemList['Eternatus'],
]);
const StowonSideShop = new Shop([
    ItemList['Earth_egg'],
]);
const SpikemuthShop = new Shop([
    ItemList['Electric_egg'],
]);
const WyndonShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Greatball'],
    ItemList['Ultraball'],
    ItemList['SmallRestore'],
    ItemList['MediumRestore'],
    ItemList['LargeRestore'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Lucky_pill'],
    ItemList['Intel_floppy'],
    ItemList['Item_magnet'],
    ItemList['Lucky_floppy'],
]);
//Galar NPC
const Mom = new NPC('Mom', [
    'Don\'t go too far into the Slumbering Weald.',
    'I\'ve heard there are some very strong Pokemon in there.',
    'Only those who beat the champion are strong enough to face them!',
]);
const TrainStationGuy = new NPC('Train Station Guy', [
    'There are some areas around Galar that you can only reach after beating the Champion.',
    'One is sparsely populated, but the other is teeming with Pokemon.',
    'There are plenty of unique, powerful ones there, too!',
]);
const ProfMagnolia = new ProfNPC('Prof. Magnolia', GameConstants.Region.galar, 'TODO: Add text before Galar is released', 'TODO: Add text before Galar is released');
//Galar towns
TownList['Postwick'] = new Town('Postwick', GameConstants.Region.galar, [PostwickShop], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)],
    npcs: [ProfMagnolia, Mom],
});
TownList['Wedgehurst'] = new Town('Wedgehurst', GameConstants.Region.galar, [WedgehurstShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 1)],
    npcs: [TrainStationGuy],
});
TownList['Motostoke'] = new Town('Motostoke', GameConstants.Region.galar, [MotostokeShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 6)],
});
TownList['Turffield'] = new Town('Turffield', GameConstants.Region.galar, [TurffieldShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 11)],
});
TownList['Hulbury'] = new Town('Hulbury', GameConstants.Region.galar, [HulburyShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 12)],
});
TownList['Stow-on-Side'] = new Town('Stow-on-Side', GameConstants.Region.galar, [GymList['Stow-on-Side1'], GymList['Stow-on-Side2'], StowonSideShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 15)],
});
TownList['Ballonlea'] = new Town('Ballonlea', GameConstants.Region.galar, [], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glimwood Tangle'))],
});
TownList['Hammerlocke'] = new Town('Hammerlocke', GameConstants.Region.galar, [HammerlockeShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 14)],
});
TownList['Circhester'] = new Town('Circhester', GameConstants.Region.galar, [GymList['Circhester1'], GymList['Circhester2'], CirchesterShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 18)],
});
TownList['Spikemuth'] = new Town('Spikemuth', GameConstants.Region.galar, [SpikemuthShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 22)],
});
TownList['Wyndon'] = new Town('Wyndon', GameConstants.Region.galar, [WyndonShop, new MoveToDungeon(dungeonList['Rose Tower'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 24)],
});
TownList['Wyndon Stadium'] = new Town('Wyndon Stadium', GameConstants.Region.galar, [GymList['Trainer Marnie'], GymList['Gym Leader Bede'], GymList['Trainer Hop'], GymList['Champion Leon'], pokeLeagueShop()], {
    requirements: [
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rose Tower')),
    ],
});
//Isle of Armor towns
TownList['Master Dojo'] = new Town('Master Dojo', GameConstants.Region.galar, [new MoveToDungeon(dungeonList['Master Dojo Trial'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 1)],
});
TownList['Master Dojo Battlefield'] = new Town('Master Dojo Battlefield', GameConstants.Region.galar, [GymList['Gym Leader Klara'], GymList['Gym Leader Avery'], GymList['Dojo Master Mustard'], pokeLeagueShop()], {
    requirements: [
        new MultiRequirement([
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tower of Darkness')),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tower of Water')),
        ]),
    ],
});
//Crown Tundra Towns
TownList['Freezington'] = new Town('Freezington', GameConstants.Region.galar, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 1)],
});
//Galar Dungeons
TownList['Slumbering Weald'] = new DungeonTown('Slumbering Weald', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)]);
TownList['Inner Slumbering Weald'] = new DungeonTown('Inner Slumbering Weald', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)]);
TownList['Galar Mine'] = new DungeonTown('Galar Mine', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 10)]);
TownList['Galar Mine No. 2'] = new DungeonTown('Galar Mine No. 2', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Galar_Water)]);
TownList['Glimwood Tangle'] = new DungeonTown('Glimwood Tangle', GameConstants.Region.galar, [
    new MultiRequirement([
        new GymBadgeRequirement(BadgeEnums.Galar_Rock),
        new GymBadgeRequirement(BadgeEnums.Galar_Ice),
    ]),
]);
TownList['Rose Tower'] = new DungeonTown('Rose Tower', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 24)]);
TownList['Watchtower Ruins'] = new DungeonTown('Watchtower Ruins', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 4)]);
TownList['Dusty Bowl'] = new DungeonTown('Dusty Bowl', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Galar_Fire)]);
TownList['Lake of Outrage'] = new DungeonTown('Lake of Outrage', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)]);
TownList['Master Dojo Trial'] = new DungeonTown('Master Dojo Trial', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 25)]);
TownList['Tower of Darkness'] = new DungeonTown('Tower of Darkness', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 34)]);
TownList['Tower of Water'] = new DungeonTown('Tower of Water', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 28)]);
TownList['Rock Peak Ruins'] = new DungeonTown('Rock Peak Ruins', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 43)]);
TownList['Iron Ruins'] = new DungeonTown('Iron Ruins', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 43)]);
TownList['Iceberg Ruins'] = new DungeonTown('Iceberg Ruins', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 51)]);
TownList['Split-Decision Ruins'] = new DungeonTown('Split-Decision Ruins', GameConstants.Region.galar, [
    new MultiRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 48),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Iron Ruins')),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Iceberg Ruins')),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rock Peak Ruins')),
    ]),
]);
TownList['Dyna Tree Hill'] = new DungeonTown('Dyna Tree Hill', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 50)]);
TownList['Crown Shrine'] = new DungeonTown('Crown Shrine', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 53)]);
const Ohakadamon = new Shop([
    ItemList['Ohakadamon'],
], 'Ohakadamon');
const Botamon = new Shop([
    ItemList['Koromon'],
    ItemList['Wanyamon'],
], 'Botamon');
const Punimon = new Shop([
    ItemList['Tunomon'],
], 'Punimon');
const Koromon = new Shop([
    ItemList['Agumon'],
    ItemList['Agumon Hakase'],
], 'Koromon');
const Tunomon = new Shop([
    ItemList['Elecmon'],
    ItemList['Gabumon'],
], 'Tunomon');
const Agumon = new Shop([
    ItemList['Agumon X-Antibody'],
    ItemList['Centalmon'],
    ItemList['Greymon'],
], 'Agumon');
const Betamon = new Shop([
    ItemList['Betamon X-Antibody'],
    ItemList['Dinohumon'],
    ItemList['Seadramon'],
], 'Betamon');
const DamemonCmon = new Shop([
    ItemList['Botamon'],
], 'Damemon Cmon');
const Elecmon = new Shop([
    ItemList['Leomon'],
], 'Elecmon');
const Gabumon = new Shop([
    ItemList['Gabumon X-Antibody'],
    ItemList['Garurumon'],
], 'Gabumon');
const Airdramon = new Shop([
    ItemList['Metal Greymon Virus'],
    ItemList['Megadramon'],
], 'Airdramon');
const Angemon = new Shop([
    ItemList['Blue Meramon'],
    ItemList['Garudamon'],
    ItemList['Holy Angemon'],
], 'Angemon');
const Birdramon = new Shop([
    ItemList['Garudamon'],
    ItemList['Tyilinmon'],
], 'Birdramon');
const Devimon = new Shop([
    ItemList['Ice Devimon'],
    ItemList['Neo Devimon'],
    ItemList['Skull Satamon'],
], 'Devimon');
const Garurumon = new Shop([
    ItemList['Garurumon X-Antibody'],
    ItemList['Were Garurumon'],
    ItemList['Zudomon'],
], 'Garurumon');
const Greymon = new Shop([
    ItemList['Greymon X-Antibody'],
    ItemList['Mamemon'],
    ItemList['Metal Greymon'],
    ItemList['Skull Greymon'],
], 'Greymon');
const Kabuterimon = new Shop([
    ItemList['Atlur Kabuterimon Blue'],
    ItemList['Atlur Kabuterimon Red'],
    ItemList['Kongoumon'],
], 'Kabuterimon');
const Meramon = new Shop([
    ItemList['Blue Meramon'],
    ItemList['Death Meramon'],
    ItemList['Meramon X-Antibody'],
], 'Meramon');
const Numemon = new Shop([
    ItemList['Karatuki Numemon'],
    ItemList['Monzaemon'],
    ItemList['Numemon X-Antibody'],
    ItemList['Platinum Numemon'],
], 'Numemon');
const Seadramon = new Shop([
    ItemList['Mega Seadramon'],
    ItemList['Seadramon X-Antibody'],
    ItemList['Waru Seadramon'],
], 'Seadramon');
const Tyranomon = new Shop([
    ItemList['Master Tyranomon'],
    ItemList['Metal Tyranomon'],
    ItemList['Skull Greymon'],
    ItemList['Tyranomon X-Antibody'],
], 'Tyranomon');
const Vegimon = new Shop([
    ItemList['Red Vegimon'],
    ItemList['Vademon'],
], 'Vegimon');
const Whamon = new Shop([
    ItemList['Whamon Perfect'],
], 'Whamon');
const Yukidarumon = new Shop([
    ItemList['Zudomon'],
], 'Yukidarumon');
const Mamemon = new Shop([
    ItemList['Catch Mamemon'],
    ItemList['Mamemon X-Antibody'],
    ItemList['Prince Mamemon'],
], 'Mamemon');
const MetalGreymonVirus = new Shop([
    ItemList['Black War Greymon'],
    ItemList['Blitz Greymon'],
    ItemList['Metal Greymon Virus X-Antibody'],
], 'Metal Greymon Virus');
const MetalMamemon = new Shop([
    ItemList['Metal Mamemon X-Antibody'],
    ItemList['Mugendramon'],
], 'Metal Mamemon');
const Monzaemon = new Shop([
    ItemList['Monzaemon X-Antibody'],
    ItemList['Waru Monzaemon'],
], 'Monzaemon');
const SkullGreymon = new Shop([
    ItemList['Chimairamon'],
    ItemList['Mugendramon'],
], 'Skull Greymon');
const Vademon = new Shop([
    ItemList['Ebemon'],
    ItemList['Vademon X-Antibody'],
], 'Vademon');
const DeathmonCmon = new Shop([
    ItemList['Ohakadamon'],
], 'Deathmon Cmon');
const Bubbmon = new Shop([
    ItemList['Mochimon'],
], 'Bubbmon');
const Pitchmon = new Shop([
    ItemList['Pukamon'],
], 'Pitchmon');
const Poyomon = new Shop([
    ItemList['Tokomon'],
], 'Poyomon');
const Yuramon = new Shop([
    ItemList['Tanemon'],
], 'Yuramon');
const Zurumon = new Shop([
    ItemList['Pagumon'],
], 'Zurumon');
const Mochimon = new Shop([
    ItemList['Tentomon'],
    ItemList['Gottsumon'],
    ItemList['Hagurumon'],
], 'Mochimon');
const Pagumon = new Shop([
    ItemList['Gazimon'],
    ItemList['Gizamon'],
    ItemList['Pico Devimon'],
], 'Pagumon');
const Pukamon = new Shop([
    ItemList['Betamon'],
    ItemList['Gomamon'],
    ItemList['Shakomon'],
], 'Pukamon');
const Tanemon = new Shop([
    ItemList['Lalamon'],
    ItemList['Palmon'],
], 'Tanemon');
const Tokomon = new Shop([
    ItemList['Falcomon 2006'],
    ItemList['Lucemon'],
    ItemList['Patamon'],
], 'Tokomon');
const Ganimon = new Shop([
    ItemList['Coelamon'],
    ItemList['Ganimon X-Antibody'],
], 'Ganimon');
const Gazimon = new Shop([
    ItemList['Gazimon X-Antibody'],
    ItemList['Hanumon'],
    ItemList['Leomon'],
], 'Gazimon');
const Gizamon = new Shop([
    ItemList['Devidramon'],
], 'Gizamon');
const Gomamon = new Shop([
    ItemList['Gomamon X-Antibody'],
    ItemList['Ikkakumon'],
    ItemList['Seadramon'],
    ItemList['Whamon'],
], 'Gomamon');
const Gottsumon = new Shop([
    ItemList['Golemon'],
    ItemList['Gottsumon X-Antibody'],
    ItemList['Icemon'],
    ItemList['Monochromon'],
], 'Gottsumon');
const Kunemon = new Shop([
    ItemList['Flymon'],
    ItemList['Kuwagamon'],
], 'Kunemon');
const Otamamon = new Shop([
    ItemList['Gekomon'],
    ItemList['Otamamon X-Antibody'],
    ItemList['Tonosama Gekomon'],
], 'Otamamon');
const Palmon = new Shop([
    ItemList['Palmon X-Antibody'],
    ItemList['Red Vegimon'],
    ItemList['Togemon'],
    ItemList['Woodmon'],
], 'Palmon');
const Patamon = new Shop([
    ItemList['Angemon'],
    ItemList['Unimon'],
], 'Patamon');
const Piyomon = new Shop([
    ItemList['Birdramon'],
    ItemList['Cockatrimon'],
], 'Piyomon');
const Shakomon = new Shop([
    ItemList['Gesomon'],
    ItemList['Octmon'],
    ItemList['Seadramon'],
    ItemList['Shakomon X-Antibody'],
], 'Shakomon');
const Tentomon = new Shop([
    ItemList['Kabuterimon'],
    ItemList['Kuwagamon'],
    ItemList['Waspmon'],
], 'Tentomon');
const Tyumon = new Shop([
    ItemList['Numemon'],
    ItemList['Scumon'],
], 'Tyumon');
const Bakemon = new Shop([
    ItemList['Fantomon'],
    ItemList['Giromon'],
    ItemList['Lady Devimon'],
], 'Bakemon');
const Centalmon = new Shop([
    ItemList['Sagittarimon'],
], 'Centalmon');
const Cockatrimon = new Shop([
    ItemList['Megadramon'],
    ItemList['Parrotmon'],
], 'Cockatrimon');
const Coelamon = new Shop([
    ItemList['Dagomon'],
    ItemList['Mega Seadramon'],
    ItemList['Whamon Perfect'],
], 'Coelamon');
const Cyclomon = new Shop([
    ItemList['Megadramon'],
], 'Cyclomon');
const DarkTyranomon = new Shop([
    ItemList['Dark Tyranomon X-Antibody'],
    ItemList['Metal Tyranomon'],
], 'Dark Tyranomon');
const Deltamon = new Shop([
    ItemList['Chimairamon'],
    ItemList['Gigadramon'],
], 'Deltamon');
const Devidramon = new Shop([
    ItemList['Gigadramon'],
], 'Devidramon');
const Drimogemon = new Shop([
    ItemList['Digmon'],
], 'Drimogemon');
const Ebidramon = new Shop([
    ItemList['Gusokumon'],
], 'Ebidramon');
const Evilmon = new Shop([
    ItemList['Lady Devimon'],
    ItemList['Mephismon'],
], 'Evilmon');
const Flymon = new Shop([
    ItemList['Ookuwamon'],
], 'Flymon');
const Gekomon = new Shop([
    ItemList['Mega Seadramon'],
    ItemList['Tonosama Gekomon'],
    ItemList['Whamon Perfect'],
], 'Gekomon');
const Gesomon = new Shop([
    ItemList['Dagomon'],
    ItemList['Gesomon X-Antibody'],
    ItemList['Marin Devimon'],
], 'Gesomon');
const Gokimon = new Shop([
    ItemList['Archnemon'],
], 'Gokimon');
const Gorimon = new Shop([
    ItemList['Mammon'],
], 'Gorimon');
const Ikkakumon = new Shop([
    ItemList['Whamon Perfect'],
    ItemList['Zudomon'],
], 'Ikkakumon');
const Kuwagamon = new Shop([
    ItemList['Kuwagamon X-Antibody'],
    ItemList['Megadramon'],
    ItemList['Ookuwamon'],
], 'Kuwagamon');
const Leomon = new Shop([
    ItemList['Grappu Leomon'],
    ItemList['Leomon X-Antibody'],
    ItemList['Mad Leomon'],
    ItemList['Saber Leomon'],
], 'Leomon');
const Mechanorimon = new Shop([
    ItemList['Metal Mamemon'],
    ItemList['Valvemon'],
], 'Mechanorimon');
const Minotaurmon = new Shop([
    ItemList['Vikemon'],
], 'Minotaurmon');
const Mojyamon = new Shop([
    ItemList['Mammon'],
], 'Mojyamon');
const Monochromon = new Shop([
    ItemList['Monochromon X-Antibody'],
    ItemList['Triceramon'],
    ItemList['Vermillimon'],
], 'Monochromon');
const Nanimon = new Shop([
    ItemList['Digitamamon'],
    ItemList['Etemon'],
], 'Nanimon');
const Octmon = new Shop([
    ItemList['Dagomon'],
    ItemList['Marin Devimon'],
], 'Octmon');
const Orgemon = new Shop([
    ItemList['Digitamamon'],
    ItemList['Minotaurmon'],
    ItemList['Orgemon X-Antibody'],
    ItemList['Rebellimon'],
], 'Orgemon');
const Raremon = new Shop([
    ItemList['Ex-Tyranomon'],
    ItemList['Rare Raremon'],
], 'Raremon');
const Rukamon = new Shop([
    ItemList['Hangyomon'],
    ItemList['Whamon Perfect'],
], 'Rukamon');
const Scumon = new Shop([
    ItemList['Etemon'],
    ItemList['Great King Scumon'],
    ItemList['Vademon'],
], 'Scumon');
const Shellmon = new Shop([
    ItemList['Tonosama Gekomon'],
], 'Shellmon');
const Starmon = new Shop([
    ItemList['Starmon X-Antibody'],
    ItemList['Superstarmon'],
    ItemList['Triceramon'],
], 'Starmon');
const Tailmon = new Shop([
    ItemList['Angewomon'],
    ItemList['Bastemon'],
    ItemList['Tailmon X-Antibody'],
], 'Tailmon');
const Tortamon = new Shop([
    ItemList['Jyagamon'],
], 'Tortamon');
const Tuskmon = new Shop([
    ItemList['Metal Tyranomon'],
    ItemList['Triceramon'],
], 'Tuskmon');
const Unimon = new Shop([
    ItemList['Hippogriffomon'],
    ItemList['Piccolomon'],
], 'Unimon');
const Vdramon = new Shop([
    ItemList['Aero V-dramon'],
    ItemList['Cyberdramon'],
    ItemList['Metal Tyranomon'],
    ItemList['Red V-dramon'],
], 'V-dramon');
const Andromon = new Shop([
    ItemList['Guardromon'],
    ItemList['Orgemon'],
    ItemList['Tankmon'],
], 'Andromon');
const Angewomon = new Shop([
    ItemList['Holydramon'],
    ItemList['Lovely Angemon'],
    ItemList['Ofanimon'],
], 'Angewomon');
const Anomalocarimon = new Shop([
    ItemList['Anomalocarimon X-Antibody'],
    ItemList['Metal Seadramon'],
    ItemList['Pukumon'],
], 'Anomalocarimon');
const AtlurKabuterimonBlue = new Shop([
    ItemList['Herakle Kabuterimon'],
], 'Atlur Kabuterimon Blue');
const Dagomon = new Shop([
    ItemList['Leviamon'],
    ItemList['Neptunemon'],
    ItemList['Plesiomon'],
], 'Dagomon');
const Digitamamon = new Shop([
    ItemList['Devitamamon'],
    ItemList['Minervamon'],
    ItemList['Titamon'],
], 'Digitamamon');
const Etemon = new Shop([
    ItemList['King Etemon'],
    ItemList['Metal Etemon'],
], 'Etemon');
const ExTyranomon = new Shop([
    ItemList['Holydramon'],
], 'Ex-Tyranomon');
const Giromon = new Shop([
    ItemList['Hi Andromon'],
    ItemList['Metal Etemon'],
], 'Giromon');
const HolyAngemon = new Shop([
    ItemList['Dominimon'],
    ItemList['Goddramon'],
    ItemList['Holy Angemon Priest Mode'],
    ItemList['Seraphimon'],
], 'Holy Angemon');
const Jyagamon = new Shop([
    ItemList['Spinomon'],
], 'Jyagamon');
const LadyDevimon = new Shop([
    ItemList['Lilithmon'],
    ItemList['Lady Devimon X-Antibody'],
], 'Lady Devimon');
const Mammon = new Shop([
    ItemList['Mammon X-Antibody'],
    ItemList['Skull Mammon'],
], 'Mammon');
const MarinDevimon = new Shop([
    ItemList['Leviamon'],
    ItemList['Pukumon'],
], 'Marin Devimon');
const MegaSeadramon = new Shop([
    ItemList['Marin Angemon'],
    ItemList['Mega Seadramon X-Antibody'],
    ItemList['Metal Seadramon'],
    ItemList['Plesiomon'],
], 'Mega Seadramon');
const Megadramon = new Shop([
    ItemList['Deathmon'],
    ItemList['Goddramon'],
    ItemList['Mugendramon'],
], 'Megadramon');
const MetalTyranomon = new Shop([
    ItemList['Metal Tyranomon X-Antibody'],
    ItemList['Mugendramon'],
    ItemList['Rust Tyranomon'],
], 'Metal Tyranomon');
const Nanomon = new Shop([
    ItemList['Metal Etemon'],
], 'Nanomon');
const Ookuwamon = new Shop([
    ItemList['Gran Kuwagamon'],
    ItemList['Herakle Kabuterimon'],
    ItemList['Ookuwamon X-Antibody'],
], 'Ookuwamon');
const Piccolomon = new Shop([
    ItemList['Bacchusmon'],
    ItemList['Marin Angemon'],
], 'Piccolomon');
const TonosamaGekomon = new Shop([
    ItemList['Leviamon'],
    ItemList['Plesiomon'],
    ItemList['Vikemon'],
], 'Tonosama Gekomon');
const Triceramon = new Shop([
    ItemList['Dinorexmon'],
    ItemList['Triceramon X-Antibody'],
], 'Triceramon');
const WhamonPerfect = new Shop([
    ItemList['King Whamon'],
    ItemList['Marin Angemon'],
    ItemList['Metal Seadramon'],
], 'Whamon Perfect');
const Zudomon = new Shop([
    ItemList['Marin Angemon'],
    ItemList['Plesiomon'],
    ItemList['Vikemon'],
], 'Zudomon');
const HerakleKabuterimon = new Shop([
    ItemList['Herakle Kabuterimon X-Antibody'],
], 'Herakle Kabuterimon');
const Holydramon = new Shop([
    ItemList['Holydramon X-Antibody'],
], 'Holydramon');
const MarinAngemon = new Shop([
    ItemList['Pitchmon'],
], 'Marin Angemon');
const MetalEtemon = new Shop([
    ItemList['Pagumon'],
], 'Metal Etemon');
const MetalSeadramon = new Shop([
    ItemList['Giga Seadramon'],
], 'Metal Seadramon');
const Pukumon = new Shop([
    ItemList['Pitchmon'],
], 'Pukumon');
const SaberLeomon = new Shop([
    ItemList['Dinotigermon'],
], 'Saber Leomon');
const HolyAngemonPriestMode = new Shop([
    ItemList['Holy Angemon'],
    ItemList['Seraphimon'],
], 'Holy Angemon Priest Mode');
const Choromon = new Shop([
    ItemList['Caprimon'],
    ItemList['Pagumon'],
], 'Choromon');
const Mokumon = new Shop([
    ItemList['Peti Meramon'],
    ItemList['Koromon'],
], 'Mokumon');
const Nyokimon = new Shop([
    ItemList['Budmon'],
    ItemList['Pyocomon'],
    ItemList['Tanemon'],
], 'Nyokimon');
const YukimiBotamon = new Shop([
    ItemList['Hiyarimon'],
    ItemList['Nyaromon'],
], 'Yukimi Botamon');
const Caprimon = new Shop([
    ItemList['Hagurumon'],
    ItemList['Kokuwamon'],
    ItemList['Toy Agumon'],
], 'Caprimon');
const Nyaromon = new Shop([
    ItemList['Bearmon'],
    ItemList['Elecmon'],
    ItemList['Plotmon'],
], 'Nyaromon');
const PetiMeramon = new Shop([
    ItemList['Bakumon'],
    ItemList['Candmon'],
    ItemList['Pico Devimon'],
    ItemList['Vorvomon'],
], 'Peti Meramon');
const Pyocomon = new Shop([
    ItemList['Elecmon'],
    ItemList['Mushmon'],
    ItemList['Piyomon'],
], 'Pyocomon');
const Alraumon = new Shop([
    ItemList['Kiwimon'],
    ItemList['Red Vegimon'],
    ItemList['Vegimon'],
    ItemList['Zassoumon'],
], 'Alraumon');
const Bakumon = new Shop([
    ItemList['Boarmon'],
    ItemList['Hanumon'],
    ItemList['Monochromon'],
], 'Bakumon');
const Candmon = new Shop([
    ItemList['Bakemon'],
    ItemList['Meramon'],
    ItemList['Wizarmon'],
], 'Candmon');
const ClearAgumon = new Shop([
    ItemList['Guardromon'],
    ItemList['Revolmon'],
], 'Clear Agumon');
const Dokunemon = new Shop([
    ItemList['Dokugumon'],
    ItemList['Snimon'],
], 'Dokunemon');
const Floramon = new Shop([
    ItemList['Kiwimon'],
    ItemList['Vegimon'],
], 'Floramon');
const Goburimon = new Shop([
    ItemList['Nanimon'],
    ItemList['Orgemon'],
], 'Goburimon');
const Hagurumon = new Shop([
    ItemList['Clockmon'],
    ItemList['Guardromon'],
    ItemList['Hagurumon X-Antibody'],
], 'Hagurumon');
const Kokuwamon = new Shop([
    ItemList['Guardromon'],
    ItemList['Kokuwamon X-Antibody'],
], 'Kokuwamon');
const ModokiBetamon = new Shop([
    ItemList['Gesomon'],
    ItemList['Shellmon'],
], 'Modoki Betamon');
const Muchomon = new Shop([
    ItemList['Akatorimon'],
], 'Muchomon');
const Mushmon = new Shop([
    ItemList['Red Vegimon'],
    ItemList['Vegimon'],
    ItemList['Woodmon'],
], 'Mushmon');
const Penmon = new Shop([
    ItemList['Cockatrimon'],
    ItemList['Daipenmon'],
    ItemList['Rukamon'],
], 'Penmon');
const PicoDevimon = new Shop([
    ItemList['Devimon'],
    ItemList['Ice Devimon'],
], 'Pico Devimon');
const Plotmon = new Shop([
    ItemList['Plotmon X-Antibody'],
    ItemList['Tailmon'],
], 'Plotmon');
const Psychemon = new Shop([
    ItemList['Porcupamon'],
    ItemList['Gururumon'],
], 'Psychemon');
const Shamamon = new Shop([
    ItemList['Fugamon'],
    ItemList['Hanumon'],
], 'Shamamon');
const SnowGoburimon = new Shop([
    ItemList['Hyougamon'],
    ItemList['Yukidarumon'],
], 'Snow Goburimon');
const ToyAgumon = new Shop([
    ItemList['Greymon'],
    ItemList['Guardromon'],
    ItemList['Tankmon'],
], 'Toy Agumon');
const Tukaimon = new Shop([
    ItemList['Devimon'],
    ItemList['Saberdramon'],
], 'Tukaimon');
const YukiAgumon = new Shop([
    ItemList['Yukidarumon'],
], 'Yuki Agumon');
const Akatorimon = new Shop([
    ItemList['Garudamon'],
    ItemList['Sinduramon'],
], 'Akatorimon');
const Clockmon = new Shop([
    ItemList['Blikmon'],
    ItemList['Knightmon'],
], 'Clockmon');
const DarkLizamon = new Shop([
    ItemList['Gigadramon'],
    ItemList['Skull Satamon'],
], 'Dark Lizamon');
const Dokugumon = new Shop([
    ItemList['Archnemon'],
    ItemList['Lady Devimon'],
], 'Dokugumon');
const FlareLizarmon = new Shop([
    ItemList['Gigadramon'],
    ItemList['Metal Tyranomon'],
], 'Flare Lizarmon');
const Fugamon = new Shop([
    ItemList['Etemon'],
    ItemList['Garudamon'],
], 'Fugamon');
const Geremon = new Shop([
    ItemList['Etemon'],
    ItemList['Metal Mamemon'],
    ItemList['Superstarmon'],
], 'Geremon');
const Golemon = new Shop([
    ItemList['Gogmamon'],
    ItemList['Insekimon'],
], 'Golemon');
const GolemonPS = new Shop([
    ItemList['Valvemon'],
], 'Golemon PS');
const Guardromon = new Shop([
    ItemList['Andromon'],
    ItemList['Nanomon'],
], 'Guardromon');
const Gururumon = new Shop([
    ItemList['Blue Meramon'],
], 'Gururumon');
const Hanumon = new Shop([
    ItemList['Mammon'],
    ItemList['Were Garurumon'],
], 'Hanumon');
const Hyougamon = new Shop([
    ItemList['Blue Meramon'],
    ItemList['Panjyamon'],
], 'Hyougamon');
const IceDevimon = new Shop([
    ItemList['Blue Meramon'],
    ItemList['Lady Devimon'],
    ItemList['Vamdemon'],
], 'Ice Devimon');
const Icemon = new Shop([
    ItemList['Insekimon'],
    ItemList['Zudomon'],
], 'Icemon');
const Igamon = new Shop([
    ItemList['Asuramon'],
], 'Igamon');
const JungleMojyamon = new Shop([
    ItemList['Etemon'],
    ItemList['Waru Monzaemon'],
], 'Jungle Mojyamon');
const KaratukiNumemon = new Shop([
    ItemList['Black King Numemon'],
    ItemList['Mega Seadramon'],
], 'Karatuki Numemon');
const Kiwimon = new Shop([
    ItemList['Blossomon'],
    ItemList['Delumon'],
], 'Kiwimon');
const MoriShellmon = new Shop([
    ItemList['Digitamamon'],
    ItemList['Triceramon'],
], 'Mori Shellmon');
const Musyamon = new Shop([
    ItemList['Asuramon'],
    ItemList['Zanbamon'],
], 'Musyamon');
const NiseDrimogemon = new Shop([
    ItemList['Digitamamon'],
    ItemList['Insekimon'],
], 'Nise Drimogemon');
const Pidmon = new Shop([
    ItemList['Fantomon'],
    ItemList['Holy Angemon'],
], 'Pidmon');
const PlatinumScumon = new Shop([
    ItemList['Metal Mamemon'],
    ItemList['Vademon'],
], 'Platinum Scumon');
const RedVegimon = new Shop([
    ItemList['Jyureimon'],
    ItemList['Lilimon'],
], 'Red Vegimon');
const Revolmon = new Shop([
    ItemList['Andromon'],
    ItemList['Metal Mamemon'],
], 'Revolmon');
const Saberdramon = new Shop([
    ItemList['Megadramon'],
    ItemList['Parrotmon'],
], 'Saberdramon');
const SandYanmamon = new Shop([
    ItemList['Ookuwamon'],
], 'Sand Yanmamon');
const ShimaUnimon = new Shop([
    ItemList['Mammon'],
], 'Shima Unimon');
const Snimon = new Shop([
    ItemList['Archnemon'],
    ItemList['Ookuwamon'],
], 'Snimon');
const Soulmon = new Shop([
    ItemList['Metal Fantomon'],
    ItemList['Mummymon'],
], 'Soulmon');
const Tankmon = new Shop([
    ItemList['Blikmon'],
    ItemList['Gigadramon'],
    ItemList['Tankdramon'],
], 'Tankmon');
const Thunderballmon = new Shop([
    ItemList['Mamemon'],
    ItemList['Thunderballmon X-Antibody'],
], 'Thunderballmon');
const Togemon = new Shop([
    ItemList['Lilimon'],
    ItemList['Ponchomon'],
    ItemList['Togemon X-Antibody'],
], 'Togemon');
const Tuchidarumon = new Shop([
    ItemList['Insekimon'],
    ItemList['Jyagamon'],
], 'Tuchidarumon');
const Wizarmon = new Shop([
    ItemList['Mistymon'],
    ItemList['Vamdemon'],
    ItemList['Wizarmon X-Antibody'],
], 'Wizarmon');
const Woodmon = new Shop([
    ItemList['Jyureimon'],
    ItemList['Pumpmon'],
], 'Woodmon');
const Yanmamon = new Shop([
    ItemList['Atlur Kabuterimon Red'],
    ItemList['Ookuwamon'],
], 'Yanmamon');
const Zassoumon = new Shop([
    ItemList['Blossomon'],
], 'Zassoumon');
const AeroVdramon = new Shop([
    ItemList['Ulforce V-dramon'],
    ItemList['Ulforce V-dramon Future Mode'],
], 'Aero V-dramon');
const Asuramon = new Shop([
    ItemList['Vulcanusmon'],
    ItemList['Zanbamon'],
], 'Asuramon');
const AtlurKabuterimonRed = new Shop([
    ItemList['Herakle Kabuterimon'],
    ItemList['Gran Kuwagamon'],
], 'Atlur Kabuterimon Red');
const BigMamemon = new Shop([
    ItemList['Prince Mamemon'],
    ItemList['Tonosama Mamemon'],
], 'Big Mamemon');
const Blikmon = new Shop([
    ItemList['Boltmon'],
], 'Blikmon');
const Blossomon = new Shop([
    ItemList['Hydramon'],
    ItemList['Rosemon'],
], 'Blossomon');
const BlueMeramon = new Shop([
    ItemList['Boltmon'],
    ItemList['Death Meramon'],
], 'Blue Meramon');
const Brachimon = new Shop([
    ItemList['Mugendramon'],
    ItemList['Ultimate Brachimon'],
], 'Brachimon');
const Chimairamon = new Shop([
    ItemList['Millenniumon'],
], 'Chimairamon');
const DeathMeramon = new Shop([
    ItemList['Beelzebumon'],
    ItemList['Boltmon'],
    ItemList['Gankoomon'],
], 'Death Meramon');
const Delumon = new Shop([
    ItemList['Griffomon'],
    ItemList['Hououmon'],
], 'Delumon');
const Fantomon = new Shop([
    ItemList['Metal Fantomon'],
    ItemList['Venom Vamdemon'],
], 'Fantomon');
const Garudamon = new Shop([
    ItemList['Garudamon X-Antibody'],
    ItemList['Hououmon'],
    ItemList['Ravmon'],
], 'Garudamon');
const Gerbemon = new Shop([
    ItemList['Platinum Numemon'],
], 'Gerbemon');
const Gigadramon = new Shop([
    ItemList['Darkdramon'],
    ItemList['Metal Seadramon'],
    ItemList['Mugendramon'],
], 'Gigadramon');
const GreatKingScumon = new Shop([
    ItemList['King Etemon'],
], 'Great King Scumon');
const Hangyomon = new Shop([
    ItemList['Pukumon'],
    ItemList['Vikemon'],
], 'Hangyomon');
const Insekimon = new Shop([
    ItemList['Metal Etemon'],
    ItemList['Bancho Golemon'],
    ItemList['Dianamon'],
], 'Insekimon');
const Jijimon = new Shop([
    ItemList['Punimon'],
], 'Jijimon');
const Jyureimon = new Shop([
    ItemList['Deathmon'],
    ItemList['Pinochimon'],
], 'Jyureimon');
const Knightmon = new Shop([
    ItemList['Duftmon'],
    ItemList['Lord Knightmon'],
], 'Knightmon');
const Lilimon = new Shop([
    ItemList['Bancho Lilimon'],
    ItemList['Lilimon X-Antibody'],
    ItemList['Rosemon'],
], 'Lilimon');
const MasterTyranomon = new Shop([
    ItemList['Gaioumon'],
    ItemList['War Greymon'],
], 'Master Tyranomon');
const MetalGreymon = new Shop([
    ItemList['Blitz Greymon'],
    ItemList['Metal Greymon X-Antibody'],
    ItemList['Metal Greymon Alterous Mode'],
    ItemList['War Greymon'],
], 'Metal Greymon');
const Panjyamon = new Shop([
    ItemList['Panjyamon X-Antibody'],
    ItemList['Regulumon'],
], 'Panjyamon');
const Parrotmon = new Shop([
    ItemList['Crossmon'],
], 'Parrotmon');
const Pumpmon = new Shop([
    ItemList['Noble Pumpmon'],
    ItemList['Pinochimon'],
], 'Pumpmon');
const SkullSatamon = new Shop([
    ItemList['Beelzebumon'],
    ItemList['Demon'],
], 'Skull Satamon');
const Tekkamon = new Shop([
    ItemList['Boltmon'],
    ItemList['Gokumon'],
], 'Tekkamon');
const Vamdemon = new Shop([
    ItemList['Belial Vamdemon'],
    ItemList['Vamdemon X-Antibody'],
    ItemList['Venom Vamdemon'],
], 'Vamdemon');
const Vermillimon = new Shop([
    ItemList['Skull Mammon'],
], 'Vermillimon');
const WaruMonzaemon = new Shop([
    ItemList['Demon'],
    ItemList['Metal Etemon'],
], 'Waru Monzaemon');
const WaruSeadramon = new Shop([
    ItemList['Leviamon'],
], 'Waru Seadramon');
const WereGarurumon = new Shop([
    ItemList['Cres Garurumon'],
    ItemList['Metal Garurumon'],
    ItemList['Were Garurumon X-Antibody'],
    ItemList['Were Garurumon Sagittarius Mode'],
], 'Were Garurumon');
const Apocalymon = new Shop([
    ItemList['Kuramon'],
], 'Apocalymon');
const Babamon = new Shop([
    ItemList['Yuramon'],
], 'Babamon');
const Boltmon = new Shop([
    ItemList['Zurumon'],
], 'Boltmon');
const Demon = new Shop([
    ItemList['Demon Super Ultimate'],
    ItemList['Demon X-Antibody'],
], 'Demon');
const Diablomon = new Shop([
    ItemList['Armagemon'],
    ItemList['Diablomon X-Antibody'],
], 'Diablomon');
const Goddramon = new Shop([
    ItemList['Goddramon X-Antibody'],
], 'Goddramon');
const Griffomon = new Shop([
    ItemList['Poyomon'],
], 'Griffomon');
const Hououmon = new Shop([
    ItemList['Hououmon X-Antibody'],
], 'Hououmon');
const KingEtemon = new Shop([
    ItemList['Bubbmon'],
], 'King Etemon');
const MetalGarurumon = new Shop([
    ItemList['Metal Garurumon X-Antibody'],
    ItemList['Omegamon'],
], 'Metal Garurumon');
const Millenniumon = new Shop([
    ItemList['Moon Millenniumon'],
    ItemList['Zeed Millenniumon'],
], 'Millenniumon');
const Mugendramon = new Shop([
    ItemList['Chaosdramon'],
    ItemList['Millenniumon'],
], 'Mugendramon');
const Omegamon = new Shop([
    ItemList['Omegamon X-Antibody'],
    ItemList['Omegamon Alter-S'],
], 'Omegamon');
const Piemon = new Shop([
    ItemList['Voltobautamon'],
], 'Piemon');
const Pinochimon = new Shop([
    ItemList['Nyokimon'],
], 'Pinochimon');
const Plesiomon = new Shop([
    ItemList['Aegisdramon'],
    ItemList['Plesiomon X-Antibody'],
], 'Plesiomon');
const Rosemon = new Shop([
    ItemList['Babamon'],
    ItemList['Rosemon Burst Mode'],
    ItemList['Rosemon X-Antibody'],
], 'Rosemon');
const SkullMammon = new Shop([
    ItemList['Skull Mammon X-Antibody'],
], 'Skull Mammon');
const VenomVamdemon = new Shop([
    ItemList['Belial Vamdemon'],
], 'Venom Vamdemon');
const WarGreymon = new Shop([
    ItemList['Omegamon'],
    ItemList['War Greymon X-Antibody'],
], 'War Greymon');
const Chicomon = new Shop([
    ItemList['Chibimon'],
], 'Chicomon');
const Cocomon = new Shop([
    ItemList['Chocomon'],
], 'Cocomon');
const Kuramon = new Shop([
    ItemList['Pagumon'],
    ItemList['Tsumemon'],
], 'Kuramon');
const Leafmon = new Shop([
    ItemList['Kodokugumon Child'],
    ItemList['Minomon'],
], 'Leafmon');
const Pururumon = new Shop([
    ItemList['Poromon'],
], 'Pururumon');
const Tsubumon = new Shop([
    ItemList['Tokomon'],
    ItemList['Upamon'],
], 'Tsubumon');
const Zerimon = new Shop([
    ItemList['Gummymon'],
], 'Zerimon');
const ArkadimonBaby = new Shop([
    ItemList['Arkadimon Child'],
], 'Arkadimon Baby');
const Chibimon = new Shop([
    ItemList['V-mon'],
], 'Chibimon');
const Chocomon = new Shop([
    ItemList['Lopmon'],
], 'Chocomon');
const Gummymon = new Shop([
    ItemList['Terriermon'],
], 'Gummymon');
const Minomon = new Shop([
    ItemList['Kokuwamon'],
    ItemList['Wormmon'],
], 'Minomon');
const Poromon = new Shop([
    ItemList['Falcomon 2006'],
    ItemList['Hawkmon'],
], 'Poromon');
const Tsumemon = new Shop([
    ItemList['Agumon Black'],
    ItemList['Dracumon'],
    ItemList['Keramon'],
], 'Tsumemon');
const Upamon = new Shop([
    ItemList['Armadimon'],
], 'Upamon');
const AgumonBlack = new Shop([
    ItemList['Cyclomon'],
    ItemList['Dark Tyranomon'],
    ItemList['Monochromon'],
    ItemList['Greymon Blue'],
], 'Agumon Black');
const Armadimon = new Shop([
    ItemList['Ankylomon'],
    ItemList['Tortamon'],
], 'Armadimon');
const ElecmonViolet = new Shop([
    ItemList['Shima Unimon'],
    ItemList['Thunderballmon'],
    ItemList['Tuskmon'],
], 'Elecmon Violet');
const GabumonBlack = new Shop([
    ItemList['Garurumon Black'],
    ItemList['Kyubimon Silver'],
], 'Gabumon Black');
const Hawkmon = new Shop([
    ItemList['Aquilamon'],
    ItemList['Cockatrimon'],
    ItemList['Peckmon'],
], 'Hawkmon');
const Keramon = new Shop([
    ItemList['Chrysalimon'],
    ItemList['Keramon X-Antibody'],
    ItemList['Wizarmon'],
], 'Keramon');
const Lopmon = new Shop([
    ItemList['Black Tailmon'],
    ItemList['Lopmon X-Antibody'],
    ItemList['Turuiemon'],
    ItemList['Wendimon'],
], 'Lopmon');
const OtamamonRed = new Shop([
    ItemList['Gekomon'],
    ItemList['Octmon'],
], 'Otamamon Red');
const Solarmon = new Shop([
    ItemList['Clockmon'],
    ItemList['Geremon'],
    ItemList['Guardromon Gold'],
    ItemList['Starmon'],
], 'Solarmon');
const Terriermon = new Shop([
    ItemList['Black Galgomon'],
    ItemList['Galgomon'],
    ItemList['Terriermon X-Antibody'],
    ItemList['Turuiemon'],
], 'Terriermon');
const ToyAgumonBlack = new Shop([
    ItemList['Deltamon'],
    ItemList['Guardromon'],
], 'Toy Agumon Black');
const Vmon = new Shop([
    ItemList['V-dramon'],
    ItemList['XV-mon'],
    ItemList['XV-mon Black'],
], 'V-mon');
const Wormmon = new Shop([
    ItemList['Hudiemon'],
    ItemList['Kuwagamon'],
    ItemList['Stingmon'],
], 'Wormmon');
const Ankylomon = new Shop([
    ItemList['Brachimon'],
    ItemList['Shakkoumon'],
    ItemList['Triceramon'],
    ItemList['Vermillimon'],
], 'Ankylomon');
const Aquilamon = new Shop([
    ItemList['Aero V-dramon'],
    ItemList['Garudamon'],
    ItemList['Silphymon'],
    ItemList['Yatagaramon 2006'],
], 'Aquilamon');
const BlackTailmon = new Shop([
    ItemList['Black Tailmon Uver'],
    ItemList['Lady Devimon'],
    ItemList['Waru Monzaemon'],
], 'Black Tailmon');
const BomberNanimon = new Shop([
    ItemList['Giromon'],
    ItemList['Metal Mamemon'],
], 'Bomber Nanimon');
const Chrysalimon = new Shop([
    ItemList['Cyberdramon'],
    ItemList['Infermon'],
    ItemList['Taomon'],
], 'Chrysalimon');
const Galgomon = new Shop([
    ItemList['Andiramon Deva'],
    ItemList['Rapidmon Perfect'],
], 'Galgomon');
const GarurumonBlack = new Shop([
    ItemList['Blue Meramon'],
    ItemList['Mammon'],
    ItemList['Were Garurumon Black'],
], 'Garurumon Black');
const GreymonBlue = new Shop([
    ItemList['Metal Greymon Virus'],
    ItemList['Skull Greymon'],
    ItemList['Vermillimon'],
], 'Greymon Blue');
const RedVdramon = new Shop([
    ItemList['Aero V-dramon'],
    ItemList['Atlur Kabuterimon Red'],
    ItemList['Metal Tyranomon'],
], 'Red V-dramon');
const Sorcerimon = new Shop([
    ItemList['Panjyamon'],
    ItemList['Wisemon'],
], 'Sorcerimon');
const Stingmon = new Shop([
    ItemList['Dinobeemon'],
    ItemList['Jewelbeemon'],
    ItemList['Ookuwamon'],
], 'Stingmon');
const Wendimon = new Shop([
    ItemList['Andiramon'],
    ItemList['Bastemon'],
], 'Wendimon');
const XVmon = new Shop([
    ItemList['Aero V-dramon'],
    ItemList['Paildramon'],
    ItemList['Wingdramon'],
], 'XV-mon');
const Andiramon = new Shop([
    ItemList['Cherubimon Vice'],
    ItemList['Mercurymon'],
], 'Andiramon');
const Archnemon = new Shop([
    ItemList['Lilithmon'],
    ItemList['Parasimon'],
], 'Archnemon');
const Cyberdramon = new Shop([
    ItemList['Cyberdramon X-Antibody'],
    ItemList['Justimon Blitz Arm'],
    ItemList['Zeed Millenniumon'],
], 'Cyberdramon');
const Dinobeemon = new Shop([
    ItemList['Gran Kuwagamon'],
    ItemList['Imperialdramon Dragon Mode'],
], 'Dinobeemon');
const Infermon = new Shop([
    ItemList['Diablomon'],
    ItemList['Venom Vamdemon'],
], 'Infermon');
const Mummymon = new Shop([
    ItemList['Deathmon'],
    ItemList['Pharaohmon'],
], 'Mummymon');
const Paildramon = new Shop([
    ItemList['Gundramon'],
    ItemList['Imperialdramon Dragon Mode'],
], 'Paildramon');
const Shakkoumon = new Shop([
    ItemList['Slash Angemon'],
    ItemList['Vikemon'],
], 'Shakkoumon');
const Silphymon = new Shop([
    ItemList['Ornismon'],
    ItemList['Valkyrimon'],
], 'Silphymon');
const Superstarmon = new Shop([
    ItemList['Gankoomon'],
    ItemList['Prince Mamemon'],
], 'Superstarmon');
const Volcamon = new Shop([
    ItemList['Ancient Volcamon'],
    ItemList['Pile Volcamon'],
], 'Volcamon');
const WereGarurumonBlack = new Shop([
    ItemList['Bancho Leomon'],
    ItemList['Metal Garurumon Black'],
    ItemList['Minervamon'],
], 'Were Garurumon Black');
const Baihumon = new Shop([
    ItemList['Huanglongmon'],
], 'Baihumon');
const BelialVamdemon = new Shop([
    ItemList['Peti Meramon'],
], 'Belial Vamdemon');
const BlackWarGreymon = new Shop([
    ItemList['Black War Greymon X-Antibody'],
    ItemList['Omegamon Zwart'],
], 'Black War Greymon');
const ChaosGreymon = new Shop([
    ItemList['Botamon'],
], 'Chaos Greymon');
const ChaosLord = new Shop([
    ItemList['Bombmon'],
], 'Chaos Lord');
const ChaosPiemon = new Shop([
    ItemList['Bubbmon'],
], 'Chaos Piemon');
const ChaosSeadramon = new Shop([
    ItemList['Pitchmon'],
], 'Chaos Seadramon');
const CherubimonVice = new Shop([
    ItemList['Cherubimon Vice X-Antibody'],
    ItemList['Cherubimon Virtue'],
], 'Cherubimon Vice');
const CherubimonVirtue = new Shop([
    ItemList['Cherubimon Vice'],
    ItemList['Cherubimon Virtue X-Antibody'],
], 'Cherubimon Virtue');
const Crossmon = new Shop([
    ItemList['Puwamon'],
], 'Crossmon');
const Deathmon = new Shop([
    ItemList['Kuramon'],
], 'Deathmon');
const DeathmonBlack = new Shop([
    ItemList['Kuramon'],
], 'Deathmon Black');
const Devitamamon = new Shop([
    ItemList['Mokumon'],
], 'Devitamamon');
const Ebemon = new Shop([
    ItemList['Ebemon X-Antibody'],
], 'Ebemon');
const GranKuwagamon = new Shop([
    ItemList['Grandis Kuwagamon'],
], 'Gran Kuwagamon');
const HiAndromon = new Shop([
    ItemList['Choromon'],
], 'Hi Andromon');
const ImperialdramonDragonMode = new Shop([
    ItemList['Imperialdramon Fighter Mode'],
], 'Imperialdramon Dragon Mode');
const ImperialdramonDragonModeBlack = new Shop([
    ItemList['Imperialdramon Fighter Mode Black'],
], 'Imperialdramon Dragon Mode Black');
const ImperialdramonFighterMode = new Shop([
    ItemList['Imperialdramon Paladin Mode'],
], 'Imperialdramon Fighter Mode');
const Lampmon = new Shop([
    ItemList['Zurumon'],
], 'Lampmon');
const MetalGarurumonBlack = new Shop([
    ItemList['Omegamon Zwart'],
], 'Metal Garurumon Black');
const MoonMillenniumon = new Shop([
    ItemList['Zeed Millenniumon'],
], 'Moon Millenniumon');
const Pharaohmon = new Shop([
    ItemList['Mokumon'],
], 'Pharaohmon');
const PrinceMamemon = new Shop([
    ItemList['Prince Mamemon X-Antibody'],
], 'Prince Mamemon');
const Qinglongmon = new Shop([
    ItemList['Huanglongmon'],
], 'Qinglongmon');
const Seraphimon = new Shop([
    ItemList['Zurumon'],
], 'Seraphimon');
const Valkyrimon = new Shop([
    ItemList['Pururumon'],
], 'Valkyrimon');
const Vikemon = new Shop([
    ItemList['Pitchmon'],
], 'Vikemon');
const Xuanwumon = new Shop([
    ItemList['Huanglongmon'],
], 'Xuanwumon');
const Zanbamon = new Shop([
    ItemList['Punimon'],
], 'Zanbamon');
const Zhuqiaomon = new Shop([
    ItemList['Huanglongmon'],
], 'Zhuqiaomon');
const Allomon = new Shop([
    ItemList['Allomon X-Antibody'],
    ItemList['Megalo Growmon'],
], 'Allomon');
const Archelomon = new Shop([
    ItemList['Hangyomon'],
    ItemList['Zudomon'],
], 'Archelomon');
const Baromon = new Shop([
    ItemList['Mephismon'],
], 'Baromon');
const Bitmon = new Shop([
    ItemList['Andiramon Deva'],
], 'Bitmon');
const Boarmon = new Shop([
    ItemList['Mammon'],
    ItemList['Vikaralamon'],
], 'Boarmon');
const Bullmon = new Shop([
    ItemList['Vajramon'],
], 'Bullmon');
const Butterflamon = new Shop([
    ItemList['Atlur Kabuterimon Blue'],
], 'Butterflamon');
const Chamelemon = new Shop([
    ItemList['Brachimon'],
], 'Chamelemon');
const Coatlmon = new Shop([
    ItemList['Majiramon'],
    ItemList['Sandiramon'],
], 'Coatlmon');
const Depthmon = new Shop([
    ItemList['Dagomon'],
    ItemList['Divemon'],
    ItemList['Marin Devimon'],
], 'Depthmon');
const Digmon = new Shop([
    ItemList['Scorpiomon'],
    ItemList['Triceramon'],
], 'Digmon');
const Elephamon = new Shop([
    ItemList['Master Tyranomon'],
    ItemList['Mammon'],
], 'Elephamon');
const Fladramon = new Shop([
    ItemList['Aero V-dramon'],
    ItemList['Volcamon'],
], 'Fladramon');
const Flybeemon = new Shop([
    ItemList['Dinobeemon'],
], 'Flybeemon');
const Frogmon = new Shop([
    ItemList['Tonosama Gekomon'],
], 'Frogmon');
const Gargomon = new Shop([
    ItemList['Cyberdramon'],
    ItemList['Skull Greymon'],
], 'Gargomon');
const Goatmon = new Shop([
    ItemList['Mephismon'],
    ItemList['Mephismon'],
], 'Goatmon');
const GoldVdramon = new Shop([
    ItemList['Aero V-dramon'],
    ItemList['Mega Seadramon'],
    ItemList['Metal Greymon'],
], 'Gold V-dramon');
const Harpymon = new Shop([
    ItemList['Parrotmon'],
    ItemList['Silphymon'],
], 'Harpymon');
const Holsmon = new Shop([
    ItemList['Garudamon'],
    ItemList['Mihiramon'],
], 'Holsmon');
const Honeybeemon = new Shop([
    ItemList['Archnemon'],
], 'Honeybeemon');
const Kabukimon = new Shop([
    ItemList['Jyureimon'],
    ItemList['Zanbamon'],
], 'Kabukimon');
const Kangarumon = new Shop([
    ItemList['Taomon'],
    ItemList['Vajramon'],
], 'Kangarumon');
const Kongoumon = new Shop([
    ItemList['Atlur Kabuterimon Blue'],
    ItemList['Atlur Kabuterimon Red'],
], 'Kongoumon');
const Lighdramon = new Shop([
    ItemList['Caturamon'],
    ItemList['Were Garurumon'],
], 'Lighdramon');
const Lynxmon = new Shop([
    ItemList['Apollomon'],
    ItemList['Mihiramon'],
], 'Lynxmon');
const Magnamon = new Shop([
    ItemList['Magnamon X-Antibody'],
], 'Magnamon');
const Maildramon = new Shop([
    ItemList['Hippogriffomon'],
    ItemList['Silphymon'],
], 'Maildramon');
const Manbomon = new Shop([
    ItemList['Hangyomon'],
    ItemList['Mega Seadramon'],
], 'Manbomon');
const Mantaraymon = new Shop([
    ItemList['Mantaraymon X-Antibody'],
    ItemList['Marin Devimon'],
], 'Mantaraymon');
const Moosemon = new Shop([
    ItemList['Panjyamon'],
], 'Moosemon');
const Mothmon = new Shop([
    ItemList['Atlur Kabuterimon Red'],
    ItemList['Blossomon'],
], 'Mothmon');
const Nefertimon = new Shop([
    ItemList['Angewomon'],
    ItemList['Nefertimon X-Antibody'],
], 'Nefertimon');
const Nohemon = new Shop([
    ItemList['Jyagamon'],
    ItemList['Yatagaramon'],
], 'Nohemon');
const Opossummon = new Shop([
    ItemList['Cho·Hakkaimon'],
    ItemList['Caturamon'],
], 'Opossummon');
const Orcamon = new Shop([
    ItemList['Marin Devimon'],
    ItemList['Mermaimon'],
], 'Orcamon');
const Owlmon = new Shop([
    ItemList['Parrotmon'],
    ItemList['Yatagaramon 2006'],
], 'Owlmon');
const Peacockmon = new Shop([
    ItemList['Aero V-dramon'],
    ItemList['Cyberdramon'],
], 'Peacockmon');
const Pegasmon = new Shop([
    ItemList['Holy Angemon'],
    ItemList['Pegasmon X-Antibody'],
], 'Pegasmon');
const Pipismon = new Shop([
    ItemList['Venom Vamdemon'],
], 'Pipismon');
const Ponchomon = new Shop([
    ItemList['Fantomon'],
    ItemList['Pumpmon'],
], 'Ponchomon');
const Prairiemon = new Shop([
    ItemList['Kumbhiramon'],
    ItemList['Monzaemon'],
], 'Prairiemon');
const Pteranomon = new Shop([
    ItemList['Pteranomon X-Antibody'],
], 'Pteranomon');
const Pucchiemon = new Shop([
    ItemList['Bancho Stingmon'],
    ItemList['Phelesmon'],
], 'Pucchiemon');
const PucchiemonGreen = new Shop([
    ItemList['Ookuwamon'],
    ItemList['Lilimon'],
], 'Pucchiemon Green');
const RapidmonArmor = new Shop([
    ItemList['Rapidmon X-Antibody'],
    ItemList['Saint Galgomon'],
], 'Rapidmon Armor');
const Rhinomon = new Shop([
    ItemList['Rhinomon X-Antibody'],
], 'Rhinomon');
const Rinkmon = new Shop([
    ItemList['Andromon'],
    ItemList['Cyberdramon'],
], 'Rinkmon');
const Sagittarimon = new Shop([
    ItemList['Tyilinmon'],
], 'Sagittarimon');
const Seahomon = new Shop([
    ItemList['Sirenmon'],
    ItemList['Vajramon'],
], 'Seahomon');
const Searchmon = new Shop([
    ItemList['Assaultmon'],
    ItemList['Atlur Kabuterimon Blue'],
], 'Searchmon');
const Sepikmon = new Shop([
    ItemList['Vademon'],
], 'Sepikmon');
const Sethmon = new Shop([
    ItemList['Megalo Growmon'],
], 'Sethmon');
const Shadramon = new Shop([
    ItemList['Karatenmon'],
    ItemList['Volcamon'],
], 'Shadramon');
const Sheepmon = new Shop([
    ItemList['Pajramon'],
], 'Sheepmon');
const Shurimon = new Shop([
    ItemList['Karatenmon'],
], 'Shurimon');
const Stegomon = new Shop([
    ItemList['Orochimon'],
], 'Stegomon');
const Submarimon = new Shop([
    ItemList['Gusokumon'],
    ItemList['Piranimon'],
], 'Submarimon');
const Swanmon = new Shop([
    ItemList['Holy Angemon'],
    ItemList['Sinduramon'],
], 'Swanmon');
const Tocanmon = new Shop([
    ItemList['Digitamamon'],
    ItemList['Griffomon'],
], 'Tocanmon');
const Togemogumon = new Shop([
    ItemList['Panjyamon'],
], 'Togemogumon');
const Tylomon = new Shop([
    ItemList['Mega Seadramon'],
    ItemList['Tylomon X-Antibody'],
], 'Tylomon');
const Yaksamon = new Shop([
    ItemList['Asuramon'],
    ItemList['Kyukimon'],
], 'Yaksamon');
const Jyarimon = new Shop([
    ItemList['Gigimon'],
], 'Jyarimon');
const Ketomon = new Shop([
    ItemList['Hopmon'],
], 'Ketomon');
const Paomon = new Shop([
    ItemList['Xiaomon'],
], 'Paomon');
const Pipimon = new Shop([
    ItemList['Tanemon'],
], 'Pipimon');
const Relemon = new Shop([
    ItemList['Pokomon'],
], 'Relemon');
const Gigimon = new Shop([
    ItemList['Agumon'],
    ItemList['Goburimon'],
    ItemList['Guilmon'],
], 'Gigimon');
const Hopmon = new Shop([
    ItemList['Jazamon'],
    ItemList['Monodramon'],
    ItemList['V-mon'],
], 'Hopmon');
const Pokomon = new Shop([
    ItemList['Plotmon'],
    ItemList['Renamon'],
], 'Pokomon');
const Xiaomon = new Shop([
    ItemList['Labramon'],
], 'Xiaomon');
const ArkadimonChild = new Shop([
    ItemList['Arkadimon Adult'],
    ItemList['Chrysalimon'],
], 'Arkadimon Child');
const Guilmon = new Shop([
    ItemList['Growmon'],
    ItemList['Guilmon X-Antibody'],
    ItemList['Tyranomon'],
], 'Guilmon');
const Impmon = new Shop([
    ItemList['Bakemon'],
    ItemList['Black Tailmon'],
    ItemList['Devimon'],
    ItemList['Impmon X-Antibody'],
], 'Impmon');
const Labramon = new Shop([
    ItemList['Dobermon'],
    ItemList['Siesamon'],
], 'Labramon');
const Lucemon = new Shop([
    ItemList['Angemon'],
    ItemList['Devimon'],
    ItemList['Lucemon Falldown Mode'],
], 'Lucemon');
const Monodramon = new Shop([
    ItemList['Airdramon'],
    ItemList['Raptordramon'],
    ItemList['Strikedramon'],
], 'Monodramon');
const PetitMamon = new Shop([
    ItemList['Devimon'],
    ItemList['Igamon'],
], 'Petit Mamon');
const Renamon = new Shop([
    ItemList['Kyubimon'],
    ItemList['Renamon X-Antibody'],
    ItemList['Youkomon'],
], 'Renamon');
const ArkadimonAdult = new Shop([
    ItemList['Arkadimon Perfect'],
    ItemList['Infermon'],
], 'Arkadimon Adult');
const BlackGalgomon = new Shop([
    ItemList['Assaultmon'],
    ItemList['Black Rapidmon'],
], 'Black Galgomon');
const BlackGrowmon = new Shop([
    ItemList['Black Megalo Growmon'],
    ItemList['Skull Greymon'],
], 'Black Growmon');
const Dobermon = new Shop([
    ItemList['Cerberumon'],
    ItemList['Dobermon X-Antibody'],
], 'Dobermon');
const Dogmon = new Shop([
    ItemList['Cerberumon'],
], 'Dogmon');
const Growmon = new Shop([
    ItemList['Growmon X-Antibody'],
    ItemList['Megalo Growmon'],
    ItemList['Skull Greymon'],
], 'Growmon');
const GrowmonOrange = new Shop([
    ItemList['Gigadramon'],
    ItemList['Megalo Growmon Data'],
], 'Growmon Orange');
const Kyubimon = new Shop([
    ItemList['Monzaemon'],
    ItemList['Taomon'],
], 'Kyubimon');
const KyubimonSilver = new Shop([
    ItemList['Taomon Silver'],
    ItemList['Waru Monzaemon'],
], 'Kyubimon Silver');
const Siesamon = new Shop([
    ItemList['Cerberumon'],
    ItemList['Siesamon X-Antibody'],
], 'Siesamon');
const Strikedramon = new Shop([
    ItemList['Cyberdramon'],
    ItemList['Megadramon'],
    ItemList['Metal Greymon'],
], 'Strikedramon');
const Turuiemon = new Shop([
    ItemList['Andiramon Deva'],
    ItemList['Monzaemon'],
], 'Turuiemon');
const VdramonBlack = new Shop([
    ItemList['Aero V-dramon'],
    ItemList['Cyberdramon'],
    ItemList['Metal Greymon Virus'],
], 'V-dramon Black');
const Youkomon = new Shop([
    ItemList['Doumon'],
    ItemList['Kyukimon'],
], 'Youkomon');
const AndiramonDeva = new Shop([
    ItemList['Cherubimon Virtue'],
    ItemList['Duftmon'],
    ItemList['Minervamon'],
], 'Andiramon Deva');
const ArkadimonPerfect = new Shop([
    ItemList['Arkadimon Ultimate'],
    ItemList['Demon'],
    ItemList['Diablomon'],
], 'Arkadimon Perfect');
const BlackMegaloGrowmon = new Shop([
    ItemList['Black War Greymon'],
    ItemList['Chaos Dukemon'],
    ItemList['Darkdramon'],
], 'Black Megalo Growmon');
const BlackRapidmon = new Shop([
    ItemList['Black Saint Galgomon'],
    ItemList['Justimon Accel Arm'],
], 'Black Rapidmon');
const Caturamon = new Shop([
    ItemList['Baihumon'],
    ItemList['Saber Leomon'],
], 'Caturamon');
const Cerberumon = new Shop([
    ItemList['Anubimon'],
    ItemList['Cerberumon Werewolf Mode'],
    ItemList['Cerberumon X-Antibody'],
], 'Cerberumon');
const Doumon = new Shop([
    ItemList['Kuzuhamon'],
    ItemList['Metal Garurumon Black'],
], 'Doumon');
const GrappuLeomon = new Shop([
    ItemList['Bancho Leomon'],
    ItemList['Duftmon'],
    ItemList['Heavy Leomon'],
    ItemList['Marsmon'],
    ItemList['Saber Leomon'],
], 'Grappu Leomon');
const Indaramon = new Shop([
    ItemList['Belial Vamdemon'],
    ItemList['Murmukusmon'],
], 'Indaramon');
const Karatenmon = new Shop([
    ItemList['Ravmon'],
    ItemList['Valdurmon'],
], 'Karatenmon');
const Kumbhiramon = new Shop([
    ItemList['Xuanwumon'],
], 'Kumbhiramon');
const Majiramon = new Shop([
    ItemList['Qinglongmon'],
], 'Majiramon');
const Makuramon = new Shop([
    ItemList['Metal Etemon'],
    ItemList['King Etemon'],
], 'Makuramon');
const MegaloGrowmon = new Shop([
    ItemList['Dukemon'],
    ItemList['Megidramon'],
    ItemList['Megalo Growmon X-Antibody'],
], 'Megalo Growmon');
const MegaloGrowmonData = new Shop([
    ItemList['Dukemon'],
    ItemList['Victory Greymon'],
    ItemList['War Greymon'],
], 'Megalo Growmon Data');
const Mephismon = new Shop([
    ItemList['Gulfmon'],
    ItemList['Mephismon X-Antibody'],
], 'Mephismon');
const Mihiramon = new Shop([
    ItemList['Baihumon'],
    ItemList['Metal Garurumon'],
], 'Mihiramon');
const Orochimon = new Shop([
    ItemList['Nidhoggmon'],
    ItemList['Xuanwumon'],
], 'Orochimon');
const Pajramon = new Shop([
    ItemList['Cherubimon Virtue'],
    ItemList['Cherubimon Vice'],
    ItemList['Saint Galgomon'],
], 'Pajramon');
const Pandamon = new Shop([
    ItemList['Jijimon'],
    ItemList['Metal Garurumon Black'],
    ItemList['Mercurymon'],
], 'Pandamon');
const RapidmonPerfect = new Shop([
    ItemList['Saint Galgomon'],
    ItemList['Sleipmon'],
], 'Rapidmon Perfect');
const Sandiramon = new Shop([
    ItemList['Megidramon'],
    ItemList['Qinglongmon'],
], 'Sandiramon');
const Scorpiomon = new Shop([
    ItemList['Lilithmon'],
    ItemList['Nidhoggmon'],
], 'Scorpiomon');
const Sinduramon = new Shop([
    ItemList['Crossmon'],
    ItemList['Valdurmon'],
    ItemList['Zhuqiaomon'],
], 'Sinduramon');
const Taomon = new Shop([
    ItemList['Ofanimon'],
    ItemList['Sakuyamon'],
    ItemList['Valkyrimon'],
], 'Taomon');
const TaomonSilver = new Shop([
    ItemList['Kuzuhamon'],
    ItemList['Sakuyamon'],
], 'Taomon Silver');
const Vajramon = new Shop([
    ItemList['Zanbamon'],
], 'Vajramon');
const Vikaralamon = new Shop([
    ItemList['Platinum Numemon'],
    ItemList['Xuanwumon'],
], 'Vikaralamon');
const Anubimon = new Shop([
    ItemList['Chicomon'],
], 'Anubimon');
const ArkadimonUltimate = new Shop([
    ItemList['Arkadimon Super Ultimate'],
], 'Arkadimon Ultimate');
const Armagemon = new Shop([
    ItemList['Kuramon'],
], 'Armagemon');
const Beelzebumon = new Shop([
    ItemList['Beelzebumon X-Antibody'],
    ItemList['Beelzebumon Blast Mode'],
], 'Beelzebumon');
const BeelzebumonBlastMode = new Shop([
    ItemList['Keemon'],
], 'Beelzebumon Blast Mode');
const BlackSaintGalgomon = new Shop([
    ItemList['Cocomon'],
], 'Black Saint Galgomon');
const ChaosDukemon = new Shop([
    ItemList['Jyarimon'],
], 'Chaos Dukemon');
const Dukemon = new Shop([
    ItemList['Dukemon X-Antibody'],
    ItemList['Dukemon Crimson Mode'],
    ItemList['Medieval Dukemon'],
], 'Dukemon');
const DukemonCrimsonMode = new Shop([
    ItemList['Jyarimon'],
], 'Dukemon Crimson Mode');
const Gokumon = new Shop([
    ItemList['Mokumon'],
], 'Gokumon');
const Gulfmon = new Shop([
    ItemList['Zurumon'],
], 'Gulfmon');
const ImperialdramonFighterModeBlack = new Shop([
    ItemList['Chicomon'],
], 'Imperialdramon Fighter Mode Black');
const ImperialdramonPaladinMode = new Shop([
    ItemList['Chicomon'],
], 'Imperialdramon Paladin Mode');
const JustimonAccelArm = new Shop([
    ItemList['Justimon Blitz Arm'],
    ItemList['Justimon Critical Arm'],
    ItemList['Justimon X-Antibody'],
], 'Justimon Accel Arm');
const JustimonBlitzArm = new Shop([
    ItemList['Justimon Accel Arm'],
    ItemList['Justimon Critical Arm'],
    ItemList['Justimon X-Antibody'],
], 'Justimon Blitz Arm');
const JustimonCriticalArm = new Shop([
    ItemList['Justimon Accel Arm'],
    ItemList['Justimon Blitz Arm'],
    ItemList['Justimon X-Antibody'],
], 'Justimon Critical Arm');
const Kuzuhamon = new Shop([
    ItemList['Kuzuhamon Miko Mode'],
], 'Kuzuhamon');
const Megidramon = new Shop([
    ItemList['Chaos Dukemon'],
    ItemList['Megidramon X-Antibody'],
], 'Megidramon');
const Ofanimon = new Shop([
    ItemList['Ofanimon X-Antibody'],
    ItemList['Ofanimon Falldown Mode'],
], 'Ofanimon');
const Parallelmon = new Shop([
    ItemList['Kuramon'],
], 'Parallelmon');
const SaintGalgomon = new Shop([
    ItemList['Zerimon'],
], 'Saint Galgomon');
const Sakuyamon = new Shop([
    ItemList['Sakuyamon X-Antibody'],
    ItemList['Sakuyamon Miko Mode'],
], 'Sakuyamon');
const SakuyamonMikoMode = new Shop([
    ItemList['Relemon'],
], 'Sakuyamon Miko Mode');
const ZeedMillenniumon = new Shop([
    ItemList['Zurumon'],
], 'Zeed Millenniumon');
const Culumon = new Shop([
    ItemList['Yukimi Botamon'],
], 'Culumon');
const Keemon = new Shop([
    ItemList['Yarmon'],
], 'Keemon');
const Puttimon = new Shop([
    ItemList['Cupimon'],
], 'Puttimon');
const Cupimon = new Shop([
    ItemList['Lucemon'],
    ItemList['Patamon'],
    ItemList['Plotmon'],
], 'Cupimon');
const TorikaraBallmon = new Shop([
    ItemList['Burgamon'],
    ItemList['Ebi Burgamon'],
], 'Torikara Ballmon');
const Yarmon = new Shop([
    ItemList['Agumon Black'],
    ItemList['Impmon'],
], 'Yarmon');
const Bearmon = new Shop([
    ItemList['Garurumon'],
    ItemList['Gryzmon'],
    ItemList['Leomon'],
], 'Bearmon');
const Bemmon = new Shop([
    ItemList['Snatchmon'],
], 'Bemmon');
const Bokomon = new Shop([
    ItemList['Galgomon'],
    ItemList['Mojyamon'],
], 'Bokomon');
const Burgamon = new Shop([
    ItemList['Burgamon Adult'],
], 'Burgamon');
const CardmonC1 = new Shop([
    ItemList['Dokimon'],
], 'Cardmon C1');
const EbiBurgamon = new Shop([
    ItemList['Burgamon Adult'],
], 'Ebi Burgamon');
const Koemon = new Shop([
    ItemList['Gorimon'],
    ItemList['Hanumon'],
    ItemList['Targetmon'],
], 'Koemon');
const Kotemon = new Shop([
    ItemList['Dinohumon'],
    ItemList['Gladimon'],
    ItemList['Musyamon'],
], 'Kotemon');
const Neamon = new Shop([
    ItemList['Kangarumon'],
    ItemList['Prairiemon'],
], 'Neamon');
const Blimpmon = new Shop([
    ItemList['Valvemon'],
], 'Blimpmon');
const Boogiemon = new Shop([
    ItemList['Death Meramon'],
    ItemList['Mephismon'],
    ItemList['Phelesmon'],
], 'Boogiemon');
const BurgamonAdult = new Shop([
    ItemList['Digitamamon'],
    ItemList['Jyagamon'],
    ItemList['Pumpmon'],
], 'Burgamon Adult');
const Darcmon = new Shop([
    ItemList['Angewomon'],
    ItemList['Hippogriffomon'],
    ItemList['Murmukusmon'],
], 'Darcmon');
const Dinohumon = new Shop([
    ItemList['Knightmon'],
    ItemList['Orochimon'],
    ItemList['Zanbamon'],
], 'Dinohumon');
const Fangmon = new Shop([
    ItemList['Cerberumon'],
    ItemList['Were Garurumon'],
], 'Fangmon');
const Gladimon = new Shop([
    ItemList['Knightmon'],
    ItemList['Metal Mamemon'],
    ItemList['Tekkamon'],
], 'Gladimon');
const Gryzmon = new Shop([
    ItemList['Callismon'],
    ItemList['Cerberumon'],
    ItemList['Grappu Leomon'],
], 'Gryzmon');
const Hookmon = new Shop([
    ItemList['Captain Hookmon'],
    ItemList['Mermaimon'],
    ItemList['Shawujinmon'],
], 'Hookmon');
const Kougamon = new Shop([
    ItemList['Giromon'],
    ItemList['Karatenmon'],
], 'Kougamon');
const Mikemon = new Shop([
    ItemList['Bastemon'],
    ItemList['Betsumon'],
], 'Mikemon');
const Snatchmon = new Shop([
    ItemList['Destromon'],
], 'Snatchmon');
const TrailmonWorm = new Shop([
    ItemList['Locomon'],
], 'Trailmon Worm');
const Witchmon = new Shop([
    ItemList['Bastemon'],
    ItemList['Lady Devimon'],
    ItemList['Neo Devimon'],
], 'Witchmon');
const XVmonBlack = new Shop([
    ItemList['Megadramon'],
    ItemList['Paildramon'],
], 'XV-mon Black');
const Assaultmon = new Shop([
    ItemList['Cannondramon'],
    ItemList['Chaosdramon'],
    ItemList['Darkdramon'],
], 'Assaultmon');
const Bastemon = new Shop([
    ItemList['Babamon'],
    ItemList['Kuzuhamon'],
    ItemList['Lilithmon'],
], 'Bastemon');
const Betsumon = new Shop([
    ItemList['Holydramon'],
    ItemList['King Etemon'],
], 'Betsumon');
const BlackKingNumemon = new Shop([
    ItemList['Metal Etemon'],
    ItemList['Platinum Numemon'],
    ItemList['Prince Mamemon'],
], 'Black King Numemon');
const Destromon = new Shop([
    ItemList['Ragnamon'],
], 'Destromon');
const Hippogriffomon = new Shop([
    ItemList['Griffomon'],
    ItemList['Murmukusmon'],
    ItemList['Valdurmon'],
], 'Hippogriffomon');
const Jewelbeemon = new Shop([
    ItemList['Ancient Beatmon'],
    ItemList['Bancho Stingmon'],
    ItemList['Grandis Kuwagamon'],
], 'Jewelbeemon');
const Kyukimon = new Shop([
    ItemList['Gokumon'],
    ItemList['Sakuyamon'],
    ItemList['Slash Angemon'],
], 'Kyukimon');
const Locomon = new Shop([
    ItemList['Grand Locomon'],
    ItemList['Heavy Leomon'],
], 'Locomon');
const LucemonFalldownMode = new Shop([
    ItemList['Lucemon X-Antibody'],
    ItemList['Lucemon Larva'],
    ItemList['Lucemon Satan Mode'],
], 'Lucemon Falldown Mode');
const Mermaimon = new Shop([
    ItemList['Ancient Mermaimon'],
    ItemList['Leviamon'],
    ItemList['Neptunemon'],
    ItemList['Regalecusmon'],
], 'Mermaimon');
const Mistymon = new Shop([
    ItemList['Dynasmon'],
    ItemList['Lord Knightmon'],
    ItemList['Pharaohmon'],
], 'Mistymon');
const NeoDevimon = new Shop([
    ItemList['Done Devimon'],
    ItemList['Demon'],
    ItemList['Neo Vamdemon'],
], 'Neo Devimon');
const Phelesmon = new Shop([
    ItemList['Belial Vamdemon'],
    ItemList['Murmukusmon'],
    ItemList['Piemon'],
], 'Phelesmon');
const Valvemon = new Shop([
    ItemList['Breakdramon'],
    ItemList['Chaosdramon'],
], 'Valvemon');
const Wisemon = new Shop([
    ItemList['Ancient Wisemon'],
    ItemList['Jijimon'],
    ItemList['Piemon'],
], 'Wisemon');
const AncientBeatmon = new Shop([
    ItemList['Yuramon'],
], 'Ancient Beatmon');
const AncientGarurumon = new Shop([
    ItemList['Punimon'],
], 'Ancient Garurumon');
const AncientGreymon = new Shop([
    ItemList['Botamon'],
], 'Ancient Greymon');
const AncientIrismon = new Shop([
    ItemList['Puwamon'],
], 'Ancient Irismon');
const AncientMegatheriumon = new Shop([
    ItemList['Yukimi Botamon'],
], 'Ancient Megatheriumon');
const AncientMermaimon = new Shop([
    ItemList['Pitchmon'],
], 'Ancient Mermaimon');
const AncientSphinxmon = new Shop([
    ItemList['Zurumon'],
], 'Ancient Sphinxmon');
const AncientTroiamon = new Shop([
    ItemList['Leafmon'],
], 'Ancient Troiamon');
const AncientVolcamon = new Shop([
    ItemList['Mokumon'],
], 'Ancient Volcamon');
const AncientWisemon = new Shop([
    ItemList['Choromon'],
], 'Ancient Wisemon');
const BlackSeraphimon = new Shop([
    ItemList['Keemon'],
], 'Black Seraphimon');
const Callismon = new Shop([
    ItemList['Botamon'],
], 'Callismon');
const Cannondramon = new Shop([
    ItemList['Petitmon'],
], 'Cannondramon');
const Chaosdramon = new Shop([
    ItemList['Chaosdramon X-Antibody'],
], 'Chaosdramon');
const Dominimon = new Shop([
    ItemList['Poyomon'],
], 'Dominimon');
const Dynasmon = new Shop([
    ItemList['Dynasmon X-Antibody'],
], 'Dynasmon');
const Fujinmon = new Shop([
    ItemList['Choromon'],
], 'Fujinmon');
const GrandLocomon = new Shop([
    ItemList['Choromon'],
], 'Grand Locomon');
const Huanglongmon = new Shop([
    ItemList['Mokumon'],
], 'Huanglongmon');
const Lilithmon = new Shop([
    ItemList['Lilithmon X-Antibody'],
], 'Lilithmon');
const LordKnightmon = new Shop([
    ItemList['Lord Knightmon X-Antibody'],
], 'Lord Knightmon');
const LucemonSatanMode = new Shop([
    ItemList['Lucemon Larva'],
], 'Lucemon Satan Mode');
const Marsmon = new Shop([
    ItemList['Punimon'],
], 'Marsmon');
const Metamormon = new Shop([
    ItemList['Mokumon'],
], 'Metamormon');
const Murmukusmon = new Shop([
    ItemList['Keemon'],
], 'Murmukusmon');
const Ornismon = new Shop([
    ItemList['Pururumon'],
], 'Ornismon');
const Parasimon = new Shop([
    ItemList['Yuramon'],
], 'Parasimon');
const PileVolcamon = new Shop([
    ItemList['Mokumon'],
], 'Pile Volcamon');
const Ragnamon = new Shop([
    ItemList['Pitchmon'],
], 'Ragnamon');
const Raidenmon = new Shop([
    ItemList['Choromon'],
], 'Raidenmon');
const Raijinmon = new Shop([
    ItemList['Choromon'],
], 'Raijinmon');
const Regulumon = new Shop([
    ItemList['Zurumon'],
], 'Regulumon');
const SlashAngemon = new Shop([
    ItemList['Tsubumon'],
], 'Slash Angemon');
const Suijinmon = new Shop([
    ItemList['Choromon'],
], 'Suijinmon');
const Susanoomon = new Shop([
    ItemList['Mokumon'],
], 'Susanoomon');
const UlforceVdramon = new Shop([
    ItemList['Ulforce V-dramon Future Mode'],
    ItemList['Ulforce V-dramon X-Antibody'],
], 'Ulforce V-dramon');
const FlaWizarmon = new Shop([
    ItemList['Mistymon'],
    ItemList['Wisemon'],
], 'Fla Wizarmon');
const Kenkimon = new Shop([
    ItemList['Andromon'],
    ItemList['Valvemon'],
], 'Kenkimon');
const Salamandamon = new Shop([
    ItemList['Megalo Growmon'],
    ItemList['Volcamon'],
], 'Salamandamon');
const Thunderbirmon = new Shop([
    ItemList['Bio Thunderbirmon'],
    ItemList['Hippogriffomon'],
    ItemList['Parrotmon'],
], 'Thunderbirmon');
const Agnimon = new Shop([
    ItemList['Aldamon'],
    ItemList['Vritramon'],
], 'Agnimon');
const Aldamon = new Shop([
    ItemList['Bryweludramon'],
    ItemList['Kaiser Greymon'],
], 'Aldamon');
const Arbormon = new Shop([
    ItemList['Jyureimon'],
    ItemList['Petaldramon'],
], 'Arbormon');
const Beowolfmon = new Shop([
    ItemList['Magna Garurumon'],
    ItemList['Metal Garurumon'],
], 'Beowolfmon');
const Blitzmon = new Shop([
    ItemList['Bolgmon'],
    ItemList['Rhino Kabuterimon'],
], 'Blitzmon');
const Blizzarmon = new Shop([
    ItemList['Ancient Megatheriumon'],
], 'Blizzarmon');
const Bolgmon = new Shop([
    ItemList['Ancient Beatmon'],
], 'Bolgmon');
const Calamaramon = new Shop([
    ItemList['Ancient Mermaimon'],
], 'Calamaramon');
const Chackmon = new Shop([
    ItemList['Blizzarmon'],
    ItemList['Daipenmon'],
], 'Chackmon');
const Daipenmon = new Shop([
    ItemList['Fros Velgrmon'],
], 'Daipenmon');
const Duskmon = new Shop([
    ItemList['Velgrmon'],
], 'Duskmon');
const Fairimon = new Shop([
    ItemList['Jet Silphymon'],
    ItemList['Shutumon'],
], 'Fairimon');
const Flamon = new Shop([
    ItemList['Agnimon'],
    ItemList['Flare Lizarmon'],
], 'Flamon');
const Garummon = new Shop([
    ItemList['Magna Garurumon'],
], 'Garummon');
const Gigasmon = new Shop([
    ItemList['Ancient Volcamon'],
], 'Gigasmon');
const Grottomon = new Shop([
    ItemList['Gigasmon'],
], 'Grottomon');
const JetSilphymon = new Shop([
    ItemList['Junomon'],
], 'Jet Silphymon');
const KaiserGreymon = new Shop([
    ItemList['Susanoomon'],
], 'Kaiser Greymon');
const KaiserLeomon = new Shop([
    ItemList['Ancient Sphinxmon'],
], 'Kaiser Leomon');
const Löwemon = new Shop([
    ItemList['Kaiser Leomon'],
    ItemList['Raihimon'],
], 'Löwemon');
const MagnaGarurumon = new Shop([
    ItemList['Susanoomon'],
], 'Magna Garurumon');
const Mercuremon = new Shop([
    ItemList['Black Seraphimon'],
    ItemList['Sephirothmon'],
], 'Mercuremon');
const Petaldramon = new Shop([
    ItemList['Ancient Troiamon'],
], 'Petaldramon');
const Raihimon = new Shop([
    ItemList['Ancient Sphinxmon'],
], 'Raihimon');
const Ranamon = new Shop([
    ItemList['Ancient Mermaimon'],
], 'Ranamon');
const RhinoKabuterimon = new Shop([
    ItemList['Ancient Beatmon'],
], 'Rhino Kabuterimon');
const Sephirothmon = new Shop([
    ItemList['Chimairamon'],
    ItemList['Deathmon'],
], 'Sephirothmon');
const Shutumon = new Shop([
    ItemList['Ancient Irismon'],
], 'Shutumon');
const Strabimon = new Shop([
    ItemList['Wendimon'],
    ItemList['Wolfmon'],
], 'Strabimon');
const Velgrmon = new Shop([
    ItemList['Gulfmon'],
], 'Velgrmon');
const Vritramon = new Shop([
    ItemList['Ancient Greymon'],
    ItemList['Kaiser Greymon'],
], 'Vritramon');
const Wolfmon = new Shop([
    ItemList['Beowolfmon'],
    ItemList['Garummon'],
], 'Wolfmon');
const Būmon = new Shop([
    ItemList['Boarmon'],
    ItemList['Burpmon'],
], 'Būmon');
const Dodomon = new Shop([
    ItemList['Dorimon'],
    ItemList['Wanyamon'],
], 'Dodomon');
const Fufumon = new Shop([
    ItemList['Kyokyomon'],
], 'Fufumon');
const Pupumon = new Shop([
    ItemList['Puroromon'],
], 'Pupumon');
const Dorimon = new Shop([
    ItemList['Bearmon'],
    ItemList['DORUmon'],
    ItemList['Gazimon'],
], 'Dorimon');
const Kyokyomon = new Shop([
    ItemList['Ryudamon'],
], 'Kyokyomon');
const Puroromon = new Shop([
    ItemList['Funbeemon'],
], 'Puroromon');
const AgumonXAntibody = new Shop([
    ItemList['Greymon X-Antibody'],
    ItemList['Igamon'],
    ItemList['Tyranomon X-Antibody'],
], 'Agumon X-Antibody');
const BetamonXAntibody = new Shop([
    ItemList['Airdramon'],
    ItemList['Raremon'],
    ItemList['Seadramon X-Antibody'],
], 'Betamon X-Antibody');
const DORUmon = new Shop([
    ItemList['Death-X-DORUgamon'],
    ItemList['DORUgamon'],
    ItemList['Raptordramon'],
], 'DORUmon');
const Funbeemon = new Shop([
    ItemList['Omekamon'],
    ItemList['Stingmon'],
    ItemList['Waspmon'],
], 'Funbeemon');
const GabumonXAntibody = new Shop([
    ItemList['Garurumon X-Antibody'],
    ItemList['Kyubimon Silver'],
    ItemList['Turuiemon'],
], 'Gabumon X-Antibody');
const GanimonXAntibody = new Shop([
    ItemList['Coelamon'],
    ItemList['Gesomon X-Antibody'],
    ItemList['Shellmon'],
], 'Ganimon X-Antibody');
const GazimonXAntibody = new Shop([
    ItemList['Garurumon X-Antibody'],
    ItemList['Lynxmon'],
], 'Gazimon X-Antibody');
const GomamonXAntibody = new Shop([
    ItemList['Gesomon X-Antibody'],
    ItemList['Ikkakumon'],
    ItemList['Octmon'],
], 'Gomamon X-Antibody');
const GottsumonXAntibody = new Shop([
    ItemList['Ankylomon'],
    ItemList['Icemon'],
    ItemList['Knight Chessmon Black'],
], 'Gottsumon X-Antibody');
const GuilmonXAntibody = new Shop([
    ItemList['Black Growmon'],
    ItemList['Growmon X-Antibody'],
    ItemList['Monochromon X-Antibody'],
], 'Guilmon X-Antibody');
const KokuwamonXAntibody = new Shop([
    ItemList['Clockmon'],
    ItemList['Guardromon'],
    ItemList['Kuwagamon X-Antibody'],
    ItemList['Mechanorimon'],
], 'Kokuwamon X-Antibody');
const OtamamonXAntibody = new Shop([
    ItemList['Blimpmon'],
    ItemList['Gekomon'],
    ItemList['Seadramon X-Antibody'],
], 'Otamamon X-Antibody');
const PalmonXAntibody = new Shop([
    ItemList['Dokugumon'],
    ItemList['Sunflowmon'],
    ItemList['Togemon X-Antibody'],
], 'Palmon X-Antibody');
const PlotmonXAntibody = new Shop([
    ItemList['Pidmon'],
    ItemList['Reppamon'],
    ItemList['Tailmon X-Antibody'],
    ItemList['Tobucatmon'],
], 'Plotmon X-Antibody');
const Ryudamon = new Shop([
    ItemList['Ginryumon'],
    ItemList['Greymon'],
    ItemList['Raptordramon'],
], 'Ryudamon');
const ShakomonXAntibody = new Shop([
    ItemList['Coelamon'],
    ItemList['Ebidramon'],
    ItemList['Seadramon X-Antibody'],
    ItemList['Shellmon'],
], 'Shakomon X-Antibody');
const AllomonXAntibody = new Shop([
    ItemList['Hisyaryumon'],
    ItemList['Mametyramon'],
    ItemList['Skull Baluchimon'],
], 'Allomon X-Antibody');
const DeathXDORUgamon = new Shop([
    ItemList['Death-X-DORUguremon'],
    ItemList['Hisyaryumon'],
    ItemList['Metal Greymon Virus'],
], 'Death-X-DORUgamon');
const DobermonXAntibody = new Shop([
    ItemList['Cerberumon X-Antibody'],
    ItemList['Were Garurumon X-Antibody'],
], 'Dobermon X-Antibody');
const DORUgamon = new Shop([
    ItemList['DORUguremon'],
    ItemList['Death-X-DORUguremon'],
    ItemList['Tyilinmon'],
], 'DORUgamon');
const GarurumonXAntibody = new Shop([
    ItemList['Cerberumon X-Antibody'],
    ItemList['Panjyamon X-Antibody'],
    ItemList['Were Garurumon X-Antibody'],
], 'Garurumon X-Antibody');
const GesomonXAntibody = new Shop([
    ItemList['Dagomon'],
    ItemList['Marin Devimon'],
    ItemList['Mega Seadramon X-Antibody'],
], 'Gesomon X-Antibody');
const Ginryumon = new Shop([
    ItemList['Grademon'],
    ItemList['Hisyaryumon'],
    ItemList['Mametyramon'],
], 'Ginryumon');
const GreymonXAntibody = new Shop([
    ItemList['DORUguremon'],
    ItemList['Metal Greymon X-Antibody'],
    ItemList['Skull Greymon'],
], 'Greymon X-Antibody');
const GrowmonXAntibody = new Shop([
    ItemList['Groundramon'],
    ItemList['Megalo Growmon X-Antibody'],
    ItemList['Orochimon'],
], 'Growmon X-Antibody');
const KuwagamonXAntibody = new Shop([
    ItemList['Ookuwamon X-Antibody'],
    ItemList['Scorpiomon'],
], 'Kuwagamon X-Antibody');
const LeomonXAntibody = new Shop([
    ItemList['Grappu Leomon'],
    ItemList['Panjyamon X-Antibody'],
], 'Leomon X-Antibody');
const MantaraymonXAntibody = new Shop([
    ItemList['Anomalocarimon X-Antibody'],
    ItemList['Hangyomon'],
], 'Mantaraymon X-Antibody');
const MonochromonXAntibody = new Shop([
    ItemList['Hisyaryumon'],
    ItemList['Metal Tyranomon X-Antibody'],
    ItemList['Triceramon X-Antibody'],
], 'Monochromon X-Antibody');
const NefertimonXAntibody = new Shop([
    ItemList['Angewomon'],
    ItemList['Hippogriffomon'],
    ItemList['Shakkoumon'],
    ItemList['Taomon'],
], 'Nefertimon X-Antibody');
const Omekamon = new Shop([
    ItemList['Knightmon'],
    ItemList['Superstarmon'],
], 'Omekamon');
const PteranomonXAntibody = new Shop([
    ItemList['Andromon'],
    ItemList['Metal Greymon 2010'],
], 'Pteranomon X-Antibody');
const Raptordramon = new Shop([
    ItemList['Grademon'],
    ItemList['Hisyaryumon'],
    ItemList['Megalo Growmon Data'],
], 'Raptordramon');
const RhinomonXAntibody = new Shop([
    ItemList['Grademon'],
    ItemList['Knightmon'],
], 'Rhinomon X-Antibody');
const SeadramonXAntibody = new Shop([
    ItemList['Anomalocarimon X-Antibody'],
    ItemList['Mega Seadramon X-Antibody'],
], 'Seadramon X-Antibody');
const StarmonXAntibody = new Shop([
    ItemList['Mamemon X-Antibody'],
    ItemList['Superstarmon'],
], 'Starmon X-Antibody');
const TailmonXAntibody = new Shop([
    ItemList['Angewomon X-Antibody'],
    ItemList['Betsumon'],
    ItemList['Silphymon'],
], 'Tailmon X-Antibody');
const Tobucatmon = new Shop([
    ItemList['Skull Baluchimon'],
    ItemList['Were Garurumon X-Antibody'],
], 'Tobucatmon');
const TogemonXAntibody = new Shop([
    ItemList['Blossomon'],
    ItemList['Lilimon X-Antibody'],
    ItemList['Pumpmon'],
], 'Togemon X-Antibody');
const TylomonXAntibody = new Shop([
    ItemList['Marin Devimon'],
    ItemList['Mega Seadramon'],
], 'Tylomon X-Antibody');
const Waspmon = new Shop([
    ItemList['Atlur Kabuterimon Red'],
    ItemList['Cannonbeemon'],
], 'Waspmon');
const AnomalocarimonXAntibody = new Shop([
    ItemList['Leviamon'],
    ItemList['Plesiomon X-Antibody'],
], 'Anomalocarimon X-Antibody');
const Cannonbeemon = new Shop([
    ItemList['Ebemon X-Antibody'],
    ItemList['Tiger Vespamon'],
], 'Cannonbeemon');
const CerberumonXAntibody = new Shop([
    ItemList['Anubimon'],
    ItemList['Sakuyamon X-Antibody'],
], 'Cerberumon X-Antibody');
const DeathXDORUguremon = new Shop([
    ItemList['Death-X-DORUgoramon'],
    ItemList['Gaioumon'],
], 'Death-X-DORUguremon');
const DORUguremon = new Shop([
    ItemList['Alphamon'],
    ItemList['DORUgoramon'],
    ItemList['Gaioumon'],
], 'DORUguremon');
const GarudamonXAntibody = new Shop([
    ItemList['Hououmon X-Antibody'],
    ItemList['Ornismon'],
    ItemList['Valkyrimon'],
], 'Garudamon X-Antibody');
const Grademon = new Shop([
    ItemList['Alphamon'],
    ItemList['Victory Greymon'],
], 'Grademon');
const Hisyaryumon = new Shop([
    ItemList['Gaioumon'],
    ItemList['Goddramon'],
    ItemList['Ouryumon'],
], 'Hisyaryumon');
const LilimonXAntibody = new Shop([
    ItemList['Bancho Lilimon'],
    ItemList['Beel Starmon X-Antibody'],
    ItemList['Rosemon X-Antibody'],
], 'Lilimon X-Antibody');
const Mametyramon = new Shop([
    ItemList['Dinorexmon'],
    ItemList['Megidramon'],
    ItemList['Ouryumon'],
], 'Mametyramon');
const MammonXAntibody = new Shop([
    ItemList['Metal Garurumon Black'],
    ItemList['Skull Mammon X-Antibody'],
], 'Mammon X-Antibody');
const MegaSeadramonXAntibody = new Shop([
    ItemList['Giga Seadramon'],
    ItemList['Metal Piranimon'],
    ItemList['Metal Seadramon'],
], 'Mega Seadramon X-Antibody');
const MegaloGrowmonXAntibody = new Shop([
    ItemList['Dukemon X-Antibody'],
    ItemList['Megidramon X-Antibody'],
], 'Megalo Growmon X-Antibody');
const MetalFantomon = new Shop([
    ItemList['Demon'],
    ItemList['Gokumon'],
], 'Metal Fantomon');
const MetalGreymonXAntibody = new Shop([
    ItemList['Ancient Greymon'],
    ItemList['Gaioumon'],
    ItemList['War Greymon X-Antibody'],
], 'Metal Greymon X-Antibody');
const MetalTyranomonXAntibody = new Shop([
    ItemList['Cannondramon'],
    ItemList['Mugendramon'],
    ItemList['Rust Tyranomon'],
], 'Metal Tyranomon X-Antibody');
const OokuwamonXAntibody = new Shop([
    ItemList['Grandis Kuwagamon'],
    ItemList['Herakle Kabuterimon X-Antibody'],
], 'Ookuwamon X-Antibody');
const PanjyamonXAntibody = new Shop([
    ItemList['Saber Leomon'],
    ItemList['Were Garurumon Sagittarius Mode'],
], 'Panjyamon X-Antibody');
const SkullBaluchimon = new Shop([
    ItemList['Dinotigermon'],
    ItemList['Ultimate Brachimon'],
], 'Skull Baluchimon');
const TriceramonXAntibody = new Shop([
    ItemList['Dinorexmon'],
    ItemList['Ultimate Brachimon'],
], 'Triceramon X-Antibody');
const VademonXAntibody = new Shop([
    ItemList['Ebemon X-Antibody'],
], 'Vademon X-Antibody');
const WereGarurumonXAntibody = new Shop([
    ItemList['Baihumon'],
    ItemList['Metal Garurumon X-Antibody'],
], 'Were Garurumon X-Antibody');
const Alphamon = new Shop([
    ItemList['Alphamon Ouryuken'],
], 'Alphamon');
const AlphamonOuryuken = new Shop([
    ItemList['Dodomon'],
], 'Alphamon Ouryuken');
const ArkadimonSuperUltimate = new Shop([
    ItemList['Arkadimon Baby'],
], 'Arkadimon Super Ultimate');
const Barbamon = new Shop([
    ItemList['Barbamon X-Antibody'],
], 'Barbamon');
const DeathXDORUgoramon = new Shop([
    ItemList['Death-X-mon'],
], 'Death-X-DORUgoramon');
const DeathXmon = new Shop([
    ItemList['Dodomon'],
], 'Death-X-mon');
const DemonSuperUltimate = new Shop([
    ItemList['Bubbmon'],
], 'Demon Super Ultimate');
const Dinorexmon = new Shop([
    ItemList['Ketomon'],
], 'Dinorexmon');
const Dinotigermon = new Shop([
    ItemList['Punimon'],
], 'Dinotigermon');
const DORUgoramon = new Shop([
    ItemList['Dodomon'],
], 'DORUgoramon');
const DukemonXAntibody = new Shop([
    ItemList['Jyarimon'],
], 'Dukemon X-Antibody');
const DynasmonXAntibody = new Shop([
    ItemList['Keemon'],
], 'Dynasmon X-Antibody');
const EbemonXAntibody = new Shop([
    ItemList['Yuramon'],
], 'Ebemon X-Antibody');
const Gaioumon = new Shop([
    ItemList['Gaioumon Invincible Sword'],
], 'Gaioumon');
const GigaSeadramon = new Shop([
    ItemList['Pitchmon'],
], 'Giga Seadramon');
const GoddramonXAntibody = new Shop([
    ItemList['Poyomon'],
], 'Goddramon X-Antibody');
const GrandisKuwagamon = new Shop([
    ItemList['Leafmon'],
], 'Grandis Kuwagamon');
const HolydramonXAntibody = new Shop([
    ItemList['Yukimi Botamon'],
], 'Holydramon X-Antibody');
const Leviamon = new Shop([
    ItemList['Leviamon X-Antibody'],
], 'Leviamon');
const LucemonLarva = new Shop([
    ItemList['Poyomon'],
], 'Lucemon Larva');
const MagnamonXAntibody = new Shop([
    ItemList['Chicomon'],
], 'Magnamon X-Antibody');
const MedievalDukemon = new Shop([
    ItemList['Dukemon X-Antibody'],
], 'Medieval Dukemon');
const MegidramonXAntibody = new Shop([
    ItemList['Jyarimon'],
], 'Megidramon X-Antibody');
const MetalGarurumonXAntibody = new Shop([
    ItemList['Omegamon X-Antibody'],
], 'Metal Garurumon X-Antibody');
const MetalPiranimon = new Shop([
    ItemList['Pitchmon'],
], 'Metal Piranimon');
const OmegamonXAntibody = new Shop([
    ItemList['Botamon'],
    ItemList['Punimon'],
], 'Omegamon X-Antibody');
const Ouryumon = new Shop([
    ItemList['Fufumon'],
], 'Ouryumon');
const PlesiomonXAntibody = new Shop([
    ItemList['Pitchmon'],
], 'Plesiomon X-Antibody');
const RosemonXAntibody = new Shop([
    ItemList['Nyokimon'],
], 'Rosemon X-Antibody');
const SkullMammonXAntibody = new Shop([
    ItemList['Botamon'],
], 'Skull Mammon X-Antibody');
const TigerVespamon = new Shop([
    ItemList['Pupumon'],
], 'Tiger Vespamon');
const UlforceVdramonXAntibody = new Shop([
    ItemList['Chicomon'],
], 'Ulforce V-dramon X-Antibody');
const UlforceVdramonFutureMode = new Shop([
    ItemList['Chicomon'],
], 'Ulforce V-dramon Future Mode');
const UltimateBrachimon = new Shop([
    ItemList['Tsubumon'],
], 'Ultimate Brachimon');
const WarGreymonXAntibody = new Shop([
    ItemList['Omegamon X-Antibody'],
], 'War Greymon X-Antibody');
const BlackGuilmon = new Shop([
    ItemList['Black Growmon'],
], 'Black Guilmon');
const HagurumonXAntibody = new Shop([
    ItemList['Mechanorimon'],
    ItemList['Thunderballmon X-Antibody'],
], 'Hagurumon X-Antibody');
const Phascomon = new Shop([
    ItemList['Porcupamon'],
    ItemList['Troopmon'],
], 'Phascomon');
const Porcupamon = new Shop([
    ItemList['Astamon'],
    ItemList['Monzaemon'],
], 'Porcupamon');
const ThunderballmonXAntibody = new Shop([
    ItemList['Big Mamemon'],
    ItemList['Metal Mamemon X-Antibody'],
], 'Thunderballmon X-Antibody');
const Astamon = new Shop([
    ItemList['Beelzebumon'],
    ItemList['Belphemon Sleep Mode'],
], 'Astamon');
const MamemonXAntibody = new Shop([
    ItemList['Ebemon X-Antibody'],
    ItemList['Prince Mamemon X-Antibody'],
], 'Mamemon X-Antibody');
const MetalMamemonXAntibody = new Shop([
    ItemList['Lampmon'],
    ItemList['Prince Mamemon X-Antibody'],
], 'Metal Mamemon X-Antibody');
const BelphemonRageMode = new Shop([
    ItemList['Belphemon X-Antibody'],
    ItemList['Belphemon Sleep Mode'],
], 'Belphemon Rage Mode');
const BelphemonSleepMode = new Shop([
    ItemList['Belphemon Rage Mode'],
], 'Belphemon Sleep Mode');
const ChaosdramonXAntibody = new Shop([
    ItemList['Botamon'],
], 'Chaosdramon X-Antibody');
const PrinceMamemonXAntibody = new Shop([
    ItemList['Choromon'],
], 'Prince Mamemon X-Antibody');
const Bommon = new Shop([
    ItemList['Missimon'],
], 'Bommon');
const Pafumon = new Shop([
    ItemList['Kyaromon'],
], 'Pafumon');
const Popomon = new Shop([
    ItemList['Frimon'],
    ItemList['Tanemon'],
], 'Popomon');
const Puwamon = new Shop([
    ItemList['Chapmon'],
    ItemList['Pinamon'],
], 'Puwamon');
const Frimon = new Shop([
    ItemList['Bearmon'],
    ItemList['Liollmon'],
], 'Frimon');
const Kyaromon = new Shop([
    ItemList['Elecmon'],
    ItemList['Falcomon 2006'],
    ItemList['Kudamon'],
], 'Kyaromon');
const Missimon = new Shop([
    ItemList['Commandramon'],
    ItemList['Hagurumon'],
], 'Missimon');
const Pinamon = new Shop([
    ItemList['Falcomon'],
    ItemList['Falcomon 2006'],
], 'Pinamon');
const TokomonXAntibody = new Shop([
    ItemList['Renamon X-Antibody'],
    ItemList['Sistermon Blanc'],
], 'Tokomon X-Antibody');
const Agumon2006 = new Shop([
    ItemList['Geo Greymon'],
    ItemList['Greymon'],
    ItemList['Tyranomon'],
], 'Agumon 2006 ');
const Commandramon = new Shop([
    ItemList['Monochromon'],
    ItemList['Sealsdramon'],
], 'Commandramon');
const Dracumon = new Shop([
    ItemList['Sangloupmon'],
    ItemList['Yaksamon'],
], 'Dracumon');
const Falcomon = new Shop([
    ItemList['Aquilamon'],
    ItemList['Diatrymon'],
], 'Falcomon');
const Kokabuterimon = new Shop([
    ItemList['Blade Kuwagamon'],
    ItemList['Kabuterimon'],
    ItemList['Kuwagamon'],
], 'Kokabuterimon');
const Kudamon = new Shop([
    ItemList['Reppamon'],
    ItemList['Tailmon'],
], 'Kudamon');
const Liollmon = new Shop([
    ItemList['Leomon'],
    ItemList['Liamon'],
], 'Liollmon');
const Swimmon = new Shop([
    ItemList['Tobiumon'],
    ItemList['Tylomon'],
], 'Swimmon');
const BladeKuwagamon = new Shop([
    ItemList['Metallife Kuwagamon'],
    ItemList['Tankmon'],
    ItemList['Tekkamon'],
], 'Blade Kuwagamon');
const Diatrymon = new Shop([
    ItemList['Delumon'],
    ItemList['Sinduramon'],
    ItemList['Yatagaramon'],
], 'Diatrymon');
const Liamon = new Shop([
    ItemList['Firamon'],
    ItemList['Grappu Leomon'],
    ItemList['Loader Leomon'],
], 'Liamon');
const Reppamon = new Shop([
    ItemList['Piccolomon'],
    ItemList['Rapidmon Perfect'],
    ItemList['Tyilinmon'],
], 'Reppamon');
const Sangloupmon = new Shop([
    ItemList['Astamon'],
    ItemList['Matadrmon'],
    ItemList['Were Garurumon Black'],
], 'Sangloupmon');
const Sealsdramon = new Shop([
    ItemList['Andromon'],
    ItemList['Tankdramon'],
], 'Sealsdramon');
const LoaderLeomon = new Shop([
    ItemList['Baihumon'],
    ItemList['Bancho Leomon'],
    ItemList['Heavy Leomon'],
], 'Loader Leomon');
const Matadrmon = new Shop([
    ItemList['Grand Dracumon'],
    ItemList['Piemon'],
], 'Matadrmon');
const MetallifeKuwagamon = new Shop([
    ItemList['Herakle Kabuterimon'],
    ItemList['Tyrant Kabuterimon'],
], 'Metallife Kuwagamon');
const Tankdramon = new Shop([
    ItemList['Darkdramon'],
    ItemList['Gundramon'],
    ItemList['Mugendramon'],
], 'Tankdramon');
const Tyilinmon = new Shop([
    ItemList['Junomon'],
    ItemList['Mitamamon'],
    ItemList['Sleipmon'],
], 'Tyilinmon');
const Volcdramon = new Shop([
    ItemList['Bryweludramon'],
    ItemList['Megidramon'],
    ItemList['Spinomon'],
], 'Volcdramon');
const Yatagaramon = new Shop([
    ItemList['Minervamon'],
    ItemList['Valdurmon'],
], 'Yatagaramon');
const BanchoLeomon = new Shop([
    ItemList['Chaosmon'],
], 'Bancho Leomon');
const BeelzebumonXAntibody = new Shop([
    ItemList['Keemon'],
], 'Beelzebumon X-Antibody');
const BlackWarGreymonXAntibody = new Shop([
    ItemList['Botamon'],
], 'Black War Greymon X-Antibody');
const Chaosmon = new Shop([
    ItemList['Ultimate Chaosmon'],
], 'Chaosmon');
const ClavisAngemon = new Shop([
    ItemList['Poyomon'],
], 'Clavis Angemon');
const Craniummon = new Shop([
    ItemList['Craniummon X-Antibody'],
], 'Craniummon');
const Darkdramon = new Shop([
    ItemList['Chaosmon'],
], 'Darkdramon');
const GrandDracumon = new Shop([
    ItemList['Kuramon'],
], 'Grand Dracumon');
const HerakleKabuterimonXAntibody = new Shop([
    ItemList['Bubbmon'],
], 'Herakle Kabuterimon X-Antibody');
const Mercurymon = new Shop([
    ItemList['Punimon'],
], 'Mercurymon');
const Minervamon = new Shop([
    ItemList['Minervamon X-Antibody'],
], 'Minervamon');
const Neptunemon = new Shop([
    ItemList['Pitchmon'],
], 'Neptunemon');
const Sleipmon = new Shop([
    ItemList['Sleipmon X-Antibody'],
], 'Sleipmon');
const Spinomon = new Shop([
    ItemList['Fufumon'],
], 'Spinomon');
const TyrantKabuterimon = new Shop([
    ItemList['Choromon'],
], 'Tyrant Kabuterimon');
const UltimateChaosmon = new Shop([
    ItemList['Pafumon'],
], 'Ultimate Chaosmon');
const Valdurmon = new Shop([
    ItemList['Chaosmon Valdur Arm'],
], 'Valdurmon');
const Budmon = new Shop([
    ItemList['Lalamon'],
    ItemList['Piyomon'],
    ItemList['Woodmon'],
], 'Budmon');
const Chapmon = new Shop([
    ItemList['Betamon'],
    ItemList['Falcomon'],
    ItemList['Kamemon'],
], 'Chapmon');
const Wanyamon = new Shop([
    ItemList['Bearmon'],
    ItemList['Gaomon'],
    ItemList['Morphomon'],
], 'Wanyamon');
const AgumonBlack2006 = new Shop([
    ItemList['Black Growmon'],
    ItemList['Geo Greymon'],
], 'Agumon Black 2006');
const AgumonHakase = new Shop([
    ItemList['Geo Greymon'],
    ItemList['Starmon'],
], 'Agumon Hakase');
const BushiAgumon = new Shop([
    ItemList['Dinohumon'],
    ItemList['Musyamon'],
], 'Bushi Agumon');
const Falcomon2006 = new Shop([
    ItemList['Birdramon'],
    ItemList['Peckmon'],
    ItemList['Saberdramon'],
], 'Falcomon 2006 ');
const Gaomon = new Shop([
    ItemList['Black Gaogamon'],
    ItemList['Gaogamon'],
    ItemList['Garurumon'],
], 'Gaomon');
const Kamemon = new Shop([
    ItemList['Gawappamon'],
    ItemList['Tortamon'],
], 'Kamemon');
const Kudamon2006 = new Shop([
    ItemList['Angemon'],
    ItemList['Pidmon'],
    ItemList['Reppamon'],
], 'Kudamon 2006 ');
const Lalamon = new Shop([
    ItemList['Sunflowmon'],
    ItemList['Togemon'],
    ItemList['Woodmon'],
], 'Lalamon');
const Minidekachimon = new Shop([
    ItemList['Atamadekachimon'],
    ItemList['Greymon'],
], 'Minidekachimon');
const NiseAgumonHakase = new Shop([
    ItemList['Greymon Blue'],
], 'Nise Agumon Hakase');
const PawnChessmonBlack = new Shop([
    ItemList['Guardromon'],
    ItemList['Knight Chessmon Black'],
], 'Pawn Chessmon Black');
const PawnChessmonWhite = new Shop([
    ItemList['Ankylomon'],
    ItemList['Knight Chessmon White'],
], 'Pawn Chessmon White');
const ProtoGizmon = new Shop([
    ItemList['Gizmon AT'],
], 'Proto Gizmon');
const SantaAgumon = new Shop([
    ItemList['Greymon'],
], 'Santa Agumon');
const YukiAgumon2006 = new Shop([
    ItemList['Hyougamon'],
    ItemList['Mojyamon'],
    ItemList['Yukidarumon'],
], 'Yuki Agumon 2006 ');
const Atamadekachimon = new Shop([
    ItemList['Skull Greymon'],
    ItemList['Vritramon'],
], 'Atamadekachimon');
const BlackGaogamon = new Shop([
    ItemList['Black Mach Gaogamon'],
    ItemList['Were Garurumon Black'],
], 'Black Gaogamon');
const Gaogamon = new Shop([
    ItemList['Mach Gaogamon'],
    ItemList['Panjyamon'],
    ItemList['Were Garurumon'],
], 'Gaogamon');
const Gawappamon = new Shop([
    ItemList['Shawujinmon'],
    ItemList['Tonosama Gekomon'],
], 'Gawappamon');
const GeoGreymon = new Shop([
    ItemList['Gigadramon'],
    ItemList['Rize Greymon'],
    ItemList['Skull Greymon'],
], 'Geo Greymon');
const GizmonAT = new Shop([
    ItemList['Gizmon XT'],
], 'Gizmon AT');
const GoldNumemon = new Shop([
    ItemList['Black King Numemon'],
    ItemList['Platinum Numemon'],
], 'Gold Numemon');
const KnightChessmonBlack = new Shop([
    ItemList['Rook Chessmon Black'],
], 'Knight Chessmon Black');
const KnightChessmonWhite = new Shop([
    ItemList['Bishop Chessmon White'],
], 'Knight Chessmon White');
const Peckmon = new Shop([
    ItemList['Karatenmon'],
    ItemList['Yatagaramon'],
    ItemList['Yatagaramon 2006'],
], 'Peckmon');
const Sunflowmon = new Shop([
    ItemList['Blossomon'],
    ItemList['Jyureimon'],
    ItemList['Lilamon'],
], 'Sunflowmon');
const YoxtuYoxtumon = new Shop([
    ItemList['Monzaemon'],
], 'Yoxtu!Yoxtu!mon');
const AlgomonPerfect = new Shop([
    ItemList['Algomon Ultimate'],
    ItemList['Babamon'],
    ItemList['Piemon'],
], 'Algomon Perfect');
const BishopChessmonWhite = new Shop([
    ItemList['King Chessmon'],
], 'Bishop Chessmon White');
const GizmonXT = new Shop([
    ItemList['Diablomon'],
    ItemList['Parallelmon'],
], 'Gizmon XT');
const Lilamon = new Shop([
    ItemList['Babamon'],
    ItemList['Lotusmon'],
    ItemList['Mervamon'],
], 'Lilamon');
const MachGaogamon = new Shop([
    ItemList['Bancho Leomon'],
    ItemList['Mirage Gaogamon'],
    ItemList['Saint Galgomon'],
], 'Mach Gaogamon');
const RizeGreymon = new Shop([
    ItemList['Gaioumon'],
    ItemList['Rize Greymon X-Antibody'],
    ItemList['Shine Greymon'],
    ItemList['Victory Greymon'],
], 'Rize Greymon');
const RookChessmonBlack = new Shop([
    ItemList['Queen Chessmon'],
], 'Rook Chessmon Black');
const Shawujinmon = new Shop([
    ItemList['El Doradimon'],
    ItemList['Jumbo Gamemon'],
], 'Shawujinmon');
const Yatagaramon2006 = new Shop([
    ItemList['Kuzuhamon'],
    ItemList['Ravmon'],
    ItemList['Valdurmon'],
], 'Yatagaramon 2006 ');
const AlgomonUltimate = new Shop([
    ItemList['Algomon Baby I'],
], 'Algomon Ultimate');
const BioDarkdramon = new Shop([
    ItemList['Bommon'],
], 'Bio Darkdramon');
const BioLotusmon = new Shop([
    ItemList['Popomon'],
], 'Bio Lotusmon');
const BioSpinomon = new Shop([
    ItemList['Botamon'],
], 'Bio Spinomon');
const ChronomonDestroyMode = new Shop([
    ItemList['Chicchimon'],
], 'Chronomon Destroy Mode');
const ChronomonHolyMode = new Shop([
    ItemList['Chicchimon'],
], 'Chronomon Holy Mode');
const ElDoradimon = new Shop([
    ItemList['Yuramon'],
], 'El Doradimon');
const JumboGamemon = new Shop([
    ItemList['Pitchmon'],
], 'Jumbo Gamemon');
const KingChessmon = new Shop([
    ItemList['Puttimon'],
], 'King Chessmon');
const MirageGaogamon = new Shop([
    ItemList['Mirage Gaogamon Burst Mode'],
], 'Mirage Gaogamon');
const MirageGaogamonBurstMode = new Shop([
    ItemList['Botamon'],
], 'Mirage Gaogamon Burst Mode');
const PlatinumNumemon = new Shop([
    ItemList['Zurumon'],
], 'Platinum Numemon');
const QueenChessmon = new Shop([
    ItemList['Mokumon'],
], 'Queen Chessmon');
const Ravmon = new Shop([
    ItemList['Ravmon Burst Mode'],
], 'Ravmon');
const RavmonBurstMode = new Shop([
    ItemList['Puwamon'],
], 'Ravmon Burst Mode');
const ShineGreymon = new Shop([
    ItemList['Shine Greymon Burst Mode'],
    ItemList['Shine Greymon Ruin Mode'],
], 'Shine Greymon');
const ShineGreymonBurstMode = new Shop([
    ItemList['Botamon'],
], 'Shine Greymon Burst Mode');
const ShineGreymonRuinMode = new Shop([
    ItemList['Botamon'],
], 'Shine Greymon Ruin Mode');
const TonosamaMamemon = new Shop([
    ItemList['Choromon'],
], 'Tonosama Mamemon');
const BioCoatlmon = new Shop([
    ItemList['Leafmon'],
], 'Bio Coatlmon');
const BioStegomon = new Shop([
    ItemList['Bubbmon'],
], 'Bio Stegomon');
const BioThunderbirmon = new Shop([
    ItemList['Puwamon'],
], 'Bio Thunderbirmon');
const Petitmon = new Shop([
    ItemList['Babydmon'],
], 'Petitmon');
const Babydmon = new Shop([
    ItemList['Betamon'],
    ItemList['Dracomon'],
], 'Babydmon');
const Chicchimon = new Shop([
    ItemList['Falcomon'],
    ItemList['Hyokomon'],
    ItemList['Muchomon'],
], 'Chicchimon');
const Moonmon = new Shop([
    ItemList['Lopmon'],
    ItemList['Lunamon'],
], 'Moonmon');
const Sunmon = new Shop([
    ItemList['Coronamon'],
    ItemList['Guilmon'],
], 'Sunmon');
const Coronamon = new Shop([
    ItemList['Firamon'],
    ItemList['Leomon'],
    ItemList['Lynxmon'],
    ItemList['Meramon'],
], 'Coronamon');
const Dracomon = new Shop([
    ItemList['Coredramon Blue'],
    ItemList['Coredramon Green'],
    ItemList['Ginryumon'],
], 'Dracomon');
const Lunamon = new Shop([
    ItemList['Lekismon'],
    ItemList['Sistermon Ciel'],
    ItemList['Tailmon'],
], 'Lunamon');
const CoredramonBlue = new Shop([
    ItemList['Blue Meramon'],
    ItemList['Cyberdramon 2010'],
    ItemList['Wingdramon'],
], 'Coredramon Blue');
const CoredramonGreen = new Shop([
    ItemList['Cyberdramon'],
    ItemList['Groundramon'],
    ItemList['Triceramon'],
], 'Coredramon Green');
const Firamon = new Shop([
    ItemList['Flaremon'],
    ItemList['Monzaemon'],
], 'Firamon');
const Grimmon = new Shop([
    ItemList['Chaos Grimmon'],
], 'Grimmon');
const Lekismon = new Shop([
    ItemList['Bastemon'],
    ItemList['Crescemon'],
], 'Lekismon');
const CatchMamemon = new Shop([
    ItemList['Justimon Accel Arm'],
    ItemList['Prince Mamemon'],
], 'Catch Mamemon');
const ChaosGrimmon = new Shop([
    ItemList['Exo Grimmon'],
], 'Chaos Grimmon');
const Crescemon = new Shop([
    ItemList['Dianamon'],
    ItemList['Surfymon'],
    ItemList['Valkyrimon'],
], 'Crescemon');
const DarkSuperstarmon = new Shop([
    ItemList['Darkdramon'],
    ItemList['Metal Garurumon Black'],
], 'Dark Superstarmon');
const Flaremon = new Shop([
    ItemList['Apollomon'],
    ItemList['Holydramon'],
    ItemList['Marsmon'],
], 'Flaremon');
const Groundramon = new Shop([
    ItemList['Breakdramon'],
    ItemList['Cannondramon'],
    ItemList['Mugendramon'],
], 'Groundramon');
const Wingdramon = new Shop([
    ItemList['Dynasmon'],
    ItemList['Slayerdramon'],
    ItemList['Ulforce V-dramon'],
], 'Wingdramon');
const Apollomon = new Shop([
    ItemList['Grace Novamon'],
], 'Apollomon');
const Breakdramon = new Shop([
    ItemList['Examon'],
], 'Breakdramon');
const Dianamon = new Shop([
    ItemList['Grace Novamon'],
], 'Dianamon');
const Duftmon = new Shop([
    ItemList['Duftmon Leopard Mode'],
    ItemList['Duftmon X-Antibody'],
], 'Duftmon');
const DuftmonXAntibody = new Shop([
    ItemList['Choromon'],
], 'Duftmon X-Antibody');
const DuftmonLeopardMode = new Shop([
    ItemList['Duftmon'],
], 'Duftmon Leopard Mode');
const Examon = new Shop([
    ItemList['Examon X-Antibody'],
], 'Examon');
const ExoGrimmon = new Shop([
    ItemList['Zurumon'],
], 'Exo Grimmon');
const Lotusmon = new Shop([
    ItemList['Budmon'],
], 'Lotusmon');
const Ogudomon = new Shop([
    ItemList['Ogudomon X-Antibody'],
], 'Ogudomon');
const RosemonBurstMode = new Shop([
    ItemList['Rosemon'],
], 'Rosemon Burst Mode');
const Slayerdramon = new Shop([
    ItemList['Examon'],
], 'Slayerdramon');
const Surfymon = new Shop([
    ItemList['Pitchmon'],
], 'Surfymon');
const VictoryGreymon = new Shop([
    ItemList['Botamon'],
], 'Victory Greymon');
const ZdGarurumon = new Shop([
    ItemList['Punimon'],
], 'Zd Garurumon');
const Burpmon = new Shop([
    ItemList['Poyomon'],
], 'Burpmon');
const Bombmon = new Shop([
    ItemList['Gaossmon'],
], 'Bombmon');
const Chibickmon = new Shop([
    ItemList['Pickmon'],
], 'Chibickmon');
const Monimon = new Shop([
    ItemList['Monitamon'],
], 'Monimon');
const Pickmon = new Shop([
    ItemList['Starmons'],
], 'Pickmon');
const Chikurimon = new Shop([
    ItemList['Nanimon'],
    ItemList['Troopmon'],
], 'Chikurimon');
const Cutemon = new Shop([
    ItemList['Bitmon'],
    ItemList['Pucchiemon'],
    ItemList['Unimon'],
], 'Cutemon');
const Dondokomon = new Shop([
    ItemList['Don Shoutmon'],
    ItemList['Dorulumon'],
], 'Dondokomon');
const Gaossmon = new Shop([
    ItemList['Greymon 2010'],
    ItemList['Coredramon Blue'],
], 'Gaossmon');
const Hyokomon = new Shop([
    ItemList['Buraimon'],
], 'Hyokomon');
const Monitamon = new Shop([
    ItemList['Hi-Vision Monitamon'],
    ItemList['Shonitamon'],
], 'Monitamon');
const Shoutmon = new Shop([
    ItemList['Omega Shoutmon'],
    ItemList['Shoutmon-Dorulu Cannon'],
    ItemList['Shoutmon-Jet Sparrow'],
    ItemList['Shoutmon King Ver'],
    ItemList['Shoutmon-Star Sword'],
    ItemList['Shoutmon X2'],
], 'Shoutmon');
const ShoutmonDoruluCannon = new Shop([
    ItemList['Shoutmon X3'],
], 'Shoutmon-Dorulu Cannon');
const ShoutmonJetSparrow = new Shop([
    ItemList['Shoutmon X3'],
], 'Shoutmon-Jet Sparrow');
const ShoutmonStarSword = new Shop([
    ItemList['Shoutmon X3'],
], 'Shoutmon-Star Sword');
const Spadamon = new Shop([
    ItemList['Rinkmon'],
    ItemList['Armamon'],
], 'Spadamon');
const Sparrowmon = new Shop([
    ItemList['Raptor Sparrowmon'],
], 'Sparrowmon');
const Starmons = new Shop([
    ItemList['Shooting Starmon'],
    ItemList['Starmon'],
], 'Starmons');
const Tyutyumon = new Shop([
    ItemList['Damemon'],
], 'Tyutyumon');
const Ballistamon = new Shop([
    ItemList['Atlur Ballistamon'],
    ItemList['Dark Volumon'],
], 'Ballistamon');
const Buraimon = new Shop([
    ItemList['Butenmon'],
    ItemList['Grademon'],
], 'Buraimon');
const Damemon = new Shop([
    ItemList['Tuwarmon'],
], 'Damemon');
const DeadlyAxemon = new Shop([
    ItemList['Dark Knightmon'],
    ItemList['Deadly Tuwarmon'],
], 'Deadly Axemon');
const Deckerdramon = new Shop([
    ItemList['Decker Greymon'],
], 'Deckerdramon');
const DonShoutmon = new Shop([
    ItemList['Omega Shoutmon'],
], 'Don Shoutmon');
const Dorulumon = new Shop([
    ItemList['Yaeger Dorulumon'],
], 'Dorulumon');
const Greymon2010 = new Shop([
    ItemList['Decker Greymon'],
    ItemList['Metal Greymon 2010'],
], 'Greymon 2010 ');
const MadLeomon = new Shop([
    ItemList['Baalmon'],
    ItemList['Mad Leomon Armed Mode'],
], 'Mad Leomon');
const MadLeomonArmedMode = new Shop([
    ItemList['Mad Leomon'],
], 'Mad Leomon Armed Mode');
const MailBirdramon = new Shop([
    ItemList['Decker Greymon'],
    ItemList['Metal Greymon 2010'],
], 'Mail Birdramon');
const Shonitamon = new Shop([
    ItemList['Omega Shoutmon'],
], 'Shonitamon');
const Shortmon = new Shop([
    ItemList['Weddinmon'],
], 'Shortmon');
const ShoutmonX2 = new Shop([
    ItemList['Shoutmon X3'],
], 'Shoutmon X2');
const ShoutmonX3 = new Shop([
    ItemList['Shoutmon X3GM'],
    ItemList['Shoutmon X3SD'],
    ItemList['Shoutmon X4'],
], 'Shoutmon X3');
const ShoutmonX4 = new Shop([
    ItemList['Shoutmon X4B'],
    ItemList['Shoutmon X4K'],
    ItemList['Shoutmon X4S'],
    ItemList['Shoutmon X5'],
], 'Shoutmon X4');
const SkullKnightmon = new Shop([
    ItemList['Dark Knightmon'],
    ItemList['Skull Knightmon Big Axe Mode'],
    ItemList['Skull Knightmon Cavalier Mode'],
], 'Skull Knightmon');
const SkullKnightmonBigAxeMode = new Shop([
    ItemList['Dark Knightmon'],
], 'Skull Knightmon Big Axe Mode');
const SkullKnightmonCavalierMode = new Shop([
    ItemList['Dark Knightmon'],
], 'Skull Knightmon Cavalier Mode');
const Troopmon = new Shop([
    ItemList['Assaultmon'],
    ItemList['Ginkakumon'],
    ItemList['Gravimon'],
], 'Troopmon');
const Baalmon = new Shop([
    ItemList['Beelzebumon 2010'],
    ItemList['Neo Vamdemon'],
], 'Baalmon');
const Butenmon = new Shop([
    ItemList['Chronomon Holy Mode'],
    ItemList['Chronomon Destroy Mode'],
], 'Butenmon');
const Cyberdramon2010 = new Shop([
    ItemList['Metal Greymon-Cyber Launcher'],
    ItemList['Justimon Critical Arm'],
], 'Cyberdramon 2010 ');
const DarkKnightmon = new Shop([
    ItemList['Dark Knightmon X-Antibody'],
    ItemList['Grey Knightsmon'],
    ItemList['Musou Knightmon'],
], 'Dark Knightmon');
const DeckerGreymon = new Shop([
    ItemList['Imperialdramon Dragon Mode'],
], 'Decker Greymon');
const MetalGreymon2010 = new Shop([
    ItemList['Metal Greymon-Cyber Launcher'],
    ItemList['Zeke Greymon'],
], 'Metal Greymon 2010 ');
const MetalGreymonCyberLauncher = new Shop([
    ItemList['Zeke Greymon'],
], 'Metal Greymon-Cyber Launcher');
const ShoutmonX4B = new Shop([
    ItemList['Shoutmon X5B'],
], 'Shoutmon X4B');
const ShoutmonX4K = new Shop([
    ItemList['Shoutmon X5'],
], 'Shoutmon X4K');
const ShoutmonX5 = new Shop([
    ItemList['Shoutmon X5B'],
    ItemList['Shoutmon X5S'],
    ItemList['Shoutmon X7'],
], 'Shoutmon X5');
const Weddinmon = new Shop([
    ItemList['Junomon'],
    ItemList['Venusmon'],
], 'Weddinmon');
const Aegisdramon = new Shop([
    ItemList['Fufumon'],
], 'Aegisdramon');
const Bagramon = new Shop([
    ItemList['Darkness Bagramon'],
], 'Bagramon');
const Beelzebumon2010 = new Shop([
    ItemList['Keemon'],
], 'Beelzebumon 2010 ');
const Blastmon = new Shop([
    ItemList['Sunamon'],
], 'Blastmon');
const ChaosmonValdurArm = new Shop([
    ItemList['Puwamon'],
], 'Chaosmon Valdur Arm');
const KingWhamon = new Shop([
    ItemList['Pitchmon'],
], 'King Whamon');
const ShoutmonX5B = new Shop([
    ItemList['Shoutmon X7'],
], 'Shoutmon X5B');
const Tactimon = new Shop([
    ItemList['Mokumon'],
], 'Tactimon');
const Panbachimon = new Shop([
    ItemList['Namakemon'],
    ItemList['Gryzmon'],
], 'Panbachimon');
const Kozenimon = new Shop([
    ItemList['Zenimon'],
], 'Kozenimon');
const Bacomon = new Shop([
    ItemList['Mimicmon'],
    ItemList['Omekamon'],
], 'Bacomon');
const Ekakimon = new Shop([
    ItemList['Omekamon'],
], 'Ekakimon');
const Gumdramon = new Shop([
    ItemList['Arresterdramon'],
    ItemList['V-dramon'],
], 'Gumdramon');
const Iguneetmon = new Shop([
    ItemList['Kinkakumon'],
    ItemList['Ginkakumon'],
], 'Iguneetmon');
const Soundbirdmon = new Shop([
    ItemList['Boogiemon'],
    ItemList['Pipismon'],
    ItemList['Shademon'],
], 'Soundbirdmon');
const Tinkermon = new Shop([
    ItemList['Fairimon'],
    ItemList['Petermon'],
], 'Tinkermon');
const Zenimon = new Shop([
    ItemList['Ganemon'],
], 'Zenimon');
const Arresterdramon = new Shop([
    ItemList['Arresterdramon Superior Mode'],
    ItemList['Rize Greymon'],
    ItemList['Wingdramon'],
], 'Arresterdramon');
const Ganemon = new Shop([
    ItemList['Superstarmon'],
    ItemList['Olegmon'],
], 'Ganemon');
const Ginkakumon = new Shop([
    ItemList['Ginkakumon Promote'],
    ItemList['Kaiser Leomon'],
], 'Ginkakumon');
const GinkakumonPromote = new Shop([
    ItemList['Skull Baluchimon'],
], 'Ginkakumon Promote');
const HiVisionMonitamon = new Shop([
    ItemList['Andromon'],
    ItemList['Cyberdramon'],
], 'Hi-Vision Monitamon');
const Kinkakumon = new Shop([
    ItemList['Bastemon'],
    ItemList['Mihiramon'],
], 'Kinkakumon');
const Petermon = new Shop([
    ItemList['Aegiochusmon Green'],
    ItemList['Entmon'],
], 'Petermon');
const RaptorSparrowmon = new Shop([
    ItemList['Parrotmon'],
    ItemList['Sinduramon'],
], 'Raptor Sparrowmon');
const Shademon = new Shop([
    ItemList['Luminamon'],
    ItemList['Megadramon'],
], 'Shademon');
const ShootingStarmon = new Shop([
    ItemList['Insekimon'],
    ItemList['Piccolomon'],
    ItemList['Superstarmon'],
], 'Shooting Starmon');
const ShoutmonKingVer = new Shop([
    ItemList['Omega Shoutmon'],
    ItemList['Shoutmon X4'],
], 'Shoutmon King Ver');
const Targetmon = new Shop([
    ItemList['Etemon'],
    ItemList['Footmon'],
], 'Targetmon');
const Tuwarmon = new Shop([
    ItemList['Deadly Tuwarmon'],
    ItemList['Musou Knightmon'],
], 'Tuwarmon');
const AtlurBallistamon = new Shop([
    ItemList['Grand Locomon'],
    ItemList['Mugendramon'],
], 'Atlur Ballistamon');
const BlackMachGaogamon = new Shop([
    ItemList['Zd Garurumon'],
], 'Black Mach Gaogamon');
const CaptainHookmon = new Shop([
    ItemList['Avenge Kidmon'],
    ItemList['Leviamon'],
], 'Captain Hookmon');
const Cho·Hakkaimon = new Shop([
    ItemList['Beel Starmon'],
    ItemList['Lovely Angemon'],
    ItemList['Mervamon'],
], 'Cho·Hakkaimon');
const Footmon = new Shop([
    ItemList['Achillesmon'],
    ItemList['Fujinmon'],
], 'Footmon');
const Gokuwmon = new Shop([
    ItemList['Gankoomon'],
    ItemList['Vulcanusmon'],
], 'Gokuwmon');
const Gravimon = new Shop([
    ItemList['Bagramon'],
], 'Gravimon');
const MusouKnightmon = new Shop([
    ItemList['Beelzebumon'],
], 'Musou Knightmon');
const OmegaShoutmon = new Shop([
    ItemList['Omega Shoutmon X-Antibody'],
    ItemList['Shoutmon DX'],
    ItemList['Shoutmon EX6'],
], 'Omega Shoutmon');
const Sagomon = new Shop([
    ItemList['Xuanwumon'],
], 'Sagomon');
const Sanzomon = new Shop([
    ItemList['Junomon'],
    ItemList['Shakamon'],
], 'Sanzomon');
const Splashmon = new Shop([
    ItemList['Splashmon Darkness Mode'],
], 'Splashmon');
const SplashmonDarknessMode = new Shop([
    ItemList['Splashmon'],
], 'Splashmon Darkness Mode');
const YaegerDorulumon = new Shop([
    ItemList['Mercurymon'],
    ItemList['Zd Garurumon'],
], 'Yaeger Dorulumon');
const Zamielmon = new Shop([
    ItemList['Pinochimon'],
    ItemList['Titamon'],
], 'Zamielmon');
const DarknessBagramon = new Shop([
    ItemList['Zurumon'],
], 'Darkness Bagramon');
const Dorbickmon = new Shop([
    ItemList['Grand Generamon'],
], 'Dorbickmon');
const JetMervamon = new Shop([
    ItemList['Botamon'],
], 'Jet Mervamon');
const Mervamon = new Shop([
    ItemList['Jet Mervamon'],
], 'Mervamon');
const NeoVamdemon = new Shop([
    ItemList['Mokumon'],
], 'Neo Vamdemon');
const OfanimonFalldownMode = new Shop([
    ItemList['Ofanimon Falldown Mode X-Antibody'],
    ItemList['Ordinemon'],
], 'Ofanimon Falldown Mode');
const Olegmon = new Shop([
    ItemList['Kozenimon'],
], 'Olegmon');
const OmegamonZwart = new Shop([
    ItemList['Omegamon Zwart Defeat'],
], 'Omegamon Zwart');
const Shakamon = new Shop([
    ItemList['Yukimi Botamon'],
], 'Shakamon');
const ShoutmonDX = new Shop([
    ItemList['Shoutmon X7'],
], 'Shoutmon DX');
const ShoutmonEX6 = new Shop([
    ItemList['Shoutmon X7'],
], 'Shoutmon EX6');
const ShoutmonX7 = new Shop([
    ItemList['Shoutmon X7 Superior Mode'],
], 'Shoutmon X7');
const ShoutmonX7SuperiorMode = new Shop([
    ItemList['Botamon'],
], 'Shoutmon X7 Superior Mode');
const Venusmon = new Shop([
    ItemList['Yukimi Botamon'],
], 'Venusmon');
const Vulcanusmon = new Shop([
    ItemList['Mokumon'],
], 'Vulcanusmon');
const ZekeGreymon = new Shop([
    ItemList['Botamon'],
], 'Zeke Greymon');
const Armamon = new Shop([
    ItemList['Omega Armamon BM'],
], 'Armamon');
const DarkVolumon = new Shop([
    ItemList['Atlur Ballistamon'],
], 'Dark Volumon');
const DeadlyTuwarmon = new Shop([
    ItemList['Gokumon'],
], 'Deadly Tuwarmon');
const GrandGeneramon = new Shop([
    ItemList['Tunomon'],
], 'Grand Generamon');
const GreyKnightsmon = new Shop([
    ItemList['Choromon'],
], 'Grey Knightsmon');
const OmegaArmamonBM = new Shop([
    ItemList['Tunomon'],
], 'Omega Armamon BM');
const ShoutmonX3GM = new Shop([
    ItemList['Shoutmon X4'],
], 'Shoutmon X3GM');
const ShoutmonX3SD = new Shop([
    ItemList['Shoutmon X4'],
], 'Shoutmon X3SD');
const ShoutmonX4S = new Shop([
    ItemList['Shoutmon X5S'],
], 'Shoutmon X4S');
const ShoutmonX5S = new Shop([
    ItemList['Shoutmon X7'],
], 'Shoutmon X5S');
const Huckmon = new Shop([
    ItemList['Bao Huckmon'],
    ItemList['Geo Greymon'],
    ItemList['Monochromon'],
], 'Huckmon');
const Pillomon = new Shop([
    ItemList['Sheepmon'],
], 'Pillomon');
const SistermonBlanc = new Shop([
    ItemList['Sistermon Blanc Awaken'],
    ItemList['Sistermon Ciel'],
    ItemList['Sistermon Noir'],
], 'Sistermon Blanc');
const SistermonNoir = new Shop([
    ItemList['Sistermon Noir Awaken'],
    ItemList['Lady Devimon'],
], 'Sistermon Noir');
const Yakiimon = new Shop([
    ItemList['Jyagamon'],
], 'Yakiimon');
const ArresterdramonSuperiorMode = new Shop([
    ItemList['Megidramon'],
], 'Arresterdramon Superior Mode');
const Jokermon = new Shop([
    ItemList['Noble Pumpmon'],
    ItemList['Piemon'],
], 'Jokermon');
const Luminamon = new Shop([
    ItemList['Luminamon Nene Version'],
    ItemList['Marin Angemon'],
], 'Luminamon');
const LuminamonNeneVersion = new Shop([
    ItemList['Marin Angemon'],
    ItemList['Ofanimon'],
], 'Luminamon Nene Version');
const Gankoomon = new Shop([
    ItemList['Gankoomon X-Antibody'],
], 'Gankoomon');
const Quartzmon = new Shop([
    ItemList['Zurumon'],
], 'Quartzmon');
const SistermonBlancAwaken = new Shop([
    ItemList['Sistermon Noir Awaken'],
    ItemList['Sistermon Ciel Awaken'],
], 'Sistermon Blanc Awaken');
const Aegiomon = new Shop([
    ItemList['Aegiochusmon'],
    ItemList['Aegiochusmon Blue'],
    ItemList['Aegiochusmon Dark'],
    ItemList['Aegiochusmon Green'],
    ItemList['Aegiochusmon Holy'],
], 'Aegiomon');
const SistermonNoirAwaken = new Shop([
    ItemList['Angewomon'],
    ItemList['Lady Devimon'],
], 'Sistermon Noir Awaken');
const Aegiochusmon = new Shop([
    ItemList['Apollomon'],
    ItemList['Marsmon'],
    ItemList['Vulcanusmon'],
], 'Aegiochusmon');
const AegiochusmonBlue = new Shop([
    ItemList['Dianamon'],
    ItemList['Neptunemon'],
], 'Aegiochusmon Blue');
const AegiochusmonGreen = new Shop([
    ItemList['Bacchusmon'],
    ItemList['Ceresmon'],
    ItemList['Mercurymon'],
], 'Aegiochusmon Green');
const CerberumonWerewolfMode = new Shop([
    ItemList['Cherubimon Vice'],
    ItemList['Plutomon'],
], 'Cerberumon Werewolf Mode');
const Sirenmon = new Shop([
    ItemList['Ancient Mermaimon'],
    ItemList['Ceresmon'],
    ItemList['Marin Angemon'],
], 'Sirenmon');
const AvengeKidmon = new Shop([
    ItemList['Zerimon'],
], 'Avenge Kidmon');
const Bacchusmon = new Shop([
    ItemList['Poyomon'],
], 'Bacchusmon');
const BeelStarmon = new Shop([
    ItemList['Keemon'],
], 'Beel Starmon');
const Ceresmon = new Shop([
    ItemList['Ceresmon Medium'],
], 'Ceresmon');
const CeresmonMedium = new Shop([
    ItemList['Ceresmon'],
], 'Ceresmon Medium');
const Jupitermon = new Shop([
    ItemList['Jupitermon Wrath Mode'],
], 'Jupitermon');
const KuzuhamonMikoMode = new Shop([
    ItemList['Kuzuhamon'],
], 'Kuzuhamon Miko Mode');
const MagnaKidmon = new Shop([
    ItemList['Botamon'],
], 'Magna Kidmon');
const Plutomon = new Shop([
    ItemList['Paomon'],
], 'Plutomon');
const RustTyranomon = new Shop([
    ItemList['Botamon'],
], 'Rust Tyranomon');
const Titamon = new Shop([
    ItemList['Punimon'],
], 'Titamon');
const BaoHuckmon = new Shop([
    ItemList['Rize Greymon'],
    ItemList['Savior Huckmon'],
    ItemList['Skull Greymon'],
], 'Bao Huckmon');
const AegiochusmonDark = new Shop([
    ItemList['Minervamon'],
    ItemList['Plutomon'],
], 'Aegiochusmon Dark');
const AegiochusmonHoly = new Shop([
    ItemList['Junomon'],
    ItemList['Jupitermon'],
    ItemList['Venusmon'],
], 'Aegiochusmon Holy');
const SaviorHuckmon = new Shop([
    ItemList['Jesmon'],
    ItemList['Megidramon'],
    ItemList['Slayerdramon'],
], 'Savior Huckmon');
const BanchoGolemon = new Shop([
    ItemList['Sunamon'],
], 'Bancho Golemon');
const BanchoLilimon = new Shop([
    ItemList['Yuramon'],
], 'Bancho Lilimon');
const BanchoMamemon = new Shop([
    ItemList['Choromon'],
], 'Bancho Mamemon');
const BanchoStingmon = new Shop([
    ItemList['Leafmon'],
], 'Bancho Stingmon');
const Gundramon = new Shop([
    ItemList['Choromon'],
], 'Gundramon');
const Jesmon = new Shop([
    ItemList['Jesmon X-Antibody'],
    ItemList['Jesmon GX'],
], 'Jesmon');
const Junomon = new Shop([
    ItemList['Junomon Hysteric Mode'],
], 'Junomon');
const JunomonHystericMode = new Shop([
    ItemList['Junomon'],
], 'Junomon Hysteric Mode');
const JupitermonWrathMode = new Shop([
    ItemList['Jupitermon'],
], 'Jupitermon Wrath Mode');
const Vorvomon = new Shop([
    ItemList['Birdramon'],
    ItemList['Lavorvomon'],
    ItemList['Meramon'],
], 'Vorvomon');
const GuardromonGold = new Shop([
    ItemList['Duramon'],
    ItemList['Grademon'],
    ItemList['Rapidmon Armor'],
], 'Guardromon Gold');
const Meicoomon = new Shop([
    ItemList['Meicrackmon'],
    ItemList['Meicrackmon Vicious Mode'],
], 'Meicoomon');
const MeicrackmonViciousMode = new Shop([
    ItemList['Junomon'],
    ItemList['Ofanimon'],
    ItemList['Raguelmon'],
], 'Meicrackmon Vicious Mode');
const Mastemon = new Shop([
    ItemList['Botamon'],
    ItemList['Yukimi Botamon'],
], 'Mastemon');
const OmegamonAlterB = new Shop([
    ItemList['Botamon'],
    ItemList['Punimon'],
], 'Omegamon Alter-B');
const OmegamonZwartDefeat = new Shop([
    ItemList['Botamon'],
    ItemList['Punimon'],
], 'Omegamon Zwart Defeat');
const Volcanicdramon = new Shop([
    ItemList['Mokumon'],
], 'Volcanicdramon');
const Sakumon = new Shop([
    ItemList['Sakuttomon'],
], 'Sakumon');
const Sakuttomon = new Shop([
    ItemList['Huckmon'],
    ItemList['Ryudamon'],
    ItemList['Zubamon'],
], 'Sakuttomon');
const Ludomon = new Shop([
    ItemList['Guardromon'],
    ItemList['Tia Ludomon'],
], 'Ludomon');
const Zubamon = new Shop([
    ItemList['Bao Huckmon'],
    ItemList['Ginryumon'],
    ItemList['Zubaeagermon'],
], 'Zubamon');
const Hudiemon = new Shop([
    ItemList['Archnemon'],
    ItemList['Jewelbeemon'],
    ItemList['Lilimon'],
], 'Hudiemon');
const Lavorvomon = new Shop([
    ItemList['Lavogaritamon'],
    ItemList['Volcamon'],
    ItemList['Vritramon'],
], 'Lavorvomon');
const SistermonCiel = new Shop([
    ItemList['Cho·Hakkaimon'],
    ItemList['Eosmon Perfect'],
    ItemList['Sistermon Ciel Awaken'],
], 'Sistermon Ciel');
const SistermonCielAwaken = new Shop([
    ItemList['Angewomon'],
    ItemList['Eosmon Perfect'],
], 'Sistermon Ciel Awaken');
const Zubaeagermon = new Shop([
    ItemList['Duramon'],
    ItemList['Groundramon'],
    ItemList['Jyagamon'],
], 'Zubaeagermon');
const Duramon = new Shop([
    ItemList['Cres Garurumon'],
    ItemList['Durandamon'],
    ItemList['Jesmon'],
], 'Duramon');
const Lavogaritamon = new Shop([
    ItemList['Bryweludramon'],
    ItemList['Megidramon'],
    ItemList['Volcanicdramon'],
], 'Lavogaritamon');
const Meicrackmon = new Shop([
    ItemList['Holydramon'],
    ItemList['Junomon'],
    ItemList['Meicrackmon Vicious Mode'],
    ItemList['Rasielmon'],
], 'Meicrackmon');
const BlitzGreymon = new Shop([
    ItemList['Omegamon Alter-S'],
], 'Blitz Greymon');
const CresGarurumon = new Shop([
    ItemList['Omegamon Alter-S'],
], 'Cres Garurumon');
const Durandamon = new Shop([
    ItemList['Ragna Lordmon'],
], 'Durandamon');
const GraceNovamon = new Shop([
    ItemList['Moonmon'],
    ItemList['Sunmon'],
], 'Grace Novamon');
const OmegamonAlterS = new Shop([
    ItemList['Botamon'],
    ItemList['Punimon'],
], 'Omegamon Alter-S');
const Ordinemon = new Shop([
    ItemList['Yukimi Botamon'],
], 'Ordinemon');
const Raguelmon = new Shop([
    ItemList['Ordinemon'],
], 'Raguelmon');
const Rasielmon = new Shop([
    ItemList['Yukimi Botamon'],
], 'Rasielmon');
const Voltobautamon = new Shop([
    ItemList['Zurumon'],
], 'Voltobautamon');
const Cotsucomon = new Shop([
    ItemList['Kakkinmon'],
], 'Cotsucomon');
const Pusumon = new Shop([
    ItemList['Pusurimon'],
], 'Pusumon');
const Kakkinmon = new Shop([
    ItemList['Junkmon'],
    ItemList['Ludomon'],
], 'Kakkinmon');
const Pusurimon = new Shop([
    ItemList['Herissmon'],
    ItemList['Plotmon'],
], 'Pusurimon');
const Bulucomon = new Shop([
    ItemList['Hyougamon'],
    ItemList['Paledramon'],
    ItemList['Yukidarumon'],
], 'Bulucomon');
const DracomonXAntibody = new Shop([
    ItemList['Groundramon'],
    ItemList['Growmon X-Antibody'],
    ItemList['Wingdramon'],
], 'Dracomon X-Antibody');
const Herissmon = new Shop([
    ItemList['Filmon'],
    ItemList['Sangloupmon'],
], 'Herissmon');
const RenamonXAntibody = new Shop([
    ItemList['Kyubimon'],
    ItemList['Kyubimon Silver'],
    ItemList['Leomon X-Antibody'],
], 'Renamon X-Antibody');
const TerriermonAssistant = new Shop([
    ItemList['Galgomon'],
    ItemList['Terriermon X-Antibody'],
], 'Terriermon Assistant');
const Filmon = new Shop([
    ItemList['Bulkmon'],
    ItemList['Stiffilmon'],
], 'Filmon');
const Paledramon = new Shop([
    ItemList['Crys Paledramon'],
    ItemList['Frozomon'],
    ItemList['Panjyamon'],
], 'Paledramon');
const TiaLudomon = new Shop([
    ItemList['Megadramon'],
    ItemList['Metal Greymon'],
    ItemList['Raiji Ludomon'],
], 'Tia Ludomon');
const TyranomonXAntibody = new Shop([
    ItemList['Metal Greymon X-Antibody'],
    ItemList['Metal Tyranomon X-Antibody'],
], 'Tyranomon X-Antibody');
const CrysPaledramon = new Shop([
    ItemList['Decker Greymon'],
    ItemList['Fros Velgrmon'],
    ItemList['Hexeblaumon'],
], 'Crys Paledramon');
const RaijiLudomon = new Shop([
    ItemList['Blitz Greymon'],
    ItemList['Bryweludramon'],
    ItemList['Dukemon'],
], 'Raiji Ludomon');
const Stiffilmon = new Shop([
    ItemList['Bagramon'],
    ItemList['Rasenmon'],
    ItemList['Rasenmon Fury Mode'],
], 'Stiffilmon');
const BeelStarmonXAntibody = new Shop([
    ItemList['Keemon'],
], 'Beel Starmon X-Antibody');
const Bryweludramon = new Shop([
    ItemList['Ragna Lordmon'],
], 'Bryweludramon');
const CraniummonXAntibody = new Shop([
    ItemList['Bommon'],
], 'Craniummon X-Antibody');
const DiablomonXAntibody = new Shop([
    ItemList['Kuramon'],
], 'Diablomon X-Antibody');
const JesmonXAntibody = new Shop([
    ItemList['Sakumon'],
], 'Jesmon X-Antibody');
const LordKnightmonXAntibody = new Shop([
    ItemList['Choromon'],
], 'Lord Knightmon X-Antibody');
const MinervamonXAntibody = new Shop([
    ItemList['Yuramon'],
], 'Minervamon X-Antibody');
const OmegamonMercifulMode = new Shop([
    ItemList['Botamon'],
    ItemList['Bubbmon'],
    ItemList['Nyokimon'],
    ItemList['Pitchmon'],
    ItemList['Poyomon'],
    ItemList['Punimon'],
    ItemList['Yukimi Botamon'],
    ItemList['Yuramon'],
], 'Omegamon Merciful Mode');
const Rafflesimon = new Shop([
    ItemList['Nyokimon'],
], 'Rafflesimon');
const RagnaLordmon = new Shop([
    ItemList['Cotsucomon'],
    ItemList['Sakumon'],
], 'Ragna Lordmon');
const SakuyamonXAntibody = new Shop([
    ItemList['Relemon'],
], 'Sakuyamon X-Antibody');
const SleipmonXAntibody = new Shop([
    ItemList['Pafumon'],
], 'Sleipmon X-Antibody');
const AgumonBlackXAntibody = new Shop([
    ItemList['Allomon X-Antibody'],
    ItemList['Dark Tyranomon X-Antibody'],
], 'Agumon Black X-Antibody');
const ImpmonXAntibody = new Shop([
    ItemList['Meramon'],
    ItemList['Orgemon X-Antibody'],
    ItemList['Wizarmon'],
], 'Impmon X-Antibody');
const Jazamon = new Shop([
    ItemList['Jazardmon'],
    ItemList['Pteranomon'],
], 'Jazamon');
const KeramonXAntibody = new Shop([
    ItemList['Bakemon'],
    ItemList['Bomber Nanimon'],
    ItemList['Chrysalimon'],
    ItemList['Meicoomon'],
], 'Keramon X-Antibody');
const LopmonXAntibody = new Shop([
    ItemList['Black Tailmon'],
    ItemList['Tailmon X-Antibody'],
    ItemList['Turuiemon'],
], 'Lopmon X-Antibody');
const TerriermonXAntibody = new Shop([
    ItemList['Dogmon'],
    ItemList['Galgomon'],
    ItemList['Minotaurmon'],
    ItemList['Siesamon X-Antibody'],
], 'Terriermon X-Antibody');
const DarkTyranomonXAntibody = new Shop([
    ItemList['Mametyramon'],
    ItemList['Metal Greymon Virus'],
    ItemList['Triceramon X-Antibody'],
], 'Dark Tyranomon X-Antibody');
const Jazardmon = new Shop([
    ItemList['Jazarichmon'],
    ItemList['Megadramon'],
    ItemList['Vulturemon'],
], 'Jazardmon');
const MeramonXAntibody = new Shop([
    ItemList['Death Meramon'],
    ItemList['Garudamon X-Antibody'],
], 'Meramon X-Antibody');
const NumemonXAntibody = new Shop([
    ItemList['Black King Numemon'],
    ItemList['Monzaemon'],
    ItemList['Vamdemon X-Antibody'],
], 'Numemon X-Antibody');
const OrgemonXAntibody = new Shop([
    ItemList['Rebellimon'],
    ItemList['Skull Satamon'],
    ItemList['Vamdemon X-Antibody'],
], 'Orgemon X-Antibody');
const PegasmonXAntibody = new Shop([
    ItemList['Garummon'],
    ItemList['Grademon'],
    ItemList['Hippogriffomon'],
], 'Pegasmon X-Antibody');
const SiesamonXAntibody = new Shop([
    ItemList['Bastemon'],
    ItemList['Caturamon'],
    ItemList['Mihiramon'],
], 'Siesamon X-Antibody');
const WizarmonXAntibody = new Shop([
    ItemList['Baalmon'],
    ItemList['Mistymon'],
    ItemList['Vamdemon X-Antibody'],
], 'Wizarmon X-Antibody');
const AngewomonXAntibody = new Shop([
    ItemList['Holydramon X-Antibody'],
    ItemList['Ofanimon X-Antibody'],
], 'Angewomon X-Antibody');
const CyberdramonXAntibody = new Shop([
    ItemList['Ebemon X-Antibody'],
    ItemList['Gaioumon'],
    ItemList['Justimon X-Antibody'],
], 'Cyberdramon X-Antibody');
const Jazarichmon = new Shop([
    ItemList['Metallicdramon'],
    ItemList['Hououmon'],
    ItemList['Shoutmon X3GM'],
], 'Jazarichmon');
const LadyDevimonXAntibody = new Shop([
    ItemList['Beel Starmon X-Antibody'],
    ItemList['Ofanimon Falldown Mode X-Antibody'],
], 'Lady Devimon X-Antibody');
const MephismonXAntibody = new Shop([
    ItemList['Barbamon'],
    ItemList['Cherubimon Vice'],
    ItemList['Gulfmon'],
], 'Mephismon X-Antibody');
const MetalGreymonVirusXAntibody = new Shop([
    ItemList['Black War Greymon X-Antibody'],
    ItemList['Skull Mammon X-Antibody'],
    ItemList['Ultimate Brachimon'],
], 'Metal Greymon Virus X-Antibody');
const MonzaemonXAntibody = new Shop([
    ItemList['Cherubimon Virtue X-Antibody'],
    ItemList['Holydramon'],
    ItemList['Waru Monzaemon'],
], 'Monzaemon X-Antibody');
const OmegaShoutmonXAntibody = new Shop([
    ItemList['Shoutmon DX'],
    ItemList['Shoutmon EX6'],
    ItemList['Rapidmon X-Antibody'],
], 'Omega Shoutmon X-Antibody');
const RizeGreymonXAntibody = new Shop([
    ItemList['Bryweludramon'],
    ItemList['Gankoomon X-Antibody'],
    ItemList['Jupitermon'],
    ItemList['Shine Greymon'],
], 'Rize Greymon X-Antibody');
const VamdemonXAntibody = new Shop([
    ItemList['Belial Vamdemon'],
    ItemList['Cherubimon Vice X-Antibody'],
    ItemList['Venom Vamdemon'],
], 'Vamdemon X-Antibody');
const BarbamonXAntibody = new Shop([
    ItemList['Mokumon'],
], 'Barbamon X-Antibody');
const BelphemonXAntibody = new Shop([
    ItemList['Kuramon'],
], 'Belphemon X-Antibody');
const CherubimonViceXAntibody = new Shop([
    ItemList['Cocomon'],
], 'Cherubimon Vice X-Antibody');
const CherubimonVirtueXAntibody = new Shop([
    ItemList['Zerimon'],
], 'Cherubimon Virtue X-Antibody');
const DarkKnightmonXAntibody = new Shop([
    ItemList['Cotsucomon'],
], 'Dark Knightmon X-Antibody');
const DemonXAntibody = new Shop([
    ItemList['Zurumon'],
], 'Demon X-Antibody');
const ExamonXAntibody = new Shop([
    ItemList['Petitmon'],
], 'Examon X-Antibody');
const GankoomonXAntibody = new Shop([
    ItemList['Bubbmon'],
], 'Gankoomon X-Antibody');
const Hexeblaumon = new Shop([
    ItemList['Yukimi Botamon'],
], 'Hexeblaumon');
const HououmonXAntibody = new Shop([
    ItemList['Puwamon'],
], 'Hououmon X-Antibody');
const JesmonGX = new Shop([
    ItemList['Sakumon'],
], 'Jesmon GX');
const JustimonXAntibody = new Shop([
    ItemList['Sakumon'],
], 'Justimon X-Antibody');
const LeviamonXAntibody = new Shop([
    ItemList['Pitchmon'],
], 'Leviamon X-Antibody');
const LilithmonXAntibody = new Shop([
    ItemList['Botamon'],
], 'Lilithmon X-Antibody');
const LucemonXAntibody = new Shop([
    ItemList['Poyomon'],
], 'Lucemon X-Antibody');
const Metallicdramon = new Shop([
    ItemList['Ketomon'],
], 'Metallicdramon');
const NoblePumpmon = new Shop([
    ItemList['Nyokimon'],
], 'Noble Pumpmon');
const OfanimonXAntibody = new Shop([
    ItemList['Yukimi Botamon'],
], 'Ofanimon X-Antibody');
const OfanimonFalldownModeXAntibody = new Shop([
    ItemList['Yukimi Botamon'],
], 'Ofanimon Falldown Mode X-Antibody');
const OgudomonXAntibody = new Shop([
    ItemList['Keemon'],
], 'Ogudomon X-Antibody');
const RapidmonXAntibody = new Shop([
    ItemList['Zerimon'],
], 'Rapidmon X-Antibody');
const Rasenmon = new Shop([
    ItemList['Rasenmon Fury Mode'],
], 'Rasenmon');
const RasenmonFuryMode = new Shop([
    ItemList['Rasenmon'],
], 'Rasenmon Fury Mode');
const AlgomonBabyI = new Shop([
    ItemList['Algomon Baby II'],
], 'Algomon Baby I');
const Dokimon = new Shop([
    ItemList['Bibimon'],
], 'Dokimon');
const AlgomonBabyII = new Shop([
    ItemList['Algomon Child'],
    ItemList['Ghostmon'],
    ItemList['Wormmon'],
], 'Algomon Baby II');
const Bibimon = new Shop([
    ItemList['Betamon'],
    ItemList['Patamon'],
    ItemList['Pulsemon'],
], 'Bibimon');
const AlgomonChild = new Shop([
    ItemList['Algomon Adult'],
    ItemList['Eosmon Adult'],
    ItemList['Mojyamon'],
], 'Algomon Child');
const Ghostmon = new Shop([
    ItemList['Bakemon'],
    ItemList['Devimon'],
    ItemList['Witchmon'],
    ItemList['Wizarmon'],
], 'Ghostmon');
const Junkmon = new Shop([
    ItemList['Komondomon'],
    ItemList['Minotaurmon'],
    ItemList['Raremon'],
], 'Junkmon');
const Morphomon = new Shop([
    ItemList['Eosmon Adult'],
    ItemList['Gokimon'],
    ItemList['Hudiemon'],
], 'Morphomon');
const Pomumon = new Shop([
    ItemList['Cockatrimon'],
    ItemList['Parasaurmon'],
    ItemList['Zassoumon'],
], 'Pomumon');
const Pulsemon = new Shop([
    ItemList['Bulkmon'],
    ItemList['Exermon'],
    ItemList['Namakemon'],
    ItemList['Runnermon'],
], 'Pulsemon');
const Sangomon = new Shop([
    ItemList['Hookmon'],
    ItemList['Octmon'],
    ItemList['Shellmon'],
    ItemList['Tobiumon'],
], 'Sangomon');
const Sunarizamon = new Shop([
    ItemList['Baboongamon'],
    ItemList['Golemon'],
    ItemList['Tortamon'],
], 'Sunarizamon');
const AlgomonAdult = new Shop([
    ItemList['Algomon Perfect'],
    ItemList['Big Mamemon'],
    ItemList['Valvemon'],
], 'Algomon Adult');
const Baboongamon = new Shop([
    ItemList['Gogmamon'],
    ItemList['Jyagamon'],
], 'Baboongamon');
const Baluchimon = new Shop([
    ItemList['Manticoremon'], ,
    ItemList['Skull Baluchimon'],
], 'Baluchimon');
const Bulkmon = new Shop([
    ItemList['Boutmon'],
    ItemList['Climbmon'],
    ItemList['Divemon'],
    ItemList['Pistmon'],
    ItemList['Tempomon'],
], 'Bulkmon');
const DarkMaildramon = new Shop([
    ItemList['Metal Greymon Virus'],
    ItemList['Metal Tyranomon'],
], 'Dark Maildramon');
const EosmonAdult = new Shop([
    ItemList['Eosmon Perfect'],
    ItemList['Sistermon Ciel Awaken'],
    ItemList['Sistermon Noir Awaken'],
], 'Eosmon Adult');
const Exermon = new Shop([
    ItemList['Archnemon'],
    ItemList['Climbmon'],
    ItemList['Pistmon'],
], 'Exermon');
const Eyesmon = new Shop([
    ItemList['Eyesmon Scatter Mode'],
    ItemList['Orochimon'],
], 'Eyesmon');
const EyesmonScatterMode = new Shop([
    ItemList['Eyesmon'],
    ItemList['Dagomon'],
], 'Eyesmon Scatter Mode');
const Machmon = new Shop([
    ItemList['Locomon'],
    ItemList['Trailmon Worm'],
], 'Machmon');
const Mimicmon = new Shop([
    ItemList['Manticoremon'],
    ItemList['Piranimon'],
], 'Mimicmon');
const Namakemon = new Shop([
    ItemList['Boutmon'],
    ItemList['Tempomon'],
], 'Namakemon');
const Parasaurmon = new Shop([
    ItemList['Ajatarmon'],
    ItemList['Entmon'],
    ItemList['Toropiamon'],
], 'Parasaurmon');
const Runnermon = new Shop([
    ItemList['Pistmon'],
    ItemList['Shootmon'],
], 'Runnermon');
const Tobiumon = new Shop([
    ItemList['Gusokumon'],
    ItemList['Marin Chimairamon'],
    ItemList['Mermaimon'],
    ItemList['Piranimon'],
], 'Tobiumon');
const Boutmon = new Shop([
    ItemList['Achillesmon'],
    ItemList['Kazuchimon'],
    ItemList['Shroudmon'],
], 'Boutmon');
const Entmon = new Shop([
    ItemList['Babamon'],
    ItemList['Xuanwumon'],
], 'Entmon');
const EosmonPerfect = new Shop([
    ItemList['Ancient Wisemon'],
    ItemList['Eosmon Ultimate'],
], 'Eosmon Perfect');
const Gogmamon = new Shop([
    ItemList['Ancient Volcamon'],
    ItemList['Blastmon'],
    ItemList['Pharaohmon'],
], 'Gogmamon');
const Gusokumon = new Shop([
    ItemList['Decker Greymon'],
    ItemList['Metal Seadramon'],
    ItemList['Plesiomon'],
    ItemList['Regalecusmon'],
], 'Gusokumon');
const Manticoremon = new Shop([
    ItemList['Qinglongmon'],
    ItemList['Slash Angemon'],
], 'Manticoremon');
const MarinChimairamon = new Shop([
    ItemList['Marin Angemon'],
    ItemList['Neptunemon'],
    ItemList['Regalecusmon'],
], 'Marin Chimairamon');
const MetalGreymonAlterousMode = new Shop([
    ItemList['Blitz Greymon'],
    ItemList['Mugendramon'],
    ItemList['War Greymon'],
], 'Metal Greymon Alterous Mode');
const Piranimon = new Shop([
    ItemList['Leviamon'],
    ItemList['Metal Piranimon'],
], 'Piranimon');
const Rebellimon = new Shop([
    ItemList['Gundramon'],
    ItemList['Titamon'],
], 'Rebellimon');
const Toropiamon = new Shop([
    ItemList['Bloom Lordmon'],
    ItemList['Hydramon'],
    ItemList['Spinomon'],
], 'Toropiamon');
const WereGarurumonSagittariusMode = new Shop([
    ItemList['Cres Garurumon'],
    ItemList['Mercurymon'],
    ItemList['Metal Garurumon'],
], 'Were Garurumon Sagittarius Mode');
const AgumonYukinoKizuna = new Shop([
    ItemList['Botamon'],
], 'Agumon -Yuki no Kizuna-');
const DoneDevimon = new Shop([
    ItemList['Mokumon'],
], 'Done Devimon');
const EosmonUltimate = new Shop([
    ItemList['Pupumon'],
], 'Eosmon Ultimate');
const GabumonYujonoKizuna = new Shop([
    ItemList['Punimon'],
], 'Gabumon -Yujo no Kizuna-');
const HeavyLeomon = new Shop([
    ItemList['Punimon'],
], 'Heavy Leomon');
const Kazuchimon = new Shop([
    ItemList['Dokimon'],
], 'Kazuchimon');
const Mitamamon = new Shop([
    ItemList['Pafumon'],
], 'Mitamamon');
const Nidhoggmon = new Shop([
    ItemList['Kuramon'],
], 'Nidhoggmon');
const Omedamon = new Shop([
    ItemList['Choromon'],
], 'Omedamon');
const Regalecusmon = new Shop([
    ItemList['Pitchmon'],
], 'Regalecusmon');
const Curimon = new Shop([
    ItemList['Gurimon'],
], 'Curimon');
const Hiyarimon = new Shop([
    ItemList['Bulucomon'],
    ItemList['Snow Goburimon'],
], 'Hiyarimon');
const Puyomon = new Shop([
    ItemList['Puyoyomon'],
], 'Puyomon');
const Pyonmon = new Shop([
    ItemList['Bosamon'],
], 'Pyonmon');
const Sunamon = new Shop([
    ItemList['Goromon'],
], 'Sunamon');
const Bosamon = new Shop([
    ItemList['Angoramon'],
    ItemList['Plotmon'],
], 'Bosamon');
const Goromon = new Shop([
    ItemList['Gottsumon'],
    ItemList['Sunarizamon'],
], 'Goromon');
const Gurimon = new Shop([
    ItemList['Gammamon'],
    ItemList['Huckmon'],
], 'Gurimon');
const Puyoyomon = new Shop([
    ItemList['Jellymon'],
    ItemList['Otamamon'],
    ItemList['Sangomon'],
    ItemList['Shakomon'],
], 'Puyoyomon');
const Negamon = new Shop([
    ItemList['Keramon'],
], 'Negamon');
const Angoramon = new Shop([
    ItemList['Komondomon'],
    ItemList['Porcupamon'],
    ItemList['Symbare Angoramon'],
], 'Angoramon');
const Gammamon = new Shop([
    ItemList['Betel Gammamon'],
    ItemList['Gulus Gammamon'],
    ItemList['Kaus Gammamon'],
    ItemList['Wezen Gammamon'],
], 'Gammamon');
const Jellymon = new Shop([
    ItemList['Gesomon'],
    ItemList['Rukamon'],
    ItemList['Tesla Jellymon'],
], 'Jellymon');
const KodokugumonChild = new Shop([
    ItemList['Dokugumon'],
    ItemList['Stingmon'],
    ItemList['Sand Yanmamon'],
], 'Kodokugumon Child');
const BetelGammamon = new Shop([
    ItemList['Brachimon'],
    ItemList['Canoweissmon'],
    ItemList['Tankdramon'],
], 'Betel Gammamon');
const GulusGammamon = new Shop([
    ItemList['Chimairamon'],
    ItemList['Canoweissmon'],
    ItemList['Kaiser Leomon'],
], 'Gulus Gammamon');
const KausGammamon = new Shop([
    ItemList['Canoweissmon'],
    ItemList['Garummon'],
], 'Kaus Gammamon');
const Komondomon = new Shop([
    ItemList['Loader Leomon'],
    ItemList['Locomon'],
    ItemList['Waru Monzaemon'],
], 'Komondomon');
const Potamon = new Shop([
    ItemList['Jyagamon'],
], 'Potamon');
const SymbareAngoramon = new Shop([
    ItemList['Grappu Leomon'],
    ItemList['Lamortmon'],
    ItemList['Waru Monzaemon'],
], 'Symbare Angoramon');
const TeslaJellymon = new Shop([
    ItemList['Marin Devimon'],
    ItemList['Thetismon'],
    ItemList['Whamon Perfect'],
], 'Tesla Jellymon');
const WezenGammamon = new Shop([
    ItemList['Canoweissmon'],
    ItemList['Groundramon'],
    ItemList['Triceramon'],
], 'Wezen Gammamon');
const BlackTailmonUver = new Shop([
    ItemList['Betsumon'],
    ItemList['Lady Devimon'],
    ItemList['Waru Monzaemon'],
], 'Black Tailmon Uver');
const Canoweissmon = new Shop([
    ItemList['Aegisdramon'],
    ItemList['Chaosdramon'],
    ItemList['Megidramon'],
], 'Canoweissmon');
const Climbmon = new Shop([
    ItemList['Shivamon'],
    ItemList['Shroudmon'],
], 'Climbmon');
const Divemon = new Shop([
    ItemList['Pukumon'],
    ItemList['Surfymon'],
], 'Divemon');
const Frozomon = new Shop([
    ItemList['Decker Greymon'],
    ItemList['Fros Velgrmon'],
    ItemList['Skull Mammon'],
], 'Frozomon');
const Lamortmon = new Shop([
    ItemList['Anubimon'],
    ItemList['Griffomon'],
    ItemList['Saber Leomon'],
], 'Lamortmon');
const Pistmon = new Shop([
    ItemList['Achillesmon'],
    ItemList['Bloom Lordmon'],
    ItemList['Lord Knightmon'],
], 'Pistmon');
const RareRaremon = new Shop([
    ItemList['Boltmon'],
    ItemList['Metamormon'],
    ItemList['Nidhoggmon'],
], 'Rare Raremon');
const Shootmon = new Shop([
    ItemList['Magna Kidmon'],
    ItemList['Shroudmon'],
], 'Shootmon');
const Tempomon = new Shop([
    ItemList['Daipenmon'],
    ItemList['Ravmon'],
    ItemList['Ornismon'],
], 'Tempomon');
const Thetismon = new Shop([
    ItemList['Ancient Mermaimon'],
    ItemList['Marin Angemon'],
    ItemList['Pukumon'],
], 'Thetismon');
const Vulturemon = new Shop([
    ItemList['Hououmon'],
    ItemList['Zhuqiaomon'],
], 'Vulturemon');
const Abbadomon = new Shop([
    ItemList['Abbadomon Core'],
], 'Abbadomon');
const AbbadomonCore = new Shop([
    ItemList['Kuramon'],
], 'Abbadomon Core');
const Achillesmon = new Shop([
    ItemList['Dokimon'],
], 'Achillesmon');
const Ajatarmon = new Shop([
    ItemList['Nyokimon'],
], 'Ajatarmon');
const BloomLordmon = new Shop([
    ItemList['Yuramon'],
], 'Bloom Lordmon');
const FrosVelgrmon = new Shop([
    ItemList['Yukimi Botamon'],
], 'Fros Velgrmon');
const GaioumonInvincibleSword = new Shop([
    ItemList['Botamon'],
], 'Gaioumon Invincible Sword');
const Hydramon = new Shop([
    ItemList['Nyokimon'],
], 'Hydramon');
const LovelyAngemon = new Shop([
    ItemList['Yukimi Botamon'],
], 'Lovely Angemon');
const Shivamon = new Shop([
    ItemList['Dokimon'],
], 'Shivamon');
const Shroudmon = new Shop([
    ItemList['Mokumon'],
], 'Shroudmon');
/// <reference path="../../declarations/GameHelper.d.ts" />
class DamageCalculator {
    static totalDamage() {
        const ignoreRegionMultiplier = DamageCalculator.region() == GameConstants.Region.none;
        return App.game.party.calculatePokemonAttack(DamageCalculator.type1(), DamageCalculator.type2(), ignoreRegionMultiplier, DamageCalculator.region(), DamageCalculator.includeBreeding(), DamageCalculator.baseAttackOnly(), DamageCalculator.weather(), DamageCalculator.ignoreLevel());
    }
    static getDamageByTypes() {
        const typedamage = new Array(GameHelper.enumLength(PokemonType) - 1).fill(0);
        const ignoreRegionMultiplier = this.region() == GameConstants.Region.none;
        for (const pokemon of App.game.party.caughtPokemon) {
            const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
            if (dataPokemon.type1 === PokemonType.None) {
                continue;
            }
            const attack = App.game.party.calculateOnePokemonAttack(pokemon, this.type1(), this.type2(), this.region(), ignoreRegionMultiplier, this.includeBreeding(), this.baseAttackOnly(), this.weather(), this.ignoreLevel());
            typedamage[dataPokemon.type1] += attack / 2;
            const otherType = dataPokemon.type2 !== PokemonType.None ? dataPokemon.type2 : dataPokemon.type1;
            typedamage[otherType] += attack / 2;
        }
        return typedamage;
    }
    static getTypeDetail() {
        return App.game.party.caughtPokemon.filter(pokemon => {
            const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
            return dataPokemon.type1 == DamageCalculator.detailType() || dataPokemon.type2 == DamageCalculator.detailType();
        }).reduce((details, pokemon) => {
            details.push(DamageCalculator.getOneTypeDetail(pokemon));
            return details;
        }, []).sort((a, b) => b.damage - a.damage);
    }
    static getOneTypeDetail(pokemon) {
        const ignoreRegionMultiplier = DamageCalculator.region() == GameConstants.Region.none;
        const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
        return {
            id: dataPokemon.id,
            name: dataPokemon.name,
            type1: dataPokemon.type1,
            type2: dataPokemon.type2,
            damage: App.game.party.calculateOnePokemonAttack(pokemon, DamageCalculator.type1(), DamageCalculator.type2(), DamageCalculator.region(), ignoreRegionMultiplier, DamageCalculator.includeBreeding(), DamageCalculator.baseAttackOnly(), DamageCalculator.weather(), DamageCalculator.ignoreLevel()),
        };
    }
}
DamageCalculator.type1 = ko.observable(PokemonType.None).extend({ numeric: 0 });
DamageCalculator.type2 = ko.observable(PokemonType.None).extend({ numeric: 0 });
DamageCalculator.region = ko.observable(GameConstants.Region.none);
DamageCalculator.weather = ko.observable(WeatherType.Clear);
DamageCalculator.includeBreeding = ko.observable(false);
DamageCalculator.baseAttackOnly = ko.observable(false);
DamageCalculator.ignoreLevel = ko.observable(false);
DamageCalculator.detailType = ko.observable(PokemonType.None).extend({ numeric: 0 });
DamageCalculator.observableTypeDamageArray = ko.pureComputed(DamageCalculator.getDamageByTypes, DamageCalculator);
DamageCalculator.observableTypeDetails = ko.pureComputed(DamageCalculator.getTypeDetail);
DamageCalculator.observableTotalDamage = ko.pureComputed(DamageCalculator.totalDamage);
/// <reference path="../../declarations/GameHelper.d.ts" />
class DailyDeal {
    constructor() {
        this.item1 = DailyDeal.randomItem();
        this.amount1 = DailyDeal.randomAmount();
        this.item2 = DailyDeal.randomItem();
        this.amount2 = DailyDeal.randomAmount();
    }
    static generateDeals(maxDeals, date) {
        SeededRand.seedWithDate(date);
        DailyDeal.list.removeAll();
        const temp = [];
        const maxTries = maxDeals * 10;
        let i = 0;
        while (i < maxTries && temp.length < maxDeals) {
            const deal = new DailyDeal();
            if (deal.isValid(temp)) {
                temp.push(deal);
            }
            i++;
        }
        DailyDeal.list.push(...temp);
    }
    static randomItem() {
        return SeededRand.fromArray(UndergroundItem.list);
    }
    static randomAmount() {
        return SeededRand.intBetween(1, 3);
    }
    isValid(dealList) {
        const item1Name = this.item1.name;
        const item2Name = this.item2.name;
        if (item1Name == item2Name) {
            return false;
        }
        if (this.item1.isStone()) {
            return false;
        }
        if (DailyDeal.sameDealExists(item1Name, item2Name, dealList)) {
            return false;
        }
        if (DailyDeal.reverseDealExists(item1Name, item2Name, dealList)) {
            return false;
        }
        return true;
    }
    static sameDealExists(name1, name2, dealList) {
        for (const deal of dealList) {
            if (deal.item1.name == name1 && deal.item2.name == name2) {
                return true;
            }
        }
        return false;
    }
    static reverseDealExists(name1, name2, dealList) {
        for (const deal of dealList) {
            if (deal.item2.name == name1) {
                if (deal.item1.name == name2) {
                    return true;
                }
                else {
                    return DailyDeal.reverseDealExists(deal.item1.name, name2, dealList);
                }
            }
        }
        return false;
    }
    static canUse(i) {
        const deal = DailyDeal.list.peek()[i];
        const amount = player.getUndergroundItemAmount(deal.item1.id);
        return amount >= deal.amount1;
    }
    static use(i, tradeTimes = 1) {
        const deal = DailyDeal.list.peek()[i];
        const item1Index = player.mineInventoryIndex(deal.item1.id);
        if (DailyDeal.canUse(i)) {
            const amt = player.mineInventory()[item1Index].amount();
            const maxTrades = Math.floor(amt / deal.amount1);
            tradeTimes = Math.min(tradeTimes, maxTrades);
            player.mineInventory()[item1Index].amount(amt - (deal.amount1 * tradeTimes));
            Underground.gainMineItem(deal.item2.id, deal.amount2 * tradeTimes);
            GameHelper.incrementObservable(App.game.statistics.junkyardDailyDealTrades, tradeTimes);
            Underground.sortMineItems(Underground.lastPropSort, false);
        }
    }
}
DailyDeal.list = ko.observableArray();
/// <reference path="../../declarations/GameHelper.d.ts" />
class Mine {
    static loadMine() {
        const tmpGrid = [];
        const tmpRewardGrid = [];
        Mine.rewardNumbers = [];
        Mine.itemsBuried(0);
        Mine.surveyResult(null);
        for (let i = 0; i < App.game.underground.getSizeY(); i++) {
            const row = [];
            const rewardRow = [];
            for (let j = 0; j < Underground.sizeX; j++) {
                row.push(ko.observable(Math.min(5, Math.max(1, Math.floor(Rand.float(2) + Rand.float(3)) + 1))));
                rewardRow.push(0);
            }
            tmpGrid.push(row);
            tmpRewardGrid.push(rewardRow);
        }
        Mine.grid = tmpGrid;
        Mine.rewardGrid = tmpRewardGrid;
        let added = 0;
        for (let i = 0; i < App.game.underground.getMaxItems(); i++) {
            const item = UndergroundItem.getRandomItem();
            const x = Mine.getRandomCoord(Underground.sizeX, item.space[0].length);
            const y = Mine.getRandomCoord(App.game.underground.getSizeY(), item.space.length);
            const res = Mine.canAddReward(x, y, item);
            if (res) {
                Mine.addReward(x, y, item);
                added = added + 1;
            }
        }
        // Check in case player upgrade min above max
        const min = Math.min(App.game.underground.getMinItems(), App.game.underground.getMaxItems());
        while (added < min) {
            const item = UndergroundItem.getRandomItem();
            const x = Mine.getRandomCoord(Underground.sizeX, item.space[0].length);
            const y = Mine.getRandomCoord(App.game.underground.getSizeY(), item.space.length);
            const res = Mine.canAddReward(x, y, item);
            if (res) {
                Mine.addReward(x, y, item);
                added = added + 1;
                //This should loop until it's added.
            }
        }
        Mine.loadingNewLayer = false;
        Mine.itemsFound(0);
        Underground.showMine();
        //Check if Golden_DVD is equipped.
        if (App.game.oakItems.isActive(OakItemType.Golden_DVD)) {
            const tiles = App.game.oakItems.calculateBonus(OakItemType.Golden_DVD);
            for (let i = 1; i < tiles; i++) {
                const x = Rand.intBetween(0, App.game.underground.getSizeY() - 1);
                const y = Rand.intBetween(0, Underground.sizeX - 1);
                this.breakTile(x, y, 1);
            }
        }
    }
    static getRandomCoord(max, size) {
        return Rand.floor(max - size);
    }
    static canAddReward(x, y, reward) {
        if (Mine.alreadyHasRewardId(reward.id)) {
            return false;
        }
        this.rotateReward(reward);
        if (y + reward.space.length >= App.game.underground.getSizeY() || x + reward.space[0].length >= Underground.sizeX) {
            return false;
        }
        for (let i = 0; i < reward.space.length; i++) {
            for (let j = 0; j < reward.space[i].length; j++) {
                if (reward.space[i][j] !== 0) {
                    if (Mine.rewardGrid[i + y][j + x] !== 0) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
    static alreadyHasRewardId(id) {
        for (const row of Mine.rewardGrid) {
            for (const item of row) {
                if (item.value === id) {
                    return true;
                }
            }
        }
        return false;
    }
    static addReward(x, y, reward) {
        for (let i = 0; i < reward.space.length; i++) {
            for (let j = 0; j < reward.space[i].length; j++) {
                if (reward.space[i][j].value != 0) {
                    Mine.rewardGrid[i + y][j + x] = Object.assign(Object.assign({}, reward.space[i][j]), { revealed: 0 });
                }
            }
        }
        GameHelper.incrementObservable(Mine.itemsBuried);
        Mine.rewardNumbers.push(reward.id);
    }
    static rotateReward(reward) {
        let rotations = Rand.floor(4);
        while (rotations-- > 0) {
            reward.space = reward.space[0].map((val, index) => reward.space.map(row => row[index]).reverse());
        }
        const currentRotation = this.calculateRotation(reward);
        reward.space = reward.space.map(r => r.map(v => {
            v.rotations = currentRotation;
            return v;
        }));
        return reward;
    }
    static calculateRotation(reward) {
        let indexX = 0;
        const indexY = reward.space.findIndex(y => {
            indexX = y.findIndex(x => !x.x && !x.y);
            return indexX >= 0;
        });
        return (indexX ? 1 : 0) + (indexY ? 2 : 0);
    }
    static survey() {
        if (Mine.surveyResult()) {
            $('#mine-survey-result').tooltip('show');
            return;
        }
        const surveyCost = App.game.underground.getSurvey_Cost();
        if (App.game.underground.energy < surveyCost) {
            return;
        }
        const tiles = App.game.underground.getSurvey_Efficiency();
        for (let i = 0; i < tiles; i++) {
            const x = Rand.intBetween(0, this.getHeight() - 1);
            const y = Rand.intBetween(0, Underground.sizeX - 1);
            this.breakTile(x, y, 5);
        }
        App.game.underground.energy -= surveyCost;
        const rewards = Mine.rewardSummary();
        Mine.updatesurveyResult(rewards);
    }
    static rewardSummary() {
        return Mine.rewardNumbers.reduce((res, id) => {
            const reward = UndergroundItem.list.find(x => x.id == id);
            if (ItemList[reward.valueType]) {
                res.evoItems++;
            }
            else {
                switch (reward.valueType) {
                    case 'Scrap': {
                        res.totalValue += reward.value;
                        break;
                    }
                    case 'Mine Egg': {
                        res.fossils++;
                        break;
                    }
                    default: {
                        res.plates++;
                    }
                }
            }
            return res;
        }, { fossils: 0, plates: 0, evoItems: 0, totalValue: 0 });
    }
    static updatesurveyResult(summary) {
        const text = [];
        if (summary.fossils) {
            text.push(`Fossils: ${summary.fossils}`);
        }
        if (summary.evoItems) {
            text.push(`Evolution Items: ${summary.evoItems}`);
        }
        if (summary.plates) {
            text.push(`Digizoid/Plates: ${summary.plates}`);
        }
        text.push(`Diamond Value: ${summary.totalValue}`);
        Mine.surveyResult(text.join('<br>'));
        $('#mine-survey-result').tooltip('show');
    }
    static click(i, j) {
        if (Mine.toolSelected() == Mine.Tool.Hammer) {
            Mine.hammer(i, j);
        }
        else {
            Mine.chisel(i, j);
        }
    }
    static hammer(x, y) {
        if (App.game.underground.energy >= Underground.HAMMER_ENERGY) {
            if (x < 0 || y < 0) {
                return;
            }
            let hasMined = false;
            for (let i = -1; i < 2; i++) {
                for (let j = -1; j < 2; j++) {
                    if (Mine.grid[Mine.normalizeY(x + i)][Mine.normalizeX(y + j)]() > 0) {
                        hasMined = true;
                    }
                    this.breakTile(x + i, y + j, 1);
                }
            }
            if (hasMined) {
                App.game.underground.energy -= Underground.HAMMER_ENERGY;
            }
        }
    }
    static chisel(x, y) {
        if (Mine.grid[x][y]() > 0) {
            if (App.game.underground.energy >= Underground.CHISEL_ENERGY) {
                this.breakTile(x, y, 2);
                App.game.underground.energy -= Underground.CHISEL_ENERGY;
            }
        }
    }
    static bomb() {
        let tiles = App.game.underground.getBombEfficiency();
        if (App.game.underground.energy >= Underground.BOMB_ENERGY) {
            while (tiles-- > 0) {
                const x = Rand.intBetween(0, this.getHeight() - 1);
                const y = Rand.intBetween(0, Underground.sizeX - 1);
                this.breakTile(x, y, 2);
            }
            App.game.underground.energy -= Underground.BOMB_ENERGY;
        }
    }
    static skipLayer(shouldConfirm = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.skipsRemaining()) {
                return;
            }
            if (!shouldConfirm || (yield Notifier.confirm({
                title: 'Underground',
                message: 'Skip this mine layer?',
                type: NotificationConstants.NotificationOption.warning,
                confirm: 'skip',
            }))) {
                setTimeout(Mine.completed, 1500);
                Mine.loadingNewLayer = true;
                GameHelper.incrementObservable(this.skipsRemaining, -1);
            }
        });
    }
    static breakTile(_x, _y, layers = 1) {
        const x = Mine.normalizeY(_x);
        const y = Mine.normalizeX(_y);
        const newlayer = Math.max(0, Mine.grid[x][y]() - layers);
        Mine.grid[x][y](newlayer);
        const reward = Mine.rewardGrid[x][y];
        if (newlayer == 0 && reward != 0 && reward.revealed != 1) {
            reward.revealed = 1;
            const image = Underground.getMineItemById(reward.value).undergroundImage;
            $(`div[data-i=${x}][data-j=${y}]`).html(`<div class="mineReward size-${reward.sizeX}-${reward.sizeY} pos-${reward.x}-${reward.y} rotations-${reward.rotations}" style="background-image: url('${image}');"></div>`);
            Mine.checkItemsRevealed();
        }
    }
    static normalizeX(x) {
        return Math.min(Underground.sizeX - 1, Math.max(0, x));
    }
    static normalizeY(y) {
        return Math.min(this.getHeight() - 1, Math.max(0, y));
    }
    static getHeight() {
        return this.rewardGrid ? this.rewardGrid.length : 0;
    }
    static checkItemsRevealed() {
        for (let i = 0; i < Mine.rewardNumbers.length; i++) {
            if (Mine.checkItemRevealed(Mine.rewardNumbers[i])) {
                let amount = 1;
                const itemName = Underground.getMineItemById(Mine.rewardNumbers[i]).name;
                Notifier.notify({
                    message: `You found ${GameHelper.anOrA(itemName)} ${GameConstants.humanifyString(itemName)}`,
                    type: NotificationConstants.NotificationOption.success,
                });
                if (App.game.oakItems.isActive(OakItemType.Shiny_Mirror)) {
                    const giveDouble = App.game.oakItems.calculateBonus(OakItemType.Shiny_Mirror) / 100;
                    if (Rand.chance(giveDouble)) {
                        amount++;
                        Notifier.notify({
                            message: `You found an extra ${GameConstants.humanifyString(itemName)} in the Mine!`,
                            type: NotificationConstants.NotificationOption.success,
                            title: 'Treasure Scanner',
                            timeout: 4000,
                        });
                        if (Rand.chance(giveDouble)) {
                            amount++;
                            Notifier.notify({
                                message: `Lucky! You found another ${GameConstants.humanifyString(itemName)}!`,
                                type: NotificationConstants.NotificationOption.success,
                                title: 'Treasure Scanner',
                                timeout: 6000,
                            });
                            if (Rand.chance(giveDouble)) {
                                amount++;
                                Notifier.notify({
                                    message: `Jackpot! You found another ${GameConstants.humanifyString(itemName)}!`,
                                    type: NotificationConstants.NotificationOption.success,
                                    title: 'Treasure Scanner',
                                    timeout: 8000,
                                });
                            }
                        }
                    }
                }
                App.game.oakItems.use(OakItemType.Shiny_Mirror);
                Underground.gainMineItem(Mine.rewardNumbers[i], amount);
                GameHelper.incrementObservable(Mine.itemsFound);
                GameHelper.incrementObservable(App.game.statistics.junkyardItemsFound, amount);
                Mine.rewardNumbers.splice(i, 1);
                i--;
                Mine.checkCompleted();
            }
        }
    }
    static checkItemRevealed(id) {
        for (let i = 0; i < Underground.sizeX; i++) {
            for (let j = 0; j < this.getHeight(); j++) {
                if (Mine.rewardGrid[j][i] != 0) {
                    if (Mine.rewardGrid[j][i].value == id) {
                        if (Mine.rewardGrid[j][i].revealed === 0) {
                            return false;
                        }
                    }
                }
            }
        }
        App.game.oakItems.use(OakItemType.Full_Battery);
        return true;
    }
    static checkCompleted() {
        if (Mine.itemsFound() >= Mine.itemsBuried()) {
            // Don't resolve queued up calls to checkCompleted() until completed() is finished and sets loadingNewLayer to false
            if (Mine.loadingNewLayer == true) {
                return;
            }
            Mine.loadingNewLayer = true;
            setTimeout(Mine.completed, 1500);
            GameHelper.incrementObservable(App.game.statistics.junkyardLayersMined);
            if (this.skipsRemaining() < this.maxSkips) {
                GameHelper.incrementObservable(this.skipsRemaining);
            }
        }
    }
    static completed() {
        Notifier.notify({
            message: 'You dig deeper...',
            type: NotificationConstants.NotificationOption.info,
        });
        ko.cleanNode(document.getElementById('mineBody'));
        App.game.oakItems.use(OakItemType.Golden_DVD);
        Mine.loadMine();
        ko.applyBindings(null, document.getElementById('mineBody'));
    }
    static loadSavedMine(mine) {
        var _a, _b;
        this.grid = mine.grid.map(row => row.map(val => ko.observable(val))),
            this.rewardGrid = mine.rewardGrid;
        this.itemsFound(mine.itemsFound);
        this.itemsBuried(mine.itemsBuried);
        this.rewardNumbers = mine.rewardNumbers;
        this.loadingNewLayer = false;
        this.surveyResult((_a = mine.surveyResult) !== null && _a !== void 0 ? _a : this.surveyResult());
        this.skipsRemaining((_b = mine.skipsRemaining) !== null && _b !== void 0 ? _b : this.maxSkips);
        Underground.showMine();
        // Check if completed in case the mine was saved after completion and before creating a new mine
        // TODO: Remove setTimeout after TypeScript module migration is complete. Needed so that `App.game` is available
        setTimeout(Mine.checkCompleted, 0);
    }
    static save() {
        if (this.grid == null) {
            Mine.loadMine();
        }
        const mineSave = {
            grid: this.grid.map(row => row.map(val => val())),
            rewardGrid: this.rewardGrid,
            itemsFound: this.itemsFound(),
            itemsBuried: this.itemsBuried(),
            rewardNumbers: this.rewardNumbers,
            surveyResult: this.surveyResult(),
            skipsRemaining: this.skipsRemaining(),
        };
        return mineSave;
    }
}
Mine.maxSkips = 5;
Mine.itemsFound = ko.observable(0);
Mine.itemsBuried = ko.observable(0);
Mine.surveyResult = ko.observable(null);
Mine.skipsRemaining = ko.observable(Mine.maxSkips);
// 0 represents the Mine.Tool.Chisel but it's not loaded here yet.
Mine.toolSelected = ko.observable(0);
Mine.loadingNewLayer = true;
(function (Mine) {
    let Tool;
    (function (Tool) {
        Tool[Tool["Chisel"] = 0] = "Chisel";
        Tool[Tool["Hammer"] = 1] = "Hammer";
    })(Tool = Mine.Tool || (Mine.Tool = {}));
})(Mine || (Mine = {}));
///<reference path="../../declarations/requirements/Requirement.d.ts"/>
class StoneUnlockedRequirement extends Requirement {
    constructor(stoneType, option = GameConstants.AchievementOption.more) {
        const stone = ItemList[GameConstants.StoneType[stoneType]];
        let requiredRegion = GameConstants.Region.adventure01;
        if (stone) {
            requiredRegion = stone.unlockedRegion;
        }
        super(requiredRegion, option);
    }
    getProgress() {
        return Math.min(player.highestRegion(), this.requiredValue);
    }
    hint() {
        return `You need to reach the ${GameConstants.Region[this.requiredValue]} region.`;
    }
}
class UndergroundUpgrade extends Upgrade {
    constructor(name, displayName, maxLevel, costList, bonusList, increasing = true) {
        super(name, displayName, maxLevel, costList, bonusList, increasing);
    }
    canBuy() {
        return super.canBuy() && App.game.keyItems.hasKeyItem(KeyItemType.Explorer_kit);
    }
}
(function (UndergroundUpgrade) {
    let Upgrades;
    (function (Upgrades) {
        Upgrades[Upgrades["Energy_Max"] = 0] = "Energy_Max";
        Upgrades[Upgrades["Items_Max"] = 1] = "Items_Max";
        Upgrades[Upgrades["Items_Min"] = 2] = "Items_Min";
        Upgrades[Upgrades["Energy_Gain"] = 3] = "Energy_Gain";
        Upgrades[Upgrades["Energy_Regen_Time"] = 4] = "Energy_Regen_Time";
        Upgrades[Upgrades["Daily_Deals_Max"] = 5] = "Daily_Deals_Max";
        Upgrades[Upgrades["Bomb_Efficiency"] = 6] = "Bomb_Efficiency";
        Upgrades[Upgrades["Survey_Cost"] = 7] = "Survey_Cost";
        Upgrades[Upgrades["Survey_Efficiency"] = 8] = "Survey_Efficiency";
        Upgrades[Upgrades["NewYLayer"] = 9] = "NewYLayer";
    })(Upgrades = UndergroundUpgrade.Upgrades || (UndergroundUpgrade.Upgrades = {}));
})(UndergroundUpgrade || (UndergroundUpgrade = {}));
/// <reference path="../../declarations/GameHelper.d.ts" />
///<reference path="../underground/UndergroundUpgrade.ts"/>
class Underground {
    constructor() {
        this.name = 'Underground';
        this.saveKey = 'underground';
        this._energy = ko.observable(Underground.BASE_ENERGY_MAX);
        this.upgradeList = [];
    }
    initialize() {
        this.upgradeList = [
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Energy_Max, 'Max Energy', 10, AmountFactory.createArray(GameHelper.createArray(50, 500, 50), GameConstants.Currency.diamond), GameHelper.createArray(0, 100, 10)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Items_Max, 'Max items', 4, AmountFactory.createArray(GameHelper.createArray(200, 800, 200), GameConstants.Currency.diamond), GameHelper.createArray(0, 4, 1)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Items_Min, 'Min Items', 4, AmountFactory.createArray(GameHelper.createArray(500, 5000, 1500), GameConstants.Currency.diamond), GameHelper.createArray(0, 4, 1)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Energy_Gain, 'Energy restored', 17, AmountFactory.createArray(GameHelper.createArray(100, 1700, 100), GameConstants.Currency.diamond), GameHelper.createArray(0, 17, 1)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Energy_Regen_Time, 'Energy regen time', 20, AmountFactory.createArray(GameHelper.createArray(20, 400, 20), GameConstants.Currency.diamond), GameHelper.createArray(0, 20, 1), false),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Daily_Deals_Max, 'Daily deals', 2, AmountFactory.createArray(GameHelper.createArray(150, 300, 150), GameConstants.Currency.diamond), GameHelper.createArray(0, 2, 1)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Bomb_Efficiency, 'Bomb Efficiency', 5, AmountFactory.createArray(GameHelper.createArray(50, 250, 50), GameConstants.Currency.diamond), GameHelper.createArray(0, 10, 2)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Survey_Cost, 'Survey Cost', 5, AmountFactory.createArray(GameHelper.createArray(50, 250, 50), GameConstants.Currency.diamond), GameHelper.createArray(0, 5, 1), false),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Survey_Efficiency, 'Survey Efficiency', 4, AmountFactory.createArray(GameHelper.createArray(100, 400, 100), GameConstants.Currency.diamond), GameHelper.createArray(0, 4, 1)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.NewYLayer, 'Larger underground, +1 Max Item', 1, AmountFactory.createArray(GameHelper.createArray(3000, 3000, 3000), GameConstants.Currency.diamond), GameHelper.createArray(0, 1, 1)),
        ];
    }
    update(delta) {
    }
    getMaxEnergy() {
        return Underground.BASE_ENERGY_MAX + this.getUpgrade(UndergroundUpgrade.Upgrades.Energy_Max).calculateBonus();
    }
    getMaxItems() {
        return Underground.BASE_ITEMS_MAX + this.getUpgrade(UndergroundUpgrade.Upgrades.Items_Max).calculateBonus() + this.getUpgrade(UndergroundUpgrade.Upgrades.NewYLayer).calculateBonus();
    }
    getEnergyGain() {
        return Math.round(Underground.BASE_ENERGY_GAIN + this.getUpgrade(UndergroundUpgrade.Upgrades.Energy_Gain).calculateBonus() * FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.H_Earth_Spirit));
    }
    getEnergyRegenTime() {
        return Math.round(Underground.BASE_ENERGY_REGEN_TIME - this.getUpgrade(UndergroundUpgrade.Upgrades.Energy_Regen_Time).calculateBonus() * FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.H_Earth_Spirit));
    }
    getDailyDealsMax() {
        return Underground.BASE_DAILY_DEALS_MAX + this.getUpgrade(UndergroundUpgrade.Upgrades.Daily_Deals_Max).calculateBonus();
    }
    getBombEfficiency() {
        return Underground.BASE_BOMB_EFFICIENCY + this.getUpgrade(UndergroundUpgrade.Upgrades.Bomb_Efficiency).calculateBonus();
    }
    getSurvey_Cost() {
        return Underground.SURVEY_ENERGY - this.getUpgrade(UndergroundUpgrade.Upgrades.Survey_Cost).calculateBonus();
    }
    getSurvey_Efficiency() {
        return Underground.BASE_SURVEY_CHARGE_EFFICIENCY + this.getUpgrade(UndergroundUpgrade.Upgrades.Survey_Efficiency).calculateBonus();
    }
    getSizeY() {
        return Underground.sizeY + this.getUpgrade(UndergroundUpgrade.Upgrades.NewYLayer).calculateBonus();
    }
    getMinItems() {
        return Underground.BASE_ITEMS_MIN + this.getUpgrade(UndergroundUpgrade.Upgrades.Items_Min).calculateBonus();
    }
    getUpgrade(upgrade) {
        for (let i = 0; i < this.upgradeList.length; i++) {
            if (this.upgradeList[i].name == upgrade) {
                return this.upgradeList[i];
            }
        }
    }
    static showMine() {
        let html = '';
        for (let i = 0; i < Mine.grid.length; i++) {
            html += '<div class="row">';
            for (let j = 0; j < Mine.grid[0].length; j++) {
                html += Underground.mineSquare(Mine.grid[i][j](), i, j);
            }
            html += '</div>';
        }
        $('#mineBody').html(html);
    }
    static mineSquare(amount, i, j) {
        if (Mine.rewardGrid[i][j] != 0 && Mine.grid[i][j]() == 0) {
            Mine.rewardGrid[i][j].revealed = 1;
            const image = Underground.getMineItemById(Mine.rewardGrid[i][j].value).undergroundImage;
            return `<div data-bind='css: Underground.calculateCssClass(${i},${j})' data-i='${i}' data-j='${j}'><div class="mineReward size-${Mine.rewardGrid[i][j].sizeX}-${Mine.rewardGrid[i][j].sizeY} pos-${Mine.rewardGrid[i][j].x}-${Mine.rewardGrid[i][j].y} rotations-${Mine.rewardGrid[i][j].rotations}" style="background-image: url('${image}');"></div></div>`;
        }
        else {
            return `<div data-bind='css: Underground.calculateCssClass(${i},${j})' data-i='${i}' data-j='${j}'></div>`;
        }
    }
    static calculateCssClass(i, j) {
        return `col-sm-1 rock${Math.max(Mine.grid[i][j](), 0)} mineSquare ${Mine.Tool[Mine.toolSelected()]}Selected`;
    }
    static gainMineItem(id, num = 1) {
        const index = player.mineInventoryIndex(id);
        const item = Underground.getMineItemById(id);
        if (item.isStone()) {
            const evostone = ItemList[item.valueType];
            evostone.gain(num);
            return;
        }
        if (index == -1) {
            const tempItem = {
                name: item.name,
                amount: ko.observable(num),
                id: id,
                value: item.value,
                valueType: item.valueType,
                sellLocked: ko.observable(false),
            };
            player.mineInventory.push(tempItem);
        }
        else {
            const amt = player.mineInventory()[index].amount();
            player.mineInventory()[index].amount(amt + num);
            this.sortMineItems(this.lastPropSort, false);
        }
    }
    static getDiamondNetWorth() {
        let diamondNetWorth = 0;
        player.mineInventory().forEach(mineItem => {
            if (mineItem.valueType == 'Scrap') {
                diamondNetWorth += mineItem.value * mineItem.amount();
            }
        });
        return diamondNetWorth + App.game.wallet.currencies[GameConstants.Currency.diamond]();
    }
    static getCumulativeValues() {
        const cumulativeValues = {};
        player.mineInventory().forEach(mineItem => {
            if (mineItem.valueType != 'Mine Egg' && mineItem.amount() > 0 && !mineItem.sellLocked()) {
                let cumulativeValueOfType = cumulativeValues[mineItem.valueType];
                if (!cumulativeValueOfType) {
                    cumulativeValueOfType = { cumulativeValue: 0, imgSrc: null };
                    cumulativeValues[mineItem.valueType] = cumulativeValueOfType;
                }
                if (mineItem.valueType == 'Scrap') {
                    cumulativeValueOfType.imgSrc = 'assets/images/underground/diamond.svg';
                }
                else {
                    cumulativeValueOfType.imgSrc = Underground.getMineItemById(mineItem.id).image;
                }
                cumulativeValueOfType.cumulativeValue += mineItem.value * mineItem.amount();
            }
        });
        return cumulativeValues;
    }
    static getMineItemByName(name) {
        return UndergroundItem.list.find(i => i.name == name);
    }
    static getMineItemById(id) {
        for (const item of UndergroundItem.list) {
            if (item.id == id) {
                return item;
            }
        }
    }
    gainEnergy() {
        if (this.energy < this.getMaxEnergy()) {
            const oakMultiplier = App.game.oakItems.calculateBonus(OakItemType.Full_Battery);
            this.energy = Math.min(this.getMaxEnergy(), this.energy + (oakMultiplier * this.getEnergyGain()));
            if (this.energy === this.getMaxEnergy()) {
                Notifier.notify({
                    message: 'Your mining energy has reached maximum capacity!',
                    type: NotificationConstants.NotificationOption.success,
                    timeout: 1e4,
                    sound: NotificationConstants.NotificationSound.General.underground_energy_full,
                    setting: NotificationConstants.NotificationSetting.General.underground_energy_full,
                });
            }
        }
    }
    gainEnergyThroughItem(item) {
        // Restore a percentage of maximum energy
        const effect = GameConstants.EnergyRestoreEffect[GameConstants.EnergyRestoreSize[item]];
        const gain = Math.min(this.getMaxEnergy() - this.energy, effect * this.getMaxEnergy());
        this.energy = this.energy + gain;
        Notifier.notify({
            message: `You restored ${gain} mining energy!`,
            type: NotificationConstants.NotificationOption.success,
            setting: NotificationConstants.NotificationSetting.General.underground_energy_restore,
        });
    }
    static sortMineItems(prop, flip = true) {
        const prevEl = document.querySelector(`[data-undergroundsort=${Underground.lastPropSort}]`);
        const nextEl = prop == this.lastPropSort ? prevEl : document.querySelector(`[data-undergroundsort=${prop}]`);
        // If new sort by, update old sort by
        if (prop != this.lastPropSort) {
            // Remove sort direction from previous element
            if (prevEl) {
                prevEl.textContent = this.lastPropSort;
            }
            this.lastPropSort = prop;
        }
        else if (flip) {
            // Flip sort direction
            this.sortDirection *= -1;
        }
        // Update element text to dispaly sort direction
        if (nextEl) {
            nextEl.textContent = `${prop} ${this.sortDirection > 0 ? '▴' : '▾'}`;
        }
        player.mineInventory.sort((a, b) => {
            switch (prop) {
                case 'Amount':
                    return (a.amount() - b.amount()) * this.sortDirection;
                case 'Value':
                    return (a.value - b.value) * this.sortDirection;
                case 'Item':
                    return a.name > b.name ? 1 * this.sortDirection : -1 * this.sortDirection;
            }
        });
    }
    static sellMineItem(id, amount = 1) {
        for (let i = 0; i < player.mineInventory().length; i++) {
            const item = player.mineInventory()[i];
            if (item.id == id) {
                if (item.sellLocked()) {
                    Notifier.notify({
                        message: 'Item is locked for selling, you first have to unlock it.',
                        type: NotificationConstants.NotificationOption.warning,
                    });
                    return;
                }
                if (item.valueType == 'Mine Egg') {
                    amount = 1;
                }
                const curAmt = item.amount();
                if (curAmt > 0) {
                    const sellAmt = Math.min(curAmt, amount);
                    const success = Underground.gainProfit(item, sellAmt);
                    if (success) {
                        player.mineInventory()[i].amount(curAmt - sellAmt);
                        this.sortMineItems(this.lastPropSort, false);
                    }
                    return;
                }
            }
        }
    }
    static sellAllMineItems() {
        for (let i = 0; i < player.mineInventory().length; i++) {
            const item = player.mineInventory()[i];
            if (!item.sellLocked() && item.valueType != 'Mine Egg') {
                Underground.sellMineItem(item.id, Infinity);
            }
        }
        $('#mineSellAllTreasuresModal').modal('hide');
    }
    static setSellLockOfMineItem(id, sellLocked) {
        for (let i = 0; i < player.mineInventory().length; i++) {
            const item = player.mineInventory()[i];
            if (item.id == id) {
                player.mineInventory()[i].sellLocked(sellLocked);
                return;
            }
        }
    }
    static gainProfit(item, amount) {
        let success = true;
        switch (item.valueType) {
            case 'Scrap':
                App.game.wallet.gainDiamonds(item.value * amount);
                break;
            case 'Health':
                App.game.wallet.gainHealthcoin(item.value * amount);
                break;
            case 'Attack':
                App.game.wallet.gainAttackcoin(item.value * amount);
                break;
            case 'Defence':
                App.game.wallet.gainDefencecoin(item.value * amount);
                break;
            case 'Speed':
                App.game.wallet.gainSpeedcoin(item.value * amount);
                break;
            case 'Magic':
                App.game.wallet.gainMagiccoin(item.value * amount);
                break;
            case 'Intellect':
                App.game.wallet.gainIntcoin(item.value * amount);
                break;
            case 'Mine Egg':
                if (!App.game.breeding.hasFreeEggSlot()) {
                    return false;
                }
                success = App.game.breeding.gainEgg(App.game.breeding.createFossilEgg(item.name));
                break;
            default:
                const type = item.valueType.charAt(0).toUpperCase() + item.valueType.slice(1); //Capitalizes string
                const typeNum = PokemonType[type];
                App.game.gems.gainGems(GameConstants.PLATE_VALUE * amount, typeNum);
        }
        return success;
    }
    openUndergroundModal() {
        if (this.canAccess()) {
            $('#mineModal').modal('show');
        }
        else {
            Notifier.notify({
                message: 'You need the Explorer Kit to access this location.\n<i>Check out the shop at Whamon\'s Gulf</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    openUndergroundSellAllModal() {
        if (this.canAccess()) {
            if (Object.keys(Underground.getCumulativeValues()).length == 0) {
                Notifier.notify({
                    message: 'You have no items selected for selling.',
                    type: NotificationConstants.NotificationOption.warning,
                });
                return;
            }
            $('#mineSellAllTreasuresModal').modal('show');
        }
        else {
            Notifier.notify({
                message: 'You need the Explorer Kit to access this location.\n<i>Check out the shop at Whamon\'s Gulf</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    canAccess() {
        return MapHelper.accessToRoute(11, 0) && App.game.keyItems.hasKeyItem(KeyItemType.Explorer_kit);
    }
    calculateItemEffect(item) {
        const effect = GameConstants.EnergyRestoreEffect[GameConstants.EnergyRestoreSize[item]];
        return effect * this.getMaxEnergy();
    }
    fromJSON(json) {
        if (!json) {
            console.warn('Underground not loaded.');
            return;
        }
        const upgrades = json['upgrades'];
        for (const item in UndergroundUpgrade.Upgrades) {
            if (isNaN(Number(item))) {
                this.getUpgrade(UndergroundUpgrade.Upgrades[item]).level = upgrades[item] || 0;
            }
        }
        this.energy = json['energy'] || 0;
        const mine = json['mine'];
        if (mine) {
            Mine.loadSavedMine(mine);
        }
        else {
            Mine.loadMine();
        }
    }
    toJSON() {
        const undergroundSave = {};
        const upgradesSave = {};
        for (const item in UndergroundUpgrade.Upgrades) {
            if (isNaN(Number(item))) {
                upgradesSave[item] = this.getUpgrade(UndergroundUpgrade.Upgrades[item]).level;
            }
        }
        undergroundSave['upgrades'] = upgradesSave;
        undergroundSave['energy'] = this.energy;
        undergroundSave['mine'] = Mine.save();
        return undergroundSave;
    }
    // Knockout getters/setters
    get energy() {
        return this._energy();
    }
    set energy(value) {
        this._energy(value);
    }
}
Underground.energyTick = ko.observable(60);
Underground.counter = 0;
Underground.sortDirection = -1;
Underground.lastPropSort = 'none';
Underground.rewardCssClass = ko.pureComputed(() => {
    return `col-sm-1 mineReward mineSquare ${Mine.Tool[Mine.toolSelected()]}Selected`;
});
Underground.netWorthTooltip = ko.pureComputed(() => {
    let nMineItems = 0;
    let nFossils = 0;
    let nPlates = 0;
    player.mineInventory().forEach(mineItem => {
        if (mineItem.valueType == 'Scrap') {
            nMineItems += mineItem.amount();
        }
        else if (mineItem.valueType == 'Mine Egg') {
            nFossils += mineItem.amount();
        }
        else {
            nPlates += mineItem.amount();
        }
    });
    return `<u>Owned:</u><br>Mine items: ${nMineItems.toLocaleString('en-US')}<br>Fossils: ${nFossils.toLocaleString('en-US')}<br>Plates: ${nPlates.toLocaleString('en-US')}`;
});
$(document).ready(() => {
    $('body').on('click', '.mineSquare', function () {
        Mine.click(parseInt(this.dataset.i, 10), parseInt(this.dataset.j, 10));
    });
});
(function (Underground) {
    Underground.BASE_ENERGY_MAX = 50;
    Underground.BASE_ITEMS_MAX = 3;
    Underground.BASE_ITEMS_MIN = 1;
    Underground.BASE_ENERGY_GAIN = 3;
    Underground.BASE_ENERGY_REGEN_TIME = 60;
    Underground.BASE_DAILY_DEALS_MAX = 3;
    Underground.BASE_BOMB_EFFICIENCY = 10;
    Underground.BASE_SURVEY_CHARGE_EFFICIENCY = 1;
    Underground.sizeX = 25;
    Underground.sizeY = 12;
    Underground.CHISEL_ENERGY = 1;
    Underground.HAMMER_ENERGY = 3;
    Underground.BOMB_ENERGY = 10;
    Underground.SURVEY_ENERGY = 15;
})(Underground || (Underground = {}));
///<reference path="../../declarations/requirements/MaxRegionRequirement.d.ts"/>
///<reference path="StoneUnlockedRequirement.ts"/>
class UndergroundItem {
    constructor(name, id, space, value = 1, valueType = 'Scrap', requirement) {
        this.name = name;
        this.id = id;
        this.value = value;
        this.valueType = valueType;
        this.requirement = requirement;
        this.space = space.map((r, y) => r.map((v, x) => ({
            sizeX: r.length,
            sizeY: space.length,
            x,
            y,
            value: v ? this.id : 0,
            rotations: 0,
        })));
    }
    static addItem(name, id, space, value = 1, valueType = 'Scrap', requirement) {
        UndergroundItem.list.push(new UndergroundItem(name, id, space, value, valueType, requirement));
    }
    // Returns a random unlocked item
    static getRandomItem() {
        const unlockedItems = UndergroundItem.list.filter(i => i.isUnlocked());
        return Rand.fromArray(unlockedItems) || UndergroundItem.list[0];
    }
    static getFullResourceName(valuetype, amt) {
        if (valuetype != 'Scrap' && amt >= 50) {
            valuetype += ' chip';
        }
        if (valuetype != 'Scrap' && amt >= 5 && amt <= 5) {
            valuetype += ' coin';
        }
        if (amt > 1) {
            valuetype += 's';
        }
        return GameConstants.humanifyString(valuetype);
    }
    isUnlocked() {
        return this.requirement ? this.requirement.isCompleted() : true;
    }
    isStone() {
        return ItemList[this.valueType] instanceof EvolutionStone;
    }
    get displayName() {
        return this.name;
    }
    get image() {
        // Have to add extra logic here since images are all over the place in location and naming standards
        // Maybe one day we refactor the item system to be cleaner
        if (this.isStone()) {
            const evostone = ItemList[this.valueType];
            return evostone.image;
        }
        else if (this.valueType == 'Mine Egg') {
            return `assets/images/breeding/${this.name}.png`;
        }
        else {
            return `assets/images/items/underground/${this.name}.png`;
        }
    }
    get undergroundImage() {
        return `assets/images/underground/${this.name}.png`;
    }
}
UndergroundItem.list = [];
// Diamond Items
UndergroundItem.addItem('Black Digitron', 1, [[1, 0, 0, 0, 1], [1, 1, 1, 1, 1], [1, 0, 0, 0, 1]], 3);
UndergroundItem.addItem('Evil Mark', 2, [[0, 1, 0], [1, 1, 1], [0, 1, 0]], 5);
UndergroundItem.addItem('Guilmon Bread', 3, [[1, 1, 1], [0, 1, 0]], 2);
UndergroundItem.addItem('Broken Digivice', 4, [[1, 1, 1], [1, 1, 1], [1, 1, 1]], 4);
UndergroundItem.addItem('Black Gear', 5, [[1, 1, 1], [1, 1, 1], [1, 1, 1]], 2);
UndergroundItem.addItem('Digicores', 6, [[1, 1], [1, 0]], 10);
UndergroundItem.addItem('Holy Ring', 7, [[1, 1, 1], [1, 1, 1]], 6);
UndergroundItem.addItem('XAntibody', 8, [[1, 1], [1, 1]], 4);
UndergroundItem.addItem('Empty Tag', 9, [[1, 1, 1, 1], [1, 1, 1, 1]], 3);
UndergroundItem.addItem('Dreamy Digizoid', 10, [[0, 0, 1, 0], [1, 1, 1, 0], [0, 1, 1, 1], [0, 1, 0, 0]], 5, 'Magic');
UndergroundItem.addItem('Rush Digizoid', 11, [[0, 1, 0, 0], [0, 1, 1, 1], [1, 1, 1, 0], [0, 0, 1, 0]], 5, 'Speed');
UndergroundItem.addItem('Vigor Digizoid', 12, [[1, 0, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1]], 5, 'Health');
UndergroundItem.addItem('Sage Digizoid', 13, [[0, 1, 0, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 5, 'Intellect');
UndergroundItem.addItem('Guard Digizoid', 14, [[0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [1, 0, 0, 1]], 5, 'Defence');
UndergroundItem.addItem('Rage Digizoid', 15, [[0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [1, 0, 0, 1]], 5, 'Attack');
UndergroundItem.addItem('Gold Digizoid', 16, [[1, 1, 1], [1, 1, 1], [1, 0, 1]], 2);
// Gem Plates
UndergroundItem.addItem('Nightmare Plate', 100, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'dark');
UndergroundItem.addItem('Release Plate', 101, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'free');
UndergroundItem.addItem('Nature Plate', 102, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'earth');
UndergroundItem.addItem('Cure Plate', 103, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'vaccine');
UndergroundItem.addItem('Roar Plate', 104, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'fire');
UndergroundItem.addItem('Code Plate', 106, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'data');
UndergroundItem.addItem('Simple Plate', 107, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'neutral');
UndergroundItem.addItem('Jungle Plate', 108, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'plant');
UndergroundItem.addItem('Trojan Plate', 109, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'virus');
UndergroundItem.addItem('Guardian Plate', 110, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'wind');
UndergroundItem.addItem('Deep Plate', 111, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'water');
UndergroundItem.addItem('Empire Plate', 115, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'electric');
UndergroundItem.addItem('Buster Plate', 116, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'light');
// Fossils
UndergroundItem.addItem('Hikari Fossil', 200, [[0, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 0]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.hoenn));
UndergroundItem.addItem('Yami Fossil', 201, [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 1, 1, 1, 0]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.sinnoh));
UndergroundItem.addItem('Tsuchi Fossil', 202, [[0, 1, 1, 1], [0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 1, 1], [0, 1, 1, 1]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.hoenn));
UndergroundItem.addItem('Hono Fossil', 203, [[1, 1, 1, 0, 0], [1, 1, 1, 1, 0], [0, 1, 1, 1, 1], [0, 0, 1, 1, 1]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.hoenn));
UndergroundItem.addItem('Mizu Fossil', 204, [[0, 1, 1, 1, 0], [1, 1, 1, 1, 0], [0, 1, 1, 1, 1], [0, 1, 1, 1, 0]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.sinnoh));
UndergroundItem.addItem('Kaze Fossil', 205, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [0, 1, 1, 0]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.sinnoh));
UndergroundItem.addItem('Hagane Fossil', 206, [[1, 1, 1, 1, 0], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 1, 1, 1, 1]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.unova));
UndergroundItem.addItem('Kori Fossil', 207, [[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [1, 1, 1, 1, 0], [1, 1, 1, 0, 0]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.unova));
UndergroundItem.addItem('Ikazuchi Fossil', 208, [[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 0]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.kalos));
UndergroundItem.addItem('Ki Fossil', 209, [[1, 1, 1, 0, 0], [1, 1, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 0]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.kalos));
// Evolution Stones
UndergroundItem.addItem('Courage Digimental', 300, [[1, 1, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1]], 1, GameConstants.StoneType[GameConstants.StoneType.Courage_Digimental]);
UndergroundItem.addItem('Sincerity Digimental', 301, [[0, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]], 1, GameConstants.StoneType[GameConstants.StoneType.Sincerity_Digimental]);
UndergroundItem.addItem('Knowledge Digimental', 302, [[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]], 1, GameConstants.StoneType[GameConstants.StoneType.Knowledge_Digimental]);
UndergroundItem.addItem('Purity Digimental', 303, [[0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [1, 1, 1, 1, 1]], 1, GameConstants.StoneType[GameConstants.StoneType.Purity_Digimental]);
UndergroundItem.addItem('Hope Digimental', 304, [[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]], 1, GameConstants.StoneType[GameConstants.StoneType.Hope_Digimental]);
UndergroundItem.addItem('Love Digimental', 305, [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 1, GameConstants.StoneType[GameConstants.StoneType.Love_Digimental]);
UndergroundItem.addItem('Friendship Digimental', 306, [[0, 0, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 0]], 1, GameConstants.StoneType[GameConstants.StoneType.Friendship_Digimental]);
UndergroundItem.addItem('Light Digimental', 307, [[0, 1, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1]], 1, GameConstants.StoneType[GameConstants.StoneType.Light_Digimental]);
UndergroundItem.addItem('Fate Digimental', 308, [[0, 1, 1], [1, 1, 1], [1, 1, 0], [1, 1, 0]], 1, GameConstants.StoneType[GameConstants.StoneType.Fate_Digimental]);
UndergroundItem.addItem('Miracles Digimental', 309, [[0, 1, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1]], 1, GameConstants.StoneType[GameConstants.StoneType.Miracles_Digimental]);
UndergroundItem.addItem('Kindness Digimental',   310, [[0,1,1,1,0], [1,1,1,1,1], [1,1,1,1,1], [0,1,1,1,1]], 1, GameConstants.StoneType[GameConstants.StoneType.Kindness_Digimental]);
/*
To update this type when adding new items:

Open the game, and run the following code in the browser console

copy(`type ItemNameType
    = ${[...new Set(Object.values(ItemList).map(i => i.name))].map(i => `'${i.replace(/'/g, "\\'")}'`).join('\n    | ')};`);

Replace the everything in this file (except for this comment) with what was copied
*/
class Preload {
    static itemLoading(item = 0) {
        this.itemsToLoad.push(item);
        this.updateProgressBar();
    }
    static itemLoaded(item = 0) {
        this.itemsLoaded.push(item);
        this.updateProgressBar();
    }
    static itemErrored(item = 0) {
        this.itemsErrored.push(item);
        this.updateProgressBar();
    }
    static updateProgressBar() {
        const toLoad = this.itemsToLoad.length;
        const loaded = this.itemsLoaded.length;
        const errored = this.itemsErrored.length;
        // Update the progress bar
        const progressBarEl = document.getElementById('preload-progress-bar');
        progressBarEl.style.width = `${(loaded + errored) / toLoad * 100}%`;
        // Update the text
        const progressTextEl = document.getElementById('preload-progress-text');
        progressTextEl.innerText = `${loaded + errored} / ${toLoad}`;
    }
    static hideSplashScreen(fast = false) {
        $('#game').removeClass('loading');
        if (fast) {
            $('#loader').hide();
        }
        else {
            $('#loader').fadeOut('slow');
        }
        // Remove the splash screen
        setTimeout(() => {
            $('#loader').remove();
        }, 1000);
    }
    static load(skipWait = false) {
        console.log(`[${GameConstants.formatDate(new Date())}] %cPreloading Images..`, 'color:#8e44ad;font-weight:900;');
        if (skipWait) {
            return new Promise(resolve => {
                //If you want to skip waiting, resolve immediately
                resolve();
                // Preload.loadTowns();
                // Preload.loadUndergroundItems();
                // Preload.loadMap();
                // Preload.loadPokemon(),
                Preload.hideSplashScreen(true);
            });
        }
        else {
            return new Promise(resolve => {
                // Incase something is taking too long to load
                const forceLoad = setTimeout(() => {
                    console.log(`[${GameConstants.formatDate(new Date())}] %cPreloading images taking too long, Skipping..`, 'color:#c0392b;font-weight:900;');
                    resolve();
                }, GameConstants.MAX_LOAD_TIME);
                Promise.all([
                    // Preload.loadTowns(),
                    // Preload.loadUndergroundItems(),
                    // Preload.loadMap(),
                    // Preload.loadPokemon(),
                    Preload.minimumTime(),
                ]).then(() => {
                    clearTimeout(forceLoad);
                    console.log(`[${GameConstants.formatDate(new Date())}] %cPreloaded images`, 'color:#2ecc71;font-weight:900;');
                    // Give the progress bar a little bit of time to finish the animation
                    setTimeout(() => {
                        resolve();
                    }, 600);
                }).catch((reason => {
                    console.log(`[${GameConstants.formatDate(new Date())}] %cPreload images failed..`, 'color:#c0392b;font-weight:900;');
                    console.error('Preload images failed:', reason);
                    clearTimeout(forceLoad);
                    resolve();
                }));
            });
        }
    }
    static loadTowns() {
        var _a;
        const p = Array();
        for (const name in TownList) {
            // Skip unreleased towns unless a feature flag has enabled them
            if (!((_a = window.featureFlags) === null || _a === void 0 ? void 0 : _a.preloadUnreleasedTowns) && TownList[name].region > GameConstants.MAX_AVAILABLE_REGION) {
                continue;
            }
            // Skip fake towns that exist for the Elite
            if (name.includes('Data') || name.includes('Champion')) {
                continue;
            }
            Preload.itemLoading(name);
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => {
                    Preload.itemLoaded(`town-${name}`);
                    resolve();
                };
                img.onerror = () => {
                    Preload.itemErrored(`town-${name}`);
                    console.warn('Failed to load town image:', name);
                    resolve();
                };
                img.src = `assets/images/towns/${name}.png`;
            }));
        }
        return Promise.all(p);
    }
    static loadPokemon() {
        const p = Array();
        for (let i = 1; i <= GameConstants.MaxIDPerRegion[GameConstants.MAX_AVAILABLE_REGION]; i++) {
            Preload.itemLoading(i);
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => {
                    Preload.itemLoaded(i);
                    resolve();
                };
                img.onerror = () => {
                    Preload.itemErrored(i);
                    console.warn('Failed to load image for pokemon:', i);
                    resolve();
                };
                img.src = `assets/images/pokemon/${i}.png`;
            }));
        }
        return Promise.all(p);
    }
    static loadUndergroundItems() {
        const p = Array();
        UndergroundItem.list.forEach(item => {
            Preload.itemLoading(item.id);
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => {
                    Preload.itemLoaded(item.id);
                    resolve();
                };
                img.onerror = () => {
                    Preload.itemErrored(item.id);
                    console.warn('Failed to load image for Underground item:', item.name);
                    resolve();
                };
                img.src = item.undergroundImage;
            }));
        });
        return Promise.all(p);
    }
    static minimumTime() {
        return new Promise(resolve => {
            setTimeout(() => {
                resolve();
            }, GameConstants.MIN_LOAD_TIME);
        });
    }
    static loadMap() {
        // TODO: preload the map background images?
        /*
        return new Promise<number>(resolve => {
            let img = new Image();
            img.onload = () => {
                document.querySelector('image')
                    .setAttributeNS('http://www.w3.org/1999/xlink', 'href', 'assets/images/kanto.png');
                resolve();
            };
            img.onerror = () => {
                console.log('Failed to load map image:', name);
                resolve();
            }
            img.src = 'assets/images/kanto.png';
        })
        */
    }
}
Preload.itemsToLoad = [];
Preload.itemsLoaded = [];
Preload.itemsErrored = [];
/// <reference path="../../declarations/routes/Routes.d.ts"/>
/// <reference path="../../declarations/enums/Badges.d.ts"/>
/// <reference path="../../declarations/weather/WeatherType.d.ts"/>
/// <reference path="../../declarations/requirements/WeatherRequirement.d.ts"/>
/// <reference path="../../declarations/subRegion/SubRegions.d.ts"/>
/*
KANTO
*/
Routes.add(new RegionRoute('Primary Path', GameConstants.Region.adventure01, 1, new RoutePokemon({
    land: ['Pitchmon', 'Yuramon', 'Nyokimon'],
})));
Routes.add(new RegionRoute('Digital Forest', GameConstants.Region.adventure01, 22, new RoutePokemon({
    land: ['Triceramon', 'Vermillimon', 'Metal Etemon', 'Blossomon', 'Zassoumon'],
    water: ['Mega Seadramon', 'Seadramon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pinochimon\'s House')),]));
Routes.add(new RegionRoute('Rookie Woods', GameConstants.Region.adventure01, 2, new RoutePokemon({
    land: ['Tanemon', 'Mochimon', 'Pukamon', 'Pyocomon'],
}), [new RouteKillRequirement(10, GameConstants.Region.adventure01, 1)]));
Routes.add(new RegionRoute('Trolley Lake', GameConstants.Region.adventure01, 3, new RoutePokemon({
    land: ['Numemon', 'Mushmon', 'Betamon', 'Kunemon'],
    water: ['Ganimon', 'Betamon'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.adventure01, 2),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Coelamon Beach')),
]));
Routes.add(new RegionRoute('PowerLine Sands', GameConstants.Region.adventure01, 4, new RoutePokemon({
    land: ['Gottsumon', 'Modoki Betamon', 'Goburimon', 'Numemon'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.adventure01, 3),
]));
Routes.add(new RegionRoute('Numemon Sewers', GameConstants.Region.adventure01, 5, new RoutePokemon({
    land: ['Numemon', 'Betamon', 'Otamamon', 'Tyumon'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.adventure01, 4),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Andromon\'s Factory')),
]));
Routes.add(new RegionRoute('Infinity Climb', GameConstants.Region.adventure01, 6, new RoutePokemon({
    land: ['Gottsumon', 'Modoki Betamon', 'Mushmon', 'Cyclomon', 'Drimogemon', 'Goburimon'],
    water: ['Modoki Betamon'],
}), [new RouteKillRequirement(10, GameConstants.Region.adventure01, 5)]));
Routes.add(new RegionRoute('Desert Oasis', GameConstants.Region.adventure01, 11, new RoutePokemon({
    land: ['Drimogemon', 'Golemon', 'Meramon', 'Minotaurmon', 'Sand Yanmamon'],
    water: ['Karatuki Numemon'],
}), [new RouteKillRequirement(10, GameConstants.Region.adventure01, 10)]));
Routes.add(new RegionRoute('Infinity Cliffs', GameConstants.Region.adventure01, 9, new RoutePokemon({
    land: ['Elecmon', 'Toy Agumon', 'Mushmon', 'Kuwagamon', 'Monochromon', 'Tyranomon'],
    water: ['Seadramon', 'Gizamon', 'Otamamon', 'Shakomon'],
}), [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Devimon Battle')),
    new RouteKillRequirement(10, GameConstants.Region.adventure01, 8),
]));
Routes.add(new RegionRoute('Net Ocean', GameConstants.Region.adventure01, 10, new RoutePokemon({
    land: ['Otamamon', 'Karatuki Numemon'],
    water: ['Shakomon', 'Coelamon', 'Ebidramon', 'Octmon'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.adventure01, 9),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Devimon Battle')),
]));
Routes.add(new RegionRoute('Bakemon Church', GameConstants.Region.adventure01, 8, new RoutePokemon({
    land: ['Bakemon', 'Dokunemon', 'Candmon', 'Tukaimon', 'Numemon', 'Gokimon', 'Woodmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Digivice Temple'))]));
Routes.add(new RegionRoute('Frozen Tundra', GameConstants.Region.adventure01, 7, new RoutePokemon({
    land: ['Yukidarumon', 'Mojyamon', 'Betamon', 'Icemon', 'Yuki Agumon', 'Penmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.adventure01, 6)]));
Routes.add(new RegionRoute('Cockatrimon\'s Ship', GameConstants.Region.adventure01, 12, new RoutePokemon({
    land: ['Drimogemon', 'Meramon', 'Monochromon', 'Orgemon', 'Birdramon', 'Sand Yanmamon', 'Togemon', 'Cockatrimon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lost Colosseum'))]));
Routes.add(new RegionRoute('Vast Desert', GameConstants.Region.adventure01, 13, new RoutePokemon({
    land: ['Drimogemon', 'Meramon', 'Birdramon', 'Flare Lizarmon', 'Monochromon', 'Sand Yanmamon', 'Insekimon'],
}), [new RouteKillRequirement(10, GameConstants.Region.adventure01, 12)]));
Routes.add(new RegionRoute('Digitamamon\'s Diner', GameConstants.Region.adventure01, 14, new RoutePokemon({
    land: ['Yanmamon', 'Vegimon', 'Jyagamon', 'Scumon', 'Red Vegimon', 'Digitamamon', 'Triceramon'],
    water: ['Rukamon', 'Seadramon', 'Octmon'],
}), [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Etemon\'s Pyramid')),
]));
Routes.add(new RegionRoute('Castle Way', GameConstants.Region.adventure01, 15, new RoutePokemon({
    land: ['Otamamon', 'Gekomon', 'Jungle Mojyamon', 'Karatuki Numemon', 'Mega Seadramon', 'Vermillimon'],
}), [new GymBadgeRequirement(BadgeEnums.Knowledge_Crest)]));
Routes.add(new RegionRoute('Army Grounds', GameConstants.Region.adventure01, 16, new RoutePokemon({
    land: ['Waru Monzaemon', 'Mamemon', 'Giromon', 'Fantomon', 'Death Meramon', 'Evilmon'],
}), [new GymBadgeRequirement(BadgeEnums.Love_Crest)]));
Routes.add(new RegionRoute('Road\'s End', GameConstants.Region.adventure01, 17, new RoutePokemon({
    land: ['Snimon', 'Yanmamon', 'Unimon', 'Ookuwamon'],
    water: ['Seadramon', 'Mega Seadramon', 'Octmon', 'Coelamon', 'Shakomon'],
}), [new RouteKillRequirement(10, GameConstants.Region.adventure01, 16)]));
Routes.add(new RegionRoute('Tokyo Pier', GameConstants.Region.adventure01, 18, new RoutePokemon({
    land: ['Gokimon', 'Vermillimon', 'Scumon', 'Minotaurmon', 'Death Meramon'],
    water: ['Ebidramon', 'Gesomon', 'Karatuki Numemon', 'Raremon'],
}), [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Vamdemon\'s Castle')),
]));
Routes.add(new RegionRoute('Tokyo Streets', GameConstants.Region.adventure01, 19, new RoutePokemon({
    water: ['Pumpmon', 'Gottsumon', 'Geremon', 'Gerbemon', 'Mammon', 'Parrotmon'],
}), [new GymBadgeRequirement(BadgeEnums.Sincerity_Crest)]));
Routes.add(new RegionRoute('Digital Ocean', GameConstants.Region.adventure01, 20, new RoutePokemon({
    water: ['Marin Devimon', 'Hangyomon', 'Whamon', 'Dagomon', 'Waru Seadramon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('VenomVamdemon Rampage'))]));
Routes.add(new RegionRoute('Whamon\'s Rest', GameConstants.Region.adventure01, 21, new RoutePokemon({
    land: ['Vermillimon', 'Triceramon', 'Ookuwamon', 'Jyureimon', 'Jyagamon'],
    water: ['Waru Seadramon', 'Mega Seadramon', 'Anomalocarimon', 'Dagomon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Metal Seadramon\'s Lair'))]));
Routes.add(new RegionRoute('Digital Wasteland', GameConstants.Region.adventure01, 23, new RoutePokemon({
    land: ['Death Meramon', 'Skull Satamon', 'Boltmon', 'Skull Mammon', 'Metal Tyranomon'],
    water: ['Dagomon', 'Marin Devimon'],
}), [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mugendramon\'s Mill')),
    new GymBadgeRequirement(BadgeEnums.Light_Crest),
]));
/*
JOHTO
*/
Routes.add(new RegionRoute('Johto Route 29', GameConstants.Region.johto, 29, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Apocalymon_Data)]));
Routes.add(new RegionRoute('Johto Route 30', GameConstants.Region.johto, 30, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 29)]));
Routes.add(new RegionRoute('Johto Route 31', GameConstants.Region.johto, 31, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 30)]));
Routes.add(new RegionRoute('Johto Route 32', GameConstants.Region.johto, 32, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Zephyr)]));
Routes.add(new RegionRoute('Johto Route 33', GameConstants.Region.johto, 33, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Union Cave'))]));
Routes.add(new RegionRoute('Johto Route 34', GameConstants.Region.johto, 34, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ilex Forest'))]));
Routes.add(new RegionRoute('Johto Route 35', GameConstants.Region.johto, 35, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 34)]));
Routes.add(new RegionRoute('Johto Route 36', GameConstants.Region.johto, 36, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Plain)]));
Routes.add(new RegionRoute('Johto Route 37', GameConstants.Region.johto, 37, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 36)]));
Routes.add(new RegionRoute('Johto Route 38', GameConstants.Region.johto, 38, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 37)]));
Routes.add(new RegionRoute('Johto Route 39', GameConstants.Region.johto, 39, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 38)]));
Routes.add(new RegionRoute('Johto Route 40', GameConstants.Region.johto, 40, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.johto, 39),
    new GymBadgeRequirement(BadgeEnums.Fog),
]));
Routes.add(new RegionRoute('Johto Route 41', GameConstants.Region.johto, 41, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 40)]));
Routes.add(new RegionRoute('Johto Route 42', GameConstants.Region.johto, 42, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Fog)]));
Routes.add(new RegionRoute('Johto Route 43', GameConstants.Region.johto, 43, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new OneFromManyRequirement([
        new MultiRequirement([
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt Mortar')),
            new GymBadgeRequirement(BadgeEnums.Fog),
        ]),
        new RouteKillRequirement(10, GameConstants.Region.johto, 42),
    ]),
]));
Routes.add(new RegionRoute('Johto Route 44', GameConstants.Region.johto, 44, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Radio Tower'))]));
Routes.add(new RegionRoute('Johto Route 45', GameConstants.Region.johto, 45, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ice Path'))]));
Routes.add(new RegionRoute('Johto Route 46', GameConstants.Region.johto, 46, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 29)], 29.1));
Routes.add(new RegionRoute('Johto Route 47', GameConstants.Region.johto, 47, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Mineral)]));
Routes.add(new RegionRoute('Johto Route 48', GameConstants.Region.johto, 48, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 47)]));
Routes.add(new RegionRoute('Johto Route 26', GameConstants.Region.johto, 26, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 27)], 50));
Routes.add(new RegionRoute('Johto Route 27', GameConstants.Region.johto, 27, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Rising)], 49));
Routes.add(new RegionRoute('Johto Route 28', GameConstants.Region.johto, 28, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion)], 51));
/*
HOENN
*/
Routes.add(new RegionRoute('Hoenn Route 101', GameConstants.Region.hoenn, 101, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion)]));
Routes.add(new RegionRoute('Hoenn Route 102', GameConstants.Region.hoenn, 102, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 101)]));
Routes.add(new RegionRoute('Hoenn Route 103', GameConstants.Region.hoenn, 103, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 101)], 101.1));
Routes.add(new RegionRoute('Hoenn Route 104', GameConstants.Region.hoenn, 104, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 102)]));
Routes.add(new RegionRoute('Hoenn Route 105', GameConstants.Region.hoenn, 105, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Balance)], 115.1));
Routes.add(new RegionRoute('Hoenn Route 106', GameConstants.Region.hoenn, 106, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 105),
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 107),
    ]),
], 115.2));
Routes.add(new RegionRoute('Hoenn Route 107', GameConstants.Region.hoenn, 107, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 106),
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 108),
    ]),
], 115.3));
Routes.add(new RegionRoute('Hoenn Route 108', GameConstants.Region.hoenn, 108, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 107),
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 109),
    ]),
], 115.4));
Routes.add(new RegionRoute('Hoenn Route 109', GameConstants.Region.hoenn, 109, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Balance)], 115.5));
Routes.add(new RegionRoute('Hoenn Route 110', GameConstants.Region.hoenn, 110, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Granite Cave')),
    new GymBadgeRequirement(BadgeEnums.Knuckle),
]));
Routes.add(new RegionRoute('Hoenn Route 111', GameConstants.Region.hoenn, 111, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Dynamo)]));
Routes.add(new RegionRoute('Hoenn Route 112', GameConstants.Region.hoenn, 112, new RoutePokemon({
    land: ['Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 111)]));
Routes.add(new RegionRoute('Hoenn Route 113', GameConstants.Region.hoenn, 113, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Fiery Path'))]));
Routes.add(new RegionRoute('Hoenn Route 114', GameConstants.Region.hoenn, 114, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 113)]));
Routes.add(new RegionRoute('Hoenn Route 115', GameConstants.Region.hoenn, 115, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Meteor Falls'))]));
Routes.add(new RegionRoute('Hoenn Route 116', GameConstants.Region.hoenn, 116, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Petalburg Woods'))], 104.1));
Routes.add(new RegionRoute('Hoenn Route 117', GameConstants.Region.hoenn, 117, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 110)], 110.1));
Routes.add(new RegionRoute('Hoenn Route 118', GameConstants.Region.hoenn, 118, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Balance)]));
Routes.add(new RegionRoute('Hoenn Route 119', GameConstants.Region.hoenn, 119, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon'], new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Burpmon),
            new WeatherRequirement([WeatherType.Sunny]),
        ])),
        new SpecialRoutePokemon(['Burpmon'], new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Burpmon),
            new WeatherRequirement([WeatherType.Rain, WeatherType.Thunderstorm]),
        ])),
        new SpecialRoutePokemon(['Burpmon'], new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Burpmon),
            new WeatherRequirement([WeatherType.Snow, WeatherType.Blizzard, WeatherType.Hail, WeatherType.Fog]),
        ])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 118)]));
Routes.add(new RegionRoute('Hoenn Route 120', GameConstants.Region.hoenn, 120, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 119),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Weather Institute')),
]));
Routes.add(new RegionRoute('Hoenn Route 121', GameConstants.Region.hoenn, 121, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 120)]));
Routes.add(new RegionRoute('Hoenn Route 122', GameConstants.Region.hoenn, 122, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 121),
    new GymBadgeRequirement(BadgeEnums.Feather),
]));
Routes.add(new RegionRoute('Hoenn Route 123', GameConstants.Region.hoenn, 123, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 122)]));
Routes.add(new RegionRoute('Hoenn Route 124', GameConstants.Region.hoenn, 124, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Aqua Hideout'))]));
Routes.add(new RegionRoute('Hoenn Route 125', GameConstants.Region.hoenn, 125, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 124)]));
Routes.add(new RegionRoute('Hoenn Route 126', GameConstants.Region.hoenn, 126, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 124)]));
Routes.add(new RegionRoute('Hoenn Route 127', GameConstants.Region.hoenn, 127, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 125),
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 126),
    ]),
]));
Routes.add(new RegionRoute('Hoenn Route 128', GameConstants.Region.hoenn, 128, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 127)]));
Routes.add(new RegionRoute('Hoenn Route 129', GameConstants.Region.hoenn, 129, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 128)]));
Routes.add(new RegionRoute('Hoenn Route 130', GameConstants.Region.hoenn, 130, new RoutePokemon({
    land: ['Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 129)]));
Routes.add(new RegionRoute('Hoenn Route 131', GameConstants.Region.hoenn, 131, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 130)]));
Routes.add(new RegionRoute('Hoenn Route 132', GameConstants.Region.hoenn, 132, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 131)]));
Routes.add(new RegionRoute('Hoenn Route 133', GameConstants.Region.hoenn, 133, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 132)]));
Routes.add(new RegionRoute('Hoenn Route 134', GameConstants.Region.hoenn, 134, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 133)]));
/*
SINNOH
*/
Routes.add(new RegionRoute('Sinnoh Route 201', GameConstants.Region.sinnoh, 201, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)]));
Routes.add(new RegionRoute('Sinnoh Route 202', GameConstants.Region.sinnoh, 202, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 201)]));
Routes.add(new RegionRoute('Sinnoh Route 203', GameConstants.Region.sinnoh, 203, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 202)]));
Routes.add(new RegionRoute('Sinnoh Route 204', GameConstants.Region.sinnoh, 204, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 202)]));
Routes.add(new RegionRoute('Sinnoh Route 205', GameConstants.Region.sinnoh, 205, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Valley Windworks'))]));
Routes.add(new RegionRoute('Sinnoh Route 206', GameConstants.Region.sinnoh, 206, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building'))]));
Routes.add(new RegionRoute('Sinnoh Route 207', GameConstants.Region.sinnoh, 207, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 206)]));
Routes.add(new RegionRoute('Sinnoh Route 208', GameConstants.Region.sinnoh, 208, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Coronet South'))]));
Routes.add(new RegionRoute('Sinnoh Route 209', GameConstants.Region.sinnoh, 209, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Relic)]));
Routes.add(new RegionRoute('Sinnoh Route 210', GameConstants.Region.sinnoh, 210, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 209)]));
Routes.add(new RegionRoute('Sinnoh Route 215', GameConstants.Region.sinnoh, 215, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 210)], 210.1));
Routes.add(new RegionRoute('Sinnoh Route 214', GameConstants.Region.sinnoh, 214, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 215)], 210.2));
Routes.add(new RegionRoute('Sinnoh Route 213', GameConstants.Region.sinnoh, 213, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 214)], 210.3));
Routes.add(new RegionRoute('Sinnoh Route 212', GameConstants.Region.sinnoh, 212, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 213)], 210.4));
Routes.add(new RegionRoute('Sinnoh Route 211', GameConstants.Region.sinnoh, 211, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Fen)], 210.5));
Routes.add(new RegionRoute('Sinnoh Route 218', GameConstants.Region.sinnoh, 218, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Fen)], 210.6));
Routes.add(new RegionRoute('Sinnoh Route 216', GameConstants.Region.sinnoh, 216, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Coronet North'))]));
Routes.add(new RegionRoute('Sinnoh Route 217', GameConstants.Region.sinnoh, 217, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 216)]));
Routes.add(new RegionRoute('Sinnoh Route 219', GameConstants.Region.sinnoh, 219, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Fen)]));
Routes.add(new RegionRoute('Sinnoh Route 220', GameConstants.Region.sinnoh, 220, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 219)]));
Routes.add(new RegionRoute('Sinnoh Route 221', GameConstants.Region.sinnoh, 221, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 220)]));
Routes.add(new RegionRoute('Sinnoh Route 222', GameConstants.Region.sinnoh, 222, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Distortion World'))]));
Routes.add(new RegionRoute('Sinnoh Route 223', GameConstants.Region.sinnoh, 223, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Beacon)]));
Routes.add(new RegionRoute('Sinnoh Route 224', GameConstants.Region.sinnoh, 224, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]));
Routes.add(new RegionRoute('Sinnoh Route 225', GameConstants.Region.sinnoh, 225, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]));
Routes.add(new RegionRoute('Sinnoh Route 226', GameConstants.Region.sinnoh, 226, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 225)]));
Routes.add(new RegionRoute('Sinnoh Route 227', GameConstants.Region.sinnoh, 227, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 226)]));
Routes.add(new RegionRoute('Sinnoh Route 228', GameConstants.Region.sinnoh, 228, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 226)]));
Routes.add(new RegionRoute('Sinnoh Route 229', GameConstants.Region.sinnoh, 229, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 228)]));
Routes.add(new RegionRoute('Sinnoh Route 230', GameConstants.Region.sinnoh, 230, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 229)]));
/*
UNOVA
*/
Routes.add(new RegionRoute('Unova Route 19', GameConstants.Region.unova, 19, new RoutePokemon({
    land: ['Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)], 0.1));
Routes.add(new RegionRoute('Unova Route 20', GameConstants.Region.unova, 20, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 19)], 0.2));
Routes.add(new RegionRoute('Unova Route 4', GameConstants.Region.unova, 4, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Toxic)]));
Routes.add(new RegionRoute('Desert Resort', GameConstants.Region.unova, 25, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: [],
}), [
    new MultiRequirement([
        new RouteKillRequirement(10, GameConstants.Region.unova, 4),
        new GymBadgeRequirement(BadgeEnums.Insect),
    ]),
], 4));
Routes.add(new RegionRoute('Unova Route 5', GameConstants.Region.unova, 5, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.unova, 4),
    new GymBadgeRequirement(BadgeEnums.Insect),
]));
Routes.add(new RegionRoute('Unova Route 16', GameConstants.Region.unova, 16, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.unova, 4),
    new GymBadgeRequirement(BadgeEnums.Insect),
], 5));
Routes.add(new RegionRoute('Unova Route 6', GameConstants.Region.unova, 6, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.unova, 5),
    new GymBadgeRequirement(BadgeEnums.Bolt),
]));
Routes.add(new RegionRoute('Unova Route 7', GameConstants.Region.unova, 7, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Chargestone Cave')),
    new GymBadgeRequirement(BadgeEnums.Quake),
]));
Routes.add(new RegionRoute('Unova Route 13', GameConstants.Region.unova, 13, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))]));
Routes.add(new RegionRoute('Undella Bay', GameConstants.Region.unova, 24, new RoutePokemon({
    land: [],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))], 13));
Routes.add(new RegionRoute('Unova Route 14', GameConstants.Region.unova, 14, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))], 13));
Routes.add(new RegionRoute('Unova Route 12', GameConstants.Region.unova, 12, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 13)], 13.1));
Routes.add(new RegionRoute('Unova Route 11', GameConstants.Region.unova, 11, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 12)], 13.2));
Routes.add(new RegionRoute('Unova Route 9', GameConstants.Region.unova, 9, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 11)], 13.3));
Routes.add(new RegionRoute('Unova Route 21', GameConstants.Region.unova, 21, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Seaside Cave'))]));
Routes.add(new RegionRoute('Unova Route 22', GameConstants.Region.unova, 22, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 21)]));
Routes.add(new RegionRoute('Unova Route 23', GameConstants.Region.unova, 23, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Giant Chasm'))]));
Routes.add(new RegionRoute('Unova Route 8', GameConstants.Region.unova, 8, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new OneFromManyRequirement([
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Twist Mountain')),
        new MultiRequirement([
            new RouteKillRequirement(10, GameConstants.Region.unova, 9),
            new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
        ]),
    ]),
], 23.1));
Routes.add(new RegionRoute('Unova Route 15', GameConstants.Region.unova, 15, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.unova, 14),
        new RouteKillRequirement(10, GameConstants.Region.unova, 16),
    ]),
    new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
], 23.1));
Routes.add(new RegionRoute('Unova Route 3', GameConstants.Region.unova, 3, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pinwheel Forest'))], 23.1));
Routes.add(new RegionRoute('Unova Route 2', GameConstants.Region.unova, 2, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 3)], 23.2));
Routes.add(new RegionRoute('Unova Route 1', GameConstants.Region.unova, 1, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 2)], 23.3));
Routes.add(new RegionRoute('Unova Route 17', GameConstants.Region.unova, 17, new RoutePokemon({
    land: ['Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 1)], 23.4));
Routes.add(new RegionRoute('Unova Route 18', GameConstants.Region.unova, 18, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 17)], 23.5));
/*
KALOS
*/
Routes.add(new RegionRoute('Kalos Route 1', GameConstants.Region.kalos, 1, new RoutePokemon({
    land: ['Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)]));
Routes.add(new RegionRoute('Kalos Route 2', GameConstants.Region.kalos, 2, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 1)]));
Routes.add(new RegionRoute('Kalos Route 3', GameConstants.Region.kalos, 3, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Santalune Forest'))]));
Routes.add(new RegionRoute('Kalos Route 22', GameConstants.Region.kalos, 22, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 3)], 3.1));
Routes.add(new RegionRoute('Kalos Route 4', GameConstants.Region.kalos, 4, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Bug)]));
Routes.add(new RegionRoute('Kalos Route 5', GameConstants.Region.kalos, 5, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 4)]));
Routes.add(new RegionRoute('Kalos Route 6', GameConstants.Region.kalos, 6, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 5)]));
Routes.add(new RegionRoute('Kalos Route 7', GameConstants.Region.kalos, 7, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Parfum Palace'))]));
Routes.add(new RegionRoute('Kalos Route 8', GameConstants.Region.kalos, 8, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Connecting Cave'))]));
Routes.add(new RegionRoute('Kalos Route 9', GameConstants.Region.kalos, 9, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 8)]));
Routes.add(new RegionRoute('Kalos Route 10', GameConstants.Region.kalos, 10, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glittering Cave'))]));
Routes.add(new RegionRoute('Kalos Route 11', GameConstants.Region.kalos, 11, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new GymBadgeRequirement(BadgeEnums.Cliff),
    new RouteKillRequirement(10, GameConstants.Region.kalos, 10),
]));
Routes.add(new RegionRoute('Kalos Route 12', GameConstants.Region.kalos, 12, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Rumble)]
// Replace req with Tower of Mastery dungeon if implemented.
));
Routes.add(new RegionRoute('Kalos Route 13', GameConstants.Region.kalos, 13, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 12)]));
Routes.add(new RegionRoute('Kalos Route 14', GameConstants.Region.kalos, 14, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Voltage)]));
Routes.add(new RegionRoute('Kalos Route 15', GameConstants.Region.kalos, 15, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokéball Factory'))]
// Replace req with Pokéball Factory dungeon if implemented.
));
Routes.add(new RegionRoute('Kalos Route 16', GameConstants.Region.kalos, 16, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 15)]));
Routes.add(new RegionRoute('Kalos Route 17', GameConstants.Region.kalos, 17, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Frost Cavern'))]));
Routes.add(new RegionRoute('Kalos Route 18', GameConstants.Region.kalos, 18, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Flare Secret HQ'))]));
Routes.add(new RegionRoute('Kalos Route 19', GameConstants.Region.kalos, 19, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 18)]));
Routes.add(new RegionRoute('Kalos Route 20', GameConstants.Region.kalos, 20, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 19)]));
Routes.add(new RegionRoute('Kalos Route 21', GameConstants.Region.kalos, 21, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 19)]));
Routes.add(new RegionRoute('Azure Bay', GameConstants.Region.kalos, 23, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 12)], 12));
// From here down :
// - No named routes
// - Missing numbered route
// - No requirements
/*
ALOLA
*/
Routes.add(new RegionRoute('Alola Route 1', GameConstants.Region.alola, 1, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)], undefined, AlolaSubRegions.MelemeleIsland));
Routes.add(new RegionRoute('Route 1 Hau\'oli Outskirts', GameConstants.Region.alola, 18, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 1)], 1.1, AlolaSubRegions.MelemeleIsland));
Routes.add(new RegionRoute('Alola Route 2', GameConstants.Region.alola, 2, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Trainers\' School'))], undefined, AlolaSubRegions.MelemeleIsland));
Routes.add(new RegionRoute('Alola Route 3', GameConstants.Region.alola, 3, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Verdant Cavern'))], undefined, AlolaSubRegions.MelemeleIsland));
Routes.add(new RegionRoute('Melemele Sea', GameConstants.Region.alola, 19, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Brooklet Hill'))], 5.1, AlolaSubRegions.MelemeleIsland));
Routes.add(new RegionRoute('Kala\'e Bay', GameConstants.Region.alola, 20, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Seaward Cave')),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Brooklet Hill')),
], 5.2, AlolaSubRegions.MelemeleIsland));
Routes.add(new RegionRoute('Alola Route 4', GameConstants.Region.alola, 4, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.FightiniumZ)], undefined, AlolaSubRegions.AkalaIsland));
Routes.add(new RegionRoute('Alola Route 5', GameConstants.Region.alola, 5, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Paniola Ranch'))], undefined, AlolaSubRegions.AkalaIsland));
Routes.add(new RegionRoute('Alola Route 6', GameConstants.Region.alola, 6, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Brooklet Hill'))], undefined, AlolaSubRegions.AkalaIsland));
Routes.add(new RegionRoute('Alola Route 7', GameConstants.Region.alola, 7, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 6)], undefined, AlolaSubRegions.AkalaIsland));
Routes.add(new RegionRoute('Alola Route 8', GameConstants.Region.alola, 8, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Wela Volcano Park'))], undefined, AlolaSubRegions.AkalaIsland));
Routes.add(new RegionRoute('Alola Route 9', GameConstants.Region.alola, 9, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Burpmon\'s Tunnel'))], undefined, AlolaSubRegions.AkalaIsland));
Routes.add(new RegionRoute('Akala Outskirts', GameConstants.Region.alola, 21, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Memorial Hill'))], 9.1, AlolaSubRegions.AkalaIsland));
Routes.add(new RegionRoute('Alola Route 10', GameConstants.Region.alola, 10, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Malie Garden'))], undefined, AlolaSubRegions.UlaulaAndPoniIslands));
Routes.add(new RegionRoute('Mount Hokulani', GameConstants.Region.alola, 22, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 10)], 10.1, AlolaSubRegions.UlaulaAndPoniIslands));
Routes.add(new RegionRoute('Alola Route 11', GameConstants.Region.alola, 11, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Malie Garden'))], undefined, AlolaSubRegions.UlaulaAndPoniIslands));
Routes.add(new RegionRoute('Alola Route 12', GameConstants.Region.alola, 12, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.alola, 11),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Hokulani Observatory')),
], undefined, AlolaSubRegions.UlaulaAndPoniIslands));
Routes.add(new RegionRoute('Alola Route 13', GameConstants.Region.alola, 13, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 12)], undefined, AlolaSubRegions.UlaulaAndPoniIslands));
Routes.add(new RegionRoute('Alola Route 14', GameConstants.Region.alola, 14, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 13)], undefined, AlolaSubRegions.UlaulaAndPoniIslands));
Routes.add(new RegionRoute('Haina Desert', GameConstants.Region.alola, 23, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Thrifty Megamart'))], undefined, AlolaSubRegions.UlaulaAndPoniIslands));
Routes.add(new RegionRoute('Alola Route 15', GameConstants.Region.alola, 15, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Thrifty Megamart'))], undefined, AlolaSubRegions.UlaulaAndPoniIslands));
Routes.add(new RegionRoute('Alola Route 16', GameConstants.Region.alola, 16, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 15)], undefined, AlolaSubRegions.UlaulaAndPoniIslands));
Routes.add(new RegionRoute('Alola Route 17', GameConstants.Region.alola, 17, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ula\'ula Meadow'))], undefined, AlolaSubRegions.UlaulaAndPoniIslands));
Routes.add(new RegionRoute('Poni Wilds', GameConstants.Region.alola, 24, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Aether Foundation'))], undefined, AlolaSubRegions.UlaulaAndPoniIslands));
Routes.add(new RegionRoute('Ancient Poni Path', GameConstants.Region.alola, 25, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 24)], undefined, AlolaSubRegions.UlaulaAndPoniIslands));
Routes.add(new RegionRoute('Poni Breaker Coast', GameConstants.Region.alola, 26, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 25)], undefined, AlolaSubRegions.UlaulaAndPoniIslands));
Routes.add(new RegionRoute('Poni Grove', GameConstants.Region.alola, 27, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)], undefined, AlolaSubRegions.UlaulaAndPoniIslands));
Routes.add(new RegionRoute('Poni Plains', GameConstants.Region.alola, 28, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 27)], undefined, AlolaSubRegions.UlaulaAndPoniIslands));
Routes.add(new RegionRoute('Poni Coast', GameConstants.Region.alola, 29, new RoutePokemon({
    land: ['Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 28)], undefined, AlolaSubRegions.UlaulaAndPoniIslands));
Routes.add(new RegionRoute('Poni Gauntlet', GameConstants.Region.alola, 30, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 29)], undefined, AlolaSubRegions.UlaulaAndPoniIslands));
/*
GALAR
*/
Routes.add(new RegionRoute('Galar Route 1', GameConstants.Region.galar, 1, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Slumbering Weald'))]));
Routes.add(new RegionRoute('Galar Route 2', GameConstants.Region.galar, 2, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 1)]));
Routes.add(new RegionRoute('Rolling Fields', GameConstants.Region.galar, 3, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 2)]));
Routes.add(new RegionRoute('Dappled Grove', GameConstants.Region.galar, 4, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 3)]));
Routes.add(new RegionRoute('West Lake Axwell', GameConstants.Region.galar, 5, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 3)]));
Routes.add(new RegionRoute('East Lake Axwell', GameConstants.Region.galar, 6, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 5)]));
Routes.add(new RegionRoute('Giant\'s Seat', GameConstants.Region.galar, 7, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 3)]));
Routes.add(new RegionRoute('South Lake Miloch', GameConstants.Region.galar, 8, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 3)]));
Routes.add(new RegionRoute('North Lake Miloch', GameConstants.Region.galar, 9, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 7)]));
Routes.add(new RegionRoute('Galar Route 3', GameConstants.Region.galar, 10, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 6)]));
Routes.add(new RegionRoute('Galar Route 4', GameConstants.Region.galar, 11, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Galar Mine'))]));
Routes.add(new RegionRoute('Galar Route 5', GameConstants.Region.galar, 12, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Galar_Grass)]));
Routes.add(new RegionRoute('Motostoke Outskirts', GameConstants.Region.galar, 13, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Galar Mine No. 2'))]));
Routes.add(new RegionRoute('Hammerlocke Hills', GameConstants.Region.galar, 14, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Dusty Bowl'))]));
Routes.add(new RegionRoute('Galar Route 6', GameConstants.Region.galar, 15, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Galar_Fire)]));
Routes.add(new RegionRoute('Galar Route 7', GameConstants.Region.galar, 16, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Galar_Fairy)]));
Routes.add(new RegionRoute('Galar Route 8', GameConstants.Region.galar, 17, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 16)]));
Routes.add(new RegionRoute('Steamdrift Way', GameConstants.Region.galar, 18, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 17)]));
Routes.add(new RegionRoute('Galar Route 2 Lakeside', GameConstants.Region.galar, 19, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new MultiRequirement([
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tower of Darkness')),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tower of Water')),
    ]),
]));
Routes.add(new RegionRoute('Galar Route 9', GameConstants.Region.galar, 20, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new MultiRequirement([
        new GymBadgeRequirement(BadgeEnums.Galar_Rock),
        new GymBadgeRequirement(BadgeEnums.Galar_Ice),
    ]),
]));
Routes.add(new RegionRoute('Circhester Bay', GameConstants.Region.galar, 21, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 20)]));
Routes.add(new RegionRoute('Outer Spikemuth', GameConstants.Region.galar, 22, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    headbutt: ['Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 21)]));
Routes.add(new RegionRoute('Galar Route 10 Station', GameConstants.Region.galar, 23, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Galar_Dragon)]));
Routes.add(new RegionRoute('Galar Route 10 North', GameConstants.Region.galar, 24, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 23)]));
/*
ISLE OF ARMOR
*/
Routes.add(new RegionRoute('Fields of Honor', GameConstants.Region.galar, 25, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)]));
Routes.add(new RegionRoute('Soothing Wetlands', GameConstants.Region.galar, 26, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Burpmon', 'Burpmon'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 25),
        new RouteKillRequirement(10, GameConstants.Region.galar, 27),
        new RouteKillRequirement(10, GameConstants.Region.galar, 28),
        new RouteKillRequirement(10, GameConstants.Region.galar, 29),
        new RouteKillRequirement(10, GameConstants.Region.galar, 35),
    ]),
]));
Routes.add(new RegionRoute('Forest of Focus', GameConstants.Region.galar, 27, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 26),
        new RouteKillRequirement(10, GameConstants.Region.galar, 28),
        new RouteKillRequirement(10, GameConstants.Region.galar, 31),
    ]),
]));
Routes.add(new RegionRoute('Challenge Beach', GameConstants.Region.galar, 28, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Burpmon', 'Burpmon'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 26),
        new RouteKillRequirement(10, GameConstants.Region.galar, 27),
        new RouteKillRequirement(10, GameConstants.Region.galar, 39),
    ]),
]));
Routes.add(new RegionRoute('Courageous Cavern', GameConstants.Region.galar, 29, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 25),
        new RouteKillRequirement(10, GameConstants.Region.galar, 26),
        new RouteKillRequirement(10, GameConstants.Region.galar, 28),
        new RouteKillRequirement(10, GameConstants.Region.galar, 30),
    ]),
]));
Routes.add(new RegionRoute('Loop Lagoon', GameConstants.Region.galar, 30, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Burpmon', 'Burpmon'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 29),
        new RouteKillRequirement(10, GameConstants.Region.galar, 37),
    ]),
]));
Routes.add(new RegionRoute('Training Lowlands', GameConstants.Region.galar, 31, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Burpmon', 'Burpmon'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 26),
        new RouteKillRequirement(10, GameConstants.Region.galar, 34),
        new RouteKillRequirement(10, GameConstants.Region.galar, 39),
    ]),
]));
Routes.add(new RegionRoute('Warm-Up Tunnel', GameConstants.Region.galar, 32, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 31)]));
Routes.add(new RegionRoute('Potbottom Desert', GameConstants.Region.galar, 9, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 32)]));
Routes.add(new RegionRoute('Challenge Road', GameConstants.Region.galar, 34, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Burpmon', 'Burpmon'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 31),
        new RouteKillRequirement(10, GameConstants.Region.galar, 35),
    ]),
]));
Routes.add(new RegionRoute('Brawlers Cave', GameConstants.Region.galar, 35, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 26),
        new RouteKillRequirement(10, GameConstants.Region.galar, 34),
    ]),
]));
Routes.add(new RegionRoute('Workout Sea', GameConstants.Region.galar, 36, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Burpmon', 'Burpmon'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 25),
        new RouteKillRequirement(10, GameConstants.Region.galar, 35),
        new RouteKillRequirement(10, GameConstants.Region.galar, 37),
    ]),
]));
Routes.add(new RegionRoute('Stepping-Stone Sea', GameConstants.Region.galar, 37, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 28),
        new RouteKillRequirement(10, GameConstants.Region.galar, 30),
        new RouteKillRequirement(10, GameConstants.Region.galar, 36),
        new RouteKillRequirement(10, GameConstants.Region.galar, 38),
        new RouteKillRequirement(10, GameConstants.Region.galar, 39),
    ]),
]));
Routes.add(new RegionRoute('Insular Sea', GameConstants.Region.galar, 38, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Burpmon', 'Burpmon'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 37),
        new RouteKillRequirement(10, GameConstants.Region.galar, 39),
    ]),
]));
Routes.add(new RegionRoute('Honeycalm Sea', GameConstants.Region.galar, 39, new RoutePokemon({
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 28),
        new RouteKillRequirement(10, GameConstants.Region.galar, 31),
        new RouteKillRequirement(10, GameConstants.Region.galar, 37),
        new RouteKillRequirement(10, GameConstants.Region.galar, 39),
    ]),
]));
Routes.add(new RegionRoute('Honeycalm Island', GameConstants.Region.galar, 40, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 39)]));
//Crown Tundra
Routes.add(new RegionRoute('Slippery Slope', GameConstants.Region.galar, 41, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Burpmon', 'Burpmon'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)]));
Routes.add(new RegionRoute('Frostpoint Field', GameConstants.Region.galar, 42, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 41)]));
Routes.add(new RegionRoute('Giants Bed', GameConstants.Region.galar, 43, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 42)]));
Routes.add(new RegionRoute('Old Cemetery', GameConstants.Region.galar, 44, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 43)]));
Routes.add(new RegionRoute('Giants Foot', GameConstants.Region.galar, 45, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 43)]));
Routes.add(new RegionRoute('Roaring-Sea Caves', GameConstants.Region.galar, 46, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 45)]));
Routes.add(new RegionRoute('Frigid Sea', GameConstants.Region.galar, 47, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 46)]));
Routes.add(new RegionRoute('Three-Point Pass', GameConstants.Region.galar, 48, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 47)]));
Routes.add(new RegionRoute('Lakeside Cave', GameConstants.Region.galar, 49, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 50)]));
Routes.add(new RegionRoute('Ballimere Lake', GameConstants.Region.galar, 50, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 43)]));
Routes.add(new RegionRoute('Snowslide Slope', GameConstants.Region.galar, 51, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    water: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 43)]));
Routes.add(new RegionRoute('Tunnel to the Top', GameConstants.Region.galar, 52, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon', 'Burpmon'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 51)]));
Routes.add(new RegionRoute('Path to the Peak', GameConstants.Region.galar, 53, new RoutePokemon({
    land: ['Burpmon', 'Burpmon', 'Burpmon'],
    special: [
        new SpecialRoutePokemon(['Burpmon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Burpmon'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Burpmon', 'Burpmon', 'Burpmon'], new WeatherRequirement([WeatherType.Sunny])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 52)]));
///<reference path="../../declarations/routes/Routes.d.ts"/>
///<reference path="../../declarations/routes/RoutePokemon.d.ts"/>
/**
 * Helper class to retrieve information from RoutePokemon
 */
class RouteHelper {
    /**
     * Retrieves a list of all Pokémon that can be caught on that route.
     * @param route
     * @param region
     * @param includeHeadbutt
     * @returns {string[]} list of all Pokémon that can be caught
     */
    static getAvailablePokemonList(route, region, includeHeadbutt = true) {
        var _a;
        // If the route is somehow higher than allowed, use the first route to generateWildPokemon Pokémon
        const possiblePokemons = (_a = Routes.getRoute(region, route)) === null || _a === void 0 ? void 0 : _a.pokemon;
        if (!possiblePokemons) {
            return ['Patamon'];
        }
        // Land Pokémon
        let pokemonList = possiblePokemons.land;
        // Water Pokémon
        if (App.game.keyItems.hasKeyItem(KeyItemType.Super_rod) || possiblePokemons.land.length == 0) {
            pokemonList = pokemonList.concat(possiblePokemons.water);
        }
        // Headbutt Pokémon
        if (includeHeadbutt) {
            pokemonList = pokemonList.concat(possiblePokemons.headbutt);
        }
        // Special requirement Pokémon
        pokemonList = pokemonList.concat(...possiblePokemons.special.filter(p => p.isAvailable()).map(p => p.pokemon));
        return pokemonList;
    }
    /**
     * Checks if all Pokémon on this route are caught by the player.
     * @param route
     * @param region
     * @param includeShiny
     * @param includeHeadbutt
     * @returns {boolean} true if all Pokémon on this route are caught.
     */
    static routeCompleted(route, region, includeShiny, includeHeadbutt = true) {
        const possiblePokemon = RouteHelper.getAvailablePokemonList(route, region, includeHeadbutt);
        return RouteHelper.listCompleted(possiblePokemon, includeShiny);
    }
    static listCompleted(possiblePokemon, includeShiny) {
        for (let i = 0; i < possiblePokemon.length; i++) {
            if (!App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(possiblePokemon[i]).id)) {
                return false;
            }
            if (includeShiny && !App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(possiblePokemon[i]).id, true)) {
                return false;
            }
        }
        return true;
    }
    static isAchievementsComplete(route, region) {
        return AchievementHandler.achievementList.every(achievement => {
            return !(achievement.property instanceof RouteKillRequirement && achievement.property.region === region && achievement.property.route === route && !achievement.isCompleted());
        });
    }
    static isThereQuestAtLocation(route, region) {
        return App.game.quests.currentQuests().some(q => {
            return q instanceof DefeatPokemonsQuest && q.route == route && q.region == region;
        });
    }
}
/// <reference path="../../declarations/DataStore/StatisticStore/index.d.ts" />
/// <reference path="../GameConstants.d.ts" />
var areaStatus;
(function (areaStatus) {
    areaStatus[areaStatus["currentLocation"] = 0] = "currentLocation";
    areaStatus[areaStatus["locked"] = 1] = "locked";
    areaStatus[areaStatus["unlockedUnfinished"] = 2] = "unlockedUnfinished";
    areaStatus[areaStatus["questAtLocation"] = 3] = "questAtLocation";
    areaStatus[areaStatus["uncaughtPokemon"] = 4] = "uncaughtPokemon";
    areaStatus[areaStatus["uncaughtShinyPokemonAndMissingAchievement"] = 5] = "uncaughtShinyPokemonAndMissingAchievement";
    areaStatus[areaStatus["uncaughtShinyPokemon"] = 6] = "uncaughtShinyPokemon";
    areaStatus[areaStatus["missingAchievement"] = 7] = "missingAchievement";
    areaStatus[areaStatus["completed"] = 8] = "completed";
})(areaStatus || (areaStatus = {}));
class MapHelper {
    static routeExist(route, region) {
        return !!Routes.getRoute(region, route);
    }
    static normalizeRoute(route, region) {
        return Routes.normalizedNumber(region, route);
    }
    static getCurrentEnvironment() {
        var _a;
        const area = player.route() || ((_a = player.town()) === null || _a === void 0 ? void 0 : _a.name) || undefined;
        const [env] = Object.entries(GameConstants.Environments).find(([, regions]) => { var _a; return (_a = regions[player.region]) === null || _a === void 0 ? void 0 : _a.has(area); }) || [];
        return env;
    }
    static calculateBattleCssClass() {
        return GameConstants.EnvironmentCssClass[this.getCurrentEnvironment()];
    }
    static calculateRouteCssClass(route, region) {
        var _a;
        let cls = '';
        if (player.route() == route && player.region == region) {
            cls = areaStatus[areaStatus.currentLocation];
        }
        else if (!MapHelper.accessToRoute(route, region)) {
            cls = areaStatus[areaStatus.locked];
        }
        else if (App.game.statistics.routeKills[region][route]() < GameConstants.ROUTE_KILLS_NEEDED) {
            cls = areaStatus[areaStatus.unlockedUnfinished];
        }
        else if (RouteHelper.isThereQuestAtLocation(route, region)) {
            cls = areaStatus[areaStatus.questAtLocation];
        }
        else if (!RouteHelper.routeCompleted(route, region, false)) {
            cls = areaStatus[areaStatus.uncaughtPokemon];
        }
        else if (!RouteHelper.routeCompleted(route, region, true) && !RouteHelper.isAchievementsComplete(route, region)) {
            cls = areaStatus[areaStatus.uncaughtShinyPokemonAndMissingAchievement];
        }
        else if (!RouteHelper.routeCompleted(route, region, true)) {
            cls = areaStatus[areaStatus.uncaughtShinyPokemon];
        }
        else if (!RouteHelper.isAchievementsComplete(route, region)) {
            cls = areaStatus[areaStatus.missingAchievement];
        }
        else {
            cls = areaStatus[areaStatus.completed];
        }
        // Water routes
        if ((_a = GameConstants.Environments.Water[region]) === null || _a === void 0 ? void 0 : _a.has(route)) {
            cls = `${cls} waterRoute`;
        }
        return cls;
    }
    static calculateTownCssClass(townName) {
        // Check if we are currently at this location
        if (!player.route() && player.town().name == townName) {
            return areaStatus[areaStatus.currentLocation];
        }
        // Check if this location is locked
        if (!MapHelper.accessToTown(townName)) {
            return areaStatus[areaStatus.locked];
        }
        const states = [];
        // Is this location a dungeon
        if (dungeonList[townName]) {
            if (!App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(townName)]()) {
                return areaStatus[areaStatus.unlockedUnfinished];
            }
            else if (DungeonRunner.isThereQuestAtLocation(dungeonList[townName])) {
                return areaStatus[areaStatus.questAtLocation];
            }
            else if (!DungeonRunner.dungeonCompleted(dungeonList[townName], false)) {
                return areaStatus[areaStatus.uncaughtPokemon];
            }
            else if (!DungeonRunner.dungeonCompleted(dungeonList[townName], true) && !DungeonRunner.isAchievementsComplete(dungeonList[townName])) {
                return areaStatus[areaStatus.uncaughtShinyPokemonAndMissingAchievement];
            }
            else if (!DungeonRunner.dungeonCompleted(dungeonList[townName], true)) {
                return areaStatus[areaStatus.uncaughtShinyPokemon];
            }
            else if (!DungeonRunner.isAchievementsComplete(dungeonList[townName])) {
                return areaStatus[areaStatus.missingAchievement];
            }
        }
        const town = TownList[townName];
        town.content.forEach(c => {
            states.push(c.areaStatus());
        });
        if (states.length) {
            return areaStatus[Math.min(...states)];
        }
        return areaStatus[areaStatus.completed];
    }
    static accessToTown(townName) {
        const town = TownList[townName];
        if (!town) {
            return false;
        }
        return town.isUnlocked();
    }
    static moveToTown(townName) {
        var _a;
        if (MapHelper.accessToTown(townName)) {
            App.game.gameState = GameConstants.GameState.idle;
            player.route(0);
            Battle.route = 0;
            Battle.catching(false);
            const town = TownList[townName];
            player.town(town);
            Battle.enemyPokemon(null);
            //this should happen last, so all the values all set beforehand
            App.game.gameState = GameConstants.GameState.town;
        }
        else {
            const town = TownList[townName];
            const reqsList = [];
            (_a = town.requirements) === null || _a === void 0 ? void 0 : _a.forEach(requirement => {
                if (!requirement.isCompleted()) {
                    reqsList.push(requirement.hint());
                }
            });
            Notifier.notify({
                message: `You don't have access to that location yet.\n${reqsList.join('\n')}`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static validRoute(route = 0, region = 0) {
        return !!Routes.getRoute(region, route);
    }
    static openShipModal() {
        const openModal = () => {
            $('#ShipModal').modal('show');
        };
        if (player.highestRegion() > 0 && (TownList[GameConstants.DockTowns[player.region]].isUnlocked())) {
            openModal();
        }
        else {
            Notifier.notify({
                message: 'You cannot travel with Whamon yet',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static ableToTravel() {
        var _a, _b;
        // If player already reached highest region, they can't move on
        if (player.highestRegion() >= GameConstants.MAX_AVAILABLE_REGION) {
            return false;
        }
        // Check if player doesn't require complete dex to move on to the next region and has access to next regions starter town
        if (!App.game.challenges.list.requireCompletePokedex.active()) {
            return (_b = (_a = TownList[GameConstants.StartingTowns[player.highestRegion() + 1]]) === null || _a === void 0 ? void 0 : _a.isUnlocked()) !== null && _b !== void 0 ? _b : false;
        }
        // Check if all regional pokemon are obtained
        return AchievementHandler.findByName(`${GameConstants.camelCaseToString(GameConstants.Region[player.highestRegion()])} Master`).isCompleted();
    }
    static travelToNextRegion() {
        if (MapHelper.ableToTravel()) {
            // Gain queue slots based on highest region
            App.game.breeding.gainQueueSlot(App.game.breeding.queueSlotsGainedFromRegion(player.highestRegion()));
            GameHelper.incrementObservable(player.highestRegion);
            player.highestSubRegion(0);
            MapHelper.moveToTown(GameConstants.StartingTowns[player.highestRegion()]);
            player.region = player.highestRegion();
            // Track when users move region and how long it took in seconds
            LogEvent('new region', 'new region', GameConstants.Region[player.highestRegion()], App.game.statistics.secondsPlayed());
            // Gather users attack when they moved regions
            LogEvent('attack measurement', 'new region', GameConstants.Region[player.highestRegion()], App.game.party.calculatePokemonAttack(undefined, undefined, true, undefined, true, false, WeatherType.Clear));
            $('#pickStarterModal').modal('show');
        }
    }
}
MapHelper.moveToRoute = function (route, region) {
    var _a;
    if (isNaN(route)) {
        return;
    }
    const routeData = Routes.getRoute(region, route);
    let genNewEnemy = false;
    if (route != Battle.route) {
        genNewEnemy = true;
    }
    if (this.accessToRoute(route, region)) {
        player.route(route);
        player._subregion(routeData.subRegion != undefined ? routeData.subRegion : 0);
        if (player.region != region) {
            player.region = region;
        }
        if (genNewEnemy && !Battle.catching()) {
            Battle.generateNewEnemy();
        }
        App.game.gameState = GameConstants.GameState.fighting;
    }
    else {
        if (!MapHelper.routeExist(route, region)) {
            return Notifier.notify({
                message: `${Routes.getName(route, region)} does not exist in the ${GameConstants.Region[region]} region.`,
                type: NotificationConstants.NotificationOption.danger,
            });
        }
        const reqsList = [];
        (_a = routeData.requirements) === null || _a === void 0 ? void 0 : _a.forEach(requirement => {
            if (!requirement.isCompleted()) {
                reqsList.push(requirement.hint());
            }
        });
        Notifier.notify({
            message: `You don't have access to that route yet.\n${reqsList.join('\n')}`,
            type: NotificationConstants.NotificationOption.warning,
        });
    }
};
MapHelper.accessToRoute = function (route, region) {
    return this.routeExist(route, region) && Routes.getRoute(region, route).isUnlocked();
};
